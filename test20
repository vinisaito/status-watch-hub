import os
import json
import pyodbc
import boto3
from decimal import Decimal

def lambda_handler(event, context):
    # üîπ Vari√°veis de ambiente (configure no console da AWS Lambda)
    server = os.environ['SQL_SERVER']
    database = os.environ['SQL_DATABASE']
    username = os.environ['SQL_USERNAME']
    password = os.environ['SQL_PASSWORD']
    port = os.environ.get('SQL_PORT', '1433')
    dynamo_table_name = os.environ['DYNAMO_TABLE']

    # üîπ Conex√£o com o SQL Server
    conn_str = (
        f"DRIVER={{ODBC Driver 17 for SQL Server}};"
        f"SERVER={server},{port};"
        f"DATABASE={database};"
        f"UID={username};"
        f"PWD={password};"
    )

    try:
        conn = pyodbc.connect(conn_str)
        cursor = conn.cursor()

        query = """
        SELECT [num_chamado]
              ,[equipe]
              ,[gerente_equipe]
              ,[dpto_equipe]
              ,[coord_dpto_equipe]
              ,[ger_dpto_equipe]
              ,[dpto_ger_equipe]
              ,[severidade]
              ,[dat_abertura]
              ,[dat_status_concluido]
              ,[dat_fechamento]
              ,[data_normalizacao]
              ,[status]
              ,[classificacao]
              ,[dat_estouro_sla]
              ,[num_duracao]
              ,[duracao_sla]
              ,[titulo]
              ,[sla_violado]
          FROM [mdb_rep].[dbo].[sdm_cr_geral_mcs]
          WHERE dat_abertura >= DATEADD(MONTH, -6, GETDATE())
          AND (
               (classificacao = 'Incidente' AND severidade IN ('3 - M√©dia', '4 - Alta', '5 - Cr√≠tica'))
            OR (classificacao = 'Solicita√ß√£o' AND severidade = '4 - Alta')
          )
          ORDER BY num_chamado DESC;
        """
        cursor.execute(query)
        rows = cursor.fetchall()
    except Exception as e:
        print("‚ùå Erro ao conectar ou buscar dados do SQL Server:", str(e))
        return {"statusCode": 500, "body": json.dumps({"error": str(e)})}

    # üîπ Conex√£o com DynamoDB
    dynamodb = boto3.resource('dynamodb')
    table = dynamodb.Table(dynamo_table_name)

    columns = [column[0] for column in cursor.description]
    count = 0

    for row in rows:
        item = {}
        for col, val in zip(columns, row):
            if isinstance(val, Decimal):
                item[col] = float(val)
            elif isinstance(val, bytes):
                item[col] = val.decode('utf-8')
            elif hasattr(val, 'isoformat'):  # datetime
                item[col] = val.isoformat()
            else:
                item[col] = val if val is not None else None

        try:
            # üî∏ Upsert autom√°tico no DynamoDB
            table.put_item(Item=item)
            count += 1
        except Exception as e:
            print(f"‚ö†Ô∏è Erro ao inserir num_chamado={item.get('num_chamado')}: {e}")

    conn.close()
    print(f"‚úÖ {count} registros processados e atualizados no DynamoDB.")
    return {
        'statusCode': 200,
        'body': json.dumps({
            'message': f'{count} registros processados e atualizados no DynamoDB.'
        })
    }

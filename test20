// hooks/useObservacoes.ts
import { useState, useEffect, useCallback } from "react";
import { toast } from "@/hooks/use-toast";

export interface ObservacaoData {
  chamado: number;
  observacao: string;
  status: string;
  operador: string;
  CreatedAt?: string;
}

export function useObservacoes() {
  const [observacoesData, setObservacoesData] = useState<Map<string, ObservacaoData>>(new Map());

  const fetchObservacoes = useCallback(async (retryCount = 0) => {
    try {
      const response = await fetch("https://f6ffk8e9fe.execute-api.us-east-1.amazonaws.com/prod/obs", {
        method: "GET",
        headers: { "Content-Type": "application/json" },
      });

      if (response.ok) {
        const data: ObservacaoData[] = await response.json();
        const observacoesMap = new Map<string, ObservacaoData>();
        data.forEach(obs => observacoesMap.set(obs.chamado.toString(), obs));
        setObservacoesData(observacoesMap);
      } else if (response.status === 404) {
        setObservacoesData(new Map());
      } else {
        throw new Error(`API retornou status: ${response.status}`);
      }
    } catch (error) {
      console.error("Erro ao buscar observações:", error);
      if (retryCount < 3) {
        setTimeout(() => fetchObservacoes(retryCount + 1), 2000 * (retryCount + 1));
      } else {
        toast({
          title: "Erro ao carregar observações",
          description: "Não foi possível carregar dados salvos.",
          variant: "destructive",
        });
      }
    }
  }, []);

  useEffect(() => {
    fetchObservacoes();
    const interval = setInterval(fetchObservacoes, 5 * 60 * 1000);
    return () => clearInterval(interval);
  }, [fetchObservacoes]);

  // Função utilitária → verifica se o chamado tem observação
  const hasObservacao = useCallback(
    (chamado: string) => {
      const obs = observacoesData.get(chamado);
      return !!(obs && obs.observacao.trim() !== "");
    },
    [observacoesData]
  );

  return {
    observacoesData,
    fetchObservacoes,
    hasObservacao,
  };
}
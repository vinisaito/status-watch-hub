import json
import boto3
import os
import uuid
from datetime import datetime, timezone
from decimal import Decimal

# ---------- Configurações ----------
dynamodb = boto3.resource("dynamodb")
table = dynamodb.Table(os.environ["OUTAGES_TABLE"])

apigateway = boto3.client(
    "apigatewaymanagementapi",
    endpoint_url=os.environ["WEBSOCKET_ENDPOINT"]
)

# ---------- Função principal ----------
def lambda_handler(event, context):
    print("Evento recebido:", json.dumps(event))

    route = event.get("requestContext", {}).get("routeKey")
    connection_id = event.get("requestContext", {}).get("connectionId")

    if route == "registerOutage":
        return register_outage(event, connection_id)
    elif route == "deleteOutage":
        return delete_outage(event, connection_id)
    elif route == "getOutages":
        return get_outages(event, connection_id)
    elif route in ["$connect", "$disconnect", "$default"]:
        return {"statusCode": 200}
    else:
        return {"statusCode": 400, "body": f"Rota desconhecida: {route}"}

# ---------- Registrar outage ----------
def register_outage(event, connection_id):
    try:
        body = json.loads(event.get("body", "{}"))

        outage_id = str(uuid.uuid4())
        item = {
            "outage_id": outage_id,
            "title": body.get("title", "Sem título"),
            "description": body.get("description", "Sem descrição"),
            "timestamp": Decimal(str(datetime.now(timezone.utc).timestamp())),
            "status": body.get("status", "active"),
        }

        table.put_item(Item=item)

        send_message(connection_id, {
            "action": "registerOutage",
            "status": "success",
            "data": item
        })

        return {"statusCode": 200}

    except Exception as e:
        print(f"Erro ao registrar outage: {e}")
        send_message(connection_id, {"action": "registerOutage", "status": "error", "error": str(e)})
        return {"statusCode": 500}

# ---------- Deletar outage ----------
def delete_outage(event, connection_id):
    try:
        body = json.loads(event.get("body", "{}"))
        outage_id = body.get("outage_id")

        if not outage_id:
            send_message(connection_id, {"error": "Missing outage_id"})
            return {"statusCode": 400}

        table.delete_item(Key={"outage_id": outage_id})

        send_message(connection_id, {
            "action": "deleteOutage",
            "status": "success",
            "outage_id": outage_id
        })

        return {"statusCode": 200}

    except Exception as e:
        print(f"Erro ao deletar outage: {e}")
        send_message(connection_id, {"action": "deleteOutage", "status": "error", "error": str(e)})
        return {"statusCode": 500}

# ---------- Listar outages ----------
def get_outages(event, connection_id):
    try:
        response = table.scan()
        outages = response.get("Items", [])

        send_message(connection_id, {
            "action": "getOutages",
            "status": "success",
            "data": outages
        })

        return {"statusCode": 200}

    except Exception as e:
        print(f"Erro ao buscar outages: {e}")
        send_message(connection_id, {"action": "getOutages", "status": "error", "error": str(e)})
        return {"statusCode": 500}

# ---------- Envio de mensagem pelo WebSocket ----------
def send_message(connection_id: str, data: dict):
    try:
        apigateway.post_to_connection(
            ConnectionId=connection_id,
            Data=json.dumps(data).encode("utf-8")
        )
    except apigateway.exceptions.GoneException:
        print(f"Conexão {connection_id} não está mais ativa.")
    except Exception as e:
        print(f"Erro ao enviar mensagem: {e}")
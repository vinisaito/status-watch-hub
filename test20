import json
import boto3
import os
import traceback
from decimal import Decimal
from boto3.dynamodb.conditions import Key, Attr

# ---------- Config ----------
dynamodb = boto3.resource("dynamodb")
table = dynamodb.Table(os.environ["DYNAMO_TABLE"])  # nome da tabela em variável de ambiente

# ---------- Helpers ----------
def decimal_default(obj):
    """Permite converter Decimal do DynamoDB em float/int para JSON"""
    if isinstance(obj, Decimal):
        if obj % 1 == 0:
            return int(obj)
        return float(obj)
    raise TypeError

def response(status_code, body):
    return {
        "statusCode": status_code,
        "headers": {
            "Access-Control-Allow-Origin": "*",
            "Access-Control-Allow-Methods": "OPTIONS,GET",
            "Access-Control-Allow-Headers": "Content-Type",
        },
        "body": json.dumps(body, default=decimal_default),
    }

# ---------- Lambda Handler ----------
def lambda_handler(event, context):
    print("Evento recebido:", event)

    try:
        # Verifica se é requisição OPTIONS (CORS)
        if event.get("httpMethod") == "OPTIONS":
            return response(200, {"message": "CORS ok"})

        # Pega parâmetros da URL (caso queira filtrar)
        params = event.get("queryStringParameters") or {}
        chamado = params.get("chamado") if params else None

        # Se for buscar 1 item específico
        if chamado:
            result = table.get_item(Key={"chamado": chamado})
            item = result.get("Item")

            if not item:
                return response(404, {"message": f"Chamado {chamado} não encontrado"})

            return response(200, item)

        # Caso contrário, retorna todos os dados
        scan_data = []
        response_data = table.scan()
        scan_data.extend(response_data.get("Items", []))

        # Se houver paginação
        while "LastEvaluatedKey" in response_data:
            response_data = table.scan(ExclusiveStartKey=response_data["LastEvaluatedKey"])
            scan_data.extend(response_data.get("Items", []))

        return response(200, scan_data)

    except Exception as e:
        print("Erro:", traceback.format_exc())
        return response(500, {"error": str(e), "trace": traceback.format_exc()})

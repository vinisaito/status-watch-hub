switch (action) {
  case 'next': {
    const updates = [
      updateStatusFinal(chamado, levelStatusKey, "finished"),
      updateObservacao(chamado, currentLevel, observacao || "")
    ];

    // SÃ³ manda updateAcionamento se os 3 campos existirem
    if (pessoaAcionada || statusAtendimento || operador) {
      updates.push(
        updateAcionamento(chamado, currentLevel, pessoaAcionada || "", statusAtendimento || "", operador || "")
      );
    }

    if (currentLevel >= 5) {
      await Promise.all(updates);
      toast({ 
        title: "âœ… Chamado Finalizado", 
        description: `Chamado ${chamado} foi finalizado com sucesso!` 
      });
    } else {
      await Promise.all(updates);
      await onNextLevel(chamado, currentLevel + 1, observacao || "");

      const nextLevelInfo = LEVEL_INFO[(currentLevel + 1) as keyof typeof LEVEL_INFO];
      toast({
        title: `ðŸš€ ${nextLevelInfo?.title} Iniciado`,
        description: `Timer de 20 minutos iniciado para ${nextLevelInfo?.title}`,
      });
    }
    break;
  }

  case 'finish': {
    const updates = [
      updateStatusFinal(chamado, levelStatusKey, "finished"),
      updateObservacao(chamado, currentLevel, observacao || "")
    ];

    if (pessoaAcionada || statusAtendimento || operador) {
      updates.push(
        updateAcionamento(chamado, currentLevel, pessoaAcionada || "", statusAtendimento || "", operador || "")
      );
    }

    await Promise.all(updates);
    setFinalizado(true);
    toast({
      title: "âœ… Chamado Finalizado",
      description: `Chamado ${chamado} foi finalizado com sucesso!`,
    });
    break;
  }
}
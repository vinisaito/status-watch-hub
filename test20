import { useState } from 'react';
import { Clock, Timer, AlertTriangle } from 'lucide-react';
import { cn } from '@/lib/utils';

interface AlertData {
  id: string;
  chamado: string;
  tipo_chamado: string;
  grupo_chamado: string;
  status_chamado: string;
  abertura_chamado: string;
  resumo_chamado: string;
  severidade_chamado: string;
  acionado: string;
  chat: boolean;
}

interface MonitoringCardsProps {
  alertData: AlertData[];
  onFilterSelect: (filter: string | null) => void;
}

export const MonitoringCards = ({ alertData, onFilterSelect }: MonitoringCardsProps) => {
  const [activeFilter, setActiveFilter] = useState<string | null>(null);

  const handleCardClick = (filterKey: string) => {
    if (activeFilter === filterKey) {
      setActiveFilter(null);
      onFilterSelect(null);
    } else {
      setActiveFilter(filterKey);
      onFilterSelect(filterKey);
    }
  };

  const getTimeRemaining = (openingTime: string) => {
    const now = new Date();
    const opening = new Date(openingTime);
    const diffMs = now.getTime() - opening.getTime();
    const diffMinutes = Math.floor(diffMs / (1000 * 60));
    const slaMinutes = 60;
    return slaMinutes - diffMinutes;
  };

  const tempoExpirado = alertData.filter(alert => getTimeRemaining(alert.abertura_chamado) <= 0).length;
  const cincoMinRest = alertData.filter(alert => {
    const remaining = getTimeRemaining(alert.abertura_chamado);
    return remaining > 0 && remaining <= 5;
  }).length;
  const dezMinRest = alertData.filter(alert => {
    const remaining = getTimeRemaining(alert.abertura_chamado);
    return remaining > 5 && remaining <= 10;
  }).length;

  return (
    <div className="h-full flex flex-col justify-center gap-2 p-2">
      {/* Grupo 1 */}
      <MonitoringCard
        title="5 Minutos Restantes"
        count={cincoMinRest}
        icon={Timer}
        variant="warning"
        filterKey="CINCO_MINUTOS_1"
        isActive={activeFilter === 'CINCO_MINUTOS_1'}
        onClick={() => handleCardClick('CINCO_MINUTOS_1')}
        small
      />
      <MonitoringCard
        title="Tempo Expirado"
        count={tempoExpirado}
        icon={AlertTriangle}
        variant="critical"
        filterKey="TEMPO_EXPIRADO_1"
        isActive={activeFilter === 'TEMPO_EXPIRADO_1'}
        onClick={() => handleCardClick('TEMPO_EXPIRADO_1')}
        large
      />
      <MonitoringCard
        title="10 Minutos Restantes"
        count={dezMinRest}
        icon={Clock}
        variant="info"
        filterKey="DEZ_MINUTOS_1"
        isActive={activeFilter === 'DEZ_MINUTOS_1'}
        onClick={() => handleCardClick('DEZ_MINUTOS_1')}
        small
      />

      {/* Grupo 2 */}
      <MonitoringCard
        title="5 Minutos Restantes"
        count={cincoMinRest}
        icon={Timer}
        variant="warning"
        filterKey="CINCO_MINUTOS_2"
        isActive={activeFilter === 'CINCO_MINUTOS_2'}
        onClick={() => handleCardClick('CINCO_MINUTOS_2')}
        small
      />
      <MonitoringCard
        title="Tempo Expirado"
        count={tempoExpirado}
        icon={AlertTriangle}
        variant="critical"
        filterKey="TEMPO_EXPIRADO_2"
        isActive={activeFilter === 'TEMPO_EXPIRADO_2'}
        onClick={() => handleCardClick('TEMPO_EXPIRADO_2')}
        large
      />
      <MonitoringCard
        title="10 Minutos Restantes"
        count={dezMinRest}
        icon={Clock}
        variant="info"
        filterKey="DEZ_MINUTOS_2"
        isActive={activeFilter === 'DEZ_MINUTOS_2'}
        onClick={() => handleCardClick('DEZ_MINUTOS_2')}
        small
      />

      {/* Grupo 3 */}
      <MonitoringCard
        title="5 Minutos Restantes"
        count={cincoMinRest}
        icon={Timer}
        variant="warning"
        filterKey="CINCO_MINUTOS_3"
        isActive={activeFilter === 'CINCO_MINUTOS_3'}
        onClick={() => handleCardClick('CINCO_MINUTOS_3')}
        small
      />
      <MonitoringCard
        title="Tempo Expirado"
        count={tempoExpirado}
        icon={AlertTriangle}
        variant="critical"
        filterKey="TEMPO_EXPIRADO_3"
        isActive={activeFilter === 'TEMPO_EXPIRADO_3'}
        onClick={() => handleCardClick('TEMPO_EXPIRADO_3')}
        large
      />
      <MonitoringCard
        title="10 Minutos Restantes"
        count={dezMinRest}
        icon={Clock}
        variant="info"
        filterKey="DEZ_MINUTOS_3"
        isActive={activeFilter === 'DEZ_MINUTOS_3'}
        onClick={() => handleCardClick('DEZ_MINUTOS_3')}
        small
      />

      {/* Grupo 4 */}
      <MonitoringCard
        title="5 Minutos Restantes"
        count={cincoMinRest}
        icon={Timer}
        variant="warning"
        filterKey="CINCO_MINUTOS_4"
        isActive={activeFilter === 'CINCO_MINUTOS_4'}
        onClick={() => handleCardClick('CINCO_MINUTOS_4')}
        small
      />
      <MonitoringCard
        title="Tempo Expirado"
        count={tempoExpirado}
        icon={AlertTriangle}
        variant="critical"
        filterKey="TEMPO_EXPIRADO_4"
        isActive={activeFilter === 'TEMPO_EXPIRADO_4'}
        onClick={() => handleCardClick('TEMPO_EXPIRADO_4')}
        large
      />
      <MonitoringCard
        title="10 Minutos Restantes"
        count={dezMinRest}
        icon={Clock}
        variant="info"
        filterKey="DEZ_MINUTOS_4"
        isActive={activeFilter === 'DEZ_MINUTOS_4'}
        onClick={() => handleCardClick('DEZ_MINUTOS_4')}
        small
      />
    </div>
  );
};

interface MonitoringCardProps {
  title: string;
  count: number;
  icon: React.ComponentType<any>;
  variant: 'warning' | 'critical' | 'info';
  filterKey: string;
  isActive: boolean;
  onClick: () => void;
  large?: boolean;
  small?: boolean;
}

function MonitoringCard({ 
  title, 
  count, 
  icon: Icon, 
  variant, 
  isActive, 
  onClick,
  large = false,
  small = false
}: MonitoringCardProps) {
  const variantStyles = {
    warning: {
      gradient: 'bg-gradient-warning',
      shadow: 'shadow-warning',
      border: 'border-monitoring-warning/30',
      text: 'text-white',
      iconBg: 'bg-white/20',
      hoverScale: 'hover:scale-[1.02]',
      glow: count > 0 ? 'animate-pulse-glow' : '',
    },
    critical: {
      gradient: 'bg-gradient-critical',
      shadow: 'shadow-critical',
      border: 'border-monitoring-critical/30',
      text: 'text-white',
      iconBg: 'bg-white/20',
      hoverScale: 'hover:scale-[1.02]',
      glow: count > 0 ? 'animate-pulse-glow' : '',
    },
    info: {
      gradient: 'bg-gradient-info',
      shadow: 'shadow-info',
      border: 'border-monitoring-info/30',
      text: 'text-white',
      iconBg: 'bg-white/20',
      hoverScale: 'hover:scale-[1.02]',
      glow: '',
    },
  };

  const style = variantStyles[variant];
  const heightClass = large ? 'min-h-[120px]' : small ? 'min-h-[70px]' : 'min-h-[90px]';

  return (
    <div
      onClick={onClick}
      className={cn(
        "relative rounded-xl border-2 cursor-pointer transition-all duration-300 overflow-hidden backdrop-blur-sm",
        heightClass,
        style.gradient,
        style.shadow,
        style.border,
        style.hoverScale,
        style.glow,
        isActive && "ring-4 ring-white/40 ring-offset-2 ring-offset-background scale-[1.02]",
        "group"
      )}
    >
      {/* Background pattern */}
      <div className="absolute inset-0 opacity-10">
        <div className="absolute inset-0 bg-[radial-gradient(circle_at_50%_120%,rgba(255,255,255,0.3),transparent)]" />
      </div>

      {/* Content */}
      <div className="relative h-full flex flex-col items-center justify-center p-4 space-y-2">
        {/* Icon */}
        <div className={cn(
          "p-2.5 rounded-lg transition-transform duration-300 group-hover:scale-110",
          style.iconBg
        )}>
          <Icon className={cn("w-5 h-5", style.text)} />
        </div>

        {/* Count */}
        <div className={cn(
          "font-inter font-bold transition-transform duration-300 group-hover:scale-105",
          large ? "text-4xl" : small ? "text-2xl" : "text-3xl",
          style.text
        )}>
          {count}
        </div>

        {/* Title */}
        <div className={cn(
          "font-inter font-semibold text-center uppercase tracking-wide leading-tight",
          large ? "text-xs" : small ? "text-[10px]" : "text-xs",
          style.text,
          "drop-shadow-lg"
        )}>
          {title}
        </div>
      </div>

      {/* Active indicator */}
      {isActive && (
        <div className="absolute top-3 right-3 w-3 h-3 bg-white rounded-full shadow-lg animate-pulse" />
      )}

      {/* Hover effect overlay */}
      <div className="absolute inset-0 bg-white/0 group-hover:bg-white/5 transition-colors duration-300" />
    </div>
  );
}

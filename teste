mport { AreaReport } from "@/components/AreaReport";
import { useState, useRef, useEffect } from "react";
import { SnakeLine } from "@/components/SnakeLine";
import RDMTimeline from "@/components/RDMTimeline";
import type { ProductLine, RDM } from "@/types/rdm";
import { Separator } from "@/components/ui/separator";

const Index = () => {
  const [selectedIndex, setSelectedIndex] = useState<number | null>(null);
  const [lineCoords, setLineCoords] = useState<{ startX: number; startY: number; endX: number; endY: number } | null>(null);
  const cardRefs = useRef<(HTMLDivElement | null)[]>([]);
  const timelineRef = useRef<HTMLDivElement>(null);

  const totalReport = {
    area: "Visão Geral",
    performance: 85,
    revenue: "207",
    status: "excellent" as const,
    rdmStats: { concluidas: 142, emAndamento: 28, abertas: 37, rollback: 5 },
  };

  useEffect(() => {
    const updateCoords = () => {
      if (selectedIndex !== null && cardRefs.current[selectedIndex] && timelineRef.current) {
        const cardRect = cardRefs.current[selectedIndex]!.getBoundingClientRect();
        const timelineRect = timelineRef.current.getBoundingClientRect();

        const clamp = (val: number, min: number, max: number) => Math.min(Math.max(val, min), max);
        const vw = window.innerWidth;
        const vh = window.innerHeight;

        setLineCoords({
          startX: clamp(cardRect.left + cardRect.width / 2, 0, vw),
          startY: clamp(cardRect.top + cardRect.height, 0, vh),
          endX: clamp(timelineRect.left + timelineRect.width / 2, 0, vw),
          endY: clamp(timelineRect.top, 0, vh),
        });
      } else {
        setLineCoords(null);
      }
    };

    const raf = requestAnimationFrame(updateCoords);
    window.addEventListener("resize", updateCoords);
    window.addEventListener("scroll", updateCoords, { passive: true });

    return () => {
      cancelAnimationFrame(raf);
      window.removeEventListener("resize", updateCoords);
      window.removeEventListener("scroll", updateCoords);
    };
  }, [selectedIndex]);

  const areaReports = [
    {
      area: "Porto Seguro",
      performance: 92,
      revenue: "134",
      status: "excellent" as const,
      rdmStats: { concluidas: 120, emAndamento: 18, abertas: 10, rollback: 4 },
      areaColor: "porto-seguro",
    },
    {
      area: "Porto Serviço",
      performance: 85,
      revenue: "12",
      status: "good" as const,
      rdmStats: { concluidas: 95, emAndamento: 22, abertas: 14, rollback: 6 },
      areaColor: "porto-servico",
    },
    {
      area: "Porto Bank",
      performance: 88,
      revenue: "90",
      status: "excellent" as const,
      rdmStats: { concluidas: 140, emAndamento: 12, abertas: 8, rollback: 3 },
      areaColor: "porto-bank",
    },
    {
      area: "Porto Saúde",
      performance: 72,
      revenue: "156",
      status: "attention" as const,
      rdmStats: { concluidas: 60, emAndamento: 28, abertas: 20, rollback: 9 },
      areaColor: "porto-saude",
    },
    {
      area: "Canais Digitais",
      performance: 95,
      revenue: "12",
      status: "excellent" as const,
      rdmStats: { concluidas: 160, emAndamento: 10, abertas: 5, rollback: 2 },
      areaColor: "canais-digitais",
    },
    {
      area: "Infraestrutura",
      performance: 68,
      revenue: "13",
      status: "attention" as const,
      rdmStats: { concluidas: 55, emAndamento: 24, abertas: 18, rollback: 7 },
      areaColor: "infraestrutura",
    },
    {
      area: "Atendimento",
      performance: 81,
      revenue: "10",
      status: "good" as const,
      rdmStats: { concluidas: 100, emAndamento: 20, abertas: 12, rollback: 5 },
      areaColor: "atendimento",
    },
    {
      area: "Arquitetura",
      performance: 74,
      revenue: "80",
      status: "attention" as const,
      rdmStats: { concluidas: 70, emAndamento: 15, abertas: 11, rollback: 4 },
      areaColor: "arquitetura",
    },
  ];

  const buildProductLine = (areaName: string, idx: number): ProductLine => {
    const colors = [
      "#00d6fc", "#0046c0", "#001864", "#2ccc8a",
      "#6b45ff", "#7fa8c3", "#ff5a49", "#c39fd1",
    ];

  // Generate enough RDMs to show 4 full rows (8 per row).
  // We generate 34 so that after filtering out 11:30 and 15:30 we still have 32.
  const rdmCount = 34;
    const rdmsAll: RDM[] = Array.from({ length: rdmCount }).map((_, i) => {
      const num = (i + 1).toString().padStart(3, "0");
      const hour = 8 + Math.floor(i / 2);
      const minute = (i % 2) * 30;
      const time = `${hour.toString().padStart(2, "0")}:${minute.toString().padStart(2, "0")}`;
      const status: RDM["status"] = i % 7 === 0 ? "failed" : i % 3 === 0 ? "pending" : "executed";
      return {
        id: `${areaName}-${num}`,
        number: num,
        time,
        status,
        description:
          i % 5 === 0
            ? "Atividade"
            : undefined,
      };
    });
    const rdms = rdmsAll.filter((r) => r.time !== "11:30" && r.time !== "15:30");

    return {
      id: `produto-${idx + 1}`,
      name: "",
      color: colors[idx % colors.length],
      rdms,
    };
  };

  return (
    <div className="min-h-screen bg-gradient-to-br from-[hsl(var(--background))] via-[hsl(var(--neutral-50))] to-[hsl(var(--blue-soft))]">
      {/* Header */}
      <header className="bg-white/80 backdrop-blur-sm py-2 px-6 shadow-sm sticky top-0 z-20 border-b border-[hsl(var(--border))]">
        <div className="max-w-7xl mx-auto">
          <div className="flex justify-center">
            <img src="/logo.png" alt="Logo" className="h-12 md:h-16 w-auto" />
          </div>
        </div>
      </header>

      <main className="max-w-7xl mx-auto px-6 py-8">
        {/* Total Report Section */}
        <section className="mb-12">
          <div className="mb-8 text-center">
            <h2 className="text-2xl md:text-3xl font-bold text-foreground mb-2 tracking-tight">
              Requisições de Mudanças das Últimas 24 horas
            </h2>
          </div>
          <div className="max-w-md mx-auto animate-fade-in">
            <AreaReport {...totalReport} />
          </div>
        </section>

  <Separator className="my-8" />

        {/* Area Reports Section */}
        <section>
          
          {selectedIndex === null ? (
            <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6">
              {areaReports.map((report, index) => (
                <div
                  key={index}
                  ref={(el) => (cardRefs.current[index] = el)}
                  role="button"
                  tabIndex={0}
                  onClick={() => setSelectedIndex(index)}
                  onKeyDown={(e) => {
                    if (e.key === "Enter" || e.key === " ") {
                      e.preventDefault();
                      setSelectedIndex(index);
                    }
                  }}
                  className="cursor-pointer focus:outline-none focus:ring-2 focus:ring-primary rounded-lg animate-fade-in"
                  style={{ animationDelay: `${index * 80}ms` }}
                >
                  <AreaReport {...report} />
                </div>
              ))}
            </div>
          ) : (
            <div className="space-y-6 animate-fade-in">
              <div className="flex items-center justify-between bg-white/50 backdrop-blur-sm p-4 rounded-lg border border-[hsl(var(--border))]">
                <div className="text-sm font-medium text-foreground">
                  Mostrando detalhes de <span className="font-bold text-[hsl(var(--blue-medium))]">{areaReports[selectedIndex].area}</span>
                </div>
                <button
                  onClick={() => setSelectedIndex(null)}
                  className="text-sm font-medium px-4 py-2 rounded-lg border border-[hsl(var(--border))] bg-white hover:bg-[hsl(var(--blue-soft))] hover:border-[hsl(var(--blue-medium))] transition-all duration-300 shadow-sm hover:shadow-md"
                >
                  ← Voltar para todas as áreas
                </button>
              </div>
              <div ref={(el) => (cardRefs.current[selectedIndex] = el)} className="mb-6">
                <AreaReport {...areaReports[selectedIndex]} />
              </div>
              <div className="rounded-lg border border-[hsl(var(--border))] bg-card p-6 shadow-lg">
                <RDMTimeline
                  productLine={buildProductLine(
                    areaReports[selectedIndex].area,
                    selectedIndex
                  )}
                />
              </div>
            </div>
          )}
        </section>
      </main>

      {/* Snake Line Animation */}
      {lineCoords && (
        <SnakeLine
          startX={lineCoords.startX}
          startY={lineCoords.startY}
          endX={lineCoords.endX}
          endY={lineCoords.endY}
        />
      )}
    </div>
  );
};

export default Index;

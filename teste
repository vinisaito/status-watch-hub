import { create } from "zustand";

export interface ChamadoState {
  chamado: number;
  status?: string;
  operador?: string;
  statusFinal?: string;
  observacao?: string;
  timerStart?: number;
  timerEnd?: number;
}

interface Store {
  chamados: Record<number, ChamadoState>;
  initChamado: (chamado: number, state: ChamadoState) => void;
  updateFromWS: (msg: any) => void;
  send: (action: string, data: any) => void;
}

const WS_URL = "wss://SEU-ENDPOINT.execute-api.us-east-1.amazonaws.com/dev"; // altere para o endpoint da API Gateway

let socket: WebSocket | null = null;

export const useChamadoStore = create<Store>((set, get) => ({
  chamados: {},

  initChamado: (chamado, state) =>
    set((prev) => ({
      chamados: {
        ...prev.chamados,
        [chamado]: state,
      },
    })),

  updateFromWS: (msg) =>
    set((prev) => {
      const { chamado, ...rest } = msg;
      if (!chamado) return prev;

      return {
        chamados: {
          ...prev.chamados,
          [chamado]: {
            ...(prev.chamados[chamado] || { chamado }),
            ...rest,
          },
        },
      };
    }),

  send: (action, data) => {
    if (socket && socket.readyState === WebSocket.OPEN) {
      socket.send(JSON.stringify({ action, ...data }));
    } else {
      console.warn("[WS] não conectado, ignorando envio");
    }
  },
}));

// ---- WebSocket init ----
function connectWS() {
  socket = new WebSocket(WS_URL);

  socket.onopen = () => {
    console.log("[WS] conectado");
  };

  socket.onclose = () => {
    console.log("[WS] desconectado, tentando reconectar...");
    setTimeout(connectWS, 2000);
  };

  socket.onerror = (err) => {
    console.error("[WS] erro", err);
  };

  socket.onmessage = (event) => {
    try {
      const msg = JSON.parse(event.data);
      console.log("[WS] recebido", msg);
      useChamadoStore.getState().updateFromWS(msg);
    } catch (e) {
      console.error("[WS] Erro parse mensagem", e, event.data);
    }
  };
}

// conectar assim que o módulo for carregado
connectWS();

import { useState, useEffect } from 'react'; 
import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card'; 
import { Badge } from '@/components/ui/badge'; 
import { 
  ChevronDown, 
  ChevronRight, 
  Calendar, 
  User, 
  AlertCircle, 
  Clock, 
  CheckCircle2, 
  AlertTriangle, 
  Circle, 
  Settings, 
  XCircle, 
  RotateCcw, 
  Play, 
  Star,
  Plus,
  Save,
  X
} from 'lucide-react'; 
import { Button } from '@/components/ui/button'; 
import { Input } from '@/components/ui/input';
import { Label } from '@/components/ui/label';
import { Textarea } from '@/components/ui/textarea';
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';
import { 
  Dialog, 
  DialogContent, 
  DialogHeader, 
  DialogTitle, 
  DialogDescription 
} from '@/components/ui/dialog'; 
import { format } from "date-fns"; 
import { ptBR } from "date-fns/locale";
import { useToast } from '@/hooks/use-toast';

interface RDM { 
  id: string; 
  numero_rdm: number; 
  descricao_rdm_user: string; 
  executor: string; 
  status_rdm: string; 
  impacto: string; 
  risco: string; 
  ambiente: string; 
  requisitante: string; 
  ["gerente requisitante"]: string; 
  depto_gerencia_requisitante: string; 
  origem: string; 
  warroom_preventivo: string; 
  ic_rdm: string; 
  tipo_rdm: 'Urgente' | 'Padrão' | 'Normal' | 'Informativa'; 
  data_inicio_programacao: string; 
  data_fim_programacao?: string; 
  description: string; 
  grupo_executor: string; 
  area_principal_afetada: string; 
  ["duração da Programação"]?: string; 
  status_acompanhamento?: string;
} 

interface RDMFormData {
  numero_rdm: string;
  descricao_rdm_user: string;
  executor: string;
  status_rdm: string;
  impacto: string;
  risco: string;
  ambiente: string;
  requisitante: string;
  "gerente requisitante": string;
  depto_gerencia_requisitante: string;
  origem: string;
  warroom_preventivo: string;
  ic_rdm: string;
  tipo_rdm: 'Urgente' | 'Padrão' | 'Normal' | 'Informativa';
  data_inicio_programacao: string;
  data_fim_programacao: string;
  description: string;
  grupo_executor: string;
  area_principal_afetada: string;
  "duração da Programação": string;
}

const statusAcompanhamentoOptions = [
  { value: 'Não Iniciado', label: 'Não Iniciado', icon: Circle },
  { value: 'Em Andamento', label: 'Em Andamento', icon: Play },
  { value: 'Aguardando Aprovação', label: 'Aguardando Aprovação', icon: Clock },
  { value: 'Aguardando Terceiros', label: 'Aguardando Terceiros', icon: AlertTriangle },
  { value: 'Em Teste', label: 'Em Teste', icon: Settings },
  { value: 'Concluído', label: 'Concluído', icon: CheckCircle2 },
  { value: 'Cancelado', label: 'Cancelado', icon: XCircle },
  { value: 'Suspenso', label: 'Suspenso', icon: RotateCcw }
];

const formatDateRange = (start: string, end?: string) => { 
  if (!start) return ""; 

  const startDate = new Date(start); 
  const endDate = end ? new Date(end) : null; 

  const formatDate = (date: Date) => 
    date.toLocaleString("pt-BR", { 
      day: "2-digit", 
      month: "2-digit", 
      year: "numeric", 
      hour: "2-digit", 
      minute: "2-digit", 
    }); 

  return endDate ? `${formatDate(startDate)} - ${formatDate(endDate)}` : formatDate(startDate); 
}; 

const getStatusAcompanhamentoColor = (status: string) => {
  switch (status) {
    case 'Concluído':
      return 'bg-status-completed text-white';
    case 'Em Andamento':
    case 'Em Teste':
      return 'bg-status-in-progress text-white';
    case 'Aguardando Aprovação':
    case 'Aguardando Terceiros':
      return 'bg-status-pending text-white';
    case 'Cancelado':
      return 'bg-status-cancelled text-white';
    case 'Suspenso':
      return 'bg-status-on-hold text-white';
    default:
      return 'bg-muted text-muted-foreground';
  }
};

export const RDMTracker = () => { 
  const [expandedRDM, setExpandedRDM] = useState<string | null>(null); 
  const [selectedRDM, setSelectedRDM] = useState<RDM | null>(null); 
  const [rdms, setRdms] = useState<RDM[]>([]); 
  const [loading, setLoading] = useState(true); 
  const [error, setError] = useState<string | null>(null); 
  const [showForm, setShowForm] = useState(false);
  const [editingStatus, setEditingStatus] = useState<string | null>(null);
  const [statusLoading, setStatusLoading] = useState<string | null>(null);
  const { toast } = useToast();

  // Form state
  const [formData, setFormData] = useState<RDMFormData>({
    numero_rdm: '',
    descricao_rdm_user: '',
    executor: '',
    status_rdm: 'Aberta',
    impacto: '',
    risco: '',
    ambiente: '',
    requisitante: '',
    "gerente requisitante": '',
    depto_gerencia_requisitante: '',
    origem: '',
    warroom_preventivo: '',
    ic_rdm: '',
    tipo_rdm: 'Normal',
    data_inicio_programacao: '',
    data_fim_programacao: '',
    description: '',
    grupo_executor: '',
    area_principal_afetada: '',
    "duração da Programação": ''
  });

  // 🔹 Substitua pela URL do seu API Gateway 
  const API_URL = "https://f6ffk8e9fe.execute-api.us-east-1.amazonaws.com/prod/acompanhamentordms"; 

  useEffect(() => { 
    const fetchRDMs = async () => { 
      try { 
        setLoading(true); 
        const response = await fetch(API_URL); 
        if (!response.ok) { 
          throw new Error(`Erro ${response.status}: Não foi possível carregar as RDMs`); 
        } 
        const data = await response.json(); 
        // Adiciona status de acompanhamento padrão para RDMs existentes
        const rdmsWithTrackingStatus = data.map((rdm: RDM) => ({
          ...rdm,
          status_acompanhamento: rdm.status_acompanhamento || 'Não Iniciado'
        }));
        setRdms(rdmsWithTrackingStatus);
      } catch (err: any) { 
        setError(err.message || "Erro desconhecido"); 
      } finally { 
        setLoading(false); 
      } 
    }; 

    fetchRDMs(); 
  }, []); 

  const handleCreateRDM = async (e: React.FormEvent) => {
    e.preventDefault();
    setLoading(true);

    try {
      const newRDM = {
        ...formData,
        id: Date.now().toString(),
        numero_rdm: parseInt(formData.numero_rdm),
        status_acompanhamento: 'Não Iniciado'
      };

      // Simula chamada para API
      const response = await fetch(API_URL, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify(newRDM)
      });

      if (!response.ok) {
        throw new Error('Erro ao criar RDM');
      }

      setRdms(prev => [newRDM, ...prev]);
      toast({
        title: "RDM criada com sucesso!",
        description: `RDM ${formData.numero_rdm} foi cadastrada.`,
      });
      handleCloseForm();
    } catch (error) {
      toast({
        title: "Erro ao criar RDM",
        description: "Ocorreu um erro ao cadastrar a RDM. Tente novamente.",
        variant: "destructive",
      });
    } finally {
      setLoading(false);
    }
  };

  const handleStatusChange = async (rdmId: string, newStatus: string) => {
    setStatusLoading(rdmId);
    try {
      // Simula chamada para API
      const response = await fetch(`${API_URL}/${rdmId}`, {
        method: 'PATCH',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({ status_acompanhamento: newStatus })
      });

      if (!response.ok) {
        throw new Error('Erro ao atualizar status');
      }

      setRdms(prev => prev.map(rdm => 
        rdm.id === rdmId 
          ? { ...rdm, status_acompanhamento: newStatus }
          : rdm
      ));

      if (selectedRDM?.id === rdmId) {
        setSelectedRDM(prev => prev ? { ...prev, status_acompanhamento: newStatus } : null);
      }

      toast({
        title: "Status atualizado!",
        description: `Status alterado para: ${newStatus}`,
      });
      setEditingStatus(null);
    } catch (error) {
      toast({
        title: "Erro ao atualizar status",
        description: "Ocorreu um erro. Tente novamente.",
        variant: "destructive",
      });
    } finally {
      setStatusLoading(null);
    }
  };

  const handleCloseForm = () => {
    setFormData({
      numero_rdm: '',
      descricao_rdm_user: '',
      executor: '',
      status_rdm: 'Aberta',
      impacto: '',
      risco: '',
      ambiente: '',
      requisitante: '',
      "gerente requisitante": '',
      depto_gerencia_requisitante: '',
      origem: '',
      warroom_preventivo: '',
      ic_rdm: '',
      tipo_rdm: 'Normal',
      data_inicio_programacao: '',
      data_fim_programacao: '',
      description: '',
      grupo_executor: '',
      area_principal_afetada: '',
      "duração da Programação": ''
    });
    setShowForm(false);
  };

  const updateFormData = (field: keyof RDMFormData, value: string) => {
    setFormData(prev => ({ ...prev, [field]: value }));
  };

  const getStatusBadgeClass = (status_rdm: string) => { 
    switch (status_rdm) { 
      case 'Aberta': 
      case 'Aprovada': 
        return 'bg-status-approved text-white border-status-approved/50 shadow-md'; 

      case 'Cancelada': 
      case 'Rejeitada': 
        return 'bg-status-cancelled text-white border-status-cancelled/50 shadow-md'; 

      case 'Em aprovação': 
      case 'Em aprovação - Comitê': 
        return 'bg-status-pending text-white border-status-pending/50 shadow-md'; 

      case 'Em implantação': 
        return 'bg-status-in-progress text-white border-status-in-progress/50 shadow-md'; 

      case 'Implantada': 
      case 'Fechada': 
        return 'bg-status-completed text-white border-status-completed/50 shadow-md'; 

      case 'Plano de volta em execução': 
      case 'Recuada': 
        return 'bg-status-on-hold text-white border-status-on-hold/50 shadow-md'; 

      default: 
        return 'bg-muted text-muted-foreground'; 
    } 
  }; 

  const getStatusText = (status_rdm: string) => { 
    switch (status_rdm) { 
      case 'Aberta': 
        return 'Aberta'; 
      case 'Aprovada': 
        return 'Aprovada'; 
      case 'Cancelada': 
        return 'Cancelada'; 
      case 'Em aprovação': 
        return 'Em aprovação'; 
      case 'Em aprovação - Comitê': 
        return 'Em aprovação - Comitê'; 
      case 'Em implantação': 
        return 'Em implantação'; 
      case 'Fechada': 
        return 'Fechada'; 
      case 'Implantada': 
        return 'Implantada'; 
      case 'Plano de volta em execução': 
        return 'Plano de volta em execução'; 
      case 'Recuada': 
        return 'Recuada'; 
      case 'Rejeitada': 
        return 'Rejeitada'; 
      default: 
        return 'Desconhecido'; 
    } 
  }; 

  const getStatusIcon = (status_rdm: string) => { 
    switch (status_rdm) { 
      case 'Aberta': 
        return <Play className="h-4 w-4 animate-pulse" />; 
      case 'Aprovada': 
        return <Star className="h-4 w-4 animate-bounce" />; 

      case 'Cancelada': 
      case 'Rejeitada': 
        return <XCircle className="h-4 w-4" />; 

      case 'Em implantação': 
        return <Settings className="h-4 w-4 animate-spin" />; 

      case 'Em aprovação': 
      case 'Em aprovação - Comitê': 
        return <Clock className="h-4 w-4 animate-bounce" />; 

      case 'Implantada': 
      case 'Fechada': 
        return <CheckCircle2 className="h-4 w-4" />; 

      case 'Plano de volta em execução': 
      case 'Recuada': 
        return <RotateCcw className="h-4 w-4" />; 

      default: 
        return <Circle className="h-4 w-4" />; 
    } 
  }; 

  const getPriorityIcon = (tipo_rdm: string) => { 
    switch (tipo_rdm) { 
      case 'Urgente': 
        return <AlertTriangle className="h-4 w-4 text-status-cancelled" />; 
      case 'Padrão': 
      case 'Normal': 
        return <AlertCircle className="h-4 w-4 text-status-in-progress" />; 
      case 'Informativa': 
        return <Circle className="h-4 w-4 text-status-completed" />; 
      default: 
        return <Circle className="h-4 w-4 text-muted-foreground" />; 
    } 
  }; 

  const getPriorityColor = (tipo_rdm: string) => { 
    switch (tipo_rdm) { 
      case 'Urgente': 
        return 'text-status-cancelled'; 
      case 'Padrão': 
      case 'Normal': 
        return 'text-status-in-progress'; 
      case 'Informativa': 
        return 'text-status-completed'; 
      default: 
        return 'text-muted-foreground'; 
    } 
  }; 

  const getPriorityText = (tipo_rdm: string) => { 
    return tipo_rdm;
  }; 

  const toggleExpanded = (id: string) => { 
    setExpandedRDM(prev => prev === id ? null : id); 
  }; 

  const openModal = (rdm: RDM) => { 
    setSelectedRDM(rdm); 
  }; 

  const closeModal = () => { 
    setSelectedRDM(null); 
  }; 

  const activeRDMs = rdms.filter(rdm => rdm.status_rdm !== 'Fechada' && rdm.status_rdm !== 'Implantada').length; 

  // Componente StatusSelector inline
  const StatusSelector = ({ rdm }: { rdm: RDM }) => {
    const [selectedStatus, setSelectedStatus] = useState(rdm.status_acompanhamento || 'Não Iniciado');
    const isEditing = editingStatus === rdm.id;
    const isLoading = statusLoading === rdm.id;

    const currentStatusOption = statusAcompanhamentoOptions.find(option => option.value === selectedStatus) || statusAcompanhamentoOptions[0];
    const CurrentIcon = currentStatusOption.icon;

    if (!isEditing) {
      return (
        <div className="flex items-center gap-2">
          <Badge className={`${getStatusAcompanhamentoColor(selectedStatus)} flex items-center gap-1.5 px-3 py-1`}>
            <CurrentIcon className="h-3 w-3" />
            {selectedStatus}
          </Badge>
          <Button
            variant="outline"
            size="sm"
            onClick={() => setEditingStatus(rdm.id)}
            className="h-8 px-2 text-xs"
            disabled={isLoading}
          >
            Alterar
          </Button>
        </div>
      );
    }

    return (
      <div className="flex items-center gap-2 p-2 bg-accent/10 rounded-lg border">
        <div className="flex-1">
          <Select value={selectedStatus} onValueChange={setSelectedStatus}>
            <SelectTrigger className="h-8">
              <SelectValue />
            </SelectTrigger>
            <SelectContent>
              {statusAcompanhamentoOptions.map((option) => {
                const Icon = option.icon;
                return (
                  <SelectItem key={option.value} value={option.value}>
                    <div className="flex items-center gap-2">
                      <Icon className="h-4 w-4" />
                      {option.label}
                    </div>
                  </SelectItem>
                );
              })}
            </SelectContent>
          </Select>
        </div>
        <div className="flex gap-1">
          <Button
            size="sm"
            onClick={() => handleStatusChange(rdm.id, selectedStatus)}
            disabled={isLoading || selectedStatus === rdm.status_acompanhamento}
            className="h-8 px-2"
          >
            <Save className="h-3 w-3" />
          </Button>
          <Button
            variant="outline"
            size="sm"
            onClick={() => {
              setSelectedStatus(rdm.status_acompanhamento || 'Não Iniciado');
              setEditingStatus(null);
            }}
            disabled={isLoading}
            className="h-8 px-2"
          >
            ✕
          </Button>
        </div>
      </div>
    );
  };

  return ( 
    <div className="min-h-screen bg-background p-6">
      <Card className="shadow-card border transition-all duration-300 hover:shadow-hover"> 
        <CardHeader className="flex flex-row items-center justify-between space-y-0 pb-3"> 
          <CardTitle className="text-primary flex items-center gap-3 text-xl font-bold"> 
            <div className="relative"> 
              <Calendar className="h-6 w-6" /> 
              {activeRDMs > 0 && ( 
                <div className="absolute -top-1 -right-1 w-3 h-3 bg-status-in-progress rounded-full animate-pulse border border-background" /> 
              )} 
            </div> 
            <span>Acompanhamento de RDMs</span> 
            {activeRDMs > 0 && ( 
              <Badge variant="outline" className="ml-2 px-2 py-1 bg-status-in-progress/10 text-status-in-progress border-status-in-progress/30"> 
                {activeRDMs} ativas 
              </Badge> 
            )} 
          </CardTitle> 
          <Button 
            variant="default" 
            size="sm" 
            className="bg-primary hover:bg-primary/90"
            onClick={() => setShowForm(true)}
          > 
            <Plus className="h-4 w-4 mr-2" />
            Adicionar RDM 
          </Button> 
        </CardHeader> 

        <CardContent className="space-y-3 max-h-[75vh] overflow-y-auto pr-2"> 
          {loading && ( 
            <div className="text-center py-8 text-muted-foreground"> 
              Carregando RDMs... 
            </div> 
          )} 

          {error && ( 
            <div className="text-center py-8 text-status-cancelled"> 
              {error} 
            </div> 
          )} 

          {!loading && !error && rdms.map((rdm, index) => ( 
            <div 
              key={rdm.id} 
              className="group relative border rounded-xl p-4 bg-card hover:bg-accent/5 transition-all duration-300 shadow-sm hover:shadow-card animate-in fade-in-0 slide-in-from-bottom-4" 
              style={{ animationDelay: `${index * 100}ms` }} 
            > 
              {/* Priority indicator */} 
              <div className={`absolute left-0 top-4 bottom-4 w-1 rounded-r-lg transition-all duration-300 ${rdm.tipo_rdm === 'Urgente' ? 'bg-status-cancelled' : 
                rdm.tipo_rdm === 'Normal' || rdm.tipo_rdm === 'Padrão' ? 'bg-status-in-progress' : 
                rdm.tipo_rdm === 'Informativa' ? 'bg-status-completed' : 'bg-muted'
                }`} /> 

              <div className="flex flex-col gap-4 ml-4"> 
                {/* Header with RDM info */}
                <div className="flex flex-col lg:flex-row lg:items-center justify-between gap-4">
                  <div className="flex items-center gap-3 flex-wrap">
                    <span className="font-mono text-sm bg-accent/30 px-2 py-1 rounded-md text-accent-foreground font-semibold"> 
                      #{rdm.numero_rdm} 
                    </span> 
                    <span className="text-sm text-foreground font-medium break-words max-w-[300px]"> 
                      {rdm.descricao_rdm_user} 
                    </span> 
                    <span className="text-sm text-muted-foreground font-medium"> 
                      {rdm.grupo_executor} 
                    </span> 
                  </div>

                  <div className="flex items-center gap-3">
                    <Badge className={`${getStatusBadgeClass(rdm.status_rdm)} flex items-center gap-1.5 px-3 py-1`}> 
                      {getStatusIcon(rdm.status_rdm)} 
                      {getStatusText(rdm.status_rdm)} 
                    </Badge> 
                    <Button 
                      variant="outline" 
                      size="sm" 
                      className="hover:bg-accent/50 transition-all duration-300" 
                      onClick={() => openModal(rdm)} 
                    > 
                      Detalhes 
                    </Button> 
                  </div>
                </div>

                {/* Status de Acompanhamento */}
                <div className="flex items-center gap-3 p-3 bg-accent/10 rounded-lg border border-accent/20">
                  <div className="flex items-center gap-2 text-sm font-medium text-foreground">
                    <Settings className="h-4 w-4" />
                    Status de Acompanhamento:
                  </div>
                  <StatusSelector rdm={rdm} />
                </div>
              </div> 
            </div> 
          ))} 

          {!loading && !error && rdms.length === 0 && ( 
            <div className="text-center py-12 animate-in fade-in-0"> 
              <Calendar className="h-12 w-12 text-muted-foreground mx-auto mb-4 opacity-50" /> 
              <p className="text-muted-foreground text-lg font-medium"> 
                Nenhuma RDM cadastrada 
              </p> 
              <p className="text-muted-foreground/70 text-sm mt-1"> 
                Clique em "Adicionar RDM" para começar
              </p> 
            </div> 
          )} 
        </CardContent> 
      </Card> 

      {/* Form Modal */}
      <Dialog open={showForm} onOpenChange={handleCloseForm}>
        <DialogContent className="max-w-4xl max-h-[90vh] overflow-y-auto">
          <DialogHeader>
            <DialogTitle className="flex items-center gap-3 text-xl">
              <div className="p-2 rounded-lg bg-primary/10">
                <Calendar className="h-5 w-5 text-primary" />
              </div>
              Nova RDM
            </DialogTitle>
          </DialogHeader>

          <form onSubmit={handleCreateRDM} className="space-y-6 py-4">
            {/* Basic Information */}
            <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
              <div className="space-y-2">
                <Label htmlFor="numero_rdm">Número RDM *</Label>
                <Input
                  id="numero_rdm"
                  value={formData.numero_rdm}
                  onChange={(e) => updateFormData('numero_rdm', e.target.value)}
                  placeholder="Ex: 12345"
                  required
                />
              </div>

              <div className="space-y-2">
                <Label htmlFor="tipo_rdm">Tipo RDM *</Label>
                <Select value={formData.tipo_rdm} onValueChange={(value) => updateFormData('tipo_rdm', value as any)}>
                  <SelectTrigger>
                    <SelectValue />
                  </SelectTrigger>
                  <SelectContent>
                    <SelectItem value="Urgente">Urgente</SelectItem>
                    <SelectItem value="Padrão">Padrão</SelectItem>
                    <SelectItem value="Normal">Normal</SelectItem>
                    <SelectItem value="Informativa">Informativa</SelectItem>
                  </SelectContent>
                </Select>
              </div>
            </div>

            <div className="space-y-2">
              <Label htmlFor="descricao_rdm_user">Descrição *</Label>
              <Textarea
                id="descricao_rdm_user"
                value={formData.descricao_rdm_user}
                onChange={(e) => updateFormData('descricao_rdm_user', e.target.value)}
                placeholder="Descreva a mudança a ser realizada"
                rows={3}
                required
              />
            </div>

            {/* Responsible Information */}
            <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
              <div className="space-y-2">
                <Label htmlFor="executor">Executor *</Label>
                <Input
                  id="executor"
                  value={formData.executor}
                  onChange={(e) => updateFormData('executor', e.target.value)}
                  placeholder="Nome do responsável"
                  required
                />
              </div>

              <div className="space-y-2">
                <Label htmlFor="grupo_executor">Grupo Executor *</Label>
                <Input
                  id="grupo_executor"
                  value={formData.grupo_executor}
                  onChange={(e) => updateFormData('grupo_executor', e.target.value)}
                  placeholder="Equipe responsável"
                  required
                />
              </div>
            </div>

            {/* Environment and Risk */}
            <div className="grid grid-cols-1 md:grid-cols-3 gap-4">
              <div className="space-y-2">
                <Label htmlFor="ambiente">Ambiente</Label>
                <Select value={formData.ambiente} onValueChange={(value) => updateFormData('ambiente', value)}>
                  <SelectTrigger>
                    <SelectValue placeholder="Selecione" />
                  </SelectTrigger>
                  <SelectContent>
                    <SelectItem value="Produção">Produção</SelectItem>
                    <SelectItem value="Homologação">Homologação</SelectItem>
                    <SelectItem value="Desenvolvimento">Desenvolvimento</SelectItem>
                    <SelectItem value="Todos">Todos</SelectItem>
                  </SelectContent>
                </Select>
              </div>

              <div className="space-y-2">
                <Label htmlFor="impacto">Impacto</Label>
                <Select value={formData.impacto} onValueChange={(value) => updateFormData('impacto', value)}>
                  <SelectTrigger>
                    <SelectValue placeholder="Selecione" />
                  </SelectTrigger>
                  <SelectContent>
                    <SelectItem value="Alto">Alto</SelectItem>
                    <SelectItem value="Médio">Médio</SelectItem>
                    <SelectItem value="Baixo">Baixo</SelectItem>
                  </SelectContent>
                </Select>
              </div>

              <div className="space-y-2">
                <Label htmlFor="risco">Risco</Label>
                <Select value={formData.risco} onValueChange={(value) => updateFormData('risco', value)}>
                  <SelectTrigger>
                    <SelectValue placeholder="Selecione" />
                  </SelectTrigger>
                  <SelectContent>
                    <SelectItem value="Alto">Alto</SelectItem>
                    <SelectItem value="Médio">Médio</SelectItem>
                    <SelectItem value="Baixo">Baixo</SelectItem>
                  </SelectContent>
                </Select>
              </div>
            </div>

            {/* Scheduling */}
            <div className="grid grid-cols-1 md:grid-cols-3 gap-4">
              <div className="space-y-2">
                <Label htmlFor="data_inicio_programacao">Data/Hora Início *</Label>
                <Input
                  id="data_inicio_programacao"
                  type="datetime-local"
                  value={formData.data_inicio_programacao}
                  onChange={(e) => updateFormData('data_inicio_programacao', e.target.value)}
                  required
                />
              </div>

              <div className="space-y-2">
                <Label htmlFor="data_fim_programacao">Data/Hora Fim</Label>
                <Input
                  id="data_fim_programacao"
                  type="datetime-local"
                  value={formData.data_fim_programacao}
                  onChange={(e) => updateFormData('data_fim_programacao', e.target.value)}
                />
              </div>

              <div className="space-y-2">
                <Label htmlFor="duracao">Duração (horas)</Label>
                <Input
                  id="duracao"
                  type="number"
                  step="0.5"
                  value={formData["duração da Programação"]}
                  onChange={(e) => updateFormData("duração da Programação", e.target.value)}
                  placeholder="Ex: 2.5"
                />
              </div>
            </div>

            {/* Additional Information */}
            <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
              <div className="space-y-2">
                <Label htmlFor="requisitante">Requisitante</Label>
                <Input
                  id="requisitante"
                  value={formData.requisitante}
                  onChange={(e) => updateFormData('requisitante', e.target.value)}
                  placeholder="Nome do solicitante"
                />
              </div>

              <div className="space-y-2">
                <Label htmlFor="area_principal_afetada">Área Principal Afetada</Label>
                <Input
                  id="area_principal_afetada"
                  value={formData.area_principal_afetada}
                  onChange={(e) => updateFormData('area_principal_afetada', e.target.value)}
                  placeholder="Área impactada"
                />
              </div>
            </div>

            <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
              <div className="space-y-2">
                <Label htmlFor="origem">Origem</Label>
                <Input
                  id="origem"
                  value={formData.origem}
                  onChange={(e) => updateFormData('origem', e.target.value)}
                  placeholder="Origem da solicitação"
                />
              </div>

              <div className="space-y-2">
                <Label htmlFor="ic_rdm">IC RDM</Label>
                <Input
                  id="ic_rdm"
                  value={formData.ic_rdm}
                  onChange={(e) => updateFormData('ic_rdm', e.target.value)}
                  placeholder="Identificador IC"
                />
              </div>
            </div>

            <div className="space-y-2">
              <Label htmlFor="warroom_preventivo">War Room Preventivo</Label>
              <Select value={formData.warroom_preventivo} onValueChange={(value) => updateFormData('warroom_preventivo', value)}>
                <SelectTrigger>
                  <SelectValue placeholder="Selecione" />
                </SelectTrigger>
                <SelectContent>
                  <SelectItem value="Sim">Sim</SelectItem>
                  <SelectItem value="Não">Não</SelectItem>
                </SelectContent>
              </Select>
            </div>

            {/* Form Actions */}
            <div className="flex justify-end gap-3 pt-4 border-t">
              <Button
                type="button"
                variant="outline"
                onClick={handleCloseForm}
                disabled={loading}
              >
                <X className="h-4 w-4 mr-2" />
                Cancelar
              </Button>
              <Button
                type="submit"
                disabled={loading}
                className="bg-primary hover:bg-primary/90"
              >
                <Save className="h-4 w-4 mr-2" />
                {loading ? 'Salvando...' : 'Salvar RDM'}
              </Button>
            </div>
          </form>
        </DialogContent>
      </Dialog>

      {/* Details Modal */} 
      <Dialog open={!!selectedRDM} onOpenChange={closeModal}> 
        <DialogContent className="max-w-2xl"> 
          <DialogHeader> 
            <DialogTitle className="text-xl flex items-center gap-3"> 
              <div className="p-2 rounded-lg bg-primary/10"> 
                <Calendar className="h-5 w-5 text-primary" /> 
              </div> 
              #{selectedRDM?.numero_rdm} - {selectedRDM?.descricao_rdm_user} 
            </DialogTitle> 
          </DialogHeader> 

          {selectedRDM && ( 
            <div className="space-y-6 py-4"> 
              {/* Status and Priority */} 
              <div className="flex flex-wrap items-center gap-4"> 
                <Badge className={`${getStatusBadgeClass(selectedRDM.status_rdm)} flex items-center gap-2 px-3 py-2`}> 
                  {getStatusIcon(selectedRDM.status_rdm)} 
                  {getStatusText(selectedRDM.status_rdm)} 
                </Badge> 
                <div className="flex items-center gap-2"> 
                  {getPriorityIcon(selectedRDM.tipo_rdm)} 
                  <span className={`font-semibold ${getPriorityColor(selectedRDM.tipo_rdm)}`}> 
                    Prioridade {getPriorityText(selectedRDM.tipo_rdm)} 
                  </span> 
                </div> 
              </div> 

              {/* Status de Acompanhamento no Modal */}
              <div className="p-4 bg-accent/10 rounded-lg border border-accent/20">
                <h4 className="font-semibold text-foreground mb-3 flex items-center gap-2">
                  <Settings className="h-4 w-4" />
                  Status de Acompanhamento
                </h4>
                <StatusSelector rdm={selectedRDM} />
              </div>

              {/* Details Grid */} 
              <div className="grid grid-cols-1 md:grid-cols-2 gap-6"> 
                <div className="space-y-4"> 
                  <div className="flex items-center gap-3 p-3 bg-accent/10 rounded-lg border border-accent/20"> 
                    <User className="h-5 w-5 text-primary" /> 
                    <div> 
                      <p className="text-sm text-muted-foreground">Responsável</p> 
                      <p className="font-semibold text-foreground">{selectedRDM.executor}</p> 
                    </div> 
                  </div> 

                  <div className="flex items-center gap-3 p-3 bg-accent/10 rounded-lg border border-accent/20"> 
                    <Settings className="h-5 w-5 text-primary" /> 
                    <div> 
                      <p className="text-sm text-muted-foreground">Equipe</p> 
                      <p className="font-semibold text-foreground">{selectedRDM.grupo_executor}</p> 
                    </div> 
                  </div> 
                </div> 

                <div className="space-y-4"> 
                  <div className="flex items-center gap-3 p-3 bg-accent/10 rounded-lg border border-accent/20"> 
                    <Calendar className="h-5 w-5 text-primary" /> 
                    <div> 
                      <p className="text-sm text-muted-foreground">Janela de Execução</p> 
                      <p className="font-semibold text-foreground"> 
                       {formatDateRange(selectedRDM.data_inicio_programacao, selectedRDM.data_fim_programacao)} 
                      </p> 
                    </div> 
                  </div> 

                  <div className="flex items-center gap-3 p-3 bg-accent/10 rounded-lg border border-accent/20"> 
                    <Clock className="h-5 w-5 text-primary" /> 
                    <div> 
                      <p className="text-sm text-muted-foreground">Duração Estimada</p> 
                      <p className="font-semibold text-foreground">{selectedRDM["duração da Programação"] || 'N/A'} Horas</p>                    
                    </div> 
                  </div> 
                </div> 
              </div> 

              {/* Description */} 
              <div className="max-w-3xl w-full max-h-[20vh] overflow-y-auto mx-auto"> 
                <h4 className="font-semibold text-foreground mb-4 flex items-center gap-2 text-lg"> 
                  <AlertCircle className="h-4 w-4" /> 
                  Mais informações 
                </h4> 
                <div className="grid grid-cols-1 sm:grid-cols-2 gap-3"> 
                  <div> 
                    <span className="font-medium text-foreground">Ambiente:</span> 
                    <span className="text-muted-foreground ml-1">{selectedRDM.ambiente}</span> 
                  </div> 
                  <div> 
                    <span className="font-medium text-foreground">Origem:</span> 
                    <span className="text-muted-foreground ml-1">{selectedRDM.origem}</span> 
                  </div> 
                  <div> 
                    <span className="font-medium text-foreground">Impacto:</span> 
                    <span className="text-muted-foreground ml-1">{selectedRDM.impacto}</span> 
                  </div> 
                  <div> 
                    <span className="font-medium text-foreground">Risco:</span> 
                    <span className="text-muted-foreground ml-1">{selectedRDM.risco}</span> 
                  </div> 
                  <div> 
                    <span className="font-medium text-foreground">Requisitante:</span> 
                    <span className="text-muted-foreground ml-1">{selectedRDM.requisitante}</span> 
                  </div> 
                  <div> 
                    <span className="font-medium text-foreground">Área Principal:</span> 
                    <span className="text-muted-foreground ml-1">{selectedRDM.area_principal_afetada}</span> 
                  </div> 
                  <div> 
                    <span className="font-medium text-foreground">War Room Preventivo:</span> 
                    <span className="text-muted-foreground ml-1">{selectedRDM.warroom_preventivo}</span> 
                  </div> 
                  <div> 
                    <span className="font-medium text-foreground">IC:</span> 
                    <span className="text-muted-foreground ml-1">{selectedRDM.ic_rdm}</span> 
                  </div> 
                </div> 
              </div> 
            </div> 
          )} 
        </DialogContent> 
      </Dialog> 
    </div>
  ); 
};

const Index = () => {
  return <RDMTracker />;
};

export default Index;
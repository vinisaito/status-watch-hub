import React, { useEffect, useState, useRef } from "react";

interface TimerData {
  chamado: number;
  timerActive: boolean;
  startedAt?: string;
  durationMinutes: number;
  timeRemaining: number;
}

const Timer: React.FC = () => {
  // Defina aqui o chamado e o WebSocket
  const CHAMADO = 10418007;
  const WS_URL = "wss://SEU_ENDPOINT_AQUI"; // substitua pelo seu endpoint wss

  const [timeRemaining, setTimeRemaining] = useState<number>(0);
  const [timerActive, setTimerActive] = useState<boolean>(false);
  const wsRef = useRef<WebSocket | null>(null);
  const intervalRef = useRef<NodeJS.Timer | null>(null);

  // Conectar WebSocket
  useEffect(() => {
    const ws = new WebSocket(WS_URL);
    wsRef.current = ws;

    ws.onopen = () => {
      console.log("WebSocket conectado");
      // Solicita estado atual do chamado
      ws.send(JSON.stringify({ action: "getState", chamado: CHAMADO }));
    };

    ws.onmessage = (event) => {
      try {
        const data: TimerData = JSON.parse(event.data);

        if (data.chamado === CHAMADO) {
          setTimeRemaining(Number(data.timeRemaining) || 0);
          setTimerActive(data.timerActive);
        }
      } catch (err) {
        console.error("Erro ao processar mensagem WS:", err);
      }
    };

    ws.onclose = () => {
      console.log("WebSocket desconectado");
    };

    return () => {
      ws.close();
    };
  }, []);

  // Timer decrementando
  useEffect(() => {
    if (intervalRef.current) clearInterval(intervalRef.current);

    if (timerActive) {
      intervalRef.current = setInterval(() => {
        setTimeRemaining((prev) => (prev > 0 ? prev - 1 : 0));
      }, 1000);
    }

    return () => {
      if (intervalRef.current) clearInterval(intervalRef.current);
    };
  }, [timerActive]);

  const handleStart = () => {
    wsRef.current?.send(JSON.stringify({ action: "startTimer", chamado: CHAMADO }));
  };

  const handlePause = () => {
    wsRef.current?.send(JSON.stringify({ action: "pauseTimer", chamado: CHAMADO }));
  };

  const remaining = typeof timeRemaining === "number" ? timeRemaining : 0;
  const minutes = Math.floor(remaining / 60);
  const seconds = Math.floor(remaining % 60);

  return (
    <div className="timer-card">
      <h3>Chamado: {CHAMADO}</h3>
      <p>
        Tempo restante: {minutes.toString().padStart(2, "0")}:
        {seconds.toString().padStart(2, "0")}
      </p>
      <p>Status: {timerActive ? "Ativo" : "Pausado"}</p>
      <button onClick={handleStart}>Iniciar</button>
      <button onClick={handlePause}>Pausar</button>
    </div>
  );
};

export default Timer;

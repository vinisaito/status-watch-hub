"use client";

import { useState } from "react";
import { Badge } from "@/components/ui/badge";
import { Button } from "@/components/ui/button";
import { Card, CardContent } from "@/components/ui/card";
import {
  Table,
  TableBody,
  TableCell,
  TableHead,
  TableHeader,
  TableRow,
} from "@/components/ui/table";
import {
  Play,
  Timer,
} from "lucide-react";

import { useWebsocketTimers } from "@/hooks/useWebsocketTimers";
import { getRemainingTime } from "@/utils/timeUtils";

interface Alert {
  chamado: string;
  criticidade: string;
  sistema: string;
  horario: string;
  descricao: string;
}

interface ActionTableProps {
  alerts: Alert[];
}

export default function ActionTable({ alerts }: ActionTableProps) {
  const { timers, sendMessage } = useWebsocketTimers();
  const [loading, setLoading] = useState<string | null>(null);

  return (
    <Card className="mt-6">
      <CardContent>
        <Table>
          <TableHeader>
            <TableRow>
              <TableHead>Chamado</TableHead>
              <TableHead>Criticidade</TableHead>
              <TableHead>Sistema</TableHead>
              <TableHead>Horário</TableHead>
              <TableHead>Descrição</TableHead>
              <TableHead className="text-center">Acionamento</TableHead>
            </TableRow>
          </TableHeader>
          <TableBody>
            {alerts.map((alert) => {
              const timerData = timers.get(alert.chamado);

              return (
                <TableRow key={alert.chamado}>
                  <TableCell>{alert.chamado}</TableCell>
                  <TableCell>
                    <Badge
                      variant={
                        alert.criticidade === "Alta"
                          ? "destructive"
                          : alert.criticidade === "Média"
                          ? "secondary"
                          : "default"
                      }
                    >
                      {alert.criticidade}
                    </Badge>
                  </TableCell>
                  <TableCell>{alert.sistema}</TableCell>
                  <TableCell>{alert.horario}</TableCell>
                  <TableCell>{alert.descricao}</TableCell>

                  {/* Coluna de Acionamento */}
                  <TableCell className="text-center">
                    {timerData ? (
                      <div className="flex items-center gap-2 justify-center">
                        <Timer className="h-4 w-4 text-orange-500" />
                        <span className="text-sm font-mono">
                          {getRemainingTime(
                            timerData.timerStart,
                            timerData.duration
                          )}
                        </span>
                        <Badge variant="secondary" className="text-xs">
                          Etapa {timerData.etapa}
                        </Badge>
                      </div>
                    ) : (
                      <Button
                        variant="outline"
                        size="sm"
                        disabled={loading === alert.chamado}
                        onClick={() => {
                          setLoading(alert.chamado);
                          sendMessage({
                            action: "startTimer",
                            chamado: alert.chamado,
                            etapa: 1,
                            duration: 300, // 5 minutos, pode ser dinâmico
                          });
                          setLoading(null);
                        }}
                      >
                        <Play className="h-3 w-3 mr-1" />
                        Iniciar
                      </Button>
                    )}
                  </TableCell>
                </TableRow>
              );
            })}
          </TableBody>
        </Table>
      </CardContent>
    </Card>
  );
}

import boto3
import json
from datetime import datetime, timezone
from decimal import Decimal

# Conex√£o DynamoDB
DDB = boto3.resource("dynamodb", region_name="us-east-1")
ACOMP_TABLE = DDB.Table("painelmonitoracao_acompanhamento")

# Serializa√ß√£o Decimal
def json_serial(obj):
    if isinstance(obj, Decimal):
        return int(obj) if obj % 1 == 0 else float(obj)
    raise TypeError

def to_decimal(value):
    return Decimal(str(value))

# Calcula tempo restante
def calculate_remaining(alerta):
    duration = Decimal(str(alerta.get("durationMinutes", 15)))
    timer_active = alerta.get("timerActive", False)
    elapsed = Decimal(str(alerta.get("elapsedSeconds", 0)))
    started_at = alerta.get("startedAt")

    if timer_active and started_at:
        try:
            started_dt = datetime.fromisoformat(str(started_at).replace("Z", "+00:00"))
            now = datetime.utcnow().replace(tzinfo=timezone.utc)
            elapsed += Decimal(str((now - started_dt).total_seconds()))
        except Exception as e:
            print(f"‚ùå Erro no c√°lculo de elapsed: {e}")

    remaining = max(0, float(duration * 60 - elapsed))
    return int(remaining), int(elapsed), timer_active

# Lambda handler
def lambda_handler(event, context):
    print("üì• Evento recebido:", json.dumps(event))

    # Pegando o ID do chamado da URL
    path_params = event.get("pathParameters") or {}
    chamado = path_params.get("id")

    if not chamado:
        return {"statusCode": 400, "body": "Chamado ausente"}

    # Busca no DynamoDB
    alerta_resp = ACOMP_TABLE.get_item(Key={"chamado": int(chamado)})
    alerta = alerta_resp.get("Item")
    if not alerta:
        return {"statusCode": 404, "body": "Chamado n√£o encontrado"}

    remaining, elapsed, timer_active = calculate_remaining(alerta)

    # Monta o retorno
    result = {
        "chamado": alerta["chamado"],
        "timerActive": timer_active,
        "startedAt": alerta.get("startedAt"),
        "durationMinutes": alerta.get("durationMinutes", 15),
        "elapsedSeconds": elapsed,
        "timeRemaining": remaining
    }

    print(f"üì° Retornando estado do chamado: {result}")

    return {
        "statusCode": 200,
        "body": json.dumps(result, default=json_serial),
        "headers": {
            "Content-Type": "application/json",
            "Access-Control-Allow-Origin": "*"
        }
    }

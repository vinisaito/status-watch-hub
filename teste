import { useState, useEffect, useMemo, useCallback } from 'react';
import { Check, AlertTriangle, ExternalLink, Zap, Group, Calendar, Info, XCircle, Flame, ChevronLeft, ChevronRight, ArrowUpDown, ArrowUp, ArrowDown, Clock, Play, CheckCircle, X } from 'lucide-react';
import { Card, CardContent, CardHeader } from '@/components/ui/card';
import { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from '@/components/ui/table';
import { Badge } from '@/components/ui/badge';
import { Button } from '@/components/ui/button';
import { toast } from '@/hooks/use-toast';
import { Tooltip, TooltipContent, TooltipProvider, TooltipTrigger } from '@/components/ui/tooltip';
import {
  Dialog,
  DialogContent,
  DialogHeader,
  DialogTitle,
} from '@/components/ui/dialog';
import {
  Select,
  SelectContent,
  SelectItem,
  SelectTrigger,
  SelectValue,
} from '@/components/ui/select';
import { Textarea } from '@/components/ui/textarea';
import { Label } from '@/components/ui/label';

interface AlertData {
  id: string;
  chamado: string;
  tipo_chamado: string;
  grupo_chamado: string;
  status_chamado: string;
  abertura_chamado: string;
  resumo_chamado: string;
  severidade_chamado: string;
  acionado: string;
  chat: boolean;
}

interface EscalationState {
  status: 'pending' | 'confirmed' | 'escalating' | 'completed';
  currentLevel: 0 | 1 | 2 | 3 | 4; // 0 = confirmação, 1-4 = escalações
  timeRemaining: number;
  timerActive: boolean;
  isAttended: boolean;
  observations: string;
}

interface ActionTableProps {
  alertData: AlertData[];
  onUpdateAcknowledgment: (alertId: string, acknowledged: boolean) => void;
  loading: boolean;
}

type SortField = 'chamado' | 'tipo_chamado' | 'grupo_chamado' | 'status_chamado' | 'abertura_chamado' | 'resumo_chamado' | 'severidade_chamado' | 'acionado';
type SortDirection = 'asc' | 'desc' | null;

export const ActionTable = ({ alertData, onUpdateAcknowledgment, loading }: ActionTableProps) => {
  const [selectedIncident, setSelectedIncident] = useState<AlertData | null>(null);
  const [crisisDialogOpen, setCrisisDialogOpen] = useState(false);
  const [expandedRows, setExpandedRows] = useState<Set<string>>(new Set());
  const [currentPage, setCurrentPage] = useState(1);
  const itemsPerPage = 5;

  // Estados para ordenação
  const [sortField, setSortField] = useState<SortField>('chamado');
  const [sortDirection, setSortDirection] = useState<SortDirection>('desc');

  // Estado que guarda os numeros chamados já acionados (string)
  const [acionadosSet, setAcionadosSet] = useState<Set<string>>(new Set());

  // Estado para controlar o status de escalação de cada chamado
  const [escalationStatus, setEscalationStatus] = useState<Record<string, string>>({});

  // Estados para escalação
  const [escalationStates, setEscalationStates] = useState<Record<string, EscalationState>>({});
  
  // Estado para armazenar observações de confirmação por chamado
  const [confirmationObservations, setConfirmationObservations] = useState<Record<string, string>>({});

  // Timer para escalações
  useEffect(() => {
    const interval = setInterval(() => {
      setEscalationStates(prev => {
        const newStates = { ...prev };
        let updated = false;

        Object.keys(newStates).forEach(alertId => {
          const state = newStates[alertId];
          if (state.timerActive && state.timeRemaining > 0) {
            newStates[alertId] = {
              ...state,
              timeRemaining: state.timeRemaining - 1
            };
            updated = true;

            // Quando o timer zera
            if (newStates[alertId].timeRemaining === 0) {
              newStates[alertId].timerActive = false;
              
              if (state.currentLevel === 0) {
                // Acabou o tempo de confirmação, vai para escalação
                newStates[alertId].status = 'escalating';
                toast({
                  title: "Tempo de confirmação esgotado",
                  description: `Chamado ${alertId} pode iniciar escalação`,
                  variant: "destructive",
                });
              } else if (state.currentLevel < 4) {
                // Acabou o tempo da escalação atual, mantém no status de escalação para mostrar botão
                toast({
                  title: "Tempo de escalação esgotado",
                  description: `Escalação ${state.currentLevel} do chamado ${alertId} finalizada`,
                  variant: "destructive",
                });
              } else {
                // Todas as escalações foram executadas
                newStates[alertId].status = 'completed';
                toast({
                  title: "Processo finalizado",
                  description: `Todas as escalações do chamado ${alertId} foram executadas`,
                });
              }
            }
          }
        });

        return updated ? newStates : prev;
      });
    }, 1000);

    return () => clearInterval(interval);
  }, []);

  // Função para iniciar confirmação
  const startConfirmation = useCallback((alertId: string) => {
    setEscalationStates(prev => ({
      ...prev,
      [alertId]: {
        status: 'pending',
        currentLevel: 0,
        timeRemaining: 1 * 10, // 20 minutos
        timerActive: true,
        isAttended: false,
        observations: ''
      }
    }));
    
    // Inicializa o campo de observações de confirmação
    setConfirmationObservations(prev => ({
      ...prev,
      [alertId]: ''
    }));
    
    toast({
      title: "Confirmação iniciada",
      description: "Aguardando confirmação por 20 minutos",
    });
  }, []);

  // Função para confirmar recebimento
  const confirmReceived = useCallback((alertId: string) => {
    const observation = confirmationObservations[alertId] || '';
    
    setEscalationStates(prev => ({
      ...prev,
      [alertId]: {
        ...prev[alertId],
        status: 'confirmed',
        timerActive: false,
        timeRemaining: 0,
        observations: observation
      }
    }));

    // Limpa o campo de observações após confirmação
    setConfirmationObservations(prev => ({
      ...prev,
      [alertId]: ''
    }));

    toast({
      title: "Confirmação recebida",
      description: "Processo de confirmação finalizado com sucesso",
    });
  }, [confirmationObservations]);

  // Função para iniciar escalação
  const startEscalation = useCallback((alertId: string, level: 1 | 2 | 3 | 4) => {
    setEscalationStates(prev => ({
      ...prev,
      [alertId]: {
        ...prev[alertId],
        status: 'escalating',
        currentLevel: level,
        timeRemaining: 1 * 40, // 10 minutos
        timerActive: true
      }
    }));

    const levelNames = { 1: 'primeira', 2: 'segunda', 3: 'terceira', 4: 'quarta' };
    toast({
      title: `${levelNames[level]} escalação iniciada`,
      description: `Timer de 10 minutos ativado`,
    });
  }, []);

  // Função para marcar como atendido
  const markAsAttended = useCallback((alertId: string, attended: boolean, observations: string) => {
    setEscalationStates(prev => ({
      ...prev,
      [alertId]: {
        ...prev[alertId],
        isAttended: attended,
        observations,
        status: attended ? 'completed' : prev[alertId].status,
        timerActive: attended ? false : prev[alertId].timerActive
      }
    }));

    if (attended) {
      toast({
        title: "Escalação atendida",
        description: "Processo finalizado com sucesso",
      });
    }
  }, []);

  // Função para avançar para próxima escalação quando "Não Atendida"
  const advanceToNextEscalation = useCallback((alertId: string) => {
    setEscalationStates(prev => {
      const currentState = prev[alertId];
      if (currentState && currentState.currentLevel < 4) {
        const nextLevel = (currentState.currentLevel + 1) as 1 | 2 | 3 | 4;
        const levelNames = { 1: 'primeira', 2: 'segunda', 3: 'terceira', 4: 'quarta' };
        
        toast({
          title: `${levelNames[nextLevel]} escalação iniciada`,
          description: `Timer de 10 minutos ativado`,
        });

        return {
          ...prev,
          [alertId]: {
            ...currentState,
            currentLevel: nextLevel,
            timeRemaining: 10 * 60, // 10 minutos
            timerActive: true,
            isAttended: false
          }
        };
      }
      return prev;
    });
  }, []);

  // Função para formatar tempo
  const formatTime = (seconds: number) => {
    const minutes = Math.floor(seconds / 60);
    const remainingSeconds = seconds % 60;
    return `${minutes.toString().padStart(2, '0')}:${remainingSeconds.toString().padStart(2, '0')}`;
  };

  // Função para lidar com clique no cabeçalho da coluna
  const handleSort = (field: SortField) => {
    if (sortField === field) {
      // Se já está ordenando por este campo, alterna a direção
      if (sortDirection === 'asc') {
        setSortDirection('desc');
      } else if (sortDirection === 'desc') {
        setSortDirection(null);
        setSortField('chamado'); // volta para o padrão
      } else {
        setSortDirection('asc');
      }
    } else {
      // Se é um campo diferente, começa com ascendente
      setSortField(field);
      setSortDirection('asc');
    }
  };

  // Função para obter o ícone de ordenação
  const getSortIcon = (field: SortField) => {
    if (sortField !== field) {
      return <ArrowUpDown className="h-4 w-4 ml-1 opacity-50" />;
    }
    if (sortDirection === 'asc') {
      return <ArrowUp className="h-4 w-4 ml-1" />;
    }
    if (sortDirection === 'desc') {
      return <ArrowDown className="h-4 w-4 ml-1" />;
    }
    return <ArrowUpDown className="h-4 w-4 ml-1 opacity-50" />;
  };

  // Função para formatar data de forma segura
  const formatDate = (dateString: string) => {
    if (!dateString || dateString === '' || dateString === 'null' || dateString === 'undefined') {
      return '-';
    }

    try {
      let date: Date;
      const cleanString = String(dateString).trim();

      console.log('Formatando data:', cleanString); // Debug

      // Caso 1: Timestamp em milissegundos
      if (/^\d{13}$/.test(cleanString)) {
        date = new Date(parseInt(cleanString));
      }
      // Caso 2: Timestamp em segundos  
      else if (/^\d{10}$/.test(cleanString)) {
        date = new Date(parseInt(cleanString) * 1000);
      }
      // Caso 3: Formato brasileiro dd/mm/yyyy ou dd/mm/yyyy hh:mm:ss
      else if (/^\d{2}\/\d{2}\/\d{4}/.test(cleanString)) {
        const parts = cleanString.split(' ');
        const datePart = parts[0];
        const timePart = parts[1] || '00:00:00';

        const [day, month, year] = datePart.split('/');
        const [hour, minute, second] = timePart.split(':');

        date = new Date(
          parseInt(year),
          parseInt(month) - 1, // mês é 0-indexed
          parseInt(day),
          parseInt(hour || '0'),
          parseInt(minute || '0'),
          parseInt(second || '0')
        );
      }
      // Caso 4: ISO string ou outros formatos padrão
      else {
        date = new Date(cleanString);
      }

      // Verifica se a data é válida
      if (isNaN(date.getTime())) {
        console.warn('Data inválida após parsing:', cleanString);
        return cleanString; // Retorna o valor original
      }

      // Verifica se a data é muito antiga ou muito futura (validação básica)
      const year = date.getFullYear();
      if (year < 1900 || year > 2100) {
        console.warn('Data fora do range esperado:', cleanString);
        return cleanString;
      }

      return date.toLocaleString('pt-BR', {
        day: '2-digit',
        month: '2-digit',
        year: 'numeric',
        hour: '2-digit',
        minute: '2-digit',
        second: '2-digit',
      });
    } catch (error) {
      console.error('Erro ao formatar data:', error, 'Valor original:', dateString);
      return String(dateString); // Garante que retorna string
    }
  };

  // Função para formatar o status "Acionado"
  const formatAcionadoStatus = (acionado: string) => {
    if (!acionado) return { text: '-', isOk: false };

    const upperAcionado = acionado.toUpperCase();
    if (upperAcionado === 'OK') {
      return { text: 'ACIONADO', isOk: true };
    } else if (upperAcionado === 'NOK') {
      return { text: 'NÃO ACIONADO', isOk: false };
    }

    return { text: acionado, isOk: false };
  };

  // Dados ordenados e paginados
  const { sortedAndPaginatedData, totalPages } = useMemo(() => {
    let sortedData = [...alertData];

    // Aplica ordenação se houver campo e direção definidos
    if (sortField && sortDirection) {
      sortedData.sort((a, b) => {
        let aValue: any = a[sortField];
        let bValue: any = b[sortField];

        // Tratamento especial para diferentes tipos de dados
        if (sortField === 'chamado') {
          aValue = parseInt(a.chamado) || 0;
          bValue = parseInt(b.chamado) || 0;
        } else if (sortField === 'abertura_chamado') {
          aValue = new Date(a.abertura_chamado).getTime() || 0;
          bValue = new Date(b.abertura_chamado).getTime() || 0;
        } else {
          // Para strings, converte para minúsculo para ordenação case-insensitive
          aValue = String(aValue).toLowerCase();
          bValue = String(bValue).toLowerCase();
        }

        if (aValue < bValue) {
          return sortDirection === 'asc' ? -1 : 1;
        }
        if (aValue > bValue) {
          return sortDirection === 'asc' ? 1 : -1;
        }
        return 0;
      });
    } else {
      // Ordenação padrão por chamado decrescente
      sortedData.sort((a, b) => {
        const chamadoA = parseInt(a.chamado) || 0;
        const chamadoB = parseInt(b.chamado) || 0;
        return chamadoB - chamadoA;
      });
    }

    // Calcula paginação
    const startIndex = (currentPage - 1) * itemsPerPage;
    const endIndex = startIndex + itemsPerPage;
    const paginatedData = sortedData.slice(startIndex, endIndex);
    const totalPages = Math.ceil(sortedData.length / itemsPerPage);

    return {
      sortedAndPaginatedData: paginatedData,
      totalPages
    };
  }, [alertData, currentPage, itemsPerPage, sortField, sortDirection]);

  // Reset página quando dados mudam
  useEffect(() => {
    setCurrentPage(1);
  }, [alertData]);

  // Busca os incidentes acionados no DynamoDB via API
  useEffect(() => {
    const fetchAcionados = async () => {
      try {
        const res = await fetch('https://f6ffk8e9fe.execute-api.us-east-1.amazonaws.com/prod/chatacionados');
        if (!res.ok) throw new Error(`Erro ao buscar acionados: ${res.status}`);
        const data: { chamado: string }[] = await res.json();
        setAcionadosSet(new Set(data.map(item => item.chamado.toString())));
      } catch (error) {
        console.error(error);
        toast({
          title: 'Erro ao buscar acionados',
          description: 'Não foi possível carregar os incidentes acionados',
          variant: 'destructive',
        });
      }
    };
    fetchAcionados();
  }, []);

  const handleAcknowledgment = async (alert: AlertData) => {
    try {
      const response = await fetch(
        "https://f6ffk8e9fe.execute-api.us-east-1.amazonaws.com/prod/webhook"
      );
      const data = await response.json();

      // Procura o grupo correspondente
      const grupoEntry = data.grupos.find(
        (g: any) => g.grupo_chamado === alert.grupo_chamado
      );

      if (!grupoEntry || !grupoEntry.webhooks.length) {
        toast({
          title: "Webhook não configurado",
          description: `Configure o webhook para a grupo_chamado ${alert.grupo_chamado}`,
          variant: "destructive",
        });
        return;
      }

      // Pega o primeiro webhook ativo
      const activeWebhook = grupoEntry.webhooks.find((w: any) => w.ativo);
      if (!activeWebhook) {
        toast({
          title: "Nenhum webhook ativo",
          description: `O grupo ${alert.grupo_chamado} não possui webhooks ativos`,
          variant: "destructive",
        });
        return;
      }

      const webhookUrl = activeWebhook.url;

      // Enviar mensagem para Google Chat
      const message = {
        cards: [
          {
            header: {
              title: "<b>🚨 O CIOPs precisa da sua atenção! <b>"
            },
            sections: [
              {
                widgets: [
                  {
                    textParagraph: {
                      text: `É necessário confirmação de recebimento e ciência pelo grupo responsável.`
                    }
                  }
                ]
              },
              {
                widgets: [
                  {
                    textParagraph: {
                      text:
                        "<b>Detalhes do Evento:</b><br><br>" +
                        "<b>📌 Chamado: </b>" + alert.chamado + "<br><br>" +
                        "<b>⚠️ Severidade: </b>" + alert.severidade_chamado + "<br><br>" +
                        "<b>📰 Título: </b>" + alert.resumo_chamado + "<br><br>" +
                        "<b>📅 Abertura: </b>" + alert.abertura_chamado + "<br><br>" +
                        "<b>👥 Grupo: </b>" + alert.grupo_chamado
                    }
                  }
                ],
              },
              {
                widgets: [
                  {
                    textParagraph: {
                      text: `<b>⚠️ Atenção: </b> Na ausência de confirmação, o CIOPs dará início ao processo de escalonamento, conforme procedimento padrão.`
                    }
                  }
                ]
              },
              {
                widgets: [
                  {
                    buttons: [
                      {
                        textButton: {
                          text: "✅ Confirmar Recebimento",
                          onClick: {
                            action: {
                              actionMethodName: "confirmarAlerta",
                              parameters: [
                                { key: "chamado", value: alert.chamado },
                                { key: "grupo", value: alert.grupo_chamado }
                              ]
                            }
                          }
                        }
                      }
                    ]
                  }
                ]
              }
            ],
          },
        ],
      };

      await fetch(webhookUrl, {
        method: "POST",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify(message),
      });

      // Marca como acionado no DynamoDB
      const res = await fetch(
        "https://f6ffk8e9fe.execute-api.us-east-1.amazonaws.com/prod/chatacionados",
        {
          method: "POST",
          headers: { "Content-Type": "application/json" },
          body: JSON.stringify({ chamado: alert.chamado.toString() }),
        }
      );

      if (!res.ok) {
        const errorData = await res.json();
        throw new Error(errorData.message || "Erro ao marcar como acionado");
      }

      setAcionadosSet(prev => new Set([...prev, alert.chamado.toString()]));
      onUpdateAcknowledgment(alert.id, true);

      // Inicia processo de confirmação
      startConfirmation(alert.chamado);

      toast({
        title: "Alerta acionado com sucesso",
        description: `Mensagem enviada para a grupo_chamado ${alert.grupo_chamado}`,
      });

    } catch (error: any) {
      console.error("Erro ao acionar:", error);
      toast({
        title: "Erro ao acionar alerta",
        description: error.message || "Não foi possível concluir o acionamento",
        variant: "destructive",
      });
    }
  };

  const truncateText = (text: string, maxLength: number) => {
    return text.length > maxLength ? text.substring(0, maxLength) + '...' : text;
  };

  const handleIncidentClick = (alert: AlertData) => {
    if (alert.tipo_chamado.toLowerCase().includes('incidente')) {
      setSelectedIncident(alert);
      setCrisisDialogOpen(true);
    }
  };

  const getSeverityColor = (severity: string) => {
    return severity.includes('4')
      ? 'bg-destructive text-destructive-foreground'
      : 'bg-warning text-warning-foreground';
  };

  const [chamadoModalOpen, setChamadoModalOpen] = useState(false);
  const handleChamadoClick = (alert: AlertData) => {
    setSelectedIncident(alert);
    setChamadoModalOpen(true);
  };

  const getStatusBadgeClass = (chat: boolean) =>
    chat
      ? 'bg-success/90 text-white border-success/50 shadow-md'
      : 'bg-destructive/90 text-white border-destructive/50 shadow-md';

  const getStatusIcon = (chat: boolean) =>
    chat ? <Check className="h-4 w-4" /> : <XCircle className="h-4 w-4" />;

  const getStatusText = (chat: boolean) => {
    return chat ? 'ACIONADO VIA CHAT' : 'NÃO ACIONADO VIA CHAT';
  };

  const getStatusBadgeClass1 = (acionado: string) =>
    acionado === 'OK'
      ? 'bg-success/90 text-white border-success/50 shadow-md'
      : 'bg-destructive/90 text-white border-destructive/50 shadow-md';

  const getStatusIcon1 = (acionado: string) =>
    acionado === 'OK'
      ? <Check className="h-4 w-4" />
      : <XCircle className="h-4 w-4" />;

  const getStatusText1 = (acionado: string) =>
    acionado === 'OK'
      ? 'REGISTRADO ACIONAMENTO (SDM)'
      : 'NÃO REGISTRADO ACIONAMENTO (SDM)';

  const handlePageChange = (page: number) => {
    setCurrentPage(page);
  };

  // Renderiza o componente de confirmação/escalação
  const renderConfirmationColumn = (alert: AlertData) => {
    const state = escalationStates[alert.chamado];
    const currentObservation = confirmationObservations[alert.chamado] || '';
    
    if (!state) {
      return (
        <div className="text-center">
          <Button
            size="sm"
            variant="outline"
            onClick={() => startConfirmation(alert.chamado)}
            className="h-8 px-3 text-xs"
          >
            <Play className="h-3 w-3 mr-1" />
            Iniciar
          </Button>
        </div>
      );
    }

    switch (state.status) {
      case 'pending':
        return (
          <div className="text-center space-y-3">
            <div className="flex items-center justify-center gap-2">
              <Clock className="h-4 w-4 text-warning" />
              <span className="text-sm font-mono">{formatTime(state.timeRemaining)}</span>
            </div>
            
            <div className="space-y-2">
              <Label htmlFor={`confirmation-${alert.chamado}`} className="text-xs text-left block">
                Observações da Confirmação *
              </Label>
              <Textarea
                id={`confirmation-${alert.chamado}`}
                placeholder="Digite suas observações obrigatórias para confirmar..."
                value={currentObservation}
                onChange={(e) => {
                  setConfirmationObservations(prev => ({
                    ...prev,
                    [alert.chamado]: e.target.value
                  }));
                }}
                className="text-xs min-h-[60px] resize-none"
                required
              />
              
              <Button
                size="sm"
                variant="default"
                onClick={() => confirmReceived(alert.chamado)}
                disabled={!currentObservation.trim()}
                className="h-8 px-3 text-xs w-full disabled:opacity-50 disabled:cursor-not-allowed"
              >
                <Check className="h-3 w-3 mr-1" />
                Confirmar
              </Button>
              
              {!currentObservation.trim() && (
                <p className="text-xs text-muted-foreground text-center">
                  Preencha as observações para confirmar
                </p>
              )}
            </div>
          </div>
        );

      case 'confirmed':
        return (
          <div className="text-center space-y-2">
            <Badge variant="default" className="bg-success text-success-foreground">
              <CheckCircle className="h-3 w-3 mr-1" />
              Confirmado
            </Badge>
            {state.observations && (
              <div className="text-xs text-muted-foreground p-2 bg-muted rounded text-left">
                <strong>Observações:</strong><br />
                {state.observations}
              </div>
            )}
          </div>
        );

      case 'escalating':
        const levelNames = { 1: '1ª', 2: '2ª', 3: '3ª', 4: '4ª' };
        const currentEscalationStatus = escalationStatus[alert.chamado] || '';
        
        return (
          <div className="space-y-2">
            {state.currentLevel > 0 && (
              <div className="text-center">
                <Badge variant="destructive" className="text-xs">
                  {levelNames[state.currentLevel as keyof typeof levelNames]} Escalação
                </Badge>
                {state.timerActive && (
                  <div className="flex items-center justify-center gap-1 mt-1">
                    <Clock className="h-3 w-3 text-warning" />
                    <span className="text-xs font-mono">{formatTime(state.timeRemaining)}</span>
                  </div>
                )}
              </div>
            )}

            {!state.isAttended && (
              <>
                {state.currentLevel === 0 || (!state.timerActive && state.currentLevel < 4) ? (
                  <div className="space-y-1">
                    {/* Mostra apenas a próxima escalação na sequência */}
                    {state.currentLevel < 4 && (
                      <Button
                        size="sm"
                        variant="outline"
                        onClick={() => startEscalation(alert.chamado, (state.currentLevel + 1) as 1 | 2 | 3 | 4)}
                        className="h-6 px-2 text-xs w-full"
                      >
                        Iniciar {levelNames[(state.currentLevel + 1) as keyof typeof levelNames]} Escalação
                      </Button>
                    )}
                  </div>
                ) : (
                  <div className="space-y-2">
                    <Select
                      value={currentEscalationStatus}
                      onValueChange={(value) => {
                        setEscalationStatus(prev => ({
                          ...prev,
                          [alert.chamado]: value
                        }));
                        const attended = value === 'attended';
                        markAsAttended(alert.chamado, attended, state.observations);
                      }}
                    >
                      <SelectTrigger className="h-6 text-xs">
                        <SelectValue placeholder="Status" />
                      </SelectTrigger>
                      <SelectContent>
                        <SelectItem value="attended">Atendida</SelectItem>
                        <SelectItem value="not-attended">Não Atendida</SelectItem>
                      </SelectContent>
                    </Select>

                    {/* Botão OK para avançar quando "Não Atendida" é selecionado */}
                    {currentEscalationStatus === 'not-attended' && state.currentLevel < 4 && (
                      <Button
                        size="sm"
                        variant="default"
                        onClick={() => {
                          setEscalationStatus(prev => ({
                            ...prev,
                            [alert.chamado]: ''
                          }));
                          advanceToNextEscalation(alert.chamado);
                        }}
                        className="h-6 px-2 text-xs w-full"
                      >
                        <Check className="h-3 w-3 mr-1" />
                        OK - Próxima Escalação
                      </Button>
                    )}
                    
                    <Textarea
                      placeholder="Observações..."
                      value={state.observations}
                      onChange={(e) => {
                        setEscalationStates(prev => ({
                          ...prev,
                          [alert.chamado]: {
                            ...prev[alert.chamado],
                            observations: e.target.value
                          }
                        }));
                      }}
                      className="text-xs min-h-[60px]"
                    />
                  </div>
                )}
              </>
            )}
          </div>
        );

      case 'completed':
        return (
          <div className="text-center">
            <Badge variant="default" className="bg-success text-success-foreground">
              <CheckCircle className="h-3 w-3 mr-1" />
              Finalizado
            </Badge>
            {state.observations && (
              <div className="text-xs text-muted-foreground p-2 bg-muted rounded text-left mt-2">
                <strong>Observações:</strong><br />
                {state.observations}
              </div>
            )}
          </div>
        );

      default:
        return null;
    }
  };

// src/api/websocket.ts
type WSMessage = {
  action: string;
  [key: string]: any;
};

class WebSocketService {
  private socket: WebSocket | null = null;
  private listeners: ((msg: WSMessage) => void)[] = [];
  private endpoint: string | null = null;

  connect(endpoint: string) {
    if (this.socket && this.socket.readyState === WebSocket.OPEN) {
      return;
    }

    this.endpoint = endpoint;
    this.socket = new WebSocket(endpoint);

    this.socket.onopen = () => {
      console.log("[WS] Conectado:", endpoint);
    };

    this.socket.onmessage = (event) => {
      try {
        const msg: WSMessage = JSON.parse(event.data);
        this.listeners.forEach((cb) => cb(msg));
      } catch (e) {
        console.error("[WS] Erro ao parsear mensagem:", e);
      }
    };

    this.socket.onclose = () => {
      console.warn("[WS] Conexão fechada");
      // opcional: reconectar
      setTimeout(() => {
        if (this.endpoint) this.connect(this.endpoint);
      }, 3000);
    };

    this.socket.onerror = (err) => {
      console.error("[WS] Erro:", err);
    };
  }

  subscribe(cb: (msg: WSMessage) => void) {
    this.listeners.push(cb);
    return () => {
      this.listeners = this.listeners.filter((l) => l !== cb);
    };
  }

  send(action: string, payload: any) {
    if (!this.socket || this.socket.readyState !== WebSocket.OPEN) {
      console.warn("[WS] Não conectado, não foi possível enviar:", action);
      return;
    }
    this.socket.send(JSON.stringify({ action, ...payload }));
  }
}

export const ws = new WebSocketService();



// src/api/websocket.ts
type WSMessage = {
  action: string;
  [key: string]: any;
};

class WebSocketService {
  private socket: WebSocket | null = null;
  private listeners: ((msg: WSMessage) => void)[] = [];
  private endpoint: string | null = null;

  connect(endpoint: string) {
    if (this.socket && this.socket.readyState === WebSocket.OPEN) {
      return;
    }

    this.endpoint = endpoint;
    this.socket = new WebSocket(endpoint);

    this.socket.onopen = () => {
      console.log("[WS] Conectado:", endpoint);
    };

    this.socket.onmessage = (event) => {
      try {
        const msg: WSMessage = JSON.parse(event.data);
        this.listeners.forEach((cb) => cb(msg));
      } catch (e) {
        console.error("[WS] Erro ao parsear mensagem:", e);
      }
    };

    this.socket.onclose = () => {
      console.warn("[WS] Conexão fechada");
      // opcional: reconectar
      setTimeout(() => {
        if (this.endpoint) this.connect(this.endpoint);
      }, 3000);
    };

    this.socket.onerror = (err) => {
      console.error("[WS] Erro:", err);
    };
  }

  subscribe(cb: (msg: WSMessage) => void) {
    this.listeners.push(cb);
    return () => {
      this.listeners = this.listeners.filter((l) => l !== cb);
    };
  }

  send(action: string, payload: any) {
    if (!this.socket || this.socket.readyState !== WebSocket.OPEN) {
      console.warn("[WS] Não conectado, não foi possível enviar:", action);
      return;
    }
    this.socket.send(JSON.stringify({ action, ...payload }));
  }
}

export const ws = new WebSocketService();





// src/store/useChamadoStore.ts
import { create } from "zustand";
import { ws } from "../api/websocket";

interface Chamado {
  chamado: number;
  status?: string;
  operador?: string;
  observacoes?: Record<string, string>; // por etapa
  timerStart?: number | null;
  timerEnd?: number | null;
  duration?: number | null;
}

interface ChamadoState {
  chamados: Record<number, Chamado>;
  setChamado: (id: number, data: Partial<Chamado>) => void;
  updateCampo: (id: number, campo: keyof Chamado, valor: any) => void;
  init: (id: number, endpoint: string) => void;
  sendUpdate: (id: number, campo: string, valor: any) => void;
}

export const useChamadoStore = create<ChamadoState>((set, get) => ({
  chamados: {},

  setChamado: (id, data) =>
    set((state) => ({
      chamados: { ...state.chamados, [id]: { ...state.chamados[id], ...data } },
    })),

  updateCampo: (id, campo, valor) =>
    set((state) => ({
      chamados: {
        ...state.chamados,
        [id]: { ...state.chamados[id], [campo]: valor },
      },
    })),

  init: (id, endpoint) => {
    if (!ws) return;

    ws.connect(endpoint);

    ws.subscribe((msg) => {
      if (msg.chamado !== id) return;

      if (
        ["currentState", "statusUpdated", "timerStarted", "operadorUpdated", "observacaoUpdated"].includes(
          msg.action
        )
      ) {
        get().setChamado(id, msg);
      }
    });

    ws.send("getState", { chamado: id });
  },

  sendUpdate: (id, campo, valor) => {
    const actionMap: Record<string, string> = {
      status: "updateStatus",
      operador: "updateOperador",
      observacoes: "updateObservacao",
    };

    const action = actionMap[campo];
    if (!action) {
      console.warn("[Store] Campo não mapeado para update:", campo);
      return;
    }

    ws.send(action, { chamado: id, [campo]: valor });
  },
}));










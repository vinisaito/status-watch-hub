// src/api/websocket.ts

// Definição genérica para mensagens recebidas
export interface WSMessage {
  action: string;
  [key: string]: any;
}

class WebSocketService {
  private socket: WebSocket | null = null;
  private listeners: ((msg: WSMessage) => void)[] = [];
  private endpoint: string | null = null;

  connect(endpoint: string) {
    // evita abrir mais de uma conexão se já estiver ativa
    if (this.socket && this.socket.readyState === WebSocket.OPEN) {
      return;
    }

    this.endpoint = endpoint;
    this.socket = new WebSocket(endpoint);

    this.socket.onopen = () => {
      console.log("[WS] Conectado:", endpoint);
    };

    this.socket.onmessage = (event: MessageEvent) => {
      try {
        const msg: WSMessage = JSON.parse(event.data);
        this.listeners.forEach((cb) => cb(msg));
      } catch (e) {
        console.error("[WS] Erro ao parsear mensagem:", e);
      }
    };

    this.socket.onclose = () => {
      console.warn("[WS] Conexão fechada");
      // opcional: reconectar automaticamente
      setTimeout(() => {
        if (this.endpoint) this.connect(this.endpoint);
      }, 3000);
    };

    this.socket.onerror = (err) => {
      console.error("[WS] Erro:", err);
    };
  }

  subscribe(cb: (msg: WSMessage) => void) {
    this.listeners.push(cb);
    return () => {
      this.listeners = this.listeners.filter((l) => l !== cb);
    };
  }

  send(action: string, payload: Record<string, any>) {
    if (!this.socket || this.socket.readyState !== WebSocket.OPEN) {
      console.warn("[WS] Não conectado, não foi possível enviar:", action);
      return;
    }
    this.socket.send(JSON.stringify({ action, ...payload }));
  }
}

// Instância única exportada
export const ws = new WebSocketService();

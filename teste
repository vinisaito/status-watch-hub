// src/services/websocket.ts
import { useChamadoStore } from "@/store/useChamadoStore";

const WS_URL = "wss://SEU_ENDPOINT.execute-api.us-east-1.amazonaws.com/dev";

class WebSocketService {
  private socket: WebSocket | null = null;

  connect() {
    if (this.socket) return;

    this.socket = new WebSocket(WS_URL);

    this.socket.onopen = () => {
      console.log("[WS] Conectado");
    };

    this.socket.onmessage = (event) => {
      const msg = JSON.parse(event.data);
      console.log("[WS] Mensagem recebida", msg);

      // Atualiza store
      if (msg.type === "statusUpdated") {
        useChamadoStore.getState().updateChamado(msg.chamadoId, msg.state);
      }

      if (msg.type === "currentState") {
        useChamadoStore.getState().setChamados(msg.data);
      }
    };

    this.socket.onclose = () => {
      console.log("[WS] Desconectado");
      this.socket = null;
      setTimeout(() => this.connect(), 3000); // tenta reconectar
    };

    this.socket.onerror = (err) => {
      console.error("[WS] Erro", err);
    };
  }

  send(msg: object) {
    if (this.socket?.readyState === WebSocket.OPEN) {
      this.socket.send(JSON.stringify(msg));
    } else {
      console.warn("[WS] Não conectado");
    }
  }
}

export const wsService = new WebSocketService();





// src/store/useChamadoStore.ts
import { create } from "zustand";
import { wsService } from "@/services/websocket";

interface ChamadoState {
  [chamadoId: string]: any; // você pode tipar melhor com seu EscalationState
}

interface Store {
  chamados: ChamadoState;
  setChamados: (data: ChamadoState) => void;
  updateChamado: (id: string, state: any) => void;

  startChamado: (id: string) => void;
  confirmChamado: (id: string, obs: string) => void;
  escalateChamado: (id: string, level: number) => void;
}

export const useChamadoStore = create<Store>((set) => ({
  chamados: {},

  setChamados: (data) => set({ chamados: data }),

  updateChamado: (id, state) =>
    set((s) => ({
      chamados: { ...s.chamados, [id]: state },
    })),

  startChamado: (id) => {
    wsService.send({ action: "start", chamadoId: id });
  },

  confirmChamado: (id, obs) => {
    wsService.send({ action: "confirm", chamadoId: id, observations: obs });
  },

  escalateChamado: (id, level) => {
    wsService.send({ action: "escalate", chamadoId: id, level });
  },
}));












import React, { useEffect, useState } from "react";
import { createClient } from "graphql-ws";

const APPSYNC_URL = "wss://SEU_API.appsync-realtime-api.us-east-1.amazonaws.com/graphql";
const APPSYNC_API_KEY = "SUA_API_KEY";
const HTTP_URL = "https://SEU_API.appsync-api.us-east-1.amazonaws.com/graphql";

export default function Timer() {
  const [time, setTime] = useState<number>(0);
  const [running, setRunning] = useState(false);

  // ---------------------------
  // 1. SUBSCRIPTION
  // ---------------------------
  useEffect(() => {
    const wsClient = createClient({
      url: APPSYNC_URL,
      connectionParams: {
        headers: {
          "x-api-key": APPSYNC_API_KEY,
        },
      },
    });

    const unsubscribe = wsClient.subscribe(
      {
        query: `subscription OnTimerUpdated {
          onTimerUpdated {
            chamado
            timerStart
            status
          }
        }`,
      },
      {
        next: (data) => {
          console.log("üì° Sub msg:", data);
          if (data.data?.onTimerUpdated) {
            const { timerStart } = data.data.onTimerUpdated;
            setTime(Math.floor(Date.now() / 1000) - timerStart);
            setRunning(true);
          }
        },
        error: (err) => console.error("‚ùå Subscription error:", err),
        complete: () => console.log("‚úÖ Subscription completed"),
      }
    );

    return () => {
      unsubscribe();
      wsClient.dispose();
    };
  }, []);

  // ---------------------------
  // 2. START TIMER (mutation via fetch)
  // ---------------------------
  const startTimer = async () => {
    const mutation = `
      mutation StartTimer($chamado: Int!) {
        startTimer(chamado: $chamado) {
          chamado
          timerStart
          status
        }
      }
    `;

    await fetch(HTTP_URL, {
      method: "POST",
      headers: {
        "Content-Type": "application/json",
        "x-api-key": APPSYNC_API_KEY,
      },
      body: JSON.stringify({
        query: mutation,
        variables: { chamado: 1 }, // exemplo fixo
      }),
    });
  };

  // ---------------------------
  // 3. TIMER LOCAL
  // ---------------------------
  useEffect(() => {
    let interval: NodeJS.Timeout;
    if (running) {
      interval = setInterval(() => {
        setTime((prev) => prev + 1);
      }, 1000);
    }
    return () => clearInterval(interval);
  }, [running]);

  return (
    <div className="p-4">
      <h1 className="text-xl font-bold">Timer</h1>
      <p>‚è± Tempo: {time}s</p>
      <button
        onClick={startTimer}
        className="mt-2 px-4 py-2 bg-blue-500 text-white rounded-lg"
      >
        Start Timer
      </button>
    </div>
  );
}

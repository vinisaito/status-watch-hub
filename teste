import React, { useEffect, useRef, useState } from "react";

interface Alert {
  chamado: string;
  startedAt?: string;
  durationMinutes?: number;
  timerActive?: boolean;
  localTimeRemaining?: number;
}

const WS_ENDPOINT = "wss://SEU_ENDPOINT.execute-api.us-east-1.amazonaws.com/dev";
const REST_ENDPOINT = "https://f6ffk8e9fe.execute-api.us-east-1.amazonaws.com/prod/dados";

const Timer: React.FC = () => {
  const ws = useRef<WebSocket | null>(null);
  const [alerts, setAlerts] = useState<Alert[]>([]);

  // Buscar alertas iniciais
  useEffect(() => {
    fetch(REST_ENDPOINT)
      .then((res) => res.json())
      .then((data) => {
        if (Array.isArray(data)) {
          setAlerts(
            data.map((a) => ({
              ...a,
              localTimeRemaining: a.durationMinutes ? a.durationMinutes * 60 : 0,
            }))
          );
        }
      })
      .catch((err) => console.error(err));
  }, []);

  // Conectar WebSocket
  useEffect(() => {
    ws.current = new WebSocket(WS_ENDPOINT);

    ws.current.onopen = () => console.log("✅ WebSocket conectado");

    ws.current.onmessage = (msg) => {
      const data = JSON.parse(msg.data);
      if (data.type === "TIMER_UPDATED") {
        setAlerts((prev) =>
          prev.map((alert) =>
            alert.chamado === data.chamado
              ? {
                  ...alert,
                  timerActive: data.timerActive,
                  startedAt: data.startedAt,
                  durationMinutes: data.durationMinutes ?? 15,
                  localTimeRemaining: data.timerActive
                    ? (data.durationMinutes ?? 15) * 60
                    : alert.localTimeRemaining ?? 0,
                }
              : alert
          )
        );
      }
    };

    ws.current.onerror = (err) => console.error(err);
    ws.current.onclose = () => console.log("⚠️ WebSocket desconectado");

    return () => ws.current?.close();
  }, []);

  // Atualizar cronômetro local
  useEffect(() => {
    const interval = setInterval(() => {
      setAlerts((prev) =>
        prev.map((alert) => {
          if (alert.timerActive && alert.startedAt) {
            const startedAt = new Date(alert.startedAt).getTime();
            const durationMs = (alert.durationMinutes ?? 15) * 60 * 1000;
            const elapsed = Date.now() - startedAt;
            const remaining = Math.max(0, durationMs - elapsed);
            return { ...alert, localTimeRemaining: Math.floor(remaining / 1000) };
          }
          return alert;
        })
      );
    }, 1000);

    return () => clearInterval(interval);
  }, [alerts]);

  // Iniciar / pausar cronômetro
  const toggleTimer = (alert: Alert) => {
    if (!ws.current || ws.current.readyState !== WebSocket.OPEN) return;
    const action = alert.timerActive ? "pauseTimer" : "startTimer";
    ws.current.send(JSON.stringify({ action, chamado: alert.chamado }));
  };

  return (
    <div style={{ padding: "20px" }}>
      <h1>Painel de Alertas</h1>
      {alerts.map((alert) => (
        <div key={alert.chamado} style={{ border: "1px solid #ccc", padding: "10px", marginBottom: "10px" }}>
          <h2>Alerta {alert.chamado}</h2>
          <p>
            Tempo restante:{" "}
            {alert.localTimeRemaining
              ? `${Math.floor(alert.localTimeRemaining / 60)
                  .toString()
                  .padStart(2, "0")}:${(alert.localTimeRemaining % 60).toString().padStart(2, "0")}`
              : "00:00"}
          </p>
          <button onClick={() => toggleTimer(alert)}>
            {alert.timerActive ? "Pausar" : "Iniciar"} cronômetro
          </button>
        </div>
      ))}
    </div>
  );
};

export default Timer;

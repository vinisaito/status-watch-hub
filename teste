import boto3
import json
from datetime import datetime, timezone

DDB = boto3.resource("dynamodb", region_name="us-east-1")
ACOMP_TABLE = DDB.Table("painelmonitoracao_acompanhamento")
CONN_TABLE = DDB.Table("painelmonitoracao_connections")

apigw = boto3.client('apigatewaymanagementapi', endpoint_url="https://SEU_ENDPOINT.execute-api.us-east-1.amazonaws.com/prod")

def lambda_handler(event, context):
    route = event.get("requestContext", {}).get("routeKey")
    connection_id = event.get("requestContext", {}).get("connectionId")

    if route == "$connect":
        return {"statusCode": 200}

    elif route == "$disconnect":
        # Remove conexão
        CONN_TABLE.delete_item(Key={"connectionId": connection_id})
        return {"statusCode": 200}

    elif route == "sendMessage":
        body = json.loads(event.get("body", "{}"))
        action = body.get("action")
        chamado = body.get("chamado")

        if not chamado:
            return {"statusCode": 400, "body": "Chamado obrigatório"}

        # Atualiza DynamoDB do chamado
        if action == "startTimer":
            startedAt = datetime.utcnow().replace(tzinfo=timezone.utc).isoformat()
            ACOMP_TABLE.update_item(
                Key={"chamado": str(chamado)},
                UpdateExpression="SET timerActive = :t, startedAt = :s",
                ExpressionAttributeValues={":t": True, ":s": startedAt}
            )
        elif action == "pauseTimer":
            ACOMP_TABLE.update_item(
                Key={"chamado": str(chamado)},
                UpdateExpression="SET timerActive = :t",
                ExpressionAttributeValues={":t": False}
            )
        else:
            return {"statusCode": 400, "body": "Ação inválida"}

        # Broadcast para todos os clientes
        connections = CONN_TABLE.scan().get("Items", [])
        for conn in connections:
            try:
                apigw.post_to_connection(
                    Data=json.dumps({
                        "type": "updateTimer",
                        "chamado": chamado,
                        "timerActive": action == "startTimer",
                        "startedAt": startedAt if action == "startTimer" else None
                    }),
                    ConnectionId=conn["connectionId"]
                )
            except apigw.exceptions.GoneException:
                # Remove conexão inválida
                CONN_TABLE.delete_item(Key={"connectionId": conn["connectionId"]})

        return {"statusCode": 200}

    return {"statusCode": 200}

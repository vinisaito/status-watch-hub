import React, { useEffect, useState } from "react";

interface ActionItem {
  id: string;
  nome: string;
  status: string;
}

interface Props {
  data: ActionItem[];
}

export default function ActionTable({ data }: Props) {
  const [timers, setTimers] = useState<{ [id: string]: number }>({});

  // --- Conexão WebSocket ---
  useEffect(() => {
    const ws = new WebSocket("wss://SEU-ENDPOINT-WEBSOCKET");

    ws.onopen = () => {
      console.log("✅ Conectado ao WebSocket");
    };

    ws.onmessage = (event) => {
      try {
        const msg = JSON.parse(event.data);

        // Exemplo esperado do servidor:
        // { "id": "123", "remainingTime": 90 }
        if (msg.id && typeof msg.remainingTime === "number") {
          setTimers((prev) => ({
            ...prev,
            [msg.id]: msg.remainingTime,
          }));
        }
      } catch (err) {
        console.error("Erro ao processar mensagem WS:", err);
      }
    };

    ws.onerror = (err) => {
      console.error("❌ Erro no WebSocket:", err);
    };

    ws.onclose = () => {
      console.log("⚠️ WebSocket fechado");
    };

    return () => {
      ws.close();
    };
  }, []);

  // --- Decremento local (para andar sozinho) ---
  useEffect(() => {
    const interval = setInterval(() => {
      setTimers((prev) => {
        const updated: { [id: string]: number } = {};
        Object.keys(prev).forEach((id) => {
          updated[id] = Math.max(prev[id] - 1, 0);
        });
        return { ...prev, ...updated };
      });
    }, 1000);

    return () => clearInterval(interval);
  }, []);

  // --- Função para formatar em MM:SS ---
  const formatTime = (seconds: number) => {
    const m = Math.floor(seconds / 60)
      .toString()
      .padStart(2, "0");
    const s = Math.floor(seconds % 60)
      .toString()
      .padStart(2, "0");
    return `${m}:${s}`;
  };

  return (
    <table className="min-w-full border-collapse border border-gray-300 text-sm">
      <thead>
        <tr className="bg-gray-100">
          <th className="border px-2 py-1">ID</th>
          <th className="border px-2 py-1">Nome</th>
          <th className="border px-2 py-1">Status</th>
          <th className="border px-2 py-1">Acionamento</th>
        </tr>
      </thead>
      <tbody>
        {data.map((item) => (
          <tr key={item.id}>
            <td className="border px-2 py-1">{item.id}</td>
            <td className="border px-2 py-1">{item.nome}</td>
            <td className="border px-2 py-1">{item.status}</td>
            <td className="border px-2 py-1 text-center">
              {timers[item.id] !== undefined
                ? formatTime(timers[item.id])
                : "00:00"}
            </td>
          </tr>
        ))}
      </tbody>
    </table>
  );
}

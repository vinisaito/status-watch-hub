import * as React from "react"
import { Slot } from "@radix-ui/react-slot"
import { cva, type VariantProps } from "class-variance-authority"
import { cn } from "@/lib/utils"

const escalationButtonVariants = cva(
  "inline-flex items-center justify-center rounded-lg text-sm font-medium transition-all duration-300 focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 transform hover:scale-105 active:scale-95",
  {
    variants: {
      variant: {
        pending: "bg-gradient-warning text-warning-foreground shadow-md hover:shadow-lg",
        confirmed: "bg-gradient-success text-success-foreground shadow-md hover:shadow-lg",
        escalating: "bg-gradient-danger text-destructive-foreground shadow-md hover:shadow-lg animate-pulse",
        completed: "bg-gradient-primary text-primary-foreground shadow-md hover:shadow-lg",
        timer: "bg-amber-100 text-amber-800 border border-amber-200 shadow-sm hover:shadow-md",
        action: "bg-white text-foreground border border-border shadow-sm hover:shadow-md hover:bg-accent"
      },
      size: {
        default: "h-8 px-3 py-2",
        sm: "h-6 px-2 py-1 text-xs",
        lg: "h-10 px-4 py-3",
        icon: "h-8 w-8"
      },
    },
    defaultVariants: {
      variant: "action",
      size: "default",
    },
  }
)

export interface EscalationButtonProps
  extends React.ButtonHTMLAttributes<HTMLButtonElement>,
    VariantProps<typeof escalationButtonVariants> {
  asChild?: boolean
}

const EscalationButton = React.forwardRef<HTMLButtonElement, EscalationButtonProps>(
  ({ className, variant, size, asChild = false, ...props }, ref) => {
    const Comp = asChild ? Slot : "button"
    return (
      <Comp
        className={cn(escalationButtonVariants({ variant, size, className }))}
        ref={ref}
        {...props}
      />
    )
  }
)
EscalationButton.displayName = "EscalationButton"

export { EscalationButton, escalationButtonVariants }

// ActionTable.tsx
import React, { useState, useMemo, useCallback, useEffect, useRef } from 'react';
import { Check, AlertTriangle, Timer, Play, CheckCircle, Edit3, Search, ChevronLeft, ChevronRight, ArrowUpDown, ArrowUp, ArrowDown } from 'lucide-react';
import { Card, CardContent, CardHeader } from '@/components/ui/card';
import { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from '@/components/ui/table';
import { Badge } from '@/components/ui/badge';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { Label } from '@/components/ui/label';
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';
import { toast } from '@/hooks/use-toast';
import { Tooltip, TooltipContent, TooltipProvider, TooltipTrigger } from '@/components/ui/tooltip';

// Hooks customizados
import { useEscalacao } from '@/hooks/useEscalacao';
import { useObservacoes } from '@/hooks/useObservacao';
import { useChatAcionados, useChatAcionadosTimestamps } from '@/hooks/useChatAcionados';

// Componentes
import { EscalacaoDialog } from './EscalacaoDialog';
import { ObservacaoDialog } from './ObservacaoDialog';
import { ChamadoModal } from './ChamadoModal';

interface AlertData {
  id: string;
  chamado: string;
  tipo_chamado: string;
  grupo_chamado: string;
  status_chamado: string;
  abertura_chamado: string;
  resumo_chamado: string;
  severidade_chamado: string;
  acionado: string;
  chat: boolean;
}

interface ActionTableProps {
  alertData: AlertData[];
  onUpdateAcknowledgment: (alertId: string, acknowledged: boolean) => void;
  loading: boolean;
}

type SortField = keyof AlertData;
type SortDirection = 'asc' | 'desc' | null;

const WEBSOCKET_URL = 'wss://rsgjd6wsza.execute-api.us-east-1.amazonaws.com/dev/';

type TimerEntry = {
  chamado: string;
  endTimeMs?: number | null;
  remainingSeconds?: number | null;
  updatedAt?: number;
  source?: string;
};

export const ActionTable: React.FC<ActionTableProps> = ({ alertData, onUpdateAcknowledgment, loading }) => {
  // Estados (idem ao seu)
  const [currentPage, setCurrentPage] = useState(1);
  const [searchTerm, setSearchTerm] = useState('');
  const [itemsPerPage, setItemsPerPage] = useState<number>(() => {
    const saved = sessionStorage.getItem("itemsPerPage");
    return saved ? parseInt(saved, 10) : 5;
  });
  const [sortField, setSortField] = useState<SortField>('chamado');
  const [sortDirection, setSortDirection] = useState<SortDirection>('desc');

  const [chamadoModalOpen, setChamadoModalOpen] = useState(false);
  const [selectedIncident, setSelectedIncident] = useState<AlertData | null>(null);
  const [observacaoDialogOpen, setObservacaoDialogOpen] = useState(false);
  const [selectedChamadoForEdit, setSelectedChamadoForEdit] = useState<string>('');
  const [escalacaoDialogOpen, setEscalacaoDialogOpen] = useState(false);
  const [selectedChamadoEscalacao, setSelectedChamadoEscalacao] = useState<string>('');

  const { acionadosSet, isAcionado, addAcionado } = useChatAcionados();
  const { getTimestampForChamado, hasTimestamp } = useChatAcionadosTimestamps();
  const { observacoesData, saveObservacao } = useObservacoes();
  const {
    escalacaoData,
    currentTimer,
    isTimerActive,
    currentEtapa,
    setCurrentEtapa,
    formatTime,
    iniciarEscalacao,
    avancarEtapa,
    voltarEtapa,
    finalizarEscalacao
  } = useEscalacao();

  // Timers state
  const [timers, setTimers] = useState<Record<string, TimerEntry>>({});
  const wsRef = useRef<WebSocket | null>(null);
  const reconnectTimeoutRef = useRef<number | null>(null);
  const reconnectAttemptsRef = useRef(0);
  const [tick, setTick] = useState(0);

  // --- PARSER atualizado para os tipos que você forneceu ---
  const parseIncoming = useCallback((raw: any): TimerEntry[] => {
    const out: TimerEntry[] = [];
    if (!raw) return out;

    // normaliza string JSON -> objeto
    let payload = raw;
    if (typeof raw === 'string') {
      try { payload = JSON.parse(raw); } catch { payload = raw; }
    }

    // se body for stringificado dentro de objeto (API Gateway style)
    if (payload && payload.body) {
      try {
        payload = typeof payload.body === 'string' ? JSON.parse(payload.body) : payload.body;
      } catch {}
    }
    if (payload && payload.payload) {
      payload = payload.payload;
    }

    const normalizeOne = (obj: any): TimerEntry | null => {
      if (!obj) return null;
      // chamado pode ser Number (101) ou string "101"
      const chamadoRaw = obj.chamado ?? obj.id ?? obj.chamado_id ?? obj.pk ?? obj.PK;
      if (chamadoRaw == null) return null;
      const chamado = String(chamadoRaw);
      const now = Date.now();
      const entry: TimerEntry = { chamado, updatedAt: now };

      // 1) Prefer level1 (quando houver)
      if (obj.level1_timerStart || obj.level1_duration || obj.level1_status) {
        // level1_timerStart is an ISO string according to your table
        let startMs: number | undefined;
        if (typeof obj.level1_timerStart === 'string') {
          const parsed = Date.parse(obj.level1_timerStart);
          if (!isNaN(parsed)) startMs = parsed;
        } else if (typeof obj.level1_timerStart === 'number') {
          // fallback if backend sends epoch (seconds or ms)
          startMs = obj.level1_timerStart < 1e11 ? obj.level1_timerStart * 1000 : obj.level1_timerStart;
        }
        // duration per your spec is number in seconds -> convert to ms
        let durationMs: number | undefined;
        if (obj.level1_duration != null) {
          const d = Number(obj.level1_duration);
          if (!isNaN(d)) durationMs = d * 1000; // seconds -> ms
        }
        if (startMs != null && durationMs != null) {
          entry.endTimeMs = startMs + durationMs;
          entry.source = 'level1';
          return entry;
        }
      }

      // 2) level2 fallback
      if (obj.level2_timerStart || obj.level2_duration || obj.level2_status) {
        let startMs: number | undefined;
        if (typeof obj.level2_timerStart === 'string') {
          const parsed = Date.parse(obj.level2_timerStart);
          if (!isNaN(parsed)) startMs = parsed;
        } else if (typeof obj.level2_timerStart === 'number') {
          startMs = obj.level2_timerStart < 1e11 ? obj.level2_timerStart * 1000 : obj.level2_timerStart;
        }
        let durationMs: number | undefined;
        if (obj.level2_duration != null) {
          const d = Number(obj.level2_duration);
          if (!isNaN(d)) durationMs = d * 1000;
        }
        if (startMs != null && durationMs != null) {
          entry.endTimeMs = startMs + durationMs;
          entry.source = 'level2';
          return entry;
        }
      }

      // 3) fallback: remaining_seconds, remainingTime, remaining_ms
      if (obj.remaining_ms != null) {
        const ms = Number(obj.remaining_ms);
        if (!isNaN(ms)) {
          entry.endTimeMs = Date.now() + ms;
          entry.source = 'remaining_ms';
          return entry;
        }
      }
      if (obj.remaining_seconds != null || obj.remainingTime != null) {
        const sec = Number(obj.remaining_seconds ?? obj.remainingTime);
        if (!isNaN(sec)) {
          entry.endTimeMs = Date.now() + Math.max(0, Math.floor(sec)) * 1000;
          entry.source = 'remaining_seconds';
          return entry;
        }
      }

      // 4) absolute end time fields
      const maybeEnd = obj.endsAt ?? obj.end_time ?? obj.endTime;
      if (maybeEnd != null) {
        const n = Number(maybeEnd);
        if (!isNaN(n)) {
          entry.endTimeMs = n < 1e11 ? n * 1000 : n;
          entry.source = 'end_numeric';
          return entry;
        }
        const parsed = Date.parse(String(maybeEnd));
        if (!isNaN(parsed)) {
          entry.endTimeMs = parsed;
          entry.source = 'end_string';
          return entry;
        }
      }

      return null;
    };

    if (Array.isArray(payload)) {
      for (const item of payload) {
        const norm = normalizeOne(item);
        if (norm) out.push(norm);
      }
      return out;
    }

    const single = normalizeOne(payload);
    if (single) out.push(single);
    return out;
  }, []);

  const upsertTimerEntries = useCallback((entries: TimerEntry[]) => {
    if (!entries || entries.length === 0) return;
    setTimers(prev => {
      const next = { ...prev };
      for (const e of entries) {
        const key = e.chamado;
        const existing = next[key];
        if (!existing || (e.updatedAt && (!existing.updatedAt || e.updatedAt >= existing.updatedAt))) {
          next[key] = { ...existing, ...e, updatedAt: e.updatedAt ?? Date.now() };
        }
      }
      return next;
    });
  }, []);

  // --- WebSocket connect / reconnect ---
  useEffect(() => {
    let closedByUs = false;

    function connect() {
      console.debug('[WS] connecting to', WEBSOCKET_URL);
      const ws = new WebSocket(WEBSOCKET_URL);
      wsRef.current = ws;

      ws.onopen = () => {
        console.debug('[WS] open');
        reconnectAttemptsRef.current = 0;
        toast({ title: 'WS conectado', description: 'Conexão WebSocket estabelecida', variant: 'default' });
      };

      ws.onmessage = (ev) => {
        try {
          // tenta parse automático
          let raw: any;
          try { raw = JSON.parse(ev.data); } catch { raw = ev.data; }
          console.debug('[WS] message raw:', raw);
          const parsed = parseIncoming(raw);
          if (parsed && parsed.length) {
            console.debug('[WS] parsed timers:', parsed);
            upsertTimerEntries(parsed);
          } else {
            console.debug('[WS] message não mapeada para timers:', raw);
          }
        } catch (err) {
          console.error('[WS] onmessage error', err);
        }
      };

      ws.onerror = (err) => {
        console.error('[WS] error', err);
      };

      ws.onclose = (ev) => {
        console.warn('[WS] closed', ev.code, ev.reason);
        if (!closedByUs) {
          reconnectAttemptsRef.current++;
          const backoff = Math.min(30000, 1000 * Math.pow(1.5, reconnectAttemptsRef.current));
          if (reconnectTimeoutRef.current) window.clearTimeout(reconnectTimeoutRef.current);
          reconnectTimeoutRef.current = window.setTimeout(connect, backoff);
        }
      };
    }

    connect();

    return () => {
      closedByUs = true;
      if (reconnectTimeoutRef.current) {
        window.clearTimeout(reconnectTimeoutRef.current);
        reconnectTimeoutRef.current = null;
      }
      if (wsRef.current) {
        try { wsRef.current.close(); } catch {}
        wsRef.current = null;
      }
    };
  }, [parseIncoming, upsertTimerEntries]);

  // ticker para re-render por segundo
  useEffect(() => {
    const id = window.setInterval(() => setTick(t => t + 1), 1000);
    return () => clearInterval(id);
  }, []);

  const getRemainingSeconds = useCallback((chamado: string) => {
    const t = timers[chamado];
    if (!t) return null;
    if (t.endTimeMs != null) {
      const ms = t.endTimeMs - Date.now();
      return Math.max(0, Math.ceil(ms / 1000));
    }
    return null;
  }, [timers, tick]);

  const formatDuration = useCallback((seconds: number | null) => {
    if (seconds == null) return '00:00';
    const s = Math.max(0, Math.floor(seconds));
    const hours = Math.floor(s / 3600);
    const minutes = Math.floor((s % 3600) / 60);
    const secs = s % 60;
    if (hours > 0) {
      return `${String(hours).padStart(2, '0')}:${String(minutes).padStart(2, '0')}:${String(secs).padStart(2, '0')}`;
    }
    return `${String(minutes).padStart(2, '0')}:${String(secs).padStart(2, '0')}`;
  }, []);

  // ---------- seu handleAcknowledgment e demais handlers (mantidos) ----------
  const handleAcknowledgment = useCallback(async (alert: AlertData) => {
    try {
      const response = await fetch("https://f6ffk8e9fe.execute-api.us-east-1.amazonaws.com/prod/webhook");
      const data = await response.json();

      const grupoEntry = data.grupos.find(
        (g: any) => g.grupo_chamado === alert.grupo_chamado
      );

      if (!grupoEntry || !grupoEntry.webhooks.length) {
        toast({
          title: "Webhook não configurado",
          description: `Configure o webhook para o Grupo: ${alert.grupo_chamado}`,
          variant: "destructive",
        });
        return;
      }

      const activeWebhook = grupoEntry.webhooks.find((w: any) => w.ativo);
      if (!activeWebhook) {
        toast({
          title: "Nenhum webhook ativo",
          description: `O grupo ${alert.grupo_chamado} não possui webhooks ativos`,
          variant: "destructive",
        });
        return;
      }

      const message = {
        cards: [{
          header: { title: "<b>🚨 O CIOPs precisa da sua atenção! <b>" },
          sections: [
            {
              widgets: [{
                textParagraph: {
                  text: `É necessário confirmação de recebimento e ciência pelo grupo responsável.`
                }
              }]
            },
            {
              widgets: [{
                textParagraph: {
                  text:
                    "<b>Detalhes do Evento:</b><br><br>" +
                    "<b>📌 Chamado: </b>" + alert.chamado + "<br><br>" +
                    "<b>⚠️ Severidade: </b>" + alert.severidade_chamado + "<br><br>" +
                    "<b>📰 Título: </b>" + alert.resumo_chamado + "<br><br>" +
                    "<b>📅 Abertura: </b>" + alert.abertura_chamado + "<br><br>" +
                    "<b>👥 Grupo: </b>" + alert.grupo_chamado
                }
              }]
            }
          ]
        }]
      };

      await fetch(activeWebhook.url, {
        method: "POST",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify(message),
      });

      const res = await fetch(
        "https://f6ffk8e9fe.execute-api.us-east-1.amazonaws.com/prod/chatacionados",
        {
          method: "POST",
          headers: { "Content-Type": "application/json" },
          body: JSON.stringify({ chamado: alert.chamado.toString() }),
        }
      );

      if (!res.ok) {
        const errorData = await res.json();
        throw new Error(errorData.message || "Erro ao marcar como acionado");
      }

      addAcionado(alert.chamado.toString());
      onUpdateAcknowledgment(alert.id, true);

      toast({
        title: "Alerta acionado com sucesso",
        description: `Mensagem enviada para o Grupo: ${alert.grupo_chamado}`,
      });

    } catch (error: any) {
      toast({
        title: "Erro ao acionar alerta",
        description: error.message || "Não foi possível concluir o acionamento",
        variant: "destructive",
      });
    }
  }, [addAcionado, onUpdateAcknowledgment]);

  // Handlers (abrir observacao, iniciar escalacao etc) mantidos...
  const handleOpenObservacao = useCallback((chamado: string) => {
    setSelectedChamadoForEdit(chamado);
    setObservacaoDialogOpen(true);
  }, []);

  const handleChamadoClick = useCallback((alert: AlertData) => {
    setSelectedIncident(alert);
    setChamadoModalOpen(true);
  }, []);

  const handleIniciarEscalacao = useCallback((chamado: string) => {
    iniciarEscalacao(chamado);
    setSelectedChamadoEscalacao(chamado);
    setEscalacaoDialogOpen(true);
  }, [iniciarEscalacao]);

  const handleSort = useCallback((field: SortField) => {
    if (sortField === field) {
      if (sortDirection === 'asc') {
        setSortDirection('desc');
      } else if (sortDirection === 'desc') {
        setSortDirection(null);
        setSortField('chamado');
      } else {
        setSortDirection('asc');
      }
    } else {
      setSortField(field);
      setSortDirection('asc');
    }
  }, [sortField, sortDirection]);

  const getSortIcon = useCallback((field: SortField) => {
    if (sortField !== field) {
      return <ArrowUpDown className="h-4 w-4 ml-1 opacity-50" />;
    }
    if (sortDirection === 'asc') {
      return <ArrowUp className="h-4 w-4 ml-1" />;
    }
    if (sortDirection === 'desc') {
      return <ArrowDown className="h-4 w-4 ml-1" />;
    }
    return <ArrowUpDown className="h-4 w-4 ml-1 opacity-50" />;
  }, [sortField, sortDirection]);

  const formatDate = useCallback((dateString: string) => {
    if (!dateString || dateString === '' || dateString === 'null' || dateString === 'undefined') {
      return '-';
    }
    try {
      let date: Date;
      const cleanString = String(dateString).trim();
      if (/^\d{13}$/.test(cleanString)) {
        date = new Date(parseInt(cleanString));
      } else if (/^\d{10}$/.test(cleanString)) {
        date = new Date(parseInt(cleanString) * 1000);
      } else if (/^\d{2}\/\d{2}\/\d{4}/.test(cleanString)) {
        const parts = cleanString.split(' ');
        const datePart = parts[0];
        const timePart = parts[1] || '00:00:00';
        const [day, month, year] = datePart.split('/');
        const [hour, minute, second] = timePart.split(':');
        date = new Date(
          parseInt(year),
          parseInt(month) - 1,
          parseInt(day),
          parseInt(hour || '0'),
          parseInt(minute || '0'),
          parseInt(second || '0')
        );
      } else {
        date = new Date(cleanString);
      }
      if (isNaN(date.getTime())) return cleanString;
      const year = date.getFullYear();
      if (year < 1900 || year > 2100) return cleanString;
      return date.toLocaleString('pt-BR', {
        day: '2-digit',
        month: '2-digit',
        year: 'numeric',
        hour: '2-digit',
        minute: '2-digit',
        second: '2-digit',
      });
    } catch (error) {
      return String(dateString);
    }
  }, []);

  const getSeverityColor = useCallback((severity: string) => {
    return severity.includes('4')
      ? 'bg-destructive text-destructive-foreground'
      : 'bg-yellow-500 text-yellow-950';
  }, []);

  const truncateText = useCallback((text: string, maxLength: number) => {
    return text.length > maxLength ? text.substring(0, maxLength) + '...' : text;
  }, []);

  const filteredData = useMemo(() => {
    if (!searchTerm.trim()) return alertData;
    const searchLower = searchTerm.toLowerCase().trim();
    return alertData.filter(alert =>
      Object.values(alert).some(value =>
        String(value).toLowerCase().includes(searchLower)
      )
    );
  }, [alertData, searchTerm]);

  const { sortedAndPaginatedData, totalPages } = useMemo(() => {
    let sortedData = [...filteredData];
    if (sortField && sortDirection) {
      sortedData.sort((a, b) => {
        let aValue: any = a[sortField];
        let bValue: any = b[sortField];
        if (sortField === 'chamado') {
          aValue = parseInt(a.chamado) || 0;
          bValue = parseInt(b.chamado) || 0;
        } else if (sortField === 'abertura_chamado') {
          aValue = new Date(a.abertura_chamado).getTime() || 0;
          bValue = new Date(b.abertura_chamado).getTime() || 0;
        } else {
          aValue = String(aValue).toLowerCase();
          bValue = String(bValue).toLowerCase();
        }
        if (aValue < bValue) return sortDirection === 'asc' ? -1 : 1;
        if (aValue > bValue) return sortDirection === 'asc' ? 1 : -1;
        return 0;
      });
    } else {
      sortedData.sort((a, b) => {
        const chamadoA = parseInt(a.chamado) || 0;
        const chamadoB = parseInt(b.chamado) || 0;
        return chamadoB - chamadoA;
      });
    }
    const startIndex = (currentPage - 1) * itemsPerPage;
    const endIndex = startIndex + itemsPerPage;
    const paginatedData = sortedData.slice(startIndex, endIndex);
    const totalPages = Math.ceil(sortedData.length / itemsPerPage);
    return { sortedAndPaginatedData: paginatedData, totalPages };
  }, [filteredData, currentPage, itemsPerPage, sortField, sortDirection]);

  // Render (mantive layout original; uso getRemainingSeconds para mostrar o timer)
  return (
    <TooltipProvider>
      {/* --- O resto do seu JSX segue igual ao código anterior --- */}
      {/* Por brevidade nesta resposta eu não repito todo o JSX de tabela já idêntico ao que você tem. */}
      {/* No seu projeto, substitua o ActionTable pelo arquivo inteiro acima + o JSX (use o arquivo completo fornecido na mensagem anterior caso precise do JSX completo). */}
      <Card className="bg-card border-border">
        <CardHeader>
          <div className="relative mb-4">
            <Search className="absolute left-3 top-1/2 h-4 w-4 -translate-y-1/2 text-muted-foreground" />
            <Input
              placeholder="Pesquisar por chamado, tipo, grupo, status, título..."
              value={searchTerm}
              onChange={(e) => setSearchTerm(e.target.value)}
              className="pl-10"
            />
          </div>
        </CardHeader>
        <CardContent>
          {/* Exemplo mínimo: renderiza chamados e o tempo restante */}
          <div>
            {sortedAndPaginatedData.map(alert => {
              const remaining = getRemainingSeconds(alert.chamado);
              return (
                <div key={alert.id} className="flex items-center justify-between p-2 border-b">
                  <div>
                    <div className="text-sm font-medium">{alert.chamado} — {alert.resumo_chamado}</div>
                    <div className="text-xs text-muted-foreground">{formatDate(alert.abertura_chamado)}</div>
                  </div>
                  <div className="font-mono text-sm">
                    {remaining != null ? formatDuration(remaining) : '00:00'}
                  </div>
                </div>
              );
            })}
          </div>
        </CardContent>
      </Card>
    </TooltipProvider>
  );
};

export default ActionTable;

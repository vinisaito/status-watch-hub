import boto3
import json
from datetime import datetime, timezone
from decimal import Decimal

dynamodb = boto3.resource("dynamodb")
acomp_table = dynamodb.Table("painelmonitoracao_acompanhamento")
conn_table = dynamodb.Table("painelmonitoracao_connections")

APIGW_ENDPOINT = "https://SEU_ENDPOINT.execute-api.us-east-1.amazonaws.com/dev"
apigw = boto3.client("apigatewaymanagementapi", endpoint_url=APIGW_ENDPOINT)

def lambda_handler(event, context):
    route = event["requestContext"]["routeKey"]
    connection_id = event["requestContext"]["connectionId"]

    if route == "$connect":
        conn_table.put_item(Item={"connectionId": connection_id})
        return {"statusCode": 200}

    if route == "$disconnect":
        conn_table.delete_item(Key={"connectionId": connection_id})
        return {"statusCode": 200}

    if route == "sendMessage":
        body = json.loads(event["body"])
        action = body["action"]
        chamado = int(body["chamado"])

        item = acomp_table.get_item(Key={"chamado": chamado}).get("Item", {})
        if not item:
            return {"statusCode": 404, "body": "Chamado não encontrado"}

        now = datetime.utcnow().replace(tzinfo=timezone.utc).isoformat()
        duration = item.get("durationMinutes", 15)

        if action == "startTimer":
            acomp_table.update_item(
                Key={"chamado": chamado},
                UpdateExpression="SET timerActive=:t, startedAt=:s",
                ExpressionAttributeValues={":t": True, ":s": now}
            )
            item["timerActive"] = True
            item["startedAt"] = now
        elif action == "pauseTimer":
            acomp_table.update_item(
                Key={"chamado": chamado},
                UpdateExpression="SET timerActive=:t",
                ExpressionAttributeValues={":t": False}
            )
            item["timerActive"] = False

        broadcast = {
            "type": "TIMER_UPDATED",
            "chamado": chamado,
            "timerActive": item["timerActive"],
            "startedAt": item.get("startedAt", now),
            "durationMinutes": duration
        }

        connections = conn_table.scan().get("Items", [])
        for conn in connections:
            try:
                apigw.post_to_connection(
                    Data=json.dumps(broadcast),
                    ConnectionId=conn["connectionId"]
                )
            except apigw.exceptions.GoneException:
                conn_table.delete_item(Key={"connectionId": conn["connectionId"]})

        return {"statusCode": 200, "body": json.dumps({"message": "OK"})}

    return {"statusCode": 400, "body": "Rota inválida"}

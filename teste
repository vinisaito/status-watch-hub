import { useState, useEffect, useMemo, useCallback } from 'react';
import { Check, AlertTriangle, ExternalLink, Zap, Group, Calendar, Info, XCircle, Flame, ChevronLeft, ChevronRight, ArrowUpDown, ArrowUp, ArrowDown, Clock, Play, CheckCircle, X, RotateCcw, FastForward, Timer, RefreshCw, Users } from 'lucide-react';
import { Card, CardContent, CardHeader } from '@/components/ui/card';
import { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from '@/components/ui/table';
import { Badge } from '@/components/ui/badge';
import { Button } from '@/components/ui/button';
import { toast } from '@/hooks/use-toast';
import { Tooltip, TooltipContent, TooltipProvider, TooltipTrigger } from '@/components/ui/tooltip';
import {
  Dialog,
  DialogContent,
  DialogHeader,
  DialogTitle,
} from '@/components/ui/dialog';
import {
  Select,
  SelectContent,
  SelectItem,
  SelectTrigger,
  SelectValue,
} from '@/components/ui/select';
import { Textarea } from '@/components/ui/textarea';
import { Label } from '@/components/ui/label';
import { EscalationButton } from '@/components/ui/escalation-button';
import { EscalationStatus } from '@/components/ui/escalation-status';
import { OperatorSelector } from '@/components/OperatorSelector';

interface AlertData {
  id: string;
  chamado: string;
  tipo_chamado: string;
  grupo_chamado: string;
  status_chamado: string;
  abertura_chamado: string;
  resumo_chamado: string;
  severidade_chamado: string;
  acionado: string;
  chat: boolean;
}

interface EscalationState {
  status: 'pending' | 'confirmed' | 'escalating' | 'completed';
  currentLevel: 0 | 1 | 2 | 3 | 4; // 0 = confirmação, 1-4 = escalações
  timeRemaining: number;
  timerActive: boolean;
  isAttended: boolean;
  observations: string;
  pendingStatus?: string; // Status pendente de confirmação
  pendingObservations?: string; // Observações pendentes
  operator?: string; // Operador responsável
  lastSync?: number; // Timestamp da última sincronização
}

interface ActionTableProps {
  alertData: AlertData[];
  onUpdateAcknowledgment: (alertId: string, acknowledged: boolean) => void;
  loading: boolean;
}

type SortField = 'chamado' | 'tipo_chamado' | 'grupo_chamado' | 'status_chamado' | 'abertura_chamado' | 'resumo_chamado' | 'severidade_chamado' | 'acionado';
type SortDirection = 'asc' | 'desc' | null;

export const ActionTable = ({ alertData, onUpdateAcknowledgment, loading }: ActionTableProps) => {
  const [selectedIncident, setSelectedIncident] = useState<AlertData | null>(null);
  const [crisisDialogOpen, setCrisisDialogOpen] = useState(false);
  const [expandedRows, setExpandedRows] = useState<Set<string>>(new Set());
  const [currentPage, setCurrentPage] = useState(1);
  const itemsPerPage = 5;

  // Estados para ordenação
  const [sortField, setSortField] = useState<SortField>('chamado');
  const [sortDirection, setSortDirection] = useState<SortDirection>('desc');

  // Estado que guarda os numeros chamados já acionados (string)
  const [acionadosSet, setAcionadosSet] = useState<Set<string>>(new Set());

  // Estado para controlar o status de escalação de cada chamado
  const [escalationStatus, setEscalationStatus] = useState<Record<string, string>>({});

  // Estados para escalação
  const [escalationStates, setEscalationStates] = useState<Record<string, EscalationState>>({});
  
  // Estado para armazenar observações de confirmação por chamado
  const [confirmationObservations, setConfirmationObservations] = useState<Record<string, string>>({});

  // Estados para controle de confirmação de mudança de status
  const [showStatusConfirmation, setShowStatusConfirmation] = useState<Record<string, boolean>>({});
  const [pendingStatusChange, setPendingStatusChange] = useState<Record<string, { status: string; observations: string }>>({});

  // Estados para seleção de operador
  const [selectedOperators, setSelectedOperators] = useState<Record<string, string>>({});

  // Estado para controle de sincronização
  const [lastSyncTime, setLastSyncTime] = useState<number>(Date.now());
  const [isSyncing, setIsSyncing] = useState(false);

  // Função para salvar dados na API Gateway com retry
  const saveToAPI = useCallback(async (alertId: string, data: any, retries = 3) => {
    for (let i = 0; i < retries; i++) {
      try {
        const response = await fetch('https://f6ffk8e9fe.execute-api.us-east-1.amazonaws.com/prod/acompanhamento', {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json',
          },
          body: JSON.stringify({
            chamado: parseInt(alertId),
            ...data,
            ttl: Math.floor(Date.now() / 1000) + (7 * 24 * 60 * 60), // 7 dias TTL
            alertOpenTime: new Date().toISOString(),
            lastUpdated: new Date().toISOString(),
            operator: selectedOperators[alertId] || 'Sistema', // Inclui operador
          }),
        });

        if (!response.ok) {
          throw new Error(`Erro na API: ${response.status}`);
        }

        return await response.json();
      } catch (error) {
        if (i === retries - 1) {
          console.error('Erro ao salvar na API após tentativas:', error);
          toast({
            title: "Erro ao salvar dados",
            description: "Não foi possível salvar na API. Os dados serão mantidos localmente.",
            variant: "destructive",
          });
          throw error;
        }
        // Aguarda um pouco antes de tentar novamente
        await new Promise(resolve => setTimeout(resolve, 1000 * (i + 1)));
      }
    }
  }, [selectedOperators]);

  // Função para carregar dados de confirmação salvos na API
  const loadConfirmationData = useCallback(async () => {
    try {
      setIsSyncing(true);
      // Busca dados de acompanhamento para todos os chamados visíveis
      const chamadosVisveis = alertData.map(alert => alert.chamado);
      console.log('Carregando dados para chamados:', chamadosVisveis);
      
      const confirmationPromises = chamadosVisveis.map(async (chamado) => {
        try {
          const response = await fetch(
            `https://f6ffk8e9fe.execute-api.us-east-1.amazonaws.com/prod/acompanhamento?chamado=${chamado}`,
            { method: 'GET' }
          );
          
          if (response.ok) {
            const allData = await response.json();
            console.log(`Dados recebidos para chamado ${chamado}:`, allData);
            
            // Filtra pelo chamado específico, convertendo números para string para comparação
            const chamadoData = Array.isArray(allData) 
              ? allData.find(item => item.chamado?.toString() === chamado.toString())
              : (allData.chamado?.toString() === chamado.toString() ? allData : null);
            
            console.log(`Dados filtrados para chamado ${chamado}:`, chamadoData);
            return { chamado, data: chamadoData };
          }
          return { chamado, data: null };
        } catch (error) {
          console.error(`Erro ao buscar dados do chamado ${chamado}:`, error);
          return { chamado, data: null };
        }
      });

      const results = await Promise.all(confirmationPromises);
      console.log('Resultados processados:', results);
      
      // Processa os resultados e atualiza os estados
      const newEscalationStates: Record<string, EscalationState> = {};
      const newConfirmationObservations: Record<string, string> = {};
      const newOperators: Record<string, string> = {};
      
      results.forEach(({ chamado, data }) => {
        if (data) {
          console.log(`Processando chamado ${chamado}:`, data);
          
          // Determina o status baseado nos dados salvos
          let status: EscalationState['status'] = 'pending';
          let currentLevel: EscalationState['currentLevel'] = 0;
          let isAttended = false;
          let lastObservation = '';
          let timerActive = false;
          let timeRemaining = 0;
          
          // Verifica se foi confirmado
          if (data.confirmChat && data.confirmChat !== '') {
            status = 'confirmed';
            lastObservation = data.confirmChat;
            console.log(`Chamado ${chamado} tem confirmação:`, data.confirmChat);
          }
          
          // Verifica escalações
          if (data.escalations && Array.isArray(data.escalations)) {
            for (let i = 0; i < data.escalations.length; i++) {
              const escalation = data.escalations[i];
              if (escalation.status === 'em_andamento') {
                status = 'escalating';
                currentLevel = (escalation.level) as EscalationState['currentLevel'];
                lastObservation = escalation.observations || '';
                
                // Calcula tempo restante baseado no timestamp
                if (escalation.eventTimestamp) {
                  const startTime = new Date(escalation.eventTimestamp).getTime();
                  const currentTime = Date.now();
                  const elapsedMinutes = Math.floor((currentTime - startTime) / (1000 * 60));
                  const remainingMinutes = Math.max(0, 10 - elapsedMinutes); // 10 minutos por escalação
                  timeRemaining = remainingMinutes * 60;
                  timerActive = timeRemaining > 0;
                }
                
                console.log(`Chamado ${chamado} está em escalação nível ${escalation.level}`);
                break;
              } else if (escalation.status === 'atendido') {
                status = 'completed';
                currentLevel = (escalation.level) as EscalationState['currentLevel'];
                isAttended = true;
                lastObservation = escalation.observations || '';
                console.log(`Chamado ${chamado} foi atendido no nível ${escalation.level}`);
                break;
              } else if (escalation.status === 'finalizado' && i < 3) {
                // Se finalizou mas não foi o último nível, continua checando
                currentLevel = (escalation.level) as EscalationState['currentLevel'];
                lastObservation = escalation.observations || '';
                console.log(`Chamado ${chamado} finalizou nível ${escalation.level}`);
              }
            }
          }
          
          // Verifica se há obsChat indicando atendimento
          if (data.obsChat && data.obsChat.includes('atendida com sucesso')) {
            status = 'completed';
            isAttended = true;
            console.log(`Chamado ${chamado} foi marcado como atendido via obsChat`);
          }
          
          newEscalationStates[chamado] = {
            status,
            currentLevel,
            timeRemaining,
            timerActive,
            isAttended,
            observations: lastObservation,
            operator: data.operator || '',
            lastSync: Date.now()
          };
          
          console.log(`Estado final para chamado ${chamado}:`, newEscalationStates[chamado]);
          
          // Salva observações de confirmação
          if (data.confirmChat) {
            newConfirmationObservations[chamado] = data.confirmChat;
          }

          // Salva operador
          if (data.operator) {
            newOperators[chamado] = data.operator;
          }
        }
      });
      
      console.log('Estados de escalação atualizados:', newEscalationStates);
      console.log('Observações de confirmação atualizadas:', newConfirmationObservations);
      
      // Atualiza os estados apenas se houver dados para atualizar
      if (Object.keys(newEscalationStates).length > 0) {
        setEscalationStates(prev => ({ ...prev, ...newEscalationStates }));
      }
      
      if (Object.keys(newConfirmationObservations).length > 0) {
        setConfirmationObservations(prev => ({ ...prev, ...newConfirmationObservations }));
      }

      if (Object.keys(newOperators).length > 0) {
        setSelectedOperators(prev => ({ ...prev, ...newOperators }));
      }

      setLastSyncTime(Date.now());
      
    } catch (error) {
      console.error('Erro ao carregar dados de confirmação:', error);
    } finally {
      setIsSyncing(false);
    }
  }, [alertData]);

  // Polling para sincronização automática a cada 30 segundos
  useEffect(() => {
    const interval = setInterval(() => {
      if (alertData.length > 0) {
        loadConfirmationData();
      }
    }, 30000); // 30 segundos

    return () => clearInterval(interval);
  }, [alertData, loadConfirmationData]);

  // Handlers de observação otimizados para evitar re-renders
  const handleConfirmationObservationChange = useCallback((alertId: string, value: string) => {
    setConfirmationObservations(prev => ({
      ...prev,
      [alertId]: value
    }));
  }, []);

  const handleEscalationObservationChange = useCallback((alertId: string, value: string) => {
    setEscalationStates(prev => ({
      ...prev,
      [alertId]: {
        ...prev[alertId],
        observations: value
      }
    }));
  }, []);

  const handlePendingObservationChange = useCallback((alertId: string, value: string) => {
    setPendingStatusChange(prev => ({
      ...prev,
      [alertId]: {
        ...prev[alertId],
        observations: value
      }
    }));
  }, []);

  const handleOperatorChange = useCallback((alertId: string, operator: string) => {
    setSelectedOperators(prev => ({
      ...prev,
      [alertId]: operator
    }));
  }, []);

  // Timer para escalações
  useEffect(() => {
    const interval = setInterval(() => {
      setEscalationStates(prev => {
        const newStates = { ...prev };
        let updated = false;

        Object.keys(newStates).forEach(alertId => {
          const state = newStates[alertId];
          if (state.timerActive && state.timeRemaining > 0) {
            newStates[alertId] = {
              ...state,
              timeRemaining: state.timeRemaining - 1
            };
            updated = true;

            // Quando o timer zera
            if (newStates[alertId].timeRemaining === 0) {
              newStates[alertId].timerActive = false;
              
              if (state.currentLevel === 0) {
                // Acabou o tempo de confirmação, vai para escalação
                newStates[alertId].status = 'escalating';
                toast({
                  title: "Tempo de confirmação esgotado",
                  description: `Chamado ${alertId} pode iniciar escalação`,
                  variant: "destructive",
                });
              } else if (state.currentLevel < 4) {
                // Acabou o tempo da escalação atual, mantém no status de escalação para mostrar botão
                toast({
                  title: "Tempo de escalação esgotado",
                  description: `Escalação ${state.currentLevel} do chamado ${alertId} finalizada`,
                  variant: "destructive",
                });
              } else {
                // Todas as escalações foram executadas
                newStates[alertId].status = 'completed';
                toast({
                  title: "Processo finalizado",
                  description: `Todas as escalações do chamado ${alertId} foram executadas`,
                });
              }
            }
          }
        });

        return updated ? newStates : prev;
      });
    }, 1000);

    return () => clearInterval(interval);
  }, []);

  // Função para iniciar confirmação
  const startConfirmation = useCallback((alertId: string) => {
    setEscalationStates(prev => ({
      ...prev,
      [alertId]: {
        status: 'pending',
        currentLevel: 0,
        timeRemaining: 20 * 60, // 20 minutos
        timerActive: true,
        isAttended: false,
        observations: '',
        operator: selectedOperators[alertId] || '',
        lastSync: Date.now()
      }
    }));
    
    // Inicializa o campo de observações de confirmação
    setConfirmationObservations(prev => ({
      ...prev,
      [alertId]: ''
    }));
    
    toast({
      title: "Confirmação iniciada",
      description: "Aguardando confirmação por 20 minutos",
    });
  }, [selectedOperators]);

  // Função para confirmar recebimento - MODIFICADA para integrar com API
  const confirmReceived = useCallback(async (alertId: string) => {
    const observation = confirmationObservations[alertId] || '';
    const operator = selectedOperators[alertId] || '';
    
    if (!operator.trim()) {
      toast({
        title: "Operador obrigatório",
        description: "Por favor, selecione um operador responsável",
        variant: "destructive",
      });
      return;
    }
    
    try {
      // Prepara dados para a API
      const apiData = {
        escalations: [
          { level: 1, status: "", observations: "", eventTimestamp: "" },
          { level: 2, status: "", observations: "", eventTimestamp: "" },
          { level: 3, status: "", observations: "", eventTimestamp: "" },
          { level: 4, status: "", observations: "", eventTimestamp: "" }
        ],
        obsChat: "",
        confirmChat: observation,
        sendChat: new Date().toISOString(),
        operator: operator,
      };

      // Salva na API
      await saveToAPI(alertId, apiData);

      setEscalationStates(prev => ({
        ...prev,
        [alertId]: {
          ...prev[alertId],
          status: 'confirmed',
          timerActive: false,
          timeRemaining: 0,
          observations: observation,
          operator: operator,
          lastSync: Date.now()
        }
      }));

      // Limpa o campo de observações após confirmação
      setConfirmationObservations(prev => ({
        ...prev,
        [alertId]: ''
      }));

      toast({
        title: "Confirmação recebida",
        description: `Processo confirmado por ${operator}`,
      });
    } catch (error) {
      // Em caso de erro na API, ainda atualiza o estado local para não travar a UI
      setEscalationStates(prev => ({
        ...prev,
        [alertId]: {
          ...prev[alertId],
          status: 'confirmed',
          timerActive: false,
          timeRemaining: 0,
          observations: observation,
          operator: operator,
          lastSync: Date.now()
        }
      }));

      setConfirmationObservations(prev => ({
        ...prev,
        [alertId]: ''
      }));
    }
  }, [confirmationObservations, selectedOperators, saveToAPI]);

  // Função para iniciar escalação - MODIFICADA para integrar com API
  const startEscalation = useCallback(async (alertId: string, level: 1 | 2 | 3 | 4) => {
    const operator = selectedOperators[alertId] || '';
    
    if (!operator.trim()) {
      toast({
        title: "Operador obrigatório",
        description: "Por favor, selecione um operador responsável",
        variant: "destructive",
      });
      return;
    }

    try {
      // Prepara dados para a API - mantém dados anteriores e atualiza o nível atual
      const escalations = [
        { level: 1, status: level === 1 ? "em_andamento" : "", observations: level === 1 ? "Escalação iniciada" : "", eventTimestamp: level === 1 ? new Date().toISOString() : "" },
        { level: 2, status: level === 2 ? "em_andamento" : "", observations: level === 2 ? "Escalação iniciada" : "", eventTimestamp: level === 2 ? new Date().toISOString() : "" },
        { level: 3, status: level === 3 ? "em_andamento" : "", observations: level === 3 ? "Escalação iniciada" : "", eventTimestamp: level === 3 ? new Date().toISOString() : "" },
        { level: 4, status: level === 4 ? "em_andamento" : "", observations: level === 4 ? "Escalação iniciada" : "", eventTimestamp: level === 4 ? new Date().toISOString() : "" }
      ];

      const apiData = {
        escalations,
        obsChat: "",
        confirmChat: level === 1 ? (confirmationObservations[alertId] || "") : "",
        sendChat: new Date().toISOString(),
        operator: operator,
      };

      // Salva na API
      await saveToAPI(alertId, apiData);

      setEscalationStates(prev => ({
        ...prev,
        [alertId]: {
          ...prev[alertId],
          status: 'escalating',
          currentLevel: level,
          timeRemaining: 10 * 60, // 10 minutos
          timerActive: true,
          isAttended: false,
          observations: '',
          operator: operator,
          lastSync: Date.now()
        }
      }));

      const levelNames = { 1: 'Primeira', 2: 'Segunda', 3: 'Terceira', 4: 'Quarta' };
      toast({
        title: `${levelNames[level]} escalação iniciada`,
        description: `Timer de 10 minutos ativado por ${operator}`,
      });
    } catch (error) {
      // Em caso de erro na API, ainda atualiza o estado local
      setEscalationStates(prev => ({
        ...prev,
        [alertId]: {
          ...prev[alertId],
          status: 'escalating',
          currentLevel: level,
          timeRemaining: 10 * 60,
          timerActive: true,
          isAttended: false,
          observations: '',
          operator: operator,
          lastSync: Date.now()
        }
      }));

      const levelNames = { 1: 'Primeira', 2: 'Segunda', 3: 'Terceira', 4: 'Quarta' };
      toast({
        title: `${levelNames[level]} escalação iniciada`,
        description: `Timer de 10 minutos ativado por ${operator}`,
      });
    }
  }, [confirmationObservations, selectedOperators, saveToAPI]);

  // Função para voltar escalação
  const goBackEscalation = useCallback((alertId: string) => {
    setEscalationStates(prev => {
      const currentState = prev[alertId];
      if (currentState && currentState.currentLevel > 0) {
        const previousLevel = Math.max(0, currentState.currentLevel - 1);
        
        return {
          ...prev,
          [alertId]: {
            ...currentState,
            currentLevel: previousLevel as 0 | 1 | 2 | 3 | 4,
            status: previousLevel === 0 ? 'pending' : 'escalating',
            timerActive: true, // Reativa o timer
            timeRemaining: previousLevel === 0 ? 20 * 60 : 10 * 60, // Reinicia tempo apropriado
            isAttended: false,
            observations: '',
            lastSync: Date.now()
          }
        };
      }
      return prev;
    });

    // Limpa status e observações pendentes
    setShowStatusConfirmation(prev => ({ ...prev, [alertId]: false }));
    setPendingStatusChange(prev => {
      const newState = { ...prev };
      delete newState[alertId];
      return newState;
    });

    toast({
      title: "Escalação revertida",
      description: "Processo voltou ao nível anterior e timer reiniciado",
    });
  }, []);

  // Função para avançar escalação manualmente - MODIFICADA para integrar com API
  const advanceEscalationManually = useCallback(async (alertId: string) => {
    const observation = escalationStates[alertId]?.observations || '';
    const operator = selectedOperators[alertId] || '';
    
    if (!observation.trim()) {
      toast({
        title: "Observações obrigatórias",
        description: "Por favor, preencha as observações antes de avançar",
        variant: "destructive",
      });
      return;
    }

    const currentState = escalationStates[alertId];
    if (currentState && currentState.currentLevel < 4) {
      const nextLevel = (currentState.currentLevel + 1) as 1 | 2 | 3 | 4;
      
      try {
        // Atualiza na API o nível atual como finalizado e inicia o próximo
        const escalations = [
          { 
            level: 1, 
            status: currentState.currentLevel === 1 ? "finalizado" : currentState.currentLevel > 1 ? "finalizado" : "", 
            observations: currentState.currentLevel === 1 ? observation : "", 
            eventTimestamp: currentState.currentLevel === 1 ? new Date().toISOString() : "" 
          },
          { 
            level: 2, 
            status: nextLevel === 2 ? "em_andamento" : (currentState.currentLevel === 2 ? "finalizado" : currentState.currentLevel > 2 ? "finalizado" : ""), 
            observations: nextLevel === 2 ? "Escalação iniciada" : (currentState.currentLevel === 2 ? observation : ""), 
            eventTimestamp: nextLevel === 2 ? new Date().toISOString() : (currentState.currentLevel === 2 ? new Date().toISOString() : "") 
          },
          { 
            level: 3, 
            status: nextLevel === 3 ? "em_andamento" : (currentState.currentLevel === 3 ? "finalizado" : currentState.currentLevel > 3 ? "finalizado" : ""), 
            observations: nextLevel === 3 ? "Escalação iniciada" : (currentState.currentLevel === 3 ? observation : ""), 
            eventTimestamp: nextLevel === 3 ? new Date().toISOString() : (currentState.currentLevel === 3 ? new Date().toISOString() : "") 
          },
          { 
            level: 4, 
            status: nextLevel === 4 ? "em_andamento" : (currentState.currentLevel === 4 ? "finalizado" : ""), 
            observations: nextLevel === 4 ? "Escalação iniciada" : (currentState.currentLevel === 4 ? observation : ""), 
            eventTimestamp: nextLevel === 4 ? new Date().toISOString() : (currentState.currentLevel === 4 ? new Date().toISOString() : "") 
          }
        ];

        const apiData = {
          escalations,
          obsChat: "",
          confirmChat: confirmationObservations[alertId] || "",
          sendChat: new Date().toISOString(),
          operator: operator,
        };

        // Salva na API
        await saveToAPI(alertId, apiData);
      } catch (error) {
        // Continua o processo mesmo se falhar na API
      }

      const levelNames = { 1: 'Primeira', 2: 'Segunda', 3: 'Terceira', 4: 'Quarta' };
      
      toast({
        title: `${levelNames[nextLevel]} escalação iniciada`,
        description: `Timer de 10 minutos ativado por ${operator}`,
      });

      setEscalationStates(prev => ({
        ...prev,
        [alertId]: {
          ...currentState,
          currentLevel: nextLevel,
          timeRemaining: 10 * 60, // 10 minutos
          timerActive: true,
          isAttended: false,
          observations: '',
          operator: operator,
          lastSync: Date.now()
        }
      }));
    }
  }, [escalationStates, confirmationObservations, selectedOperators, saveToAPI]);

  // Função para preparar mudança de status com confirmação
  const prepareStatusChange = useCallback((alertId: string, status: string) => {
    setPendingStatusChange(prev => ({
      ...prev,
      [alertId]: { status, observations: '' }
    }));
    setShowStatusConfirmation(prev => ({ ...prev, [alertId]: true }));
  }, []);

  // Função para confirmar mudança de status - MODIFICADA para integrar com API
  const confirmStatusChange = useCallback(async (alertId: string) => {
    const pending = pendingStatusChange[alertId];
    const operator = selectedOperators[alertId] || '';
    
    if (!pending || !pending.observations.trim()) {
      toast({
        title: "Observações obrigatórias",
        description: "Por favor, preencha as observações antes de confirmar",
        variant: "destructive",
      });
      return;
    }

    const attended = pending.status === 'attended';
    
    try {
      const currentState = escalationStates[alertId];
      
      // Prepara dados para a API
      const escalations = [
        { 
          level: 1, 
          status: currentState.currentLevel === 1 ? (attended ? "atendido" : "nao_atendido") : (currentState.currentLevel > 1 ? "finalizado" : ""), 
          observations: currentState.currentLevel === 1 ? pending.observations : "", 
          eventTimestamp: currentState.currentLevel === 1 ? new Date().toISOString() : "" 
        },
        { 
          level: 2, 
          status: currentState.currentLevel === 2 ? (attended ? "atendido" : "nao_atendido") : (currentState.currentLevel > 2 ? "finalizado" : ""), 
          observations: currentState.currentLevel === 2 ? pending.observations : "", 
          eventTimestamp: currentState.currentLevel === 2 ? new Date().toISOString() : "" 
        },
        { 
          level: 3, 
          status: currentState.currentLevel === 3 ? (attended ? "atendido" : "nao_atendido") : (currentState.currentLevel > 3 ? "finalizado" : ""), 
          observations: currentState.currentLevel === 3 ? pending.observations : "", 
          eventTimestamp: currentState.currentLevel === 3 ? new Date().toISOString() : "" 
        },
        { 
          level: 4, 
          status: currentState.currentLevel === 4 ? (attended ? "atendido" : "nao_atendido") : "", 
          observations: currentState.currentLevel === 4 ? pending.observations : "", 
          eventTimestamp: currentState.currentLevel === 4 ? new Date().toISOString() : "" 
        }
      ];

      const apiData = {
        escalations,
        obsChat: attended ? "Escalação atendida com sucesso" : "Escalação não atendida - prosseguindo",
        confirmChat: confirmationObservations[alertId] || "",
        sendChat: new Date().toISOString(),
        operator: operator,
      };

      // Salva na API
      await saveToAPI(alertId, apiData);
    } catch (error) {
      // Continua o processo mesmo se falhar na API
    }

    markAsAttended(alertId, attended, pending.observations);

    // Limpa estados de confirmação
    setShowStatusConfirmation(prev => ({ ...prev, [alertId]: false }));
    setPendingStatusChange(prev => {
      const newState = { ...prev };
      delete newState[alertId];
      return newState;
    });

    // Se não foi atendida e não é a última escalação, prepara para próxima
    if (!attended) {
      const state = escalationStates[alertId];
      if (state && state.currentLevel < 4) {
        setTimeout(() => {
          advanceToNextEscalation(alertId);
        }, 100);
      }
    }
  }, [pendingStatusChange, escalationStates, confirmationObservations, selectedOperators, saveToAPI]);

  // Função para cancelar mudança de status
  const cancelStatusChange = useCallback((alertId: string) => {
    setShowStatusConfirmation(prev => ({ ...prev, [alertId]: false }));
    setPendingStatusChange(prev => {
      const newState = { ...prev };
      delete newState[alertId];
      return newState;
    });
    setEscalationStatus(prev => ({ ...prev, [alertId]: '' }));
  }, []);

  // Função para marcar como atendido
  const markAsAttended = useCallback((alertId: string, attended: boolean, observations: string) => {
    setEscalationStates(prev => ({
      ...prev,
      [alertId]: {
        ...prev[alertId],
        isAttended: attended,
        observations,
        status: attended ? 'completed' : prev[alertId].status,
        timerActive: attended ? false : prev[alertId].timerActive,
        lastSync: Date.now()
      }
    }));

    if (attended) {
      toast({
        title: "Escalação atendida",
        description: `Processo finalizado por ${selectedOperators[alertId] || 'Operador'}`,
      });
    }
  }, [selectedOperators]);

  // Função para avançar para próxima escalação quando "Não Atendida"
  const advanceToNextEscalation = useCallback((alertId: string) => {
    setEscalationStates(prev => {
      const currentState = prev[alertId];
      if (currentState && currentState.currentLevel < 4) {
        const nextLevel = (currentState.currentLevel + 1) as 1 | 2 | 3 | 4;
        const levelNames = { 1: 'Primeira', 2: 'Segunda', 3: 'Terceira', 4: 'Quarta' };
        
        toast({
          title: `${levelNames[nextLevel]} escalação iniciada`,
          description: `Timer de 10 minutos ativado`,
        });

        return {
          ...prev,
          [alertId]: {
            ...currentState,
            currentLevel: nextLevel,
            timeRemaining: 10 * 60, // 10 minutos
            timerActive: true,
            isAttended: false,
            observations: '',
            lastSync: Date.now()
          }
        };
      }
      return prev;
    });
  }, []);

  // Função para formatar tempo
  const formatTime = (seconds: number) => {
    const minutes = Math.floor(seconds / 60);
    const remainingSeconds = seconds % 60;
    return `${minutes.toString().padStart(2, '0')}:${remainingSeconds.toString().padStart(2, '0')}`;
  };

  // Função para lidar com clique no cabeçalho da coluna
  const handleSort = (field: SortField) => {
    if (sortField === field) {
      // Se já está ordenando por este campo, alterna a direção
      if (sortDirection === 'asc') {
        setSortDirection('desc');
      } else if (sortDirection === 'desc') {
        setSortDirection(null);
        setSortField('chamado'); // volta para o padrão
      } else {
        setSortDirection('asc');
      }
    } else {
      // Se é um campo diferente, começa com ascendente
      setSortField(field);
      setSortDirection('asc');
    }
  };

  // Função para obter o ícone de ordenação
  const getSortIcon = (field: SortField) => {
    if (sortField !== field) {
      return <ArrowUpDown className="h-4 w-4 ml-1 opacity-50" />;
    }
    if (sortDirection === 'asc') {
      return <ArrowUp className="h-4 w-4 ml-1" />;
    }
    if (sortDirection === 'desc') {
      return <ArrowDown className="h-4 w-4 ml-1" />;
    }
    return <ArrowUpDown className="h-4 w-4 ml-1 opacity-50" />;
  };

  // Função para formatar data de forma segura
  const formatDate = (dateString: string) => {
    if (!dateString || dateString === '' || dateString === 'null' || dateString === 'undefined') {
      return '-';
    }

    try {
      let date: Date;
      const cleanString = String(dateString).trim();

      // Caso 1: Timestamp em milissegundos
      if (/^\d{13}$/.test(cleanString)) {
        date = new Date(parseInt(cleanString));
      }
      // Caso 2: Timestamp em segundos  
      else if (/^\d{10}$/.test(cleanString)) {
        date = new Date(parseInt(cleanString) * 1000);
      }
      // Caso 3: Formato brasileiro dd/mm/yyyy ou dd/mm/yyyy hh:mm:ss
      else if (/^\d{2}\/\d{2}\/\d{4}/.test(cleanString)) {
        const parts = cleanString.split(' ');
        const datePart = parts[0];
        const timePart = parts[1] || '00:00:00';

        const [day, month, year] = datePart.split('/');
        const [hour, minute, second] = timePart.split(':');

        date = new Date(
          parseInt(year),
          parseInt(month) - 1, // mês é 0-indexed
          parseInt(day),
          parseInt(hour || '0'),
          parseInt(minute || '0'),
          parseInt(second || '0')
        );
      }
      // Caso 4: ISO string ou outros formatos padrão
      else {
        date = new Date(cleanString);
      }

      // Verifica se a data é válida
      if (isNaN(date.getTime())) {
        return cleanString; // Retorna o valor original
      }

      // Verifica se a data é muito antiga ou muito futura (validação básica)
      const year = date.getFullYear();
      if (year < 1900 || year > 2100) {
        return cleanString;
      }

      return date.toLocaleString('pt-BR', {
        day: '2-digit',
        month: '2-digit',
        year: 'numeric',
        hour: '2-digit',
        minute: '2-digit',
        second: '2-digit',
      });
    } catch (error) {
      return String(dateString); // Garante que retorna string
    }
  };

  // Função para formatar o status "Acionado"
  const formatAcionadoStatus = (acionado: string) => {
    if (!acionado) return { text: '-', isOk: false };

    const upperAcionado = acionado.toUpperCase();
    if (upperAcionado === 'OK') {
      return { text: 'ACIONADO', isOk: true };
    } else if (upperAcionado === 'NOK') {
      return { text: 'NÃO ACIONADO', isOk: false };
    }

    return { text: acionado, isOk: false };
  };

  // Dados ordenados e paginados
  const { sortedAndPaginatedData, totalPages } = useMemo(() => {
    let sortedData = [...alertData];

    // Aplica ordenação se houver campo e direção definidos
    if (sortField && sortDirection) {
      sortedData.sort((a, b) => {
        let aValue: any = a[sortField];
        let bValue: any = b[sortField];

        // Tratamento especial para diferentes tipos de dados
        if (sortField === 'chamado') {
          aValue = parseInt(a.chamado) || 0;
          bValue = parseInt(b.chamado) || 0;
        } else if (sortField === 'abertura_chamado') {
          aValue = new Date(a.abertura_chamado).getTime() || 0;
          bValue = new Date(b.abertura_chamado).getTime() || 0;
        } else {
          // Para strings, converte para minúsculo para ordenação case-insensitive
          aValue = String(aValue).toLowerCase();
          bValue = String(bValue).toLowerCase();
        }

        if (aValue < bValue) {
          return sortDirection === 'asc' ? -1 : 1;
        }
        if (aValue > bValue) {
          return sortDirection === 'asc' ? 1 : -1;
        }
        return 0;
      });
    } else {
      // Ordenação padrão por chamado decrescente
      sortedData.sort((a, b) => {
        const chamadoA = parseInt(a.chamado) || 0;
        const chamadoB = parseInt(b.chamado) || 0;
        return chamadoB - chamadoA;
      });
    }

    // Calcula paginação
    const startIndex = (currentPage - 1) * itemsPerPage;
    const endIndex = startIndex + itemsPerPage;
    const paginatedData = sortedData.slice(startIndex, endIndex);
    const totalPages = Math.ceil(sortedData.length / itemsPerPage);

    return {
      sortedAndPaginatedData: paginatedData,
      totalPages
    };
  }, [alertData, currentPage, itemsPerPage, sortField, sortDirection]);

  // Reset página quando dados mudam
  useEffect(() => {
    setCurrentPage(1);
  }, [alertData]);

  // Busca os incidentes acionados no DynamoDB via API
  useEffect(() => {
    const fetchAcionados = async () => {
      try {
        const res = await fetch('https://f6ffk8e9fe.execute-api.us-east-1.amazonaws.com/prod/chatacionados');
        if (!res.ok) throw new Error(`Erro ao buscar acionados: ${res.status}`);
        const data: { chamado: string }[] = await res.json();
        setAcionadosSet(new Set(data.map(item => item.chamado.toString())));
      } catch (error) {
        toast({
          title: 'Erro ao buscar acionados',
          description: 'Não foi possível carregar os incidentes acionados',
          variant: 'destructive',
        });
      }
    };
    fetchAcionados();
  }, []);

  // Carrega dados de confirmação quando os alertas mudam
  useEffect(() => {
    if (alertData.length > 0) {
      loadConfirmationData();
    }
  }, [alertData, loadConfirmationData]);
  

  const handleAcknowledgment = async (alert: AlertData) => {
    try {
      const response = await fetch(
        "https://f6ffk8e9fe.execute-api.us-east-1.amazonaws.com/prod/webhook"
      );
      const data = await response.json();

      // Procura o grupo correspondente
      const grupoEntry = data.grupos.find(
        (g: any) => g.grupo_chamado === alert.grupo_chamado
      );

      if (!grupoEntry || !grupoEntry.webhooks.length) {
        toast({
          title: "Webhook não configurado",
          description: `Configure o webhook para o Grupo: ${alert.grupo_chamado}`,
          variant: "destructive",
        });
        return;
      }

      // Pega o primeiro webhook ativo
      const activeWebhook = grupoEntry.webhooks.find((w: any) => w.ativo);
      if (!activeWebhook) {
        toast({
          title: "Nenhum webhook ativo",
          description: `O grupo ${alert.grupo_chamado} não possui webhooks ativos`,
          variant: "destructive",
        });
        return;
      }

      const webhookUrl = activeWebhook.url;

      // Enviar mensagem para Google Chat
      const message = {
        cards: [
          {
            header: {
              title: "<b>🚨 O CIOPs precisa da sua atenção! <b>"
            },
            sections: [
              {
                widgets: [
                  {
                    textParagraph: {
                      text: `É necessário confirmação de recebimento e ciência pelo grupo responsável.`
                    }
                  }
                ]
              },
              {
                widgets: [
                  {
                    textParagraph: {
                      text:
                        "<b>Detalhes do Evento:</b><br><br>" +
                        "<b>📌 Chamado: </b>" + alert.chamado + "<br><br>" +
                        "<b>⚠️ Severidade: </b>" + alert.severidade_chamado + "<br><br>" +
                        "<b>📰 Título: </b>" + alert.resumo_chamado + "<br><br>" +
                        "<b>📅 Abertura: </b>" + alert.abertura_chamado + "<br><br>" +
                        "<b>👥 Grupo: </b>" + alert.grupo_chamado
                    }
                  }
                ],
              },
              {
                widgets: [
                  {
                    textParagraph: {
                      text: `<b>⚠️ Atenção: </b> Na ausência de confirmação, o CIOPs dará início ao processo de escalonamento, conforme procedimento padrão.`
                    }
                  }
                ]
              },
              {
                widgets: [
                  {
                    buttons: [
                      {
                        textButton: {
                          text: "✅ Confirmar Recebimento",
                          onClick: {
                            action: {
                              actionMethodName: "confirmarAlerta",
                              parameters: [
                                { key: "chamado", value: alert.chamado },
                                { key: "grupo", value: alert.grupo_chamado }
                              ]
                            }
                          }
                        }
                      }
                    ]
                  }
                ]
              }
            ],
          },
        ],
      };

      await fetch(webhookUrl, {
        method: "POST",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify(message),
      });

      // Marca como acionado no DynamoDB
      const res = await fetch(
        "https://f6ffk8e9fe.execute-api.us-east-1.amazonaws.com/prod/chatacionados",
        {
          method: "POST",
          headers: { "Content-Type": "application/json" },
          body: JSON.stringify({ chamado: alert.chamado.toString() }),
        }
      );

      if (!res.ok) {
        const errorData = await res.json();
        throw new Error(errorData.message || "Erro ao marcar como acionado");
      }

      setAcionadosSet(prev => new Set([...prev, alert.chamado.toString()]));
      onUpdateAcknowledgment(alert.id, true);

      // Inicia processo de confirmação
      startConfirmation(alert.chamado);

      toast({
        title: "Alerta acionado com sucesso",
        description: `Mensagem enviada para o Grupo: ${alert.grupo_chamado}`,
      });

    } catch (error: any) {
      toast({
        title: "Erro ao acionar alerta",
        description: error.message || "Não foi possível concluir o acionamento",
        variant: "destructive",
      });
    }
  };

  const truncateText = (text: string, maxLength: number) => {
    return text.length > maxLength ? text.substring(0, maxLength) + '...' : text;
  };

  const handleIncidentClick = (alert: AlertData) => {
    if (alert.tipo_chamado.toLowerCase().includes('incidente')) {
      setSelectedIncident(alert);
      setCrisisDialogOpen(true);
    }
  };

  const getSeverityColor = (severity: string) => {
    return severity.includes('4')
      ? 'bg-gradient-danger text-destructive-foreground shadow-md'
      : 'bg-gradient-warning text-warning-foreground shadow-md';
  };

  const [chamadoModalOpen, setChamadoModalOpen] = useState(false);
  const handleChamadoClick = (alert: AlertData) => {
    setSelectedIncident(alert);
    setChamadoModalOpen(true);
  };

  const getStatusBadgeClass = (chat: boolean) =>
    chat
      ? 'bg-gradient-success text-success-foreground border-success/50 shadow-lg'
      : 'bg-gradient-danger text-destructive-foreground border-destructive/50 shadow-lg';

  const getStatusIcon = (chat: boolean) =>
    chat ? <Check className="h-4 w-4" /> : <XCircle className="h-4 w-4" />;

  const getStatusText = (chat: boolean) => {
    return chat ? 'ACIONADO VIA CHAT' : 'NÃO ACIONADO VIA CHAT';
  };
  
  const handlePageChange = (page: number) => {
    setCurrentPage(page);
  };

  // Renderiza o componente de confirmação/escalação
  const renderConfirmationColumn = (alert: AlertData) => {
    const state = escalationStates[alert.chamado];
    const currentObservation = confirmationObservations[alert.chamado] || '';
    const showConfirmation = showStatusConfirmation[alert.chamado];
    const pendingChange = pendingStatusChange[alert.chamado];
    const operator = selectedOperators[alert.chamado] || '';
    
    if (!state) {
      return (
        <div className="space-y-3 p-3 rounded-lg bg-gradient-to-br from-blue-50 to-indigo-50 border border-blue-200">
          <OperatorSelector
            value={operator}
            onOperatorChange={(value) => handleOperatorChange(alert.chamado, value)}
          />
          <EscalationButton
            variant="pending"
            size="sm"
            onClick={() => startConfirmation(alert.chamado)}
            disabled={!operator.trim()}
            className="w-full"
          >
            <Play className="h-3 w-3 mr-2" />
            Iniciar Processo
          </EscalationButton>
        </div>
      );
    }

    switch (state.status) {
      case 'pending':
        return (
          <div className="space-y-3 p-3 rounded-lg bg-gradient-to-br from-amber-50 to-orange-50 border border-amber-200">
            <div className="flex items-center justify-center gap-2 mb-2">
              <Timer className="h-4 w-4 text-amber-600" />
              <span className="text-sm font-mono font-semibold text-amber-800">
                {formatTime(state.timeRemaining)}
              </span>
            </div>
            
            <OperatorSelector
              value={operator}
              onOperatorChange={(value) => handleOperatorChange(alert.chamado, value)}
              disabled={state.timerActive}
            />
            
            <div className="space-y-2">
              <Label className="text-xs font-medium">
                Observações da Confirmação <span className="text-destructive">*</span>
              </Label>
              <Textarea
                placeholder="Descreva as ações tomadas para confirmação..."
                value={currentObservation}
                onChange={(e) => handleConfirmationObservationChange(alert.chamado, e.target.value)}
                className="text-xs min-h-[60px] resize-none"
                required
              />
              {!currentObservation.trim() && (
                <p className="text-xs text-destructive">
                  Observações são obrigatórias
                </p>
              )}
            </div>
            
            <div className="flex gap-2">
              <EscalationButton
                variant="confirmed"
                size="sm"
                onClick={() => confirmReceived(alert.chamado)}
                disabled={!currentObservation.trim() || !operator.trim()}
                className="flex-1"
              >
                <Check className="h-3 w-3 mr-1" />
                Confirmar
              </EscalationButton>
              <EscalationButton
                variant="escalating"
                size="sm"
                onClick={() => startEscalation(alert.chamado, 1)}
                disabled={!operator.trim()}
                className="flex-1"
              >
                <FastForward className="h-3 w-3 mr-1" />
                Escalar
              </EscalationButton>
            </div>
          </div>
        );

      case 'confirmed':
        return (
          <div className="space-y-3 p-3 rounded-lg bg-gradient-to-br from-emerald-50 to-green-50 border border-emerald-200">
            <EscalationStatus status="confirmed" />
            {state.operator && (
              <div className="flex items-center gap-2 text-xs text-emerald-700">
                <Users className="h-3 w-3" />
                <span>Por: {state.operator}</span>
              </div>
            )}
            <div className="flex gap-2">
              <EscalationButton
                variant="escalating"
                size="sm"
                onClick={() => startEscalation(alert.chamado, 1)}
                className="flex-1"
              >
                <FastForward className="h-3 w-3 mr-1" />
                Iniciar 1ª Escalação
              </EscalationButton>
            </div>
            {state.observations && (
              <div className="text-xs bg-white/60 p-2 rounded border text-emerald-800">
                <strong>Observações:</strong><br />
                {state.observations}
              </div>
            )}
          </div>
        );

      case 'escalating':
        const levelNames = { 1: '1ª', 2: '2ª', 3: '3ª', 4: '4ª' };
        
        return (
          <div className="space-y-3 p-3 rounded-lg bg-gradient-to-br from-red-50 to-rose-50 border border-red-200">
            {state.currentLevel > 0 && (
              <div className="text-center">
                <EscalationStatus 
                  status="escalating" 
                  level={state.currentLevel}
                  timeRemaining={state.timerActive ? state.timeRemaining : undefined}
                />
                {state.operator && (
                  <div className="flex items-center justify-center gap-2 text-xs text-red-700 mt-2">
                    <Users className="h-3 w-3" />
                    <span>Por: {state.operator}</span>
                  </div>
                )}
              </div>
            )}

            {!state.isAttended && (
              <>
                {/* Campo de observações sempre visível quando em escalação */}
                {state.currentLevel === 0 || (!state.timerActive && state.currentLevel < 4) ? (
                  <div className="space-y-2">
                    <div className="flex gap-2">
                      {/* Botão Voltar - só aparece se não estiver no nível 0 */}
                      {state.currentLevel > 0 && (
                        <EscalationButton
                          variant="action"
                          size="sm"
                          onClick={() => goBackEscalation(alert.chamado)}
                          className="flex-1"
                        >
                          <RotateCcw className="h-3 w-3 mr-1" />
                          Voltar
                        </EscalationButton>
                      )}
                      
                       {/* Próxima escalação */}
                       {state.currentLevel < 4 && (
                         <EscalationButton
                           variant="escalating"
                           size="sm"
                           onClick={() => startEscalation(alert.chamado, (state.currentLevel + 1) as 1 | 2 | 3 | 4)}
                           className="flex-1"
                         >
                           Iniciar {levelNames[(state.currentLevel + 1) as keyof typeof levelNames]}
                         </EscalationButton>
                       )}
                    </div>
                  </div>
                ) : (
                  <div className="space-y-2">
                    {/* Mostrar confirmação de status quando pendente */}
                    {showConfirmation ? (
                      <div className="space-y-2 p-3 border-2 border-dashed border-amber-300 rounded-lg bg-amber-50">
                        <div className="text-xs font-medium text-amber-800">
                          Confirmar: {pendingChange?.status === 'attended' ? 'Atendida' : 'Não Atendida'}
                        </div>
                        
                         <div className="space-y-1">
                           <Label className="text-xs font-medium">
                             Observações <span className="text-destructive">*</span>
                           </Label>
                           <Textarea
                             placeholder="Descreva o resultado da escalação..."
                             value={pendingChange?.observations || ''}
                             onChange={(e) => handlePendingObservationChange(alert.chamado, e.target.value)}
                             className="text-xs min-h-[60px] resize-none"
                             required
                           />
                           {!pendingChange?.observations?.trim() && (
                             <p className="text-xs text-destructive">
                               Observações são obrigatórias
                             </p>
                           )}
                         </div>
                        
                        <div className="flex gap-2">
                          <EscalationButton
                            variant="confirmed"
                            size="sm"
                            onClick={() => confirmStatusChange(alert.chamado)}
                            disabled={!pendingChange?.observations?.trim()}
                            className="flex-1"
                          >
                            <Check className="h-3 w-3 mr-1" />
                            Confirmar
                          </EscalationButton>
                          <EscalationButton
                            variant="action"
                            size="sm"
                            onClick={() => cancelStatusChange(alert.chamado)}
                            className="flex-1"
                          >
                            <X className="h-3 w-3 mr-1" />
                            Cancelar
                          </EscalationButton>
                        </div>
                      </div>
                    ) : (
                      <>
                        <div className="flex gap-2">
                          {/* Botão Voltar */}
                          <EscalationButton
                            variant="action"
                            size="sm"
                            onClick={() => goBackEscalation(alert.chamado)}
                            className="flex-1"
                          >
                            <RotateCcw className="h-3 w-3 mr-1" />
                            Voltar
                          </EscalationButton>
                        </div>

                        <Select
                          value=""
                          onValueChange={(value) => prepareStatusChange(alert.chamado, value)}
                        >
                          <SelectTrigger className="h-8 text-xs bg-white border-red-200 hover:border-red-300">
                            <SelectValue placeholder="Resultado da Escalação" />
                          </SelectTrigger>
                          <SelectContent>
                            <SelectItem value="attended">✅ Atendida</SelectItem>
                            <SelectItem value="not-attended">❌ Não Atendida</SelectItem>
                          </SelectContent>
                        </Select>
                      </>
                    )}
                  </div>
                )}
              </>
            )}
          </div>
        );

      case 'completed':
        return (
          <div className="space-y-3 p-3 rounded-lg bg-gradient-to-br from-blue-50 to-indigo-50 border border-blue-200">
            <EscalationStatus status="completed" />
            {state.operator && (
              <div className="flex items-center gap-2 text-xs text-blue-700">
                <Users className="h-3 w-3" />
                <span>Por: {state.operator}</span>
              </div>
            )}
            {state.observations && (
              <div className="text-xs bg-white/60 p-2 rounded border text-blue-800">
                <strong>Observações:</strong><br />
                {state.observations}
              </div>
            )}
          </div>
        );

      default:
        return null;
    }
  };

  return (
    <TooltipProvider>
      <Card className="bg-card border-border shadow-xl">
        <CardHeader className="pb-4">
          <div className="flex items-center justify-between">
            <div className="flex items-center gap-3">
              <div className="h-8 w-1 bg-gradient-primary rounded-full"></div>
              <h3 className="text-lg font-semibold">Sistema de Escalação</h3>
            </div>
            <div className="flex items-center gap-2">
              {isSyncing && (
                <div className="flex items-center gap-2 text-sm text-muted-foreground">
                  <RefreshCw className="h-4 w-4 animate-spin" />
                  Sincronizando...
                </div>
              )}
              <EscalationButton
                variant="action"
                size="sm"
                onClick={() => loadConfirmationData()}
                disabled={isSyncing}
              >
                <RefreshCw className={`h-3 w-3 mr-1 ${isSyncing ? 'animate-spin' : ''}`} />
                Sincronizar
              </EscalationButton>
            </div>
          </div>
        </CardHeader>
        <CardContent>
          {/* Layout para Mobile (oculto em desktop) */}
          <div className="block lg:hidden space-y-4">
            {loading ? (
              <div className="text-center py-8">
                <div className="inline-block animate-spin rounded-full h-8 w-8 border-b-2 border-primary mb-4"></div>
                <p>Carregando dados...</p>
              </div>
            ) : sortedAndPaginatedData.length === 0 ? (
              <div className="text-center py-8 text-muted-foreground">
                Nenhum dado disponível
              </div>
            ) : (
              sortedAndPaginatedData.map((alert) => {
                const isChat = acionadosSet.has(alert.chamado.toString());
                const isExpanded = expandedRows.has(alert.id);
                return (
                  <Card key={alert.id} className="bg-secondary/50 border-border w-full shadow-md hover:shadow-lg transition-all duration-300">
                    <CardContent className="p-4">
                      {/* Linha 1 - chamado, severidade_chamado e classificação */}
                      <div className="flex items-center justify-between mb-3 gap-2 flex-wrap">
                        <div className="flex items-center gap-2 flex-wrap">
                          <Badge variant="outline" className="text-xs border-primary/30">
                            <Button
                              variant="link"
                              size="sm"
                              className="text-xs p-0 hover:underline text-primary"
                              onClick={() => handleChamadoClick(alert)}
                            >
                              {alert.chamado}
                            </Button>
                          </Badge>
                          <Badge variant="outline" className="text-xs max-w-[100px] truncate">
                            {alert.tipo_chamado}
                          </Badge>
                          <Badge className={`${getSeverityColor(alert.severidade_chamado)} text-xs`}>
                            {alert.severidade_chamado}
                          </Badge>
                        </div>
                      </div>

                      <div className="space-y-3">
                        {/* Título */}
                        <div className="w-full">
                          <p className="text-sm font-medium break-words leading-relaxed">
                            {truncateText(alert.resumo_chamado, isExpanded ? 200 : 60)}
                          </p>
                        </div>

                        {/* Linha 2 - grupo_chamado e status */}
                        <div className="flex items-center justify-between text-xs text-muted-foreground gap-2">
                          <span className="text-sm font-semibold text-foreground truncate flex-1">
                            {alert.grupo_chamado}
                          </span>
                          <span className="truncate">{alert.status_chamado}</span>
                        </div>

                        {/* Linha 3 - abertura_chamado */}
                        <div className="text-xs text-muted-foreground">
                          {formatDate(alert.abertura_chamado)}
                        </div>

                        {/* Confirmação Mobile */}
                        <div className="border-t pt-3">
                          <div className="text-xs text-muted-foreground mb-2 font-medium">Confirmação/Escalação:</div>
                          {renderConfirmationColumn(alert)}
                        </div>

                        {/* Botões */}
                        <div className="flex items-center justify-between pt-3 gap-2 border-t">
                          <div className="flex items-center gap-2">
                            {alert.tipo_chamado.toLowerCase().includes('incidente') && (
                              <Button
                                variant="outline"
                                size="sm"
                                onClick={() => handleIncidentClick(alert)}
                                className="h-7 px-2 text-xs border-amber-200 hover:bg-amber-50"
                              >
                                <ExternalLink className="h-3 w-3 mr-1" />
                                <span className="hidden sm:inline">Crise</span>
                              </Button>
                            )}
                          </div>

                          <EscalationButton
                            variant={isChat ? 'confirmed' : 'action'}
                            size="sm"
                            onClick={() => !isChat && handleAcknowledgment(alert)}
                            disabled={isChat}
                            className="flex-shrink-0"
                          >
                            {isChat ? (
                              <>
                                <Check className="h-3 w-3 mr-1" />
                                <span className="hidden sm:inline">Acionado</span>
                              </>
                            ) : (
                              <>
                                <AlertTriangle className="h-3 w-3 mr-1" />
                                <span className="hidden sm:inline">Acionar</span>
                              </>
                            )}
                          </EscalationButton>
                        </div>
                      </div>
                    </CardContent>
                  </Card>
                );
              })
            )}

            {/* Paginação Mobile */}
            {!loading && sortedAndPaginatedData.length > 0 && totalPages > 1 && (
              <div className="flex items-center justify-between mt-6 px-2">
                <div className="text-sm text-muted-foreground">
                  Página {currentPage} de {totalPages}
                </div>
                <div className="flex items-center gap-1">
                  <Button
                    variant="outline"
                    size="sm"
                    onClick={() => handlePageChange(currentPage - 1)}
                    disabled={currentPage === 1}
                    className="h-8 w-8 p-0"
                  >
                    <ChevronLeft className="h-4 w-4" />
                  </Button>
                  <Button
                    variant="outline"
                    size="sm"
                    onClick={() => handlePageChange(currentPage + 1)}
                    disabled={currentPage === totalPages}
                    className="h-8 w-8 p-0"
                  >
                    <ChevronRight className="h-4 w-4" />
                  </Button>
                </div>
              </div>
            )}
          </div>

          {/* Layout para Desktop */}
          <div className="hidden lg:block">
            <div className="w-full overflow-x-auto">
              <div className="min-w-[1200px]">
                <Table>
                  <TableHeader>
                    <TableRow className="border-border hover:bg-accent/50">
                      <TableHead className="text-muted-foreground min-w-[80px]">
                        <Button
                          variant="ghost"
                          className="h-auto p-0 font-medium text-muted-foreground hover:text-foreground text-xs"
                          onClick={() => handleSort('chamado')}
                        >
                          Chamado
                          {getSortIcon('chamado')}
                        </Button>
                      </TableHead>
                      <TableHead className="text-muted-foreground min-w-[100px]">
                        <Button
                          variant="ghost"
                          className="h-auto p-0 font-medium text-muted-foreground hover:text-foreground text-xs"
                          onClick={() => handleSort('tipo_chamado')}
                        >
                          Classificação
                          {getSortIcon('tipo_chamado')}
                        </Button>
                      </TableHead>
                      <TableHead className="text-muted-foreground min-w-[90px]">
                        <Button
                          variant="ghost"
                          className="h-auto p-0 font-medium text-muted-foreground hover:text-foreground text-xs"
                          onClick={() => handleSort('grupo_chamado')}
                        >
                          Grupo
                          {getSortIcon('grupo_chamado')}
                        </Button>
                      </TableHead>
                      <TableHead className="text-muted-foreground min-w-[80px]">
                        <Button
                          variant="ghost"
                          className="h-auto p-0 font-medium text-muted-foreground hover:text-foreground text-xs"
                          onClick={() => handleSort('status_chamado')}
                        >
                          Status
                          {getSortIcon('status_chamado')}
                        </Button>
                      </TableHead>
                      <TableHead className="text-muted-foreground min-w-[100px]">
                        <Button
                          variant="ghost"
                          className="h-auto p-0 font-medium text-muted-foreground hover:text-foreground text-xs"
                          onClick={() => handleSort('abertura_chamado')}
                        >
                          Abertura
                          {getSortIcon('abertura_chamado')}
                        </Button>
                      </TableHead>
                      <TableHead className="text-muted-foreground min-w-[150px] max-w-[200px]">
                        <Button
                          variant="ghost"
                          className="h-auto p-0 font-medium text-muted-foreground hover:text-foreground text-xs"
                          onClick={() => handleSort('resumo_chamado')}
                        >
                          Título
                          {getSortIcon('resumo_chamado')}
                        </Button>
                      </TableHead>
                      <TableHead className="text-muted-foreground min-w-[90px]">
                        <Button
                          variant="ghost"
                          className="h-auto p-0 font-medium text-muted-foreground hover:text-foreground text-xs"
                          onClick={() => handleSort('severidade_chamado')}
                        >
                          Severidade
                          {getSortIcon('severidade_chamado')}
                        </Button>
                      </TableHead>

                      <TableHead className="text-muted-foreground min-w-[300px]">
                        <div className="flex items-center gap-2">
                          <Users className="h-4 w-4 text-primary" />
                          Confirmação/Escalação
                        </div>
                      </TableHead>
                      <TableHead className="text-muted-foreground min-w-[70px]">Chat</TableHead>
                    </TableRow>
                  </TableHeader>
                  <TableBody>
                    {loading ? (
                      <TableRow>
                        <TableCell colSpan={10} className="text-center py-8">
                          <div className="flex items-center justify-center gap-2">
                            <RefreshCw className="h-4 w-4 animate-spin" />
                            Carregando dados...
                          </div>
                        </TableCell>
                      </TableRow>
                    ) : sortedAndPaginatedData.length === 0 ? (
                      <TableRow>
                        <TableCell colSpan={10} className="text-center py-8 text-muted-foreground">
                          Nenhum dado disponível
                        </TableCell>
                      </TableRow>
                    ) : (
                      sortedAndPaginatedData.map((alert) => {
                        const isChat = acionadosSet.has(alert.chamado.toString());
                        return (
                          <TableRow
                            key={alert.id}
                            className="border-border hover:bg-accent/30 transition-all duration-200"
                          >
                            <TableCell className="font-medium">
                              <Button
                                variant="link"
                                size="sm"
                                className="p-0 text-primary hover:underline text-xs font-semibold"
                                onClick={() => handleChamadoClick(alert)}
                              >
                                {alert.chamado}
                              </Button>
                            </TableCell>
                            <TableCell>
                              <Tooltip>
                                <TooltipTrigger asChild>
                                  <span className="truncate block max-w-[80px] text-xs">
                                    {alert.tipo_chamado}
                                  </span>
                                </TooltipTrigger>
                                <TooltipContent>
                                  <p className="max-w-xs">{alert.tipo_chamado}</p>
                                </TooltipContent>
                              </Tooltip>
                            </TableCell>
                            <TableCell className="text-xs font-medium">{alert.grupo_chamado}</TableCell>
                            <TableCell className="text-xs">{alert.status_chamado}</TableCell>
                            <TableCell className="text-xs">
                              {formatDate(alert.abertura_chamado)}
                            </TableCell>
                            <TableCell>
                              <div className="flex items-center gap-2">
                                <Tooltip>
                                  <TooltipTrigger asChild>
                                    <span className="truncate block max-w-[120px] text-xs">
                                      {alert.resumo_chamado}
                                    </span>
                                  </TooltipTrigger>
                                  <TooltipContent>
                                    <p className="max-w-md">{alert.resumo_chamado}</p>
                                  </TooltipContent>
                                </Tooltip>
                                {alert.tipo_chamado.toLowerCase().includes('incidente') && (
                                  <Button
                                    variant="ghost"
                                    size="sm"
                                    onClick={() => handleIncidentClick(alert)}
                                    className="p-1 h-auto hover:bg-amber-100 flex-shrink-0"
                                    title="Iniciar processo de crise"
                                  >
                                    <ExternalLink className="h-3 w-3 text-amber-600" />
                                  </Button>
                                )}
                              </div>
                            </TableCell>
                            <TableCell>
                              <Badge className={`${getSeverityColor(alert.severidade_chamado)} text-xs`}>
                                {alert.severidade_chamado}
                              </Badge>
                            </TableCell>
                            <TableCell className="min-w-[300px]">
                              {renderConfirmationColumn(alert)}
                            </TableCell>
                            <TableCell>
                              <EscalationButton
                                variant={isChat ? "confirmed" : "action"}
                                size="icon"
                                onClick={() => !isChat && handleAcknowledgment(alert)}
                                disabled={isChat}
                              >
                                {isChat ? (
                                  <Check className="h-3 w-3" />
                                ) : (
                                  <AlertTriangle className="h-3 w-3" />
                                )}
                              </EscalationButton>
                            </TableCell>
                          </TableRow>
                        );
                      })
                    )}
                  </TableBody>
                </Table>
              </div>
            </div>

            {/* Paginação Desktop */}
            {!loading && sortedAndPaginatedData.length > 0 && totalPages > 1 && (
              <div className="flex items-center justify-between mt-6 pt-4 border-t border-border">
                <div className="text-sm text-muted-foreground">
                  Mostrando {((currentPage - 1) * itemsPerPage) + 1} a {Math.min(currentPage * itemsPerPage, alertData.length)} de {alertData.length} registros
                </div>
                <div className="flex items-center gap-2">
                  <Button
                    variant="outline"
                    size="sm"
                    onClick={() => handlePageChange(currentPage - 1)}
                    disabled={currentPage === 1}
                    className="h-8 px-3"
                  >
                    <ChevronLeft className="h-4 w-4 mr-1" />
                    Anterior
                  </Button>

                  <div className="flex items-center gap-1">
                    {[...Array(Math.min(totalPages, 5))].map((_, index) => {
                      let page;
                      if (totalPages <= 5) {
                        page = index + 1;
                      } else if (currentPage <= 3) {
                        page = index + 1;
                      } else if (currentPage >= totalPages - 2) {
                        page = totalPages - 4 + index;
                      } else {
                        page = currentPage - 2 + index;
                      }

                      return (
                        <Button
                          key={page}
                          variant={currentPage === page ? "default" : "outline"}
                          size="sm"
                          onClick={() => handlePageChange(page)}
                          className="h-8 w-8 p-0"
                        >
                          {page}
                        </Button>
                      );
                    })}
                  </div>

                  <Button
                    variant="outline"
                    size="sm"
                    onClick={() => handlePageChange(currentPage + 1)}
                    disabled={currentPage === totalPages}
                    className="h-8 px-3"
                  >
                    Próximo
                    <ChevronRight className="h-4 w-4 ml-1" />
                  </Button>
                </div>
              </div>
            )}
          </div>

          {/* Dialog do Modal de Chamado */}
          <Dialog open={chamadoModalOpen} onOpenChange={setChamadoModalOpen}>
            <DialogContent className="max-w-3xl max-h-[80vh] border-border shadow-2xl overflow-y-auto">
              <DialogHeader className="pb-6 border-b border-border">
                <DialogTitle className="text-left">
                  {/* Header com design melhorado */}
                  <div className="relative overflow-hidden rounded-2xl p-6 mb-4 bg-gradient-primary">
                    {/* Número do chamado e título */}
                    <div className="relative z-10 flex items-start gap-4">
                      <div className="p-3 rounded-xl bg-white/20 backdrop-blur-sm border border-white/30 shadow-lg">
                        {selectedIncident?.tipo_chamado === "Solicitação" ? (
                          <Zap className="h-6 w-6 text-white drop-shadow-sm" />
                        ) : selectedIncident?.tipo_chamado === "Incidente" ? (
                          <AlertTriangle className="h-6 w-6 text-white drop-shadow-sm" />
                        ) : (
                          <Zap className="h-6 w-6 text-white drop-shadow-sm" />
                        )}
                      </div>

                      <div className="flex-1">
                        <div className="flex items-center gap-3 mb-2">
                          <span className="text-2xl font-bold text-white drop-shadow-sm">
                            {selectedIncident?.chamado}
                          </span>
                          <div className="h-1 flex-1 bg-white/20 rounded-full">
                            <div className="h-full w-3/4 bg-white/40 rounded-full"></div>
                          </div>
                        </div>

                        <h2 className="text-lg font-medium text-white/95 leading-relaxed drop-shadow-sm">
                          {selectedIncident?.resumo_chamado}
                        </h2>
                      </div>
                    </div>

                    {/* Status badges */}
                    {selectedIncident && (
                      <div className="relative z-10 flex flex-wrap items-center gap-3 mt-6">
                        <div className="animate-fade-in">
                          <div className={`${getStatusBadgeClass(selectedIncident.chat)} flex items-center gap-2 px-4 py-2 rounded-xl 
                              backdrop-blur-sm border border-white/20 shadow-lg`}>
                            {getStatusIcon(selectedIncident.chat)}
                            <span className="font-medium text-sm">
                              {getStatusText(selectedIncident.chat)}
                            </span>
                          </div>
                        </div>

                        <div className="animate-fade-in">
                          <div className="bg-white/20 text-white flex items-center gap-2 px-4 py-2 rounded-xl 
                              backdrop-blur-sm border border-white/30 shadow-lg">
                            <span className="font-medium text-sm">{selectedIncident.tipo_chamado}</span>
                          </div>
                        </div>
                      </div>
                    )}
                  </div>
                </DialogTitle>
              </DialogHeader>

              {/* Conteúdo principal */}
              {selectedIncident && (
                <div className="grid grid-cols-1 md:grid-cols-2 gap-6 mt-6">
                  <div className="space-y-4">
                    {/* Card Grupo */}
                    <div className="group relative overflow-hidden rounded-xl bg-card border border-border p-5 
                        shadow-lg hover:shadow-xl transition-all duration-300 hover:-translate-y-1">
                      <div className="absolute top-0 left-0 w-full h-1 bg-gradient-primary"></div>
                      <div className="flex items-start gap-4">
                        <div className="p-2 rounded-lg bg-primary/10 group-hover:bg-primary/20 transition-colors duration-300">
                          <Group className="h-5 w-5 text-primary" />
                        </div>
                        <div className="flex-1">
                          <p className="text-sm text-muted-foreground font-medium mb-1">Grupo</p>
                          <p className="font-bold text-foreground text-lg">{selectedIncident.grupo_chamado}</p>
                        </div>
                      </div>
                    </div>

                    {/* Card Abertura */}
                    <div className="group relative overflow-hidden rounded-xl bg-card border border-border p-5 
                        shadow-lg hover:shadow-xl transition-all duration-300 hover:-translate-y-1">
                      <div className="absolute top-0 left-0 w-full h-1 bg-gradient-success"></div>
                      <div className="flex items-start gap-4">
                        <div className="p-2 rounded-lg bg-success/10 group-hover:bg-success/20 transition-colors duration-300">
                          <Calendar className="h-5 w-5 text-success" />
                        </div>
                        <div className="flex-1">
                          <p className="text-sm text-muted-foreground font-medium mb-1">Data de Abertura</p>
                          <p className="font-bold text-foreground text-lg">{formatDate(selectedIncident.abertura_chamado)}</p>
                        </div>
                      </div>
                    </div>
                  </div>

                  <div className="space-y-4">
                    {/* Card Status */}
                    <div className="group relative overflow-hidden rounded-xl bg-card border border-border p-5 
                        shadow-lg hover:shadow-xl transition-all duration-300 hover:-translate-y-1">
                      <div className="absolute top-0 left-0 w-full h-1 bg-gradient-to-r from-info to-blue-400"></div>
                      <div className="flex items-start gap-4">
                        <div className="p-2 rounded-lg bg-info/10 group-hover:bg-info/20 transition-colors duration-300">
                          <Info className="h-5 w-5 text-info" />
                        </div>
                        <div className="flex-1">
                          <p className="text-sm text-muted-foreground font-medium mb-1">Status</p>
                          <p className="font-bold text-foreground text-lg">{selectedIncident.status_chamado}</p>
                        </div>
                      </div>
                    </div>

                    {/* Card Severidade */}
                    <div className="group relative overflow-hidden rounded-xl bg-card border border-border p-5 
                        shadow-lg hover:shadow-xl transition-all duration-300 hover:-translate-y-1">
                      <div className="absolute top-0 left-0 w-full h-1 bg-gradient-danger"></div>
                      <div className="flex items-start gap-4">
                        <div className="p-2 rounded-lg bg-destructive/10 group-hover:bg-destructive/20 transition-colors duration-300">
                          <Flame className="h-5 w-5 text-destructive" />
                        </div>
                        <div className="flex-1">
                          <p className="text-sm text-muted-foreground font-medium mb-1">Severidade</p>
                          <p className="font-bold text-foreground text-lg">{selectedIncident.severidade_chamado}</p>
                        </div>
                      </div>
                    </div>
                  </div>
                </div>
              )}
            </DialogContent>
          </Dialog>
        </CardContent>
      </Card>
    </TooltipProvider>
  );
};

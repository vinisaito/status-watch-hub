import { useState, useMemo, useCallback } from 'react';
import { Check, AlertTriangle, Timer, Play, Pause, CheckCircle, Edit3, Search, ChevronLeft, ChevronRight, ArrowUpDown, ArrowUp, ArrowDown, Settings } from 'lucide-react';
import { Card, CardContent, CardHeader } from '@/components/ui/card';
import { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from '@/components/ui/table';
import { Badge } from '@/components/ui/badge';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { Label } from '@/components/ui/label';
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';
import { toast } from '@/hooks/use-toast';
import { Tooltip, TooltipContent, TooltipProvider, TooltipTrigger } from '@/components/ui/tooltip';
import { Dialog, DialogContent, DialogHeader, DialogTitle, DialogDescription } from '@/components/ui/dialog';
import { Textarea } from '@/components/ui/textarea';
import { useEffect } from 'react';

// WebSocket hook
import { useWebsocketTimers } from "@/hooks/useWebsocketTimers";

// Modern Timer Management Modal
import { ModernTimerModal } from '@/components/ActionTable/ModernTimerModal';

interface AlertData {
  id: string;
  chamado: string;
  tipo_chamado: string;
  grupo_chamado: string;
  status_chamado: string;
  abertura_chamado: string;
  resumo_chamado: string;
  severidade_chamado: string;
  acionado: string;
  chat: boolean;
}

interface ActionTableProps {
  alertData: AlertData[];
  onUpdateAcknowledgment: (alertId: string, acknowledged: boolean) => void;
  loading: boolean;
}

type SortField = keyof AlertData;
type SortDirection = 'asc' | 'desc' | null;

// Informa√ß√µes dos n√≠veis de escala√ß√£o
const LEVEL_NAMES = {
  1: "Primeiro Acionamento",
  2: "1¬™ Escala√ß√£o",
  3: "2¬™ Escala√ß√£o",
  4: "3¬™ Escala√ß√£o",
  5: "4¬™ Escala√ß√£o"
};

export const ActionTable = ({ alertData, onUpdateAcknowledgment, loading }: ActionTableProps) => {
  // Estados principais
  const [currentPage, setCurrentPage] = useState(1);
  const [searchTerm, setSearchTerm] = useState('');
  const [itemsPerPage, setItemsPerPage] = useState<number>(5);
  const [sortField, setSortField] = useState<SortField>('chamado');
  const [sortDirection, setSortDirection] = useState<SortDirection>('desc');

  // Estados dos modais
  const [observacaoDialogOpen, setObservacaoDialogOpen] = useState(false);
  const [timerManagementOpen, setTimerManagementOpen] = useState(false);
  const [selectedChamadoForEdit, setSelectedChamadoForEdit] = useState<string>('');
  const [selectedChamadoForTimer, setSelectedChamadoForTimer] = useState<string>('');
  const [observacaoText, setObservacaoText] = useState('');
  const [operadorText, setOperadorText] = useState('');

  // WebSocket
  const {
    timers,
    isConnected,
    startTimer,
    updateObservacao,
    updateOperador,
    updateStatusFinal,
    updateAcionamento,
    getRemainingTime,
    formatTime,
    isTimerActive,
    getState,
    setWatchedChamados
  } = useWebsocketTimers();

  // Primeiro registrar os chamados que queremos monitorar
  useEffect(() => {
    if (!alertData || alertData.length === 0) return;

    const chamadosNum = alertData.map(a => parseInt(a.chamado));
    setWatchedChamados(chamadosNum);

    // For√ßar getState imediatamente
    chamadosNum.forEach(chamado => getState(chamado));
  }, [alertData, setWatchedChamados, getState]);

  // Estados locais para observa√ß√µes
  const [localObservacoes, setLocalObservacoes] = useState<Map<string, { observacao: string; operador: string }>>(new Map());

  // Fun√ß√µes utilit√°rias
  const formatDate = useCallback((dateString: string) => {
    if (!dateString || dateString === '' || dateString === 'null' || dateString === 'undefined') {
      return '-';
    }

    try {
      let date: Date;
      const cleanString = String(dateString).trim();

      if (/^\d{13}$/.test(cleanString)) {
        date = new Date(parseInt(cleanString));
      } else if (/^\d{10}$/.test(cleanString)) {
        date = new Date(parseInt(cleanString) * 1000);
      } else if (/^\d{2}\/\d{2}\/\d{4}/.test(cleanString)) {
        const parts = cleanString.split(' ');
        const datePart = parts[0];
        const timePart = parts[1] || '00:00:00';
        const [day, month, year] = datePart.split('/');
        const [hour, minute, second] = timePart.split(':');

        date = new Date(
          parseInt(year),
          parseInt(month) - 1,
          parseInt(day),
          parseInt(hour || '0'),
          parseInt(minute || '0'),
          parseInt(second || '0')
        );
      } else {
        date = new Date(cleanString);
      }

      if (isNaN(date.getTime())) return cleanString;

      const year = date.getFullYear();
      if (year < 1900 || year > 2100) return cleanString;

      return date.toLocaleString('pt-BR', {
        day: '2-digit',
        month: '2-digit',
        year: 'numeric',
        hour: '2-digit',
        minute: '2-digit',
        second: '2-digit',
      });
    } catch (error) {
      return String(dateString);
    }
  }, []);

  const getSeverityColor = useCallback((severity: string) => {
    return severity.includes('4')
      ? 'bg-destructive text-destructive-foreground'
      : 'bg-yellow-500 text-yellow-950';
  }, []);

  // Fun√ß√£o para obter o n√≠vel atual ativo do timer
  const getCurrentActiveLevel = useCallback((chamado: number) => {
    const timerState = timers.get(chamado);
    if (!timerState) return null;

    // Verificar levels de 1 a 5 para encontrar o ativo
    for (let level = 1; level <= 5; level++) {
      const statusKey = `level${level}_status` as keyof typeof timerState;
      if (timerState[statusKey] === 'running') {
        return level;
      }
    }
    return null;
  }, [timers]);

  // Handlers para acionamento
  const handleAcknowledgment = useCallback(async (alert: AlertData) => {
    try {
      toast({
        title: "Alerta acionado",
        description: `Chamado ${alert.chamado} foi acionado com sucesso`,
      });

      onUpdateAcknowledgment(alert.id, true);
    } catch (error: any) {
      toast({
        title: "Erro ao acionar alerta",
        description: error.message || "N√£o foi poss√≠vel concluir o acionamento",
        variant: "destructive",
      });
    }
  }, [onUpdateAcknowledgment]);

  // Handlers para timer
  const handleStartTimer = useCallback((chamado: string) => {
    const chamadoNum = parseInt(chamado);
    const duration = 1200; // 20 minutos em segundos

    console.log(`Iniciando Primeiro Acionamento para chamado ${chamado}`);

    const success = startTimer(chamadoNum, 1, duration);

    if (success) {
      toast({
        title: "üöÄ Primeiro Acionamento Iniciado",
        description: `Timer de 20 minutos iniciado para chamado ${chamado}`,
      });

      setTimeout(() => {
        getState(chamadoNum);
      }, 1000);
    }
  }, [startTimer, getState]);

  // Handlers para gerenciamento de etapas
  const handleOpenTimerManagement = useCallback((chamado: string) => {
    setSelectedChamadoForTimer(chamado);
    setTimerManagementOpen(true);
  }, []);

  // CORRIGIDO: Fun√ß√£o para avan√ßar para pr√≥ximo n√≠vel
  const handleNextLevel = useCallback(async (chamado: string, nextLevel: number, observacao: string) => {
    try {
      const chamadoNum = parseInt(chamado);
      const duration = 1200; // 20 minutos para cada etapa

      // Primeiro salvar a observa√ß√£o do n√≠vel atual
      const currentLevel = getCurrentActiveLevel(chamadoNum);
      if (currentLevel && observacao.trim()) {
        updateObservacao(chamadoNum, currentLevel, observacao.trim());
      }

      // Iniciar o pr√≥ximo n√≠vel
      const success = startTimer(chamadoNum, nextLevel, duration);

      if (success) {
        const levelName = LEVEL_NAMES[nextLevel as keyof typeof LEVEL_NAMES] || `N√≠vel ${nextLevel}`;

        // Aguardar um momento para garantir que o timer foi iniciado
        await new Promise(resolve => setTimeout(resolve, 500));

        // Atualizar estado
        getState(chamadoNum);

        return true;
      }

      return false;
    } catch (error) {
      console.error('Erro em handleNextLevel:', error);
      throw error;
    }
  }, [startTimer, updateObservacao, getState, getCurrentActiveLevel]);

  // CORRIGIDO: Fun√ß√£o para voltar ao n√≠vel anterior
  const handlePreviousLevel = useCallback(async (chamado: string, previousLevel: number, observacao: string) => {
    try {
      const chamadoNum = parseInt(chamado);

      // Salvar observa√ß√£o do n√≠vel atual
      const currentLevel = getCurrentActiveLevel(chamadoNum);
      if (currentLevel && observacao.trim()) {
        updateObservacao(chamadoNum, currentLevel, observacao.trim());
      }

      // Iniciar o n√≠vel anterior
      const duration = 1200; // 20 minutos
      const success = startTimer(chamadoNum, previousLevel, duration);

      if (success) {
        // Aguardar um momento para garantir que o timer foi iniciado
        await new Promise(resolve => setTimeout(resolve, 500));

        // Atualizar estado
        getState(chamadoNum);

        return true;
      }

      return false;
    } catch (error) {
      console.error('Erro em handlePreviousLevel:', error);
      throw error;
    }
  }, [startTimer, updateObservacao, getState, getCurrentActiveLevel]);

  // CORRIGIDO: Fun√ß√£o para finalizar chamado
  const handleFinalize = useCallback(async (chamado: string, observacao: string) => {
    try {
      const chamadoNum = parseInt(chamado);

      // Salvar observa√ß√£o final
      const currentLevel = getCurrentActiveLevel(chamadoNum);
      if (currentLevel && observacao.trim()) {
        updateObservacao(chamadoNum, currentLevel, observacao.trim());
      }

      // Finalizar o chamado
      updateStatusFinal(chamadoNum, 'finalizado');

      // Aguardar um momento para garantir que o status foi atualizado
      await new Promise(resolve => setTimeout(resolve, 500));

      // Atualizar estado
      getState(chamadoNum);

      return true;
    } catch (error) {
      console.error('Erro em handleFinalize:', error);
      throw error;
    }
  }, [updateObservacao, updateStatusFinal, getState, getCurrentActiveLevel]);

  // Handlers para observa√ß√£o
  const handleOpenObservacao = useCallback((chamado: string) => {
    setSelectedChamadoForEdit(chamado);
    const existing = localObservacoes.get(chamado);
    setObservacaoText(existing?.observacao || '');
    setOperadorText(existing?.operador || '');
    setObservacaoDialogOpen(true);
  }, [localObservacoes]);

  const handleSaveObservacao = useCallback(() => {
    if (!selectedChamadoForEdit) return;

    const chamadoNum = parseInt(selectedChamadoForEdit);

    if (observacaoText.trim()) {
      updateObservacao(chamadoNum, 1, observacaoText.trim());
    }

    if (operadorText.trim()) {
      updateOperador(chamadoNum, operadorText.trim());
    }

    setLocalObservacoes(prev => {
      const newMap = new Map(prev);
      newMap.set(selectedChamadoForEdit, {
        observacao: observacaoText.trim(),
        operador: operadorText.trim()
      });
      return newMap;
    });

    setObservacaoDialogOpen(false);
    setObservacaoText('');
    setOperadorText('');

    toast({
      title: "‚úÖ Observa√ß√£o Salva",
      description: `Observa√ß√£o do chamado ${selectedChamadoForEdit} foi salva`,
    });
  }, [selectedChamadoForEdit, observacaoText, operadorText, updateObservacao, updateOperador]);

  // Handlers para ordena√ß√£o
  const handleSort = useCallback((field: SortField) => {
    if (sortField === field) {
      if (sortDirection === 'asc') {
        setSortDirection('desc');
      } else if (sortDirection === 'desc') {
        setSortDirection(null);
        setSortField('chamado');
      } else {
        setSortDirection('asc');
      }
    } else {
      setSortField(field);
      setSortDirection('asc');
    }
  }, [sortField, sortDirection]);

  const getSortIcon = useCallback((field: SortField) => {
    if (sortField !== field) {
      return <ArrowUpDown className="h-4 w-4 ml-1 opacity-50" />;
    }
    if (sortDirection === 'asc') {
      return <ArrowUp className="h-4 w-4 ml-1" />;
    }
    if (sortDirection === 'desc') {
      return <ArrowDown className="h-4 w-4 ml-1" />;
    }
    return <ArrowUpDown className="h-4 w-4 ml-1 opacity-50" />;
  }, [sortField, sortDirection]);

  // Dados filtrados e paginados
  const filteredData = useMemo(() => {
    if (!searchTerm.trim()) return alertData;

    const searchLower = searchTerm.toLowerCase().trim();
    return alertData.filter(alert =>
      Object.values(alert).some(value =>
        String(value).toLowerCase().includes(searchLower)
      )
    );
  }, [alertData, searchTerm]);

  const { sortedAndPaginatedData, totalPages } = useMemo(() => {
    let sortedData = [...filteredData];

    if (sortField && sortDirection) {
      sortedData.sort((a, b) => {
        let aValue: any = a[sortField];
        let bValue: any = b[sortField];

        if (sortField === 'chamado') {
          aValue = parseInt(a.chamado) || 0;
          bValue = parseInt(b.chamado) || 0;
        } else if (sortField === 'abertura_chamado') {
          aValue = new Date(a.abertura_chamado).getTime() || 0;
          bValue = new Date(b.abertura_chamado).getTime() || 0;
        } else {
          aValue = String(aValue).toLowerCase();
          bValue = String(bValue).toLowerCase();
        }

        if (aValue < bValue) return sortDirection === 'asc' ? -1 : 1;
        if (aValue > bValue) return sortDirection === 'asc' ? 1 : -1;
        return 0;
      });
    } else {
      sortedData.sort((a, b) => {
        const chamadoA = parseInt(a.chamado) || 0;
        const chamadoB = parseInt(b.chamado) || 0;
        return chamadoB - chamadoA;
      });
    }

    const startIndex = (currentPage - 1) * itemsPerPage;
    const endIndex = startIndex + itemsPerPage;
    const paginatedData = sortedData.slice(startIndex, endIndex);
    const totalPages = Math.ceil(sortedData.length / itemsPerPage);

    return { sortedAndPaginatedData: paginatedData, totalPages };
  }, [filteredData, currentPage, itemsPerPage, sortField, sortDirection]);

  // Handlers para pagina√ß√£o
  const handleItemsPerPageChange = useCallback((value: string) => {
    const num = parseInt(value, 10);
    setItemsPerPage(num);
    setCurrentPage(1);
  }, []);

  const handlePageChange = useCallback((page: number) => {
    setCurrentPage(page);
  }, []);

  return (
    <TooltipProvider>
      <Card className="bg-card border-border shadow-elegant">
        <CardHeader>
          {/* Status da Conex√£o WebSocket */}
          <div className="flex items-center justify-between mb-4">
            
          </div>

          {/* Campo de Pesquisa */}
          <div className="relative mb-4">
            <Search className="absolute left-3 top-1/2 h-4 w-4 -translate-y-1/2 text-muted-foreground" />
            <Input
              placeholder="Pesquisar por chamado, tipo, grupo, status, t√≠tulo..."
              value={searchTerm}
              onChange={(e) => setSearchTerm(e.target.value)}
              className="pl-10"
            />
          </div>

          {searchTerm && (
            <div className="text-sm text-muted-foreground">
              {filteredData.length === 0 ? (
                <span>Nenhum resultado encontrado para "{searchTerm}"</span>
              ) : (
                <span>
                  {filteredData.length} resultado{filteredData.length !== 1 ? 's' : ''}
                  {filteredData.length !== alertData.length && ` de ${alertData.length} `}
                  para "{searchTerm}"
                </span>
              )}
            </div>
          )}
        </CardHeader>

        <CardContent>
          {/* Responsive Layout */}
          <div className="w-full">
            <Table className="w-full">
              <TableHeader>
                <TableRow className="border-border hover:bg-accent">
                  <TableHead className="text-muted-foreground w-[80px]">
                    <Button
                      variant="ghost"
                      className="h-auto p-0 font-medium text-muted-foreground hover:text-foreground text-xs"
                      onClick={() => handleSort('chamado')}
                    >
                      Chamado
                      {getSortIcon('chamado')}
                    </Button>
                  </TableHead>
                  <TableHead className="text-muted-foreground hidden md:table-cell">
                    <Button
                      variant="ghost"
                      className="h-auto p-0 font-medium text-muted-foreground hover:text-foreground text-xs"
                      onClick={() => handleSort('tipo_chamado')}
                    >
                      Classifica√ß√£o
                      {getSortIcon('tipo_chamado')}
                    </Button>
                  </TableHead>
                  <TableHead className="text-muted-foreground hidden lg:table-cell">
                    <Button
                      variant="ghost"
                      className="h-auto p-0 font-medium text-muted-foreground hover:text-foreground text-xs"
                      onClick={() => handleSort('grupo_chamado')}
                    >
                      Grupo
                      {getSortIcon('grupo_chamado')}
                    </Button>
                  </TableHead>
                  <TableHead className="text-muted-foreground hidden lg:table-cell">
                    <Button
                      variant="ghost"
                      className="h-auto p-0 font-medium text-muted-foreground hover:text-foreground text-xs"
                      onClick={() => handleSort('status_chamado')}
                    >
                      Status
                      {getSortIcon('status_chamado')}
                    </Button>
                  </TableHead>
                  <TableHead className="text-muted-foreground hidden xl:table-cell">
                    <Button
                      variant="ghost"
                      className="h-auto p-0 font-medium text-muted-foreground hover:text-foreground text-xs"
                      onClick={() => handleSort('abertura_chamado')}
                    >
                      Abertura
                      {getSortIcon('abertura_chamado')}
                    </Button>
                  </TableHead>
                  <TableHead className="text-muted-foreground">
                    <Button
                      variant="ghost"
                      className="h-auto p-0 font-medium text-muted-foreground hover:text-foreground text-xs"
                      onClick={() => handleSort('resumo_chamado')}
                    >
                      T√≠tulo
                      {getSortIcon('resumo_chamado')}
                    </Button>
                  </TableHead>
                  <TableHead className="text-muted-foreground hidden sm:table-cell">
                    <Button
                      variant="ghost"
                      className="h-auto p-0 font-medium text-muted-foreground hover:text-foreground text-xs"
                      onClick={() => handleSort('severidade_chamado')}
                    >
                      Severidade
                      {getSortIcon('severidade_chamado')}
                    </Button>
                  </TableHead>
                  <TableHead className="text-muted-foreground w-[200px] text-center">
                    <span className="text-xs font-medium">Timer WebSocket</span>
                  </TableHead>
                  <TableHead className="text-muted-foreground w-[60px] text-center">Chat</TableHead>
                  <TableHead className="text-muted-foreground w-[80px] text-center">Observa√ß√£o</TableHead>
                </TableRow>
              </TableHeader>
              <TableBody>
                {loading ? (
                  <TableRow>
                    <TableCell colSpan={10} className="text-center py-8">
                      <div className="inline-block animate-spin rounded-full h-8 w-8 border-b-2 border-primary mb-4"></div>
                      <p>Carregando dados...</p>
                    </TableCell>
                  </TableRow>
                ) : sortedAndPaginatedData.length === 0 ? (
                  <TableRow>
                    <TableCell colSpan={10} className="text-center py-8 text-muted-foreground">
                      {searchTerm ? 'Nenhum resultado encontrado' : 'Nenhum dado dispon√≠vel'}
                    </TableCell>
                  </TableRow>
                ) : (
                  sortedAndPaginatedData.map((alert) => {
                    const isChat = alert.acionado === 'true' || alert.chat;
                    const observacao = localObservacoes.get(alert.chamado);
                    const chamadoNum = parseInt(alert.chamado);
                    const activeLevel = getCurrentActiveLevel(chamadoNum);
                    const timerState = timers.get(chamadoNum);
                    const remainingTime = activeLevel ? getRemainingTime(chamadoNum, activeLevel) : 0;
                    const isFinalized = timerState?.statusFinal === 'finalizado';

                    return (
                      <TableRow key={alert.id} className="border-border hover:bg-accent transition-colors">
                        <TableCell className="font-medium">
                          <Button
                            variant="link"
                            size="sm"
                            className="p-0 text-foreground hover:underline text-xs"
                          >
                            {alert.chamado}
                          </Button>
                        </TableCell>
                        <TableCell className="hidden md:table-cell">
                          <Tooltip>
                            <TooltipTrigger asChild>
                              <span className="truncate block max-w-[100px] text-xs">
                                {alert.tipo_chamado}
                              </span>
                            </TooltipTrigger>
                            <TooltipContent>
                              <p className="max-w-xs">{alert.tipo_chamado}</p>
                            </TooltipContent>
                          </Tooltip>
                        </TableCell>
                        <TableCell className="text-xs hidden lg:table-cell">{alert.grupo_chamado}</TableCell>
                        <TableCell className="text-xs hidden lg:table-cell">{alert.status_chamado}</TableCell>
                        <TableCell className="text-xs hidden xl:table-cell">{formatDate(alert.abertura_chamado)}</TableCell>
                        <TableCell>
                          <Tooltip>
                            <TooltipTrigger asChild>
                              <span className="truncate block max-w-[150px] text-xs">
                                {alert.resumo_chamado}
                              </span>
                            </TooltipTrigger>
                            <TooltipContent>
                              <p className="max-w-md">{alert.resumo_chamado}</p>
                            </TooltipContent>
                          </Tooltip>
                        </TableCell>
                        <TableCell className="hidden sm:table-cell">
                          <Badge className={`${getSeverityColor(alert.severidade_chamado)} text-xs`}>
                            {alert.severidade_chamado}
                          </Badge>
                        </TableCell>
                        <TableCell>
                          <div className="flex flex-col items-center gap-2">
                            {isFinalized ? (
                              <div className="space-y-1 text-center">
                                <Badge className="bg-green-600 text-white text-xs font-semibold px-3 py-1 whitespace-nowrap">
                                  ‚úÖ FINALIZADO
                                </Badge>
                                {timerState?.operador && (
                                  <div className="text-xs text-muted-foreground bg-muted rounded px-2 py-1">
                                    üë§ {timerState.operador}
                                  </div>
                                )}
                              </div>
                            ) : activeLevel && timerState ? (
                              <div className="space-y-1 text-center">
                                <div className="flex items-center gap-1 justify-center">
                                  <Timer className="h-3 w-3 text-timer-active animate-pulse" />
                                  <Badge className="bg-timer-active text-white text-xs font-semibold px-2 py-1 whitespace-nowrap">
                                    {LEVEL_NAMES[activeLevel as keyof typeof LEVEL_NAMES]}
                                  </Badge>
                                </div>
                                <div className="text-lg font-mono font-black text-timer-active tracking-wide">
                                  {formatTime(remainingTime)}
                                </div>
                                <Button
                                  variant="secondary"
                                  size="sm"
                                  onClick={() => handleOpenTimerManagement(alert.chamado)}
                                  className="h-6 px-2 text-xs font-semibold"
                                >
                                  <Settings className="h-3 w-3 mr-1" />
                                  Gerenciar
                                </Button>
                                {timerState.operador && (
                                  <div className="text-xs text-muted-foreground bg-muted rounded px-2 py-1">
                                    üë§ {timerState.operador}
                                  </div>
                                )}
                                {remainingTime <= 300 && remainingTime > 0 && (
                                  <Badge variant="destructive" className="text-xs animate-pulse">
                                    ‚ö†Ô∏è √öltimos 5 min
                                  </Badge>
                                )}
                              </div>
                            ) : (
                              <div className="flex flex-col items-center gap-2">
                                <Button
                                  variant="default"
                                  size="sm"
                                  onClick={() => handleStartTimer(alert.chamado)}
                                  className="h-7 px-3 text-xs font-semibold whitespace-nowrap"
                                  disabled={!isConnected}
                                >
                                  <Play className="h-3 w-3 mr-1" />
                                  Iniciar (20min)
                                </Button>
                                {!isConnected && (
                                  <span className="text-xs text-destructive">WebSocket desconectado</span>
                                )}
                              </div>
                            )}
                          </div>
                        </TableCell>
                        <TableCell>
                          <Tooltip>
                            <TooltipTrigger asChild>
                              <Button
                                variant={isChat ? "default" : "outline"}
                                size="sm"
                                onClick={() => !isChat && handleAcknowledgment(alert)}
                                disabled={isChat}
                                className="h-8 w-8 p-0"
                              >
                                {isChat ? (
                                  <Check className="h-4 w-4" />
                                ) : (
                                  <AlertTriangle className="h-4 w-4" />
                                )}
                              </Button>
                            </TooltipTrigger>
                            <TooltipContent>
                              <p>{isChat ? 'J√° acionado' : 'Acionar grupo'}</p>
                            </TooltipContent>
                          </Tooltip>
                        </TableCell>
                        <TableCell>
                          <Tooltip>
                            <TooltipTrigger asChild>
                              <Button
                                variant={observacao ? "default" : "outline"}
                                size="sm"
                                onClick={() => handleOpenObservacao(alert.chamado)}
                                className="h-8 w-8 p-0"
                              >
                                {observacao ? (
                                  <CheckCircle className="h-4 w-4" />
                                ) : (
                                  <Edit3 className="h-4 w-4" />
                                )}
                              </Button>
                            </TooltipTrigger>
                            <TooltipContent>
                              <p>{observacao ? 'Observa√ß√£o salva' : 'Adicionar observa√ß√£o'}</p>
                            </TooltipContent>
                          </Tooltip>
                        </TableCell>
                      </TableRow>
                    );
                  })
                )}
              </TableBody>
            </Table>
          </div>

          {/* Pagina√ß√£o */}
          {!loading && sortedAndPaginatedData.length > 0 && totalPages > 1 && (
            <div className="flex flex-col sm:flex-row items-center justify-between mt-4 pt-4 border-t border-border gap-4">
              <div className="text-sm text-muted-foreground text-center sm:text-left">
                Mostrando {((currentPage - 1) * itemsPerPage) + 1} a {Math.min(currentPage * itemsPerPage, filteredData.length)} de {filteredData.length} registros
                {searchTerm && filteredData.length !== alertData.length && ` (filtrados de ${alertData.length})`}
              </div>

              <div className="flex items-center gap-2">
                <Label htmlFor="itemsPerPage" className="text-sm font-medium whitespace-nowrap">
                  Por P√°gina:
                </Label>
                <Select value={itemsPerPage.toString()} onValueChange={handleItemsPerPageChange}>
                  <SelectTrigger className="w-20">
                    <SelectValue />
                  </SelectTrigger>
                  <SelectContent>
                    <SelectItem value="5">5</SelectItem>
                    <SelectItem value="10">10</SelectItem>
                    <SelectItem value="15">15</SelectItem>
                    <SelectItem value="20">20</SelectItem>
                  </SelectContent>
                </Select>
              </div>

              <div className="flex items-center gap-2">
                <Button
                  variant="outline"
                  size="sm"
                  onClick={() => handlePageChange(currentPage - 1)}
                  disabled={currentPage === 1}
                  className="h-8 px-3"
                >
                  <ChevronLeft className="h-4 w-4 mr-1" />
                  Anterior
                </Button>

                <div className="flex items-center gap-1">
                  {[...Array(Math.min(totalPages, 5))].map((_, index) => {
                    let page;
                    if (totalPages <= 5) {
                      page = index + 1;
                    } else if (currentPage <= 3) {
                      page = index + 1;
                    } else if (currentPage >= totalPages - 2) {
                      page = totalPages - 4 + index;
                    } else {
                      page = currentPage - 2 + index;
                    }

                    return (
                      <Button
                        key={page}
                        variant={currentPage === page ? "default" : "outline"}
                        size="sm"
                        onClick={() => handlePageChange(page)}
                        className="h-8 w-8 p-0"
                      >
                        {page}
                      </Button>
                    );
                  })}
                </div>

                <Button
                  variant="outline"
                  size="sm"
                  onClick={() => handlePageChange(currentPage + 1)}
                  disabled={currentPage === totalPages}
                  className="h-8 px-3"
                >
                  Pr√≥ximo
                  <ChevronRight className="h-4 w-4 ml-1" />
                </Button>
              </div>
            </div>
          )}

          {/* Modern Timer Management Modal */}
          {selectedChamadoForTimer && (
            <ModernTimerModal
              isOpen={timerManagementOpen}
              onClose={() => {
                setTimerManagementOpen(false);
                setSelectedChamadoForTimer('');
              }}
              chamado={selectedChamadoForTimer}
              currentLevel={getCurrentActiveLevel(parseInt(selectedChamadoForTimer)) || 1}
              remainingTime={getCurrentActiveLevel(parseInt(selectedChamadoForTimer)) ? getRemainingTime(parseInt(selectedChamadoForTimer), getCurrentActiveLevel(parseInt(selectedChamadoForTimer))!) : 0}
              chamadoData={timers.get(parseInt(selectedChamadoForTimer))} // üîπ ADICIONADO: dados do timer para o hist√≥rico
              formatTime={formatTime}
              onNextLevel={handleNextLevel}
              onPreviousLevel={handlePreviousLevel} // üîπ ADICIONADO: fun√ß√£o de retroceder n√≠vel
              updateObservacao={updateObservacao}
              updateAcionamento={updateAcionamento}
              updateStatusFinal={updateStatusFinal}
            />
          )}

          {/* Modal de Observa√ß√£o */}
          <Dialog open={observacaoDialogOpen} onOpenChange={setObservacaoDialogOpen}>
            <DialogContent className="sm:max-w-lg border-border bg-card shadow-modal">
              <DialogHeader className="text-left">
                <DialogTitle className="text-xl bg-gradient-to-r from-primary to-primary/70 bg-clip-text text-transparent">
                  üìù Observa√ß√£o - Chamado {selectedChamadoForEdit}
                </DialogTitle>
                <DialogDescription className="text-muted-foreground">
                  Registre observa√ß√µes importantes e defina o operador respons√°vel pelo chamado
                </DialogDescription>
              </DialogHeader>
              <div className="space-y-6 pt-2">
                <div className="space-y-2">
                  <Label htmlFor="operador" className="text-sm font-semibold text-foreground">
                    üë§ Operador Respons√°vel
                  </Label>
                  <Input
                    id="operador"
                    value={operadorText}
                    onChange={(e) => setOperadorText(e.target.value)}
                    placeholder="Ex: Jo√£o Silva"
                    className="border-border focus:border-primary transition-colors"
                  />
                </div>
                <div className="space-y-2">
                  <Label htmlFor="observacao" className="text-sm font-semibold text-foreground">
                    üìÑ Observa√ß√µes
                  </Label>
                  <Textarea
                    id="observacao"
                    value={observacaoText}
                    onChange={(e) => setObservacaoText(e.target.value)}
                    placeholder="Descreva o status atual, a√ß√µes tomadas, pr√≥ximos passos..."
                    rows={5}
                    className="border-border focus:border-primary transition-colors resize-none"
                  />
                  <div className="text-xs text-muted-foreground">
                    {observacaoText.length}/500 caracteres
                  </div>
                </div>
                <div className="flex justify-end gap-3 pt-4 border-t border-border">
                  <Button
                    variant="outline"
                    onClick={() => setObservacaoDialogOpen(false)}
                    className="px-6"
                  >
                    Cancelar
                  </Button>
                  <Button
                    variant="default"
                    onClick={handleSaveObservacao}
                    className="px-6"
                    disabled={!operadorText.trim() && !observacaoText.trim()}
                  >
                    üíæ Salvar Observa√ß√£o
                  </Button>
                </div>
              </div>
            </DialogContent>
          </Dialog>
        </CardContent>
      </Card>
    </TooltipProvider>
  );
};














import React, { useState, useCallback } from 'react';
import { Dialog, DialogContent, DialogHeader, DialogTitle } from '@/components/ui/dialog';
import { Button } from '@/components/ui/button';
import { Textarea } from '@/components/ui/textarea';
import { Input } from '@/components/ui/input';
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';
import { Label } from '@/components/ui/label';
import { Badge } from '@/components/ui/badge';
import { Separator } from '@/components/ui/separator';
import { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs';
// import { ProgressIndicator } from '@/components/ui/progress-indicator';
// import { TimerDisplay } from '@/components/ui/timer-display';
import { HistoricoAcionamentos } from '@/components/ui/historico-acionamentos';
import { ArrowRight, CheckCircle, X, AlertTriangle, Lightbulb, MessageSquare, Timer, Building2, Users, Clock, User, Phone, History } from 'lucide-react';
import { toast } from '@/hooks/use-toast';
import { cn } from '@/lib/utils';

interface ModernTimerModalProps {
  isOpen: boolean;
  onClose: () => void;
  chamado: string; // Changed to string to match ActionTable
  currentLevel: number;
  remainingTime: number;
  chamadoData?: any;
  formatTime: (seconds: number) => string;
  onNextLevel: (chamado: string, nextLevel: number, observacao: string) => Promise<boolean>;
  onPreviousLevel?: (chamado: string, previousLevel: number, observacao: string) => Promise<boolean>;
  updateStatusFinal: (chamado: number, levelStatusKey: string, status: string) => void;
  updateObservacao: (chamado: number, level: number, observacao: string) => void;
  updateAcionamento: (chamado: number, level: number, operador: string, pessoaAcionada: string, statusAcionamento: string) => void;
}

const LEVEL_INFO = {
  1: {
    title: "Primeiro Acionamento",
    subtitle: "",
    nextAction: "Avan√ßar para 1¬™ Escala√ß√£o",
    icon: Clock,
    color: "from-blue-500 to-blue-600",
    bgColor: "bg-blue-500/5 border-blue-200",
    description: "Atendimento Inicial da Equipe"
  },
  2: {
    title: "1¬™ Escala√ß√£o",
    subtitle: "",
    nextAction: "Avan√ßar para 2¬™ Escala√ß√£o",
    icon: Users,
    color: "from-orange-500 to-orange-600",
    bgColor: "bg-orange-500/5 border-orange-200",
    description: "Acionamento do Gestor de Incidente ou Plantonista"
  },
  3: {
    title: "2¬™ Escala√ß√£o",
    subtitle: "",
    nextAction: "Avan√ßar para 3¬™ Escala√ß√£o",
    icon: Building2,
    color: "from-red-500 to-red-600",
    bgColor: "bg-red-500/5 border-red-200",
    description: "Acionamento do Coordenador"
  },
  4: {
    title: "3¬™ Escala√ß√£o",
    subtitle: "",
    nextAction: "Avan√ßar para 4¬™ Escala√ß√£o",
    icon: Users,
    color: "from-purple-500 to-purple-600",
    bgColor: "bg-purple-500/5 border-purple-200",
    description: "Acionamento do Gerente"
  },
  5: {
    title: "4¬™ Escala√ß√£o",
    subtitle: "",
    nextAction: "Finalizar Chamado",
    icon: Building2,
    color: "from-red-600 to-red-700",
    bgColor: "bg-red-600/5 border-red-300",
    description: "Acionamento do Kleber Costa"
  }
};

export const ModernTimerModal: React.FC<ModernTimerModalProps> = ({
  isOpen,
  onClose,
  chamado,
  currentLevel,
  remainingTime,
  chamadoData,
  formatTime,
  onNextLevel,
  updateStatusFinal,
  updateObservacao,
  updateAcionamento
}) => {
  const [observacao, setObservacao] = useState('');
  const [pessoaAcionada, setPessoaAcionada] = useState('');
  const [statusAtendimento, setStatusAtendimento] = useState('');
  const [operador, setOperador] = useState('');
  const [isProcessing, setIsProcessing] = useState(false);

  const levelStatusKey = `level${currentLevel}_status`;
  const [finalizado, setFinalizado] = useState(
    chamadoData?.statusFinal === "finished" || chamadoData?.[levelStatusKey] === "finished"
  );

  React.useEffect(() => {
    setFinalizado(
      chamadoData?.statusFinal === "finished" || chamadoData?.[levelStatusKey] === "finished"
    );
  }, [chamadoData, levelStatusKey]);

  const levelInfo = finalizado
    ? {
      title: "Chamado Finalizado",
      subtitle: "Processo encerrado com sucesso",
      description: "O chamado foi resolvido e encerrado",
      icon: CheckCircle,
      color: "from-success to-success/90",
      bgColor: "bg-success/5 border-success/20",
      nextAction: "Finalizado"
    }
    : LEVEL_INFO[currentLevel as keyof typeof LEVEL_INFO];

  const validateForm = useCallback(() => {
    const errors = [];

    if (!operador) {
      errors.push("Operador √© obrigat√≥rio");
    }

    if (!pessoaAcionada.trim()) {
      errors.push("Nome da pessoa acionada √© obrigat√≥rio");
    } else if (pessoaAcionada.trim().length < 2) {
      errors.push("Nome deve ter pelo menos 2 caracteres");
    }

    if (!statusAtendimento) {
      errors.push("Status de atendimento √© obrigat√≥rio");
    }

    if (!observacao.trim()) {
      errors.push("Observa√ß√µes s√£o obrigat√≥rias");
    } else if (observacao.trim().length < 10) {
      errors.push("Observa√ß√µes devem ter pelo menos 10 caracteres");
    }

    if (errors.length > 0) {
      toast({
        title: "‚ö†Ô∏è Campos Obrigat√≥rios",
        description: errors.join(". "),
        variant: "destructive",
      });
      return false;
    }

    return true;
  }, [operador, pessoaAcionada, statusAtendimento, observacao]);

  const handleAction = useCallback(async (action: 'next' | 'finish') => {
    if (!validateForm()) return;

    setIsProcessing(true);

    try {
      const fullObservacao = `Operador: ${operador}\nPessoa Acionada: ${pessoaAcionada.trim()}\nStatus: ${statusAtendimento}\n\nDetalhes: ${observacao.trim()}`;

      if (finalizado && action !== 'finish') {
        toast({
          title: "‚ö†Ô∏è Chamado j√° finalizado",
          description: "N√£o √© poss√≠vel alterar n√≠veis pois o chamado est√° finalizado",
          variant: "destructive",
        });
        return;
      }

      switch (action) {
        case 'next': {
          const chamadoNum = parseInt(chamado);
          const updates = [
            updateStatusFinal(chamadoNum, levelStatusKey, "finished"),
            updateObservacao(chamadoNum, currentLevel, observacao || ""),
            updateAcionamento(chamadoNum, currentLevel, operador || "", pessoaAcionada || "", statusAtendimento || "")
          ];

          if (currentLevel >= 5) {
            await Promise.all(updates);
            toast({
              title: "‚úÖ Chamado Finalizado",
              description: `Chamado ${chamado} foi finalizado com sucesso!`
            });
          } else {
            await Promise.all(updates);
            await onNextLevel(chamado, currentLevel + 1, observacao || "");

            const nextLevelInfo = LEVEL_INFO[(currentLevel + 1) as keyof typeof LEVEL_INFO];
            toast({
              title: `üöÄ ${nextLevelInfo?.title} Iniciado`,
              description: `Timer de 20 minutos iniciado para ${nextLevelInfo?.title}`,
            });
          }
          break;
        }

        case 'finish': {
          const chamadoNum = parseInt(chamado);
          const updates = [
            updateStatusFinal(chamadoNum, levelStatusKey, "finished"),
            updateObservacao(chamadoNum, currentLevel, observacao || ""),
            updateAcionamento(chamadoNum, currentLevel, operador || "", pessoaAcionada || "", statusAtendimento || "")
          ];

          await Promise.all(updates);
          setFinalizado(true);
          toast({
            title: "‚úÖ Chamado Finalizado",
            description: `Chamado ${chamado} foi finalizado com sucesso!`,
          });
          break;
        }
      }

      // Reset form
      setObservacao('');
      setPessoaAcionada('');
      setOperador('');
      setStatusAtendimento('');
      onClose();

    } catch (error) {
      console.error("‚ùå Erro no handleAction:", error);
      toast({
        title: "‚ùå Erro na Opera√ß√£o",
        description: "Ocorreu um erro ao processar a a√ß√£o. Verifique os logs.",
        variant: "destructive",
      });
    } finally {
      setIsProcessing(false);
    }
  }, [validateForm, updateAcionamento, pessoaAcionada, statusAtendimento, observacao, currentLevel, chamado, onNextLevel, onClose, updateStatusFinal, updateObservacao, finalizado, levelStatusKey]);

  if (!levelInfo) return null;

  const LevelIcon = levelInfo.icon;
  const isFormValid = operador && pessoaAcionada.trim().length >= 2 && statusAtendimento && observacao.trim().length >= 10;

  return (
    <Dialog open={isOpen} onOpenChange={onClose}>
      <DialogContent className="sm:max-w-6xl max-h-[90vh] overflow-y-auto border-border shadow-modal">
        {/* Header Section */}
        <DialogHeader className="relative pb-8">
          <div className={cn(
            "absolute inset-0 bg-gradient-to-r opacity-5 rounded-t-lg",
            levelInfo.color
          )} />

          <div className="relative z-10 space-y-6">
            <div className="flex flex-col lg:flex-row lg:items-center lg:justify-between gap-6">
              <div className="flex items-center gap-6">
                <div className={cn(
                  "p-4 rounded-2xl bg-gradient-to-r shadow-lg",
                  levelInfo.color,
                  "text-white"
                )}>
                  <LevelIcon className="h-10 w-10" />
                </div>

                <div className="space-y-2">
                  <DialogTitle className="text-3xl lg:text-4xl font-bold text-foreground">
                    {levelInfo.title}
                  </DialogTitle>
                  <p className="text-lg text-muted-foreground">
                    {levelInfo.subtitle}
                  </p>
                  <div className="flex items-center gap-3">
                    <Badge variant="outline" className="text-sm font-medium">
                      Chamado #{chamado}
                    </Badge>
                    <Badge
                      variant={finalizado ? "default" : "secondary"}
                      className={cn(
                        "text-sm font-medium",
                        finalizado && "bg-success text-success-foreground"
                      )}
                    >
                      {finalizado ? "Finalizado" : "Em Andamento"}
                    </Badge>
                    {remainingTime < 0 && (
                      <Badge
                        variant="destructive"
                        className="text-sm font-bold animate-text-flash bg-timer-negative text-white"
                      >
                        üö® TEMPO EXCEDIDO
                      </Badge>
                    )}
                  </div>
                </div>
              </div>
            </div>

            <div className={cn(
              "p-4 rounded-xl border-l-4",
              levelInfo.bgColor
            )}>
              <p className="text-sm text-muted-foreground">
                {levelInfo.description}
              </p>
              {remainingTime < 0 && (
                <p className="text-timer-negative font-bold animate-text-flash mt-2">
                  ‚ö†Ô∏è O tempo limite foi excedido! A√ß√£o urgente necess√°ria.
                </p>
              )}
            </div>
          </div>
        </DialogHeader>

        <Tabs defaultValue="acionamento" className="space-y-6">
          <TabsList className="grid w-full grid-cols-2">
            <TabsTrigger value="acionamento" className="flex items-center gap-2">
              <Phone className="h-4 w-4" />
              Novo Acionamento
            </TabsTrigger>
            <TabsTrigger value="historico" className="flex items-center gap-2">
              <History className="h-4 w-4" />
              Hist√≥rico
            </TabsTrigger>
          </TabsList>

          {/* Tab de Novo Acionamento */}
          <TabsContent value="acionamento" className="space-y-8">
            {/* Timer and Progress Section */}
            <div className="grid grid-cols-1 gap-8">
              <div className="p-6 bg-muted/30 rounded-xl border border-border">
                <div className="text-center space-y-2">
                  <div className="text-2xl font-mono font-bold text-foreground">
                    {formatTime(Math.abs(remainingTime))}
                  </div>
                  <p className="text-sm text-muted-foreground">
                    {remainingTime < 0 ? 'Tempo excedido' : 'Tempo restante'}
                  </p>
                </div>
              </div>
            </div>

            <Separator />

            {/* Required Information Section */}
            <div className="space-y-6">
              <div className="flex items-center gap-3">
                <Phone className="h-6 w-6 text-primary" />
                <Label className="text-xl font-semibold text-foreground">
                  Acionamento
                </Label>
              </div>

              <div className="grid grid-cols-1 md:grid-cols-3 gap-6">
                {/* Operador */}
                <div className="space-y-3">
                  <Label htmlFor="operador" className="text-base font-medium flex items-center gap-2">
                    <User className="h-4 w-4" />
                    Operador
                    <span className="text-destructive">*</span>
                  </Label>
                  <Select
                    value={operador}
                    onValueChange={setOperador}
                    disabled={isProcessing || finalizado}
                  >
                    <SelectTrigger className={cn(
                      "border-2 focus:border-primary",
                      operador && "border-success"
                    )}>
                      <SelectValue placeholder="Selecione o operador" />
                    </SelectTrigger>
                    <SelectContent>
                      <SelectItem value="ALBERTO LAGES">ALBERTO LAGES</SelectItem>
                      <SelectItem value="ALEXANDRE LIMA SILVA">ALEXANDRE LIMA SILVA</SelectItem>
                      <SelectItem value="ANSELMO ALVES PESSOA">ANSELMO ALVES PESSOA</SelectItem>
                      <SelectItem value="BRUNO MAZZO FEITOSA">BRUNO MAZZO FEITOSA</SelectItem>
                      <SelectItem value="CAIO CESAR ALVES DA LUZ">CAIO CESAR ALVES DA LUZ</SelectItem>
                      <SelectItem value="CLAUDIA ZORZAN DE CAMARGO">CLAUDIA ZORZAN DE CAMARGO</SelectItem>
                      <SelectItem value="JEFFERSON DA SILVA SOUZA">JEFFERSON DA SILVA SOUZA</SelectItem>
                      <SelectItem value="JULIANA BEATRIZ DE ANGELO">JULIANA BEATRIZ DE ANGELO</SelectItem>
                      <SelectItem value="MARIA LUIZA DOS SANTOS COIADO">MARIA LUIZA DOS SANTOS COIADO</SelectItem>
                      <SelectItem value="RAFAEL NUNES PACHECO">RAFAEL NUNES PACHECO</SelectItem>
                      <SelectItem value="SERGIO ANTONIO DA SILVA">SERGIO ANTONIO DA SILVA</SelectItem>
                      <SelectItem value="VICTOR HUGO ALMEIDA FERNANDES">VICTOR HUGO ALMEIDA FERNANDES</SelectItem>
                      <SelectItem value="VINICIUS RHYU VITURINO SAITO">VINICIUS RHYU VITURINO SAITO</SelectItem>
                    </SelectContent>
                  </Select>
                </div>

                {/* Nome da Pessoa Acionada */}
                <div className="space-y-3">
                  <Label htmlFor="pessoa-acionada" className="text-base font-medium flex items-center gap-2">
                    <User className="h-4 w-4" />
                    Pessoa Acionada
                    <span className="text-destructive">*</span>
                  </Label>
                  <Input
                    id="pessoa-acionada"
                    type="text"
                    value={pessoaAcionada}
                    onChange={(e) => setPessoaAcionada(e.target.value)}
                    placeholder="Ex: Jo√£o Silva, Maria Santos..."
                    className={cn(
                      "border-2 focus:border-primary transition-all duration-200",
                      pessoaAcionada.trim().length >= 2 && "border-success"
                    )}
                    disabled={isProcessing || finalizado}
                    maxLength={100}
                  />
                </div>

                {/* Status do Atendimento */}
                <div className="space-y-3">
                  <Label htmlFor="status-atendimento" className="text-base font-medium flex items-center gap-2">
                    <CheckCircle className="h-4 w-4" />
                    Status do Atendimento
                    <span className="text-destructive">*</span>
                  </Label>
                  <Select
                    value={statusAtendimento}
                    onValueChange={setStatusAtendimento}
                    disabled={isProcessing || finalizado}
                  >
                    <SelectTrigger className={cn(
                      "border-2 focus:border-primary",
                      statusAtendimento && "border-success"
                    )}>
                      <SelectValue placeholder="Selecione o status do atendimento" />
                    </SelectTrigger>
                    <SelectContent>
                      <SelectItem value="atendido">‚úÖ Atendido</SelectItem>
                      <SelectItem value="nao-atendido">‚ùå N√£o Atendido</SelectItem>
                    </SelectContent>
                  </Select>
                </div>
              </div>
            </div>

            <Separator />

            {/* Observations Section */}
            <div className="space-y-6">
              <div className="flex items-center gap-3">
                <MessageSquare className="h-6 w-6 text-primary" />
                <Label htmlFor="observacao" className="text-xl font-semibold text-foreground">
                  Observa√ß√µes
                </Label>
              </div>

              <Textarea
                id="observacao"
                value={observacao}
                onChange={(e) => setObservacao(e.target.value)}
                placeholder="Descreva as informa√ß√µes do acionamento"
                rows={6}
                className={cn(
                  "border-2 focus:border-primary transition-all duration-200 resize-none text-base min-h-[120px]",
                  observacao.trim().length >= 10 && "border-success"
                )}
                disabled={isProcessing || finalizado}
                maxLength={1000}
              />

              <div className="flex justify-between items-center">
                <span className={cn(
                  "text-sm font-medium",
                  observacao.length > 900 ? "text-warning" : "text-muted-foreground"
                )}>
                  {observacao.length}/1000 caracteres
                </span>
                {observacao.trim().length >= 10 && (
                  <div className="flex items-center gap-2 text-success font-medium text-sm">
                    <CheckCircle className="h-4 w-4" />
                    <span>Observa√ß√£o v√°lida</span>
                  </div>
                )}
              </div>
            </div>

            <Separator />

            {/* Action Buttons */}
            <div className="space-y-6">
              <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                {/* Finish Button */}
                <Button
                  variant="secondary"
                  size="lg"
                  onClick={() => handleAction('finish')}
                  disabled={!isFormValid || isProcessing || finalizado}
                  className="h-20"
                >
                  <CheckCircle className="h-6 w-6 mr-3" />
                  <div className="text-left">
                    <div className="font-semibold text-base">Acompanhamento Confirmado</div>
                    <div className="text-sm opacity-90">Finalizar Acompanhamento</div>
                  </div>
                </Button>

                {/* Next Level Button */}
                <Button
                  variant="destructive"
                  size="lg"
                  onClick={() => handleAction('next')}
                  disabled={!isFormValid || isProcessing || finalizado}
                  className={cn(
                    "h-20",
                    remainingTime < 0 && "animate-timer-alert bg-timer-negative hover:bg-timer-negative/90"
                  )}
                >
                  {finalizado ? (
                    <>
                      <CheckCircle className="h-6 w-6 mr-3" />
                      <div className="text-left">
                        <div className="font-semibold text-base">Finalizado</div>
                        <div className="text-sm opacity-90">Chamado encerrado</div>
                      </div>
                    </>
                  ) : currentLevel >= 5 ? (
                    <>
                      <CheckCircle className="h-6 w-6 mr-3" />
                      <div className="text-left">
                        <div className="font-semibold text-base">Concluir Final</div>
                        <div className="text-sm opacity-90">√öltima escala√ß√£o</div>
                      </div>
                    </>
                  ) : (
                    <>
                      <ArrowRight className="h-6 w-6 mr-3" />
                      <div className="text-left">
                        <div className="font-semibold text-base">{levelInfo.nextAction}</div>
                        <div className="text-sm opacity-90">Avan√ßar escala√ß√£o</div>
                      </div>
                    </>
                  )}
                </Button>
              </div>
            </div>

            {/* Guidelines Section */}
            <div className="gradient-modal rounded-2xl p-6 border border-border/50">
              <div className="space-y-4">
                <div className="grid grid-cols-1 md:grid-cols-2 xl:grid-cols-3 gap-6">
                  <div className="space-y-2">
                    <div className="flex items-center gap-2 text-destructive">
                      <AlertTriangle className="h-5 w-5" />
                      <span className="font-semibold">Dados Obrigat√≥rios</span>
                    </div>
                    <p className="text-sm text-muted-foreground">
                      Nome da pessoa, status, operador e observa√ß√µes s√£o campos obrigat√≥rios para prosseguir.
                    </p>
                  </div>

                  <div className="space-y-2">
                    <div className="flex items-center gap-2 text-primary">
                      <Timer className="h-5 w-5" />
                      <span className="font-semibold">Controle de Tempo</span>
                    </div>
                    <p className="text-sm text-muted-foreground">
                      Cada escala√ß√£o reinicia automaticamente o timer de 20 minutos.
                    </p>
                    {remainingTime < 0 && (
                      <p className="text-timer-negative text-sm font-bold animate-text-flash">
                        ‚ö†Ô∏è Timer excedido! A√ß√£o urgente necess√°ria.
                      </p>
                    )}
                  </div>

                  <div className="space-y-2">
                    <div className="flex items-center gap-2 text-success">
                      <CheckCircle className="h-5 w-5" />
                      <span className="font-semibold">Documenta√ß√£o</span>
                    </div>
                    <p className="text-sm text-muted-foreground">
                      Todas as informa√ß√µes s√£o automaticamente registradas no hist√≥rico.
                    </p>
                  </div>
                </div>
              </div>
            </div>
          </TabsContent>

          {/* Tab de Hist√≥rico */}
          <TabsContent value="historico" className="space-y-6">
            <HistoricoAcionamentos 
              chamadoData={chamadoData}
              currentLevel={currentLevel}
            />
          </TabsContent>
        </Tabs>

        {/* Processing Indicator */}
        {isProcessing && (
          <div className="fixed inset-0 bg-background/80 backdrop-blur-sm flex items-center justify-center z-50">
            <div className="bg-card p-6 rounded-2xl shadow-2xl border border-border">
              <div className="flex items-center gap-3">
                <div className="animate-spin rounded-full h-6 w-6 border-b-2 border-primary"></div>
                <span className="text-lg font-medium">Processando a√ß√£o...</span>
              </div>
            </div>
          </div>
        )}

      </DialogContent>
    </Dialog>
  );
};














import { useState, useEffect, useCallback, useRef } from 'react';
import { toast } from '@/hooks/use-toast';

export interface TimerState {
  chamado: number;
  operador?: string;
  statusFinal?: string;
  level1_timerStart?: string;
  level1_duration?: number;
  level1_status?: 'running' | 'paused' | 'stopped' | 'finished';
  level1_observacao?: string;
  level1_operador?: string;
  level1_pessoaAcionada?: string;
  level1_statusAcionamento?: string;
  level2_timerStart?: string;
  level2_duration?: number;
  level2_status?: 'running' | 'paused' | 'stopped' | 'finished';
  level2_observacao?: string;
  level2_operador?: string;
  level2_pessoaAcionada?: string;
  level2_statusAcionamento?: string;
  level3_timerStart?: string;
  level3_duration?: number;
  level3_status?: 'running' | 'paused' | 'stopped' | 'finished';
  level3_observacao?: string;
  level3_operador?: string;
  level3_pessoaAcionada?: string;
  level3_statusAcionamento?: string;
  level4_timerStart?: string;
  level4_duration?: number;
  level4_status?: 'running' | 'paused' | 'stopped' | 'finished';
  level4_observacao?: string;
  level4_operador?: string;
  level4_pessoaAcionada?: string;
  level4_statusAcionamento?: string;
  level5_timerStart?: string;
  level5_duration?: number;
  level5_status?: 'running' | 'paused' | 'stopped' | 'finished';
  level5_observacao?: string;
  level5_operador?: string;
  level5_pessoaAcionada?: string;
  level5_statusAcionamento?: string;
}

export interface WebSocketMessage {
  event: 'startTimer' | 'updateObservacao' | 'updateOperador' | 'updateStatusFinal' | 'getState' | 'updateAcionamento';
  chamado: number;
  level?: number;
  state?: TimerState;
}

export interface SendMessage {
  action: 'startTimer' | 'updateObservacao' | 'updateOperador' | 'updateStatusFinal' | 'getState' | 'updateAcionamento';
  chamado: number;
  level?: number;
  duration?: number;
  observacao?: string;
  operador?: string;
  statusFinal?: string;
  levelStatusKey?: string;
  status?: string;
  pessoaAcionada?: string;
  statusAcionamento?: string;
}

export const useWebsocketTimers = () => {
  const [timers, setTimers] = useState<Map<number, TimerState>>(new Map());
  const [isConnected, setIsConnected] = useState(false);
  const ws = useRef<WebSocket | null>(null);
  const reconnectAttempts = useRef(0);
  const maxReconnectAttempts = 5;
  const reconnectTimeout = useRef<NodeJS.Timeout | null>(null);

  // Chamados que o cliente quer garantir que sejam consultados ao conectar
  const watchedChamadosRef = useRef<Set<number>>(new Set());

  const connect = useCallback(() => {
    try {
      if (ws.current && ws.current.readyState === WebSocket.CONNECTING) {
        return;
      }

      const wsUrl = 'wss://rsgjd6wsza.execute-api.us-east-1.amazonaws.com/dev';
      console.log(`üîå Tentando conectar no WebSocket: ${wsUrl}`);

      ws.current = new WebSocket(wsUrl);

      const connectionTimeout = setTimeout(() => {
        if (ws.current && ws.current.readyState === WebSocket.CONNECTING) {
          ws.current.close();
          toast({
            title: "Timeout de Conex√£o",
            description: "WebSocket demorou muito para conectar. Tentando novamente...",
            variant: "destructive",
          });
        }
      }, 10000);

      ws.current.onopen = () => {
        clearTimeout(connectionTimeout);
        setIsConnected(true);
        reconnectAttempts.current = 0;

        console.log('‚úÖ WebSocket conectado com sucesso');
        toast({
          title: "Conectado",
          description: "WebSocket conectado com sucesso",
        });
      };

      ws.current.onmessage = (event) => {
        try {
          const message: WebSocketMessage = JSON.parse(event.data);

          if (message.state && message.chamado) {
            setTimers(prev => {
              const oldState = prev.get(message.chamado);
              const isDifferent = JSON.stringify(oldState) !== JSON.stringify(message.state);

              if (isDifferent) {
                console.log(`üîî Novo evento para chamado ${message.chamado}`, message.state);
              }

              const newTimers = new Map(prev);
              newTimers.set(message.chamado, message.state!);
              return newTimers;
            });
          }
        } catch (error) {
          console.error('‚ùå Erro ao processar mensagem WebSocket:', error);
        }
      };

      ws.current.onclose = (event) => {
        clearTimeout(connectionTimeout);
        setIsConnected(false);

        console.warn('‚ö†Ô∏è WebSocket desconectado - C√≥digo:', event.code, 'Motivo:', event.reason);

        if (event.code !== 1000 && reconnectAttempts.current < maxReconnectAttempts) {
          reconnectAttempts.current++;
          const delay = Math.min(1000 * Math.pow(2, reconnectAttempts.current), 30000);
          console.log(`üîÑ Tentando reconectar em ${delay}ms (tentativa ${reconnectAttempts.current}/${maxReconnectAttempts})`);

          reconnectTimeout.current = setTimeout(() => {
            connect();
          }, delay);
        } else if (reconnectAttempts.current >= maxReconnectAttempts) {
          console.error('‚ùå M√°ximo de tentativas de reconex√£o atingido');
          toast({
            title: "Falha na Conex√£o",
            description: "N√£o foi poss√≠vel conectar ao WebSocket ap√≥s v√°rias tentativas",
            variant: "destructive",
          });
        }
      };

      ws.current.onerror = () => {
        clearTimeout(connectionTimeout);
        console.error('‚ùå Erro WebSocket detectado');
      };

    } catch (error) {
      console.error('‚ùå Erro ao conectar WebSocket:', error);
      toast({
        title: "Erro de Inicializa√ß√£o",
        description: "Erro ao inicializar conex√£o WebSocket",
        variant: "destructive",
      });
    }
  }, []);

  const disconnect = useCallback(() => {
    if (reconnectTimeout.current) {
      clearTimeout(reconnectTimeout.current);
      reconnectTimeout.current = null;
    }

    if (ws.current) {
      ws.current.close(1000, 'Desconex√£o intencional');
      ws.current = null;
    }

    setIsConnected(false);
    console.log('üîå WebSocket desconectado manualmente');
  }, []);

  const sendMessage = useCallback((message: SendMessage) => {
    if (ws.current && ws.current.readyState === WebSocket.OPEN) {
      try {
        const payload = JSON.stringify(message); // Armazena o payload em uma vari√°vel
        ws.current.send(payload);

        // Inclui a vari√°vel payload no console.log
        console.log(`üì§ Mensagem enviada: ${message.action} (chamado ${message.chamado})`);
        console.log('Payload:', payload);

        return true;
      } catch (error) {
        console.error('‚ùå Erro ao enviar mensagem:', error);
        toast({
          title: "Erro ao Enviar",
          description: "N√£o foi poss√≠vel enviar a mensagem",
          variant: "destructive",
        });
        return false;
      }
    } else {
      toast({
        title: "N√£o Conectado",
        description: "WebSocket n√£o est√° conectado. Tentando reconectar...",
        variant: "destructive",
      });
      connect();
      return false;
    }
  }, [connect]);

  // A√ß√µes (mantive todas as existentes)
  const startTimer = useCallback((chamado: number, level: number, duration: number = 1200) => {
    return sendMessage({ action: 'startTimer', chamado, level, duration });
  }, [sendMessage]);

  const updateObservacao = useCallback((chamado: number, level: number, observacao: string) => {
    return sendMessage({ action: 'updateObservacao', chamado, level, observacao });
  }, [sendMessage]);

  const updateOperador = useCallback((chamado: number, operador: string) => {
    return sendMessage({ action: 'updateOperador', chamado, operador });
  }, [sendMessage]);

  const updateAcionamento = useCallback((chamado: number, level: number, operador: string, pessoaAcionada: string, statusAcionamento: string) => {
    return sendMessage({ action: 'updateAcionamento', chamado, level, operador, pessoaAcionada, statusAcionamento});
  }, [sendMessage]);

  const updateStatusFinal = useCallback((
    chamado: number,
    levelOrKeyOrStatus: number | string,
    maybeStatus?: string
  ) => {
    // caso 1: numeric + status -> level number
    if (typeof levelOrKeyOrStatus === 'number') {
      const level = levelOrKeyOrStatus;
      const status = maybeStatus!;
      const levelStatusKey = `level${level}_status`;
      return sendMessage({ action: 'updateStatusFinal', chamado, levelStatusKey, status });
    }

    // caso 2: string + status (treat second param as levelStatusKey)
    if (typeof maybeStatus === 'string') {
      const levelStatusKey = levelOrKeyOrStatus;
      const status = maybeStatus;
      return sendMessage({ action: 'updateStatusFinal', chamado, levelStatusKey, status });
    }

    // caso 3: apenas chamado + statusFinal (retrocompat√≠vel)
    const statusFinal = levelOrKeyOrStatus;
    return sendMessage({ action: 'updateStatusFinal', chamado, statusFinal });
  }, [sendMessage]);

  const getState = useCallback((chamado: number) => {
    return sendMessage({ action: 'getState', chamado });
  }, [sendMessage]);

  // C√°lculo de tempo restante (sem logs)
  const getRemainingTime = useCallback((chamado: number, level: number): number => {
    const timerState = timers.get(chamado);
    if (!timerState) return 0;

    const levelPrefix = `level${level}` as 'level1' | 'level2' | 'level3' | 'level4' | 'level5';
    const timerStart = timerState[`${levelPrefix}_timerStart`];
    const duration = timerState[`${levelPrefix}_duration`];
    const status = timerState[`${levelPrefix}_status`];

    if (!timerStart || !duration || status !== 'running') return 0;

    try {
      const startTime = new Date(timerStart).getTime();
      const endTime = startTime + (duration * 1000);
      const now = Date.now();
      return Math.max(0, Math.floor((endTime - now) / 1000));
    } catch {
      return 0;
    }
  }, [timers]);

  const formatTime = useCallback((seconds: number): string => {
    const hours = Math.floor(seconds / 3600);
    const minutes = Math.floor((seconds % 3600) / 60);
    const secs = seconds % 60;

    if (hours > 0) {
      return `${hours.toString().padStart(2, '0')}:${minutes.toString().padStart(2, '0')}:${secs.toString().padStart(2, '0')}`;
    }
    return `${minutes.toString().padStart(2, '0')}:${secs.toString().padStart(2, '0')}`;
  }, []);

  const isTimerActive = useCallback((chamado: number, level: number): boolean => {
    const timerState = timers.get(chamado);
    if (!timerState) return false;

    const levelPrefix = `level${level}` as 'level1' | 'level2' | 'level3' | 'level4' | 'level5';
    return timerState[`${levelPrefix}_status`] === 'running';
  }, [timers]);

  // Conectar ao montar
  useEffect(() => {
    connect();
    return () => disconnect();
  }, [connect, disconnect]);

  // For√ßa re-render a cada segundo
  useEffect(() => {
    const interval = setInterval(() => {
      setTimers(prev => new Map(prev));
    }, 1000);
    return () => clearInterval(interval);
  }, []);

  useEffect(() => {
    if (!isConnected) return;

    try {
      const currentKeys = Array.from(timers.keys());
      const watchedKeys = Array.from(watchedChamadosRef.current);
      const uniqueChamados = Array.from(new Set([...currentKeys, ...watchedKeys]));

      if (uniqueChamados.length === 0) {
        return;
      }

      console.log('üîÅ Solicitando estado inicial para chamados:', uniqueChamados);
      uniqueChamados.forEach(chamado => {
        try {
          getState(chamado);
        } catch (err) {
          console.error(`Erro ao solicitar getState para ${chamado}:`, err);
        }
      });
    } catch (err) {
      console.error('Erro no efeito de sincroniza√ß√£o inicial:', err);
    }
    // eslint-disable-next-line react-hooks/exhaustive-deps
  }, [isConnected, getState]);

  const addWatchedChamado = useCallback((chamado: number) => {
    watchedChamadosRef.current.add(chamado);
  }, []);

  const removeWatchedChamado = useCallback((chamado: number) => {
    watchedChamadosRef.current.delete(chamado);
  }, []);

  const setWatchedChamados = useCallback((chamados: number[]) => {
    watchedChamadosRef.current = new Set(chamados);
  }, []);

  const getWatchedChamados = useCallback(() => {
    return Array.from(watchedChamadosRef.current);
  }, []);

  return {
    timers,
    isConnected,
    sendMessage,
    startTimer,
    updateObservacao,
    updateOperador,
    updateAcionamento,
    updateStatusFinal,
    getState,
    getRemainingTime,
    formatTime,
    isTimerActive,
    connect,
    disconnect,
    addWatchedChamado,
    removeWatchedChamado,
    setWatchedChamados,
    getWatchedChamados
  };
};

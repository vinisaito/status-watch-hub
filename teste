MODERNTIMERMODAL:
import React, { useState, useCallback } from 'react';
import { Dialog, DialogContent, DialogHeader, DialogTitle } from '@/components/ui/dialog';
import { Button } from '@/components/ui/button';
import { Textarea } from '@/components/ui/textarea';
import { Input } from '@/components/ui/input';
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';
import { Label } from '@/components/ui/label';
import { Badge } from '@/components/ui/badge';
import { Separator } from '@/components/ui/separator';
import { ProgressIndicator } from '@/components/ui/progress-indicator';
import { TimerDisplay } from '@/components/ui/timer-display';
import { ArrowRight, CheckCircle, X, AlertTriangle, Lightbulb, MessageSquare, Timer, Building2, Users, Clock, User, Phone } from 'lucide-react';
import { toast } from '@/hooks/use-toast';
import { cn } from '@/lib/utils';

interface ModernTimerModalProps {
  isOpen: boolean;
  onClose: () => void;
  chamado: number;
  currentLevel: number;
  remainingTime: number;
  chamadoData?: any;
  formatTime: (seconds: number) => string;
  onNextLevel: (chamado: number, level: number, observacao: string) => void;
  updateStatusFinal: (chamado: number, levelStatusKey: string, status: string) => void;
  updateObservacao: (chamado: number, level: number, observacao: string) => void;
  updateAcionamento: (chamado: number, level: number, operador: string, pessoaAcionada: string, statusAcionamento: string) => void;
}

const LEVEL_INFO = {
  1: {
    title: "Primeiro Acionamento",
    subtitle: "",
    nextAction: "Avançar para 1ª Escalação",
    icon: Clock,
    color: "from-blue-500 to-blue-600",
    bgColor: "bg-blue-500/5 border-blue-200",
    description: "Atendimento Inicial da Equipe"
  },
  2: {
    title: "1ª Escalação",
    subtitle: "",
    nextAction: "Avançar para 2ª Escalação",
    icon: Users,
    color: "from-orange-500 to-orange-600",
    bgColor: "bg-orange-500/5 border-orange-200",
    description: "Acionamento do Gestor de Incidente ou Plantonista"
  },
  3: {
    title: "2ª Escalação",
    subtitle: "",
    nextAction: "Avançar para 3ª Escalação",
    icon: Building2,
    color: "from-red-500 to-red-600",
    bgColor: "bg-red-500/5 border-red-200",
    description: "Acionamento do Coordenador"
  },
  4: {
    title: "3ª Escalação",
    subtitle: "",
    nextAction: "Avançar para 4ª Escalação",
    icon: Users,
    color: "from-purple-500 to-purple-600",
    bgColor: "bg-purple-500/5 border-purple-200",
    description: "Acionamento do Gerente"
  },
  5: {
    title: "4ª Escalação",
    subtitle: "",
    nextAction: "Finalizar Chamado",
    icon: Building2,
    color: "from-red-600 to-red-700",
    bgColor: "bg-red-600/5 border-red-300",
    description: "Acionamento do Kleber Costa"
  }
};

export const ModernTimerModal: React.FC<ModernTimerModalProps> = ({
  isOpen,
  onClose,
  chamado,
  currentLevel,
  remainingTime,
  chamadoData,
  formatTime,
  onNextLevel,
  updateStatusFinal,
  updateObservacao,
  updateAcionamento
}) => {
  const [observacao, setObservacao] = useState('');
  const [pessoaAcionada, setPessoaAcionada] = useState('');
  const [statusAtendimento, setStatusAtendimento] = useState('');
  const [operador, setOperador] = useState('');
  const [isProcessing, setIsProcessing] = useState(false);
  const levelStatusKey = `level${currentLevel}_status`;
  const [finalizado, setFinalizado] = useState(
    chamadoData?.statusFinal === "finished" || chamadoData?.[levelStatusKey] === "finished"
  );

  React.useEffect(() => {
    setFinalizado(
      chamadoData?.statusFinal === "finished" || chamadoData?.[levelStatusKey] === "finished"
    );
  }, [chamadoData, levelStatusKey]);

  const levelInfo = finalizado
    ? {
      title: "Chamado Finalizado",
      subtitle: "Processo encerrado com sucesso",
      description: "O chamado foi resolvido e encerrado",
      icon: CheckCircle,
      color: "from-success to-success/90",
      bgColor: "bg-success/5 border-success/20",
      nextAction: "Finalizado"
    }
    : LEVEL_INFO[currentLevel as keyof typeof LEVEL_INFO];

  const validateForm = useCallback(() => {
    const errors = [];

    if (!operador) {
      errors.push("Operador é obrigatório");
    }

    if (!pessoaAcionada.trim()) {
      errors.push("Nome da pessoa acionada é obrigatório");
    } else if (pessoaAcionada.trim().length < 2) {
      errors.push("Nome deve ter pelo menos 2 caracteres");
    }

    if (!statusAtendimento) {
      errors.push("Status de atendimento é obrigatório");
    }

    if (!observacao.trim()) {
      errors.push("Observações são obrigatórias");
    } else if (observacao.trim().length < 10) {
      errors.push("Observações devem ter pelo menos 10 caracteres");
    }

    if (errors.length > 0) {
      toast({
        title: "⚠️ Campos Obrigatórios",
        description: errors.join(". "),
        variant: "destructive",
      });
      return false;
    }

    return true;
  }, [operador, pessoaAcionada, statusAtendimento, observacao]);

  const handleAction = useCallback(async (action: 'next' | 'finish') => {
    if (!validateForm()) return;

    setIsProcessing(true);

    try {
      const fullObservacao = `Operador: ${operador}\nPessoa Acionada: ${pessoaAcionada.trim()}\nStatus: ${statusAtendimento}\n\nDetalhes: ${observacao.trim()}`;

      if (finalizado && action !== 'finish') {
        toast({
          title: "⚠️ Chamado já finalizado",
          description: "Não é possível alterar níveis pois o chamado está finalizado",
          variant: "destructive",
        });
        return;
      }

      switch (action) {
        case 'next': {
          const updates = [
            updateStatusFinal(chamado, levelStatusKey, "finished"),
            updateObservacao(chamado, currentLevel, observacao || ""),
            updateAcionamento(chamado, currentLevel, operador || "", pessoaAcionada || "", statusAtendimento || "")
          ];

          if (currentLevel >= 5) {
            await Promise.all(updates);
            toast({
              title: "✅ Chamado Finalizado",
              description: `Chamado ${chamado} foi finalizado com sucesso!`
            });
          } else {
            await Promise.all(updates);
            await onNextLevel(chamado, currentLevel + 1, observacao || "");

            const nextLevelInfo = LEVEL_INFO[(currentLevel + 1) as keyof typeof LEVEL_INFO];
            toast({
              title: `🚀 ${nextLevelInfo?.title} Iniciado`,
              description: `Timer de 20 minutos iniciado para ${nextLevelInfo?.title}`,
            });
          }
          break;
        }

        case 'finish': {
          const updates = [
            updateStatusFinal(chamado, levelStatusKey, "finished"),
            updateObservacao(chamado, currentLevel, observacao || ""),
            updateAcionamento(chamado, currentLevel, operador || "", pessoaAcionada || "", statusAtendimento || "")
          ];

          await Promise.all(updates);
          setFinalizado(true);
          toast({
            title: "✅ Chamado Finalizado",
            description: `Chamado ${chamado} foi finalizado com sucesso!`,
          });
          break;
        }
      }

      // Reset form
      setObservacao('');
      setPessoaAcionada('');
      setOperador('');
      setStatusAtendimento('');
      onClose();

    } catch (error) {
      console.error("❌ Erro no handleAction:", error);
      toast({
        title: "❌ Erro na Operação",
        description: "Ocorreu um erro ao processar a ação. Verifique os logs.",
        variant: "destructive",
      });
    } finally {
      setIsProcessing(false);
    }
  }, [validateForm, updateAcionamento, pessoaAcionada, statusAtendimento, observacao, currentLevel, chamado, onNextLevel, onClose, updateStatusFinal, updateObservacao, finalizado, levelStatusKey]);

  if (!levelInfo) return null;

  const LevelIcon = levelInfo.icon;
  const isFormValid = operador && pessoaAcionada.trim().length >= 2 && statusAtendimento && observacao.trim().length >= 10;

  return (
    <Dialog open={isOpen} onOpenChange={onClose}>
      <DialogContent className="sm:max-w-4xl max-h-[85vh] overflow-y-auto border-border shadow-modal">
        {/* Header Section */}
        <DialogHeader className="relative pb-8">
          <div className={cn(
            "absolute inset-0 bg-gradient-to-r opacity-5 rounded-t-lg",
            levelInfo.color
          )} />

          <div className="relative z-10 space-y-6">
            <div className="flex flex-col lg:flex-row lg:items-center lg:justify-between gap-6">
              <div className="flex items-center gap-6">
                <div className={cn(
                  "p-4 rounded-2xl bg-gradient-to-r shadow-lg",
                  levelInfo.color,
                  "text-white"
                )}>
                  <LevelIcon className="h-10 w-10" />
                </div>

                <div className="space-y-2">
                  <DialogTitle className="text-3xl lg:text-4xl font-bold text-foreground">
                    {levelInfo.title}
                  </DialogTitle>
                  <p className="text-lg text-muted-foreground">
                    {levelInfo.subtitle}
                  </p>
                  <div className="flex items-center gap-3">
                    <Badge variant="outline" className="text-sm font-medium">
                      Chamado #{chamado}
                    </Badge>
                    <Badge
                      variant={finalizado ? "default" : "secondary"}
                      className={cn(
                        "text-sm font-medium",
                        finalizado && "bg-success text-success-foreground"
                      )}
                    >
                      {finalizado ? "Finalizado" : "Em Andamento"}
                    </Badge>
                    {remainingTime < 0 && (
                      <Badge
                        variant="destructive"
                        className="text-sm font-bold animate-text-flash bg-timer-negative text-white"
                      >
                        🚨 TEMPO EXCEDIDO
                      </Badge>
                    )}
                  </div>
                </div>
              </div>
            </div>

            <div className={cn(
              "p-4 rounded-xl border-l-4",
              levelInfo.bgColor
            )}>
              <p className="text-sm text-muted-foreground">
                {levelInfo.description}
              </p>
              {remainingTime < 0 && (
                <p className="text-timer-negative font-bold animate-text-flash mt-2">
                  ⚠️ O tempo limite foi excedido! Ação urgente necessária.
                </p>
              )}
            </div>
          </div>
        </DialogHeader>

        <div className="space-y-8">
          {/* Timer and Progress Section */}
          <div className="grid grid-cols-1 xl:grid-cols-2 gap-8">
            <TimerDisplay
              remainingTime={remainingTime}
              formatTime={formatTime}
              className="w-full"
            />
            <ProgressIndicator
              currentLevel={currentLevel}
              className="w-full"
            />
          </div>

          <Separator />

          {/* Required Information Section */}
          <div className="space-y-6">
            <div className="flex items-center gap-3">
              <Phone className="h-6 w-6 text-primary" />
              <Label className="text-xl font-semibold text-foreground">
                Acionamento
              </Label>
            </div>

            <div className="grid grid-cols-1 md:grid-cols-3 gap-6">
              {/* Operador */}
              <div className="space-y-3">
                <Label htmlFor="operador" className="text-base font-medium flex items-center gap-2">
                  <User className="h-4 w-4" />
                  Operador
                  <span className="text-destructive">*</span>
                </Label>
                <Select
                  value={operador}
                  onValueChange={setOperador}
                  disabled={isProcessing || finalizado}
                >
                  <SelectTrigger className={cn(
                    "border-2 focus:border-primary",
                    operador && "border-success"
                  )}>
                    <SelectValue placeholder="Selecione o operador" />
                  </SelectTrigger>
                  <SelectContent>
                    <SelectItem value="ALBERTO LAGES">ALBERTO LAGES</SelectItem>
                    <SelectItem value="ALEXANDRE LIMA SILVA">ALEXANDRE LIMA SILVA</SelectItem>
                    <SelectItem value="ANSELMO ALVES PESSOA">ANSELMO ALVES PESSOA</SelectItem>
                    <SelectItem value="BRUNO MAZZO FEITOSA">BRUNO MAZZO FEITOSA</SelectItem>
                    <SelectItem value="CAIO CESAR ALVES DA LUZ">CAIO CESAR ALVES DA LUZ</SelectItem>
                    <SelectItem value="CLAUDIA ZORZAN DE CAMARGO">CLAUDIA ZORZAN DE CAMARGO</SelectItem>
                    <SelectItem value="JEFFERSON DA SILVA SOUZA">JEFFERSON DA SILVA SOUZA</SelectItem>
                    <SelectItem value="JULIANA BEATRIZ DE ANGELO">JULIANA BEATRIZ DE ANGELO</SelectItem>
                    <SelectItem value="MARIA LUIZA DOS SANTOS COIADO">MARIA LUIZA DOS SANTOS COIADO</SelectItem>
                    <SelectItem value="RAFAEL NUNES PACHECO">RAFAEL NUNES PACHECO</SelectItem>
                    <SelectItem value="SERGIO ANTONIO DA SILVA">SERGIO ANTONIO DA SILVA</SelectItem>
                    <SelectItem value="VICTOR HUGO ALMEIDA FERNANDES">VICTOR HUGO ALMEIDA FERNANDES</SelectItem>
                    <SelectItem value="VINICIUS RHYU VITURINO SAITO">VINICIUS RHYU VITURINO SAITO</SelectItem>
                  </SelectContent>
                </Select>
              </div>

              {/* Nome da Pessoa Acionada */}
              <div className="space-y-3">
                <Label htmlFor="pessoa-acionada" className="text-base font-medium flex items-center gap-2">
                  <User className="h-4 w-4" />
                  Pessoa Acionada
                  <span className="text-destructive">*</span>
                </Label>
                <Input
                  id="pessoa-acionada"
                  type="text"
                  value={pessoaAcionada}
                  onChange={(e) => setPessoaAcionada(e.target.value)}
                  placeholder="Ex: João Silva, Maria Santos..."
                  className={cn(
                    "border-2 focus:border-primary transition-all duration-200",
                    pessoaAcionada.trim().length >= 2 && "border-success"
                  )}
                  disabled={isProcessing || finalizado}
                  maxLength={100}
                />
              </div>

              {/* Status do Atendimento */}
              <div className="space-y-3">
                <Label htmlFor="status-atendimento" className="text-base font-medium flex items-center gap-2">
                  <CheckCircle className="h-4 w-4" />
                  Status do Atendimento
                  <span className="text-destructive">*</span>
                </Label>
                <Select
                  value={statusAtendimento}
                  onValueChange={(value) => {
                    console.log("Status selecionado:", value); // 🔹 log de debug
                    setStatusAtendimento(value);
                  }}
                  disabled={isProcessing || finalizado}
                >
                  <SelectTrigger className={cn(
                    "border-2 focus:border-primary",
                    statusAtendimento && "border-success"
                  )}>
                    <SelectValue placeholder="Selecione o status do atendimento" />
                  </SelectTrigger>
                  <SelectContent>
                    <SelectItem value="atendido">✅ Atendido</SelectItem>
                    <SelectItem value="nao-atendido">❌ Não Atendido</SelectItem>
                  </SelectContent>
                </Select>
              </div>
            </div>
          </div>

          <Separator />
          

          {/* Observations Section */}
          <div className="space-y-6">
            <div className="flex items-center gap-3">
              <MessageSquare className="h-6 w-6 text-primary" />
              <Label htmlFor="observacao" className="text-xl font-semibold text-foreground">
                Observações
              </Label>
            </div>

            <Textarea
              id="observacao"
              value={observacao}
              onChange={(e) => setObservacao(e.target.value)}
              placeholder="Descreva as informações do acionamento"
              rows={6}
              className={cn(
                "border-2 focus:border-primary transition-all duration-200 resize-none text-base min-h-[120px]",
                observacao.trim().length >= 10 && "border-success"
              )}
              disabled={isProcessing || finalizado}
              maxLength={1000}
            />

            <div className="flex justify-between items-center">
              <span className={cn(
                "text-sm font-medium",
                observacao.length > 900 ? "text-warning" : "text-muted-foreground"
              )}>
                {observacao.length}/1000 caracteres
              </span>
              {observacao.trim().length >= 10 && (
                <div className="flex items-center gap-2 text-success font-medium text-sm">
                  <CheckCircle className="h-4 w-4" />
                  <span>Observação válida</span>
                </div>
              )}
            </div>
          </div>

          <Separator />

          {/* Action Buttons */}
          <div className="space-y-6">
            <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
              {/* Finish Button */}
              <Button
                variant="secondary"
                size="lg"
                onClick={() => handleAction('finish')}
                disabled={!isFormValid || isProcessing || finalizado}
                className="h-20"
              >
                <CheckCircle className="h-6 w-6 mr-3" />
                <div className="text-left">
                  <div className="font-semibold text-base">Acompanhamento Confirmado</div>
                  <div className="text-sm opacity-90">Finalizar Acompanhamento</div>
                </div>
              </Button>

              {/* Next Level Button */}
              <Button
                variant="destructive"
                size="lg"
                onClick={() => handleAction('next')}
                disabled={!isFormValid || isProcessing || finalizado}
                className={cn(
                  "h-20",
                  remainingTime < 0 && "animate-timer-alert bg-timer-negative hover:bg-timer-negative/90"
                )}
              >
                {finalizado ? (
                  <>
                    <CheckCircle className="h-6 w-6 mr-3" />
                    <div className="text-left">
                      <div className="font-semibold text-base">Finalizado</div>
                      <div className="text-sm opacity-90">Chamado encerrado</div>
                    </div>
                  </>
                ) : currentLevel >= 5 ? (
                  <>
                    <CheckCircle className="h-6 w-6 mr-3" />
                    <div className="text-left">
                      <div className="font-semibold text-base">Concluir Final</div>
                      <div className="text-sm opacity-90">Última escalação</div>
                    </div>
                  </>
                ) : (
                  <>
                    <ArrowRight className="h-6 w-6 mr-3" />
                    <div className="text-left">
                      <div className="font-semibold text-base">{levelInfo.nextAction}</div>
                      <div className="text-sm opacity-90">Avançar escalação</div>
                    </div>
                  </>
                )}
              </Button>
            </div>
          </div>

          {/* Guidelines Section */}
          <div className="gradient-modal rounded-2xl p-6 border border-border/50">
            <div className="space-y-4">
              <div className="grid grid-cols-1 md:grid-cols-2 xl:grid-cols-3 gap-6">
                <div className="space-y-2">
                  <div className="flex items-center gap-2 text-destructive">
                    <AlertTriangle className="h-5 w-5" />
                    <span className="font-semibold">Dados Obrigatórios</span>
                  </div>
                  <p className="text-sm text-muted-foreground">
                    Nome da pessoa, status, operador e observações são campos obrigatórios para prosseguir.
                  </p>
                </div>

                <div className="space-y-2">
                  <div className="flex items-center gap-2 text-primary">
                    <Timer className="h-5 w-5" />
                    <span className="font-semibold">Controle de Tempo</span>
                  </div>
                  <p className="text-sm text-muted-foreground">
                    Cada escalação reinicia automaticamente o timer de 20 minutos.
                  </p>
                  {remainingTime < 0 && (
                    <p className="text-timer-negative text-sm font-bold animate-text-flash">
                      ⚠️ Timer excedido! Ação urgente necessária.
                    </p>
                  )}
                </div>

                <div className="space-y-2">
                  <div className="flex items-center gap-2 text-success">
                    <CheckCircle className="h-5 w-5" />
                    <span className="font-semibold">Documentação</span>
                  </div>
                  <p className="text-sm text-muted-foreground">
                    Todas as informações são automaticamente registradas no histórico.
                  </p>
                </div>
              </div>
            </div>
          </div>

          {/* Processing Indicator */}
          {isProcessing && (
            <div className="fixed inset-0 bg-background/80 backdrop-blur-sm flex items-center justify-center z-50">
              <div className="bg-card p-6 rounded-2xl shadow-2xl border border-border">
                <div className="flex items-center gap-3">
                  <div className="animate-spin rounded-full h-6 w-6 border-b-2 border-primary"></div>
                  <span className="text-lg font-medium">Processando ação...</span>
                </div>
              </div>
            </div>
          )}

        </div>
      </DialogContent>
    </Dialog>
  );
};





USEWEBSOCKETTIMERS:
import { useState, useEffect, useCallback, useRef } from 'react';
import { toast } from '@/hooks/use-toast';

export interface TimerState {
  chamado: number;
  operador?: string;
  statusFinal?: string;
  level1_timerStart?: string;
  level1_duration?: number;
  level1_status?: 'running' | 'paused' | 'stopped' | 'finished';
  level1_observacao?: string;
  level1_operador?: string;
  level1_pessoaAcionada?: string;
  level1_statusAcionamento?: string;
  level2_timerStart?: string;
  level2_duration?: number;
  level2_status?: 'running' | 'paused' | 'stopped' | 'finished';
  level2_observacao?: string;
  level2_operador?: string;
  level2_pessoaAcionada?: string;
  level2_statusAcionamento?: string;
  level3_timerStart?: string;
  level3_duration?: number;
  level3_status?: 'running' | 'paused' | 'stopped' | 'finished';
  level3_observacao?: string;
  level3_operador?: string;
  level3_pessoaAcionada?: string;
  level3_statusAcionamento?: string;
  level4_timerStart?: string;
  level4_duration?: number;
  level4_status?: 'running' | 'paused' | 'stopped' | 'finished';
  level4_observacao?: string;
  level4_operador?: string;
  level4_pessoaAcionada?: string;
  level4_statusAcionamento?: string;
  level5_timerStart?: string;
  level5_duration?: number;
  level5_status?: 'running' | 'paused' | 'stopped' | 'finished';
  level5_observacao?: string;
  level5_operador?: string;
  level5_pessoaAcionada?: string;
  level5_statusAcionamento?: string;
}

export interface WebSocketMessage {
  event: 'startTimer' | 'updateObservacao' | 'updateOperador' | 'updateStatusFinal' | 'getState' | 'updateAcionamento';
  chamado: number;
  level?: number;
  state?: TimerState;
}

export interface SendMessage {
  action: 'startTimer' | 'updateObservacao' | 'updateOperador' | 'updateStatusFinal' | 'getState' | 'updateAcionamento';
  chamado: number;
  level?: number;
  duration?: number;
  observacao?: string;
  operador?: string;
  statusFinal?: string;
  levelStatusKey?: string;
  status?: string;
  pessoaAcionada?: string;
  statusAcionamento?: string;
}

export const useWebsocketTimers = () => {
  const [timers, setTimers] = useState<Map<number, TimerState>>(new Map());
  const [isConnected, setIsConnected] = useState(false);
  const ws = useRef<WebSocket | null>(null);
  const reconnectAttempts = useRef(0);
  const maxReconnectAttempts = 5;
  const reconnectTimeout = useRef<NodeJS.Timeout | null>(null);

  // Chamados que o cliente quer garantir que sejam consultados ao conectar
  const watchedChamadosRef = useRef<Set<number>>(new Set());

  const connect = useCallback(() => {
    try {
      if (ws.current && ws.current.readyState === WebSocket.CONNECTING) {
        return;
      }

      const wsUrl = 'wss://rsgjd6wsza.execute-api.us-east-1.amazonaws.com/dev';
      console.log(`🔌 Tentando conectar no WebSocket: ${wsUrl}`);

      ws.current = new WebSocket(wsUrl);

      const connectionTimeout = setTimeout(() => {
        if (ws.current && ws.current.readyState === WebSocket.CONNECTING) {
          ws.current.close();
          toast({
            title: "Timeout de Conexão",
            description: "WebSocket demorou muito para conectar. Tentando novamente...",
            variant: "destructive",
          });
        }
      }, 10000);

      ws.current.onopen = () => {
        clearTimeout(connectionTimeout);
        setIsConnected(true);
        reconnectAttempts.current = 0;

        console.log('✅ WebSocket conectado com sucesso');
        toast({
          title: "Conectado",
          description: "WebSocket conectado com sucesso",
        });
      };

      ws.current.onmessage = (event) => {
        try {
          const message: WebSocketMessage = JSON.parse(event.data);

          if (message.state && message.chamado) {
            setTimers(prev => {
              const oldState = prev.get(message.chamado);
              const isDifferent = JSON.stringify(oldState) !== JSON.stringify(message.state);

              if (isDifferent) {
                console.log(`🔔 Novo evento para chamado ${message.chamado}`, message.state);
              }

              const newTimers = new Map(prev);
              newTimers.set(message.chamado, message.state!);
              return newTimers;
            });
          }
        } catch (error) {
          console.error('❌ Erro ao processar mensagem WebSocket:', error);
        }
      };

      ws.current.onclose = (event) => {
        clearTimeout(connectionTimeout);
        setIsConnected(false);

        console.warn('⚠️ WebSocket desconectado - Código:', event.code, 'Motivo:', event.reason);

        if (event.code !== 1000 && reconnectAttempts.current < maxReconnectAttempts) {
          reconnectAttempts.current++;
          const delay = Math.min(1000 * Math.pow(2, reconnectAttempts.current), 30000);
          console.log(`🔄 Tentando reconectar em ${delay}ms (tentativa ${reconnectAttempts.current}/${maxReconnectAttempts})`);

          reconnectTimeout.current = setTimeout(() => {
            connect();
          }, delay);
        } else if (reconnectAttempts.current >= maxReconnectAttempts) {
          console.error('❌ Máximo de tentativas de reconexão atingido');
          toast({
            title: "Falha na Conexão",
            description: "Não foi possível conectar ao WebSocket após várias tentativas",
            variant: "destructive",
          });
        }
      };

      ws.current.onerror = () => {
        clearTimeout(connectionTimeout);
        console.error('❌ Erro WebSocket detectado');
      };

    } catch (error) {
      console.error('❌ Erro ao conectar WebSocket:', error);
      toast({
        title: "Erro de Inicialização",
        description: "Erro ao inicializar conexão WebSocket",
        variant: "destructive",
      });
    }
  }, []);

  const disconnect = useCallback(() => {
    if (reconnectTimeout.current) {
      clearTimeout(reconnectTimeout.current);
      reconnectTimeout.current = null;
    }

    if (ws.current) {
      ws.current.close(1000, 'Desconexão intencional');
      ws.current = null;
    }

    setIsConnected(false);
    console.log('🔌 WebSocket desconectado manualmente');
  }, []);

  const sendMessage = useCallback((message: SendMessage) => {
    if (ws.current && ws.current.readyState === WebSocket.OPEN) {
      try {
        const payload = JSON.stringify(message); // Armazena o payload em uma variável
        ws.current.send(payload);

        // Inclui a variável payload no console.log
        console.log(`📤 Mensagem enviada: ${message.action} (chamado ${message.chamado})`);
        console.log('Payload:', payload);

        return true;
      } catch (error) {
        console.error('❌ Erro ao enviar mensagem:', error);
        toast({
          title: "Erro ao Enviar",
          description: "Não foi possível enviar a mensagem",
          variant: "destructive",
        });
        return false;
      }
    } else {
      toast({
        title: "Não Conectado",
        description: "WebSocket não está conectado. Tentando reconectar...",
        variant: "destructive",
      });
      connect();
      return false;
    }
  }, [connect]);

  // Ações (mantive todas as existentes)
  const startTimer = useCallback((chamado: number, level: number, duration: number = 1200) => {
    return sendMessage({ action: 'startTimer', chamado, level, duration });
  }, [sendMessage]);

  const updateObservacao = useCallback((chamado: number, level: number, observacao: string) => {
    return sendMessage({ action: 'updateObservacao', chamado, level, observacao });
  }, [sendMessage]);

  const updateOperador = useCallback((chamado: number, operador: string) => {
    return sendMessage({ action: 'updateOperador', chamado, operador });
  }, [sendMessage]);

  const updateAcionamento = useCallback((chamado: number, level: number, operador: string, pessoaAcionada: string, statusAcionamento: string) => {
    return sendMessage({ action: 'updateAcionamento', chamado, level, operador, pessoaAcionada, statusAcionamento});
  }, [sendMessage]);

  const updateStatusFinal = useCallback((
    chamado: number,
    levelOrKeyOrStatus: number | string,
    maybeStatus?: string
  ) => {
    // caso 1: numeric + status -> level number
    if (typeof levelOrKeyOrStatus === 'number') {
      const level = levelOrKeyOrStatus;
      const status = maybeStatus!;
      const levelStatusKey = `level${level}_status`;
      return sendMessage({ action: 'updateStatusFinal', chamado, levelStatusKey, status });
    }

    // caso 2: string + status (treat second param as levelStatusKey)
    if (typeof maybeStatus === 'string') {
      const levelStatusKey = levelOrKeyOrStatus;
      const status = maybeStatus;
      return sendMessage({ action: 'updateStatusFinal', chamado, levelStatusKey, status });
    }

    // caso 3: apenas chamado + statusFinal (retrocompatível)
    const statusFinal = levelOrKeyOrStatus;
    return sendMessage({ action: 'updateStatusFinal', chamado, statusFinal });
  }, [sendMessage]);

  const getState = useCallback((chamado: number) => {
    return sendMessage({ action: 'getState', chamado });
  }, [sendMessage]);

  // Cálculo de tempo restante (sem logs)
  const getRemainingTime = useCallback((chamado: number, level: number): number => {
    const timerState = timers.get(chamado);
    if (!timerState) return 0;

    const levelPrefix = `level${level}` as 'level1' | 'level2' | 'level3' | 'level4' | 'level5';
    const timerStart = timerState[`${levelPrefix}_timerStart`];
    const duration = timerState[`${levelPrefix}_duration`];
    const status = timerState[`${levelPrefix}_status`];

    if (!timerStart || !duration || status !== 'running') return 0;

    try {
      const startTime = new Date(timerStart).getTime();
      const endTime = startTime + (duration * 1000);
      const now = Date.now();
      return Math.max(0, Math.floor((endTime - now) / 1000));
    } catch {
      return 0;
    }
  }, [timers]);

  const formatTime = useCallback((seconds: number): string => {
    const hours = Math.floor(seconds / 3600);
    const minutes = Math.floor((seconds % 3600) / 60);
    const secs = seconds % 60;

    if (hours > 0) {
      return `${hours.toString().padStart(2, '0')}:${minutes.toString().padStart(2, '0')}:${secs.toString().padStart(2, '0')}`;
    }
    return `${minutes.toString().padStart(2, '0')}:${secs.toString().padStart(2, '0')}`;
  }, []);

  const isTimerActive = useCallback((chamado: number, level: number): boolean => {
    const timerState = timers.get(chamado);
    if (!timerState) return false;

    const levelPrefix = `level${level}` as 'level1' | 'level2' | 'level3' | 'level4' | 'level5';
    return timerState[`${levelPrefix}_status`] === 'running';
  }, [timers]);

  // Conectar ao montar
  useEffect(() => {
    connect();
    return () => disconnect();
  }, [connect, disconnect]);

  // Força re-render a cada segundo
  useEffect(() => {
    const interval = setInterval(() => {
      setTimers(prev => new Map(prev));
    }, 1000);
    return () => clearInterval(interval);
  }, []);

  useEffect(() => {
    if (!isConnected) return;

    try {
      const currentKeys = Array.from(timers.keys());
      const watchedKeys = Array.from(watchedChamadosRef.current);
      const uniqueChamados = Array.from(new Set([...currentKeys, ...watchedKeys]));

      if (uniqueChamados.length === 0) {
        return;
      }

      console.log('🔁 Solicitando estado inicial para chamados:', uniqueChamados);
      uniqueChamados.forEach(chamado => {
        try {
          getState(chamado);
        } catch (err) {
          console.error(`Erro ao solicitar getState para ${chamado}:`, err);
        }
      });
    } catch (err) {
      console.error('Erro no efeito de sincronização inicial:', err);
    }
    // eslint-disable-next-line react-hooks/exhaustive-deps
  }, [isConnected, getState]);

  const addWatchedChamado = useCallback((chamado: number) => {
    watchedChamadosRef.current.add(chamado);
  }, []);

  const removeWatchedChamado = useCallback((chamado: number) => {
    watchedChamadosRef.current.delete(chamado);
  }, []);

  const setWatchedChamados = useCallback((chamados: number[]) => {
    watchedChamadosRef.current = new Set(chamados);
  }, []);

  const getWatchedChamados = useCallback(() => {
    return Array.from(watchedChamadosRef.current);
  }, []);

  return {
    timers,
    isConnected,
    sendMessage,
    startTimer,
    updateObservacao,
    updateOperador,
    updateAcionamento,
    updateStatusFinal,
    getState,
    getRemainingTime,
    formatTime,
    isTimerActive,
    connect,
    disconnect,
    addWatchedChamado,
    removeWatchedChamado,
    setWatchedChamados,
    getWatchedChamados
  };
};

import * as React from "react"
import { cva, type VariantProps } from "class-variance-authority"
import { cn } from "@/lib/utils"
import { Clock, CheckCircle, AlertTriangle, Zap } from "lucide-react"

const escalationStatusVariants = cva(
  "inline-flex items-center gap-2 rounded-full px-3 py-1 text-xs font-medium transition-all duration-300",
  {
    variants: {
      status: {
        pending: "bg-amber-100 text-amber-800 border border-amber-200",
        confirmed: "bg-emerald-100 text-emerald-800 border border-emerald-200",
        escalating: "bg-red-100 text-red-800 border border-red-200 animate-pulse",
        completed: "bg-blue-100 text-blue-800 border border-blue-200"
      }
    },
    defaultVariants: {
      status: "pending"
    }
  }
)

interface EscalationStatusProps extends VariantProps<typeof escalationStatusVariants> {
  className?: string
  level?: number
  timeRemaining?: number
}

const formatTime = (seconds: number) => {
  const minutes = Math.floor(seconds / 60)
  const remainingSeconds = seconds % 60
  return `${minutes.toString().padStart(2, '0')}:${remainingSeconds.toString().padStart(2, '0')}`
}

const getStatusIcon = (status: string) => {
  switch (status) {
    case 'pending':
      return <Clock className="h-3 w-3" />
    case 'confirmed':
      return <CheckCircle className="h-3 w-3" />
    case 'escalating':
      return <AlertTriangle className="h-3 w-3" />
    case 'completed':
      return <Zap className="h-3 w-3" />
    default:
      return <Clock className="h-3 w-3" />
  }
}

const getStatusText = (status: string, level?: number) => {
  switch (status) {
    case 'pending':
      return 'Aguardando Confirmação'
    case 'confirmed':
      return 'Confirmado'
    case 'escalating':
      return level ? `${level}ª Escalação` : 'Escalação'
    case 'completed':
      return 'Finalizado'
    default:
      return 'Pendente'
  }
}

export const EscalationStatus = React.forwardRef<HTMLDivElement, EscalationStatusProps>(
  ({ className, status = "pending", level, timeRemaining, ...props }, ref) => {
    return (
      <div
        ref={ref}
        className={cn(escalationStatusVariants({ status }), className)}
        {...props}
      >
        {getStatusIcon(status)}
        <span>{getStatusText(status, level)}</span>
        {timeRemaining !== undefined && timeRemaining > 0 && (
          <span className="font-mono text-xs bg-white/50 px-2 py-0.5 rounded">
            {formatTime(timeRemaining)}
          </span>
        )}
      </div>
    )
  }
)

EscalationStatus.displayName = "EscalationStatus"

import React, { useEffect, useRef, useState } from "react";

interface Alert {
  chamado: number;
  startedAt?: string;
  durationMinutes?: number;
  timerActive?: boolean;
  localTimeRemaining?: number;
}

const WS_ENDPOINT = "wss://SEU_ENDPOINT.execute-api.us-east-1.amazonaws.com/prod";
const REST_ENDPOINT = "https://f6ffk8e9fe.execute-api.us-east-1.amazonaws.com/prod/dados";

const Timer: React.FC = () => {
  const ws = useRef<WebSocket | null>(null);
  const [alerts, setAlerts] = useState<Alert[]>([]);

  // 1Ô∏è‚É£ Buscar alertas iniciais via REST
  useEffect(() => {
    const fetchAlerts = async () => {
      try {
        const res = await fetch(REST_ENDPOINT);
        const data = await res.json();
        if (Array.isArray(data)) {
          setAlerts(
            data.map((a: any) => ({
              ...a,
              localTimeRemaining: a.durationMinutes ? a.durationMinutes * 60 : 0,
            }))
          );
        } else {
          console.warn("‚ö†Ô∏è Resposta inesperada da API:", data);
        }
      } catch (err) {
        console.error("‚ùå Erro ao buscar alertas:", err);
      }
    };
    fetchAlerts();
  }, []);

  // 2Ô∏è‚É£ Conectar WebSocket
  useEffect(() => {
    ws.current = new WebSocket(WS_ENDPOINT);

    ws.current.onopen = () => console.log("‚úÖ WebSocket conectado");

    ws.current.onmessage = (msg) => {
      const data = JSON.parse(msg.data);
      console.log("üì© Mensagem recebida:", data);

      if (data.type === "TIMER_UPDATED") {
        setAlerts((prev) =>
          prev.map((alert) =>
            alert.chamado === data.chamado
              ? {
                  ...alert,
                  ...data,
                  // Inicializa o temporizador local
                  localTimeRemaining: data.durationMinutes! * 60,
                }
              : alert
          )
        );
      }
    };

    ws.current.onerror = (err) => console.error("‚ùå Erro WebSocket:", err);
    ws.current.onclose = () => console.log("‚ö†Ô∏è WebSocket desconectado");

    return () => ws.current?.close();
  }, []);

  // 3Ô∏è‚É£ Atualizar cron√¥metro local a cada segundo
  useEffect(() => {
    const interval = setInterval(() => {
      setAlerts((prev) =>
        prev.map((alert) => {
          if (alert.timerActive && alert.startedAt) {
            const startedAt = new Date(alert.startedAt).getTime();
            const durationMs = (alert.durationMinutes ?? 15) * 60 * 1000;
            const elapsed = Date.now() - startedAt;
            const remaining = Math.max(0, durationMs - elapsed);
            return { ...alert, localTimeRemaining: Math.floor(remaining / 1000) };
          }
          return { ...alert, localTimeRemaining: 0 };
        })
      );
    }, 1000);
    return () => clearInterval(interval);
  }, [alerts]);

  // 4Ô∏è‚É£ Iniciar ou pausar cron√¥metro via WebSocket
  const toggleTimer = (alert: Alert) => {
    if (!ws.current || ws.current.readyState !== WebSocket.OPEN) return;
    const action = alert.timerActive ? "pauseTimer" : "startTimer";
    ws.current.send(JSON.stringify({ action, chamado: alert.chamado }));
    console.log("‚û°Ô∏è Mensagem enviada:", { action, chamado: alert.chamado });
  };

  return (
    <div style={{ padding: "20px" }}>
      <h1>Painel de Alertas</h1>
      {alerts.length === 0 && <p>Nenhum alerta dispon√≠vel</p>}
      {alerts.map((alert) => (
        <div
          key={alert.chamado}
          style={{
            border: "1px solid #ccc",
            padding: "10px",
            marginBottom: "10px",
            borderRadius: "5px",
          }}
        >
          <h2>Alerta {alert.chamado}</h2>
          <p>
            Tempo restante:{" "}
            {alert.localTimeRemaining
              ? `${Math.floor(alert.localTimeRemaining / 60)
                  .toString()
                  .padStart(2, "0")}:${(alert.localTimeRemaining % 60)
                  .toString()
                  .padStart(2, "0")}`
              : "00:00"}
          </p>
          <button onClick={() => toggleTimer(alert)}>
            {alert.timerActive ? "Pausar" : "Iniciar"} cron√¥metro
          </button>
        </div>
      ))}
    </div>
  );
};

export default Timer;

import {
  Check,
  AlertTriangle,
  Timer,
  Play,
  Settings,
  Search,
  ChevronLeft,
  ChevronRight,
  ArrowUpDown,
  ArrowUp,
  ArrowDown,
  User,
  UserCheck,
  Edit3
} from 'lucide-react';

// UI Components
import { Card, CardContent, CardHeader } from '@/components/ui/card';
import { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from '@/components/ui/table';
import { Badge } from '@/components/ui/badge';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { Label } from '@/components/ui/label';
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';
import { Tooltip, TooltipContent, TooltipProvider, TooltipTrigger } from '@/components/ui/tooltip';

// Hook customizado
import { useActionTableLogic, LEVEL_NAMES, type ActionTableProps } from '@/hooks/useActionTableLogic';

// Componentes customizados - substitua pelos seus componentes reais
import { ModernTimerModal } from '@/components/ActionTable/ModernTimerModal';
import { ChamadoDetailsModal } from '@/components/ActionTable/ChamadoDetailsModal';
import { AssumeOperatorModal } from '@/components/ActionTable/AssumeOperatorModal';

/**
 * ====================================================================================
 * COMPONENTE PRINCIPAL - ActionTable
 * ====================================================================================
 */

export const ActionTable = ({ alertData, onUpdateAcknowledgment, loading }: ActionTableProps) => {
  // Hook personalizado com toda a lógica
  const {
    // Estados
    currentPage,
    searchTerm,
    setSearchTerm,
    itemsPerPage,
    sortField,
    sortDirection,
    
    // Estados de modais
    timerManagementOpen,
    setTimerManagementOpen,
    selectedChamadoForTimer,
    setSelectedChamadoForTimer,
    chamadoDetailsOpen,
    selectedChamadoForDetails,
    assumeOperatorOpen,
    selectedChamadoForOperator,

    // Estados do WebSocket
    timers,
    isConnected,

    // Dados processados
    filteredData,
    sortedAndPaginatedData,
    totalPages,

    // Funções utilitárias
    getTimerColor,
    formatDate,
    getSeverityColor,
    getCurrentActiveLevel,
    getHistoricoAcionamentos,
    formatTime,
    getRemainingTime,

    // Handlers
    handleAcknowledgment,
    handleOpenAssumeOperator,
    handleCloseAssumeOperator,
    handleAssumeOperator,
    handleOpenChamadoDetails,
    handleCloseChamadoDetails,
    handleStartTimer,
    handleOpenTimerManagement,
    handleNextLevel,
    handlePreviousLevel,
    handleFinalize,
    handleSort,
    handleItemsPerPageChange,
    handlePageChange,

    // Funções do WebSocket
    updateObservacao,
    updateAcionamento,
    updateStatusFinal
  } = useActionTableLogic({ alertData, onUpdateAcknowledgment, loading });

  /**
   * Obtém o ícone de ordenação para uma coluna
   */
  const getSortIcon = (field: keyof typeof sortedAndPaginatedData[0]) => {
    if (sortField !== field) {
      return <ArrowUpDown className="h-4 w-4 ml-1 opacity-50" />;
    }
    if (sortDirection === 'asc') {
      return <ArrowUp className="h-4 w-4 ml-1" />;
    }
    if (sortDirection === 'desc') {
      return <ArrowDown className="h-4 w-4 ml-1" />;
    }
    return <ArrowUpDown className="h-4 w-4 ml-1 opacity-50" />;
  };

  /**
   * -----------------------------------------------------------------------------------
   * RENDER DO COMPONENTE
   * -----------------------------------------------------------------------------------
   */

  return (
    <TooltipProvider>
      <Card className="bg-card border-border shadow-elegant">
        <CardHeader>
          {/* Campo de Pesquisa */}
          <div className="relative mb-4">
            <Search className="absolute left-3 top-1/2 h-4 w-4 -translate-y-1/2 text-muted-foreground" />
            <Input
              placeholder="Pesquisar por chamado, tipo, grupo, status, título..."
              value={searchTerm}
              onChange={(e) => setSearchTerm(e.target.value)}
              className="pl-10"
            />
          </div>

          {/* Contador de resultados */}
          {searchTerm && (
            <div className="text-sm text-muted-foreground">
              {filteredData.length === 0 ? (
                <span>Nenhum resultado encontrado para "{searchTerm}"</span>
              ) : (
                <span>
                  {filteredData.length} resultado{filteredData.length !== 1 ? 's' : ''}
                  {filteredData.length !== alertData.length && ` de ${alertData.length} `}
                  para "{searchTerm}"
                </span>
              )}
            </div>
          )}
        </CardHeader>

        <CardContent>
          {/* Tabela Responsiva */}
          <div className="w-full">
            <Table className="w-full">
              <TableHeader>
                <TableRow className="border-border hover:bg-accent">
                  {/* Cabeçalhos das colunas com ordenação */}
                  <TableHead className="text-muted-foreground w-[80px]">
                    <Button
                      variant="ghost"
                      className="h-auto p-0 font-medium text-muted-foreground hover:text-foreground text-xs"
                      onClick={() => handleSort('chamado')}
                    >
                      Chamado
                      {getSortIcon('chamado')}
                    </Button>
                  </TableHead>
                  <TableHead className="text-muted-foreground hidden md:table-cell">
                    <Button
                      variant="ghost"
                      className="h-auto p-0 font-medium text-muted-foreground hover:text-foreground text-xs"
                      onClick={() => handleSort('tipo_chamado')}
                    >
                      Classificação
                      {getSortIcon('tipo_chamado')}
                    </Button>
                  </TableHead>
                  <TableHead className="text-muted-foreground hidden lg:table-cell">
                    <Button
                      variant="ghost"
                      className="h-auto p-0 font-medium text-muted-foreground hover:text-foreground text-xs"
                      onClick={() => handleSort('grupo_chamado')}
                    >
                      Grupo
                      {getSortIcon('grupo_chamado')}
                    </Button>
                  </TableHead>
                  <TableHead className="text-muted-foreground hidden lg:table-cell">
                    <Button
                      variant="ghost"
                      className="h-auto p-0 font-medium text-muted-foreground hover:text-foreground text-xs"
                      onClick={() => handleSort('status_chamado')}
                    >
                      Status
                      {getSortIcon('status_chamado')}
                    </Button>
                  </TableHead>
                  <TableHead className="text-muted-foreground hidden xl:table-cell">
                    <Button
                      variant="ghost"
                      className="h-auto p-0 font-medium text-muted-foreground hover:text-foreground text-xs"
                      onClick={() => handleSort('abertura_chamado')}
                    >
                      Abertura
                      {getSortIcon('abertura_chamado')}
                    </Button>
                  </TableHead>
                  <TableHead className="text-muted-foreground">
                    <Button
                      variant="ghost"
                      className="h-auto p-0 font-medium text-muted-foreground hover:text-foreground text-xs"
                      onClick={() => handleSort('resumo_chamado')}
                    >
                      Título
                      {getSortIcon('resumo_chamado')}
                    </Button>
                  </TableHead>
                  <TableHead className="text-muted-foreground hidden sm:table-cell">
                    <Button
                      variant="ghost"
                      className="h-auto p-0 font-medium text-muted-foreground hover:text-foreground text-xs"
                      onClick={() => handleSort('severidade_chamado')}
                    >
                      Severidade
                      {getSortIcon('severidade_chamado')}
                    </Button>
                  </TableHead>
                  <TableHead className="text-muted-foreground w-[120px] text-center">
                    <span className="text-xs font-medium">Responsável</span>
                  </TableHead>
                  <TableHead className="text-muted-foreground w-[200px] text-center">
                    <span className="text-xs font-medium">Temporizador</span>
                  </TableHead>
                  <TableHead className="text-muted-foreground w-[60px] text-center">Chat</TableHead>
                </TableRow>
              </TableHeader>

              <TableBody>
                {/* Estados de loading e dados vazios */}
                {loading ? (
                  <TableRow>
                    <TableCell colSpan={10} className="text-center py-8">
                      <div className="inline-block animate-spin rounded-full h-8 w-8 border-b-2 border-primary mb-4"></div>
                      <p>Carregando dados...</p>
                    </TableCell>
                  </TableRow>
                ) : sortedAndPaginatedData.length === 0 ? (
                  <TableRow>
                    <TableCell colSpan={10} className="text-center py-8 text-muted-foreground">
                      {searchTerm ? 'Nenhum resultado encontrado' : 'Nenhum dado disponível'}
                    </TableCell>
                  </TableRow>
                ) : (
                  /* Renderização das linhas de dados */
                  sortedAndPaginatedData.map((alert) => {
                    const isChat = alert.acionado === 'true' || alert.chat;
                    const chamadoNum = parseInt(alert.chamado);
                    const activeLevel = getCurrentActiveLevel(chamadoNum);
                    const timerState = timers.get(chamadoNum);
                    const remainingTime = activeLevel ? getRemainingTime(chamadoNum, activeLevel) : 0;
                    const isFinalized = timerState?.statusFinal === 'finalizado';
                    const timerColorClass = getTimerColor(remainingTime);
                    const currentOperator = timerState?.operador;

                    return (
                      <TableRow key={alert.id} className="border-border hover:bg-accent transition-colors">
                        {/* Coluna Chamado */}
                        <TableCell className="font-medium">
                          <Button
                            variant="link"
                            size="sm"
                            className="p-0 text-foreground hover:underline text-xs"
                            onClick={() => handleOpenChamadoDetails(alert)}
                          >
                            {alert.chamado}
                          </Button>
                        </TableCell>

                        {/* Coluna Classificação */}
                        <TableCell className="hidden md:table-cell">
                          <Tooltip>
                            <TooltipTrigger asChild>
                              <span className="truncate block max-w-[100px] text-xs">
                                {alert.tipo_chamado}
                              </span>
                            </TooltipTrigger>
                            <TooltipContent>
                              <p className="max-w-xs">{alert.tipo_chamado}</p>
                            </TooltipContent>
                          </Tooltip>
                        </TableCell>

                        {/* Coluna Grupo */}
                        <TableCell className="text-xs hidden lg:table-cell">{alert.grupo_chamado}</TableCell>

                        {/* Coluna Status */}
                        <TableCell className="text-xs hidden lg:table-cell">{alert.status_chamado}</TableCell>

                        {/* Coluna Abertura */}
                        <TableCell className="text-xs hidden xl:table-cell">{formatDate(alert.abertura_chamado)}</TableCell>

                        {/* Coluna Título */}
                        <TableCell>
                          <Tooltip>
                            <TooltipTrigger asChild>
                              <span className="truncate block max-w-[150px] text-xs">
                                {alert.resumo_chamado}
                              </span>
                            </TooltipTrigger>
                            <TooltipContent>
                              <p className="max-w-md">{alert.resumo_chamado}</p>
                            </TooltipContent>
                          </Tooltip>
                        </TableCell>

                        {/* Coluna Severidade */}
                        <TableCell className="hidden sm:table-cell">
                          <Badge className={`${getSeverityColor(alert.severidade_chamado)} text-xs`}>
                            {alert.severidade_chamado}
                          </Badge>
                        </TableCell>

                        {/* Nova Coluna Responsável */}
                        <TableCell>
                          <div className="flex flex-col items-center gap-1">
                            {currentOperator ? (
                              <div className="space-y-1 text-center">
                                <div className="flex items-center gap-1 justify-center">
                                  <UserCheck className="h-3 w-3 text-green-600" />
                                  <Badge className="bg-green-100 text-green-800 text-xs px-2 py-1 font-medium">
                                    {currentOperator}
                                  </Badge>
                                </div>
                                <Button
                                  variant="ghost"
                                  size="sm"
                                  onClick={() => handleOpenAssumeOperator(alert.chamado)}
                                  className="h-6 px-2 text-xs text-blue-600 hover:text-blue-800 hover:bg-blue-50"
                                >
                                  <Edit3 className="h-3 w-3 mr-1" />
                                  Alterar
                                </Button>
                              </div>
                            ) : (
                              <Button
                                variant="outline"
                                size="sm"
                                onClick={() => handleOpenAssumeOperator(alert.chamado)}
                                className="h-8 px-3 text-xs bg-blue-50 text-blue-700 border-blue-200 hover:bg-blue-100 hover:border-blue-300"
                              >
                                <User className="h-3 w-3 mr-1" />
                                Assumir
                              </Button>
                            )}
                          </div>
                        </TableCell>

                        {/* Coluna Temporizador */}
                        <TableCell>
                          <div className="flex flex-col items-center gap-2">
                            {isFinalized ? (
                              /* Estado finalizado */
                              <div className="space-y-1 text-center">
                                <Badge className="bg-green-600 text-white text-xs font-semibold px-3 py-1 whitespace-nowrap">
                                  ✅ FINALIZADO
                                </Badge>
                              </div>
                            ) : activeLevel && timerState ? (
                              /* Timer ativo */
                              <div className="space-y-1 text-center">
                                <div className="flex items-center gap-1 justify-center">
                                  <Timer className="h-3 w-3 text-timer-active animate-pulse" />
                                  <Badge className="bg-timer-active text-white text-xs font-semibold px-2 py-1 whitespace-nowrap">
                                    {LEVEL_NAMES[activeLevel as keyof typeof LEVEL_NAMES]}
                                  </Badge>
                                </div>
                                <div className={`text-xl font-mono font-black tracking-wide transition-all duration-300 ${timerColorClass}`}>
                                  {formatTime(remainingTime)}
                                </div>
                                <Button
                                  variant="outline"
                                  size="sm"
                                  onClick={() => handleOpenTimerManagement(alert.chamado)}
                                  className="h-6 px-2 text-xs font-semibold bg-blue-500 text-white hover:bg-blue-600"
                                >
                                  <Settings className="h-3 w-3 mr-1" />
                                  Gerenciar
                                </Button>
                              </div>
                            ) : (
                              /* Timer inativo - botão para iniciar */
                              <div className="flex flex-col items-center gap-2">
                                <Button
                                  variant="outline"
                                  size="sm"
                                  onClick={() => handleStartTimer(alert.chamado, alert)}
                                  disabled={!isConnected}
                                >
                                  <Play className="h-3 w-3 mr-1" />
                                   Iniciar
                                </Button>
                                {!isConnected && (
                                  <span className="text-xs text-destructive">WebSocket desconectado</span>
                                )}
                              </div>
                            )}
                          </div>
                        </TableCell>

                        {/* Coluna Chat */}
                        <TableCell>
                          <Tooltip>
                            <TooltipTrigger asChild>
                              <Button
                                variant={isChat ? "default" : "outline"}
                                size="sm"
                                onClick={() => !isChat && handleAcknowledgment(alert)}
                                disabled={isChat}
                                className={`h-8 w-8 p-0 ${isChat ? 'bg-green-600 hover:bg-green-700' : ''}`}
                              >
                                {isChat ? (
                                  <Check className="h-4 w-4" />
                                ) : (
                                  <AlertTriangle className="h-4 w-4" />
                                )}
                              </Button>
                            </TooltipTrigger>
                            <TooltipContent>
                              <p>{isChat ? 'Já acionado' : 'Acionar grupo'}</p>
                            </TooltipContent>
                          </Tooltip>
                        </TableCell>
                      </TableRow>
                    );
                  })
                )}
              </TableBody>
            </Table>
          </div>

          {/* Sistema de Paginação */}
          {!loading && sortedAndPaginatedData.length > 0 && totalPages > 1 && (
            <div className="flex flex-col sm:flex-row items-center justify-between mt-4 pt-4 border-t border-border gap-4">
              {/* Contador de registros */}
              <div className="text-sm text-muted-foreground text-center sm:text-left">
                Mostrando {((currentPage - 1) * itemsPerPage) + 1} a {Math.min(currentPage * itemsPerPage, filteredData.length)} de {filteredData.length} registros
                {searchTerm && filteredData.length !== alertData.length && ` (filtrados de ${alertData.length})`}
              </div>

              {/* Seletor de itens por página */}
              <div className="flex items-center gap-2">
                <Label htmlFor="itemsPerPage" className="text-sm font-medium whitespace-nowrap">
                  Por Página:
                </Label>
                <Select value={itemsPerPage.toString()} onValueChange={handleItemsPerPageChange}>
                  <SelectTrigger className="w-20">
                    <SelectValue />
                  </SelectTrigger>
                  <SelectContent>
                    <SelectItem value="5">5</SelectItem>
                    <SelectItem value="10">10</SelectItem>
                    <SelectItem value="15">15</SelectItem>
                    <SelectItem value="20">20</SelectItem>
                  </SelectContent>
                </Select>
              </div>

              {/* Controles de navegação */}
              <div className="flex items-center gap-2">
                <Button
                  variant="outline"
                  size="sm"
                  onClick={() => handlePageChange(currentPage - 1)}
                  disabled={currentPage === 1}
                  className="h-8 px-3"
                >
                  <ChevronLeft className="h-4 w-4 mr-1" />
                  Anterior
                </Button>

                {/* Botões numerados de páginas */}
                <div className="flex items-center gap-1">
                  {[...Array(Math.min(totalPages, 5))].map((_, index) => {
                    let page;
                    if (totalPages <= 5) {
                      page = index + 1;
                    } else if (currentPage <= 3) {
                      page = index + 1;
                    } else if (currentPage >= totalPages - 2) {
                      page = totalPages - 4 + index;
                    } else {
                      page = currentPage - 2 + index;
                    }

                    return (
                      <Button
                        key={page}
                        variant={currentPage === page ? "default" : "outline"}
                        size="sm"
                        onClick={() => handlePageChange(page)}
                        className="h-8 w-8 p-0"
                      >
                        {page}
                      </Button>
                    );
                  })}
                </div>

                <Button
                  variant="outline"
                  size="sm"
                  onClick={() => handlePageChange(currentPage + 1)}
                  disabled={currentPage === totalPages}
                  className="h-8 px-3"
                >
                  Próximo
                  <ChevronRight className="h-4 w-4 ml-1" />
                </Button>
              </div>
            </div>
          )}

          {/* Modal de Assumir/Alterar Operador */}
          {selectedChamadoForOperator && (
            <AssumeOperatorModal
              isOpen={assumeOperatorOpen}
              onClose={handleCloseAssumeOperator}
              chamado={selectedChamadoForOperator}
              currentOperator={timers.get(parseInt(selectedChamadoForOperator))?.operador}
              onAssume={handleAssumeOperator}
            />
          )}

          {/* Modal de Gerenciamento de Timer */}
          {selectedChamadoForTimer && (
            <ModernTimerModal
              isOpen={timerManagementOpen}
              onClose={() => {
                setTimerManagementOpen(false);
                setSelectedChamadoForTimer('');
              }}
              chamado={selectedChamadoForTimer}
              currentLevel={getCurrentActiveLevel(parseInt(selectedChamadoForTimer)) || 1}
              remainingTime={getCurrentActiveLevel(parseInt(selectedChamadoForTimer)) ? getRemainingTime(parseInt(selectedChamadoForTimer), getCurrentActiveLevel(parseInt(selectedChamadoForTimer))!) : 0}
              formatTime={formatTime}
              updateObservacao={updateObservacao}
              updateAcionamento={updateAcionamento}
              updateStatusFinal={updateStatusFinal}
              onNextLevel={(chamado, nextLevel, observacao) => handleNextLevel(chamado, nextLevel, observacao, sortedAndPaginatedData.find(a => a.chamado === chamado))}
              onPreviousLevel={(chamado, previousLevel, observacao) => handlePreviousLevel(chamado, previousLevel, observacao, sortedAndPaginatedData.find(a => a.chamado === chamado))}
              historicoAcionamentos={getHistoricoAcionamentos(parseInt(selectedChamadoForTimer))}
            />
          )}

          {/* Modal de Detalhes do Chamado */}
          <ChamadoDetailsModal
            isOpen={chamadoDetailsOpen}
            onClose={handleCloseChamadoDetails}
            alertData={selectedChamadoForDetails}
          />
        </CardContent>
      </Card>
    </TooltipProvider>
  );
};

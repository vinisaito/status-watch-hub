import { useState } from 'react';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { Label } from '@/components/ui/label';
import { Textarea } from '@/components/ui/textarea';
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';
import { Dialog, DialogContent, DialogHeader, DialogTitle } from '@/components/ui/dialog';
import { Calendar, Save, X } from 'lucide-react';
import { useToast } from '@/hooks/use-toast';

interface RDMFormData {
  numero_rdm: string;
  descricao_rdm_user: string;
  executor: string;
  status_rdm: string;
  impacto: string;
  risco: string;
  ambiente: string;
  requisitante: string;
  "gerente requisitante": string;
  depto_gerencia_requisitante: string;
  origem: string;
  warroom_preventivo: string;
  ic_rdm: string;
  tipo_rdm: 'Urgente' | 'Padrão' | 'Normal' | 'Informativa';
  data_inicio_programacao: string;
  data_fim_programacao: string;
  description: string;
  grupo_executor: string;
  area_principal_afetada: string;
  "duração da Programação": string;
}

interface RDMFormProps {
  isOpen: boolean;
  onClose: () => void;
  onSubmit: (data: RDMFormData) => Promise<void>;
}

export const RDMForm = ({ isOpen, onClose, onSubmit }: RDMFormProps) => {
  const { toast } = useToast();
  const [loading, setLoading] = useState(false);
  const [formData, setFormData] = useState<RDMFormData>({
    numero_rdm: '',
    descricao_rdm_user: '',
    executor: '',
    status_rdm: 'Aberta',
    impacto: '',
    risco: '',
    ambiente: '',
    requisitante: '',
    "gerente requisitante": '',
    depto_gerencia_requisitante: '',
    origem: '',
    warroom_preventivo: '',
    ic_rdm: '',
    tipo_rdm: 'Normal',
    data_inicio_programacao: '',
    data_fim_programacao: '',
    description: '',
    grupo_executor: '',
    area_principal_afetada: '',
    "duração da Programação": ''
  });

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault();
    setLoading(true);

    try {
      await onSubmit(formData);
      toast({
        title: "RDM criada com sucesso!",
        description: `RDM ${formData.numero_rdm} foi cadastrada.`,
      });
      handleClose();
    } catch (error) {
      toast({
        title: "Erro ao criar RDM",
        description: "Ocorreu um erro ao cadastrar a RDM. Tente novamente.",
        variant: "destructive",
      });
    } finally {
      setLoading(false);
    }
  };

  const handleClose = () => {
    setFormData({
      numero_rdm: '',
      descricao_rdm_user: '',
      executor: '',
      status_rdm: 'Aberta',
      impacto: '',
      risco: '',
      ambiente: '',
      requisitante: '',
      "gerente requisitante": '',
      depto_gerencia_requisitante: '',
      origem: '',
      warroom_preventivo: '',
      ic_rdm: '',
      tipo_rdm: 'Normal',
      data_inicio_programacao: '',
      data_fim_programacao: '',
      description: '',
      grupo_executor: '',
      area_principal_afetada: '',
      "duração da Programação": ''
    });
    onClose();
  };

  const updateFormData = (field: keyof RDMFormData, value: string) => {
    setFormData(prev => ({ ...prev, [field]: value }));
  };

  return (
    <Dialog open={isOpen} onOpenChange={handleClose}>
      <DialogContent className="max-w-4xl max-h-[90vh] overflow-y-auto">
        <DialogHeader>
          <DialogTitle className="flex items-center gap-3 text-xl">
            <div className="p-2 rounded-lg bg-primary/10">
              <Calendar className="h-5 w-5 text-primary" />
            </div>
            Nova RDM
          </DialogTitle>
        </DialogHeader>

        <form onSubmit={handleSubmit} className="space-y-6 py-4">
          {/* Basic Information */}
          <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
            <div className="space-y-2">
              <Label htmlFor="numero_rdm">Número RDM *</Label>
              <Input
                id="numero_rdm"
                value={formData.numero_rdm}
                onChange={(e) => updateFormData('numero_rdm', e.target.value)}
                placeholder="Ex: 12345"
                required
              />
            </div>

            <div className="space-y-2">
              <Label htmlFor="tipo_rdm">Tipo RDM *</Label>
              <Select value={formData.tipo_rdm} onValueChange={(value) => updateFormData('tipo_rdm', value as any)}>
                <SelectTrigger>
                  <SelectValue />
                </SelectTrigger>
                <SelectContent>
                  <SelectItem value="Urgente">Urgente</SelectItem>
                  <SelectItem value="Padrão">Padrão</SelectItem>
                  <SelectItem value="Normal">Normal</SelectItem>
                  <SelectItem value="Informativa">Informativa</SelectItem>
                </SelectContent>
              </Select>
            </div>
          </div>

          <div className="space-y-2">
            <Label htmlFor="descricao_rdm_user">Descrição *</Label>
            <Textarea
              id="descricao_rdm_user"
              value={formData.descricao_rdm_user}
              onChange={(e) => updateFormData('descricao_rdm_user', e.target.value)}
              placeholder="Descreva a mudança a ser realizada"
              rows={3}
              required
            />
          </div>

          {/* Responsible Information */}
          <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
            <div className="space-y-2">
              <Label htmlFor="executor">Executor *</Label>
              <Input
                id="executor"
                value={formData.executor}
                onChange={(e) => updateFormData('executor', e.target.value)}
                placeholder="Nome do responsável"
                required
              />
            </div>

            <div className="space-y-2">
              <Label htmlFor="grupo_executor">Grupo Executor *</Label>
              <Input
                id="grupo_executor"
                value={formData.grupo_executor}
                onChange={(e) => updateFormData('grupo_executor', e.target.value)}
                placeholder="Equipe responsável"
                required
              />
            </div>
          </div>

          {/* Environment and Risk */}
          <div className="grid grid-cols-1 md:grid-cols-3 gap-4">
            <div className="space-y-2">
              <Label htmlFor="ambiente">Ambiente</Label>
              <Select value={formData.ambiente} onValueChange={(value) => updateFormData('ambiente', value)}>
                <SelectTrigger>
                  <SelectValue placeholder="Selecione" />
                </SelectTrigger>
                <SelectContent>
                  <SelectItem value="Produção">Produção</SelectItem>
                  <SelectItem value="Homologação">Homologação</SelectItem>
                  <SelectItem value="Desenvolvimento">Desenvolvimento</SelectItem>
                  <SelectItem value="Todos">Todos</SelectItem>
                </SelectContent>
              </Select>
            </div>

            <div className="space-y-2">
              <Label htmlFor="impacto">Impacto</Label>
              <Select value={formData.impacto} onValueChange={(value) => updateFormData('impacto', value)}>
                <SelectTrigger>
                  <SelectValue placeholder="Selecione" />
                </SelectTrigger>
                <SelectContent>
                  <SelectItem value="Alto">Alto</SelectItem>
                  <SelectItem value="Médio">Médio</SelectItem>
                  <SelectItem value="Baixo">Baixo</SelectItem>
                </SelectContent>
              </Select>
            </div>

            <div className="space-y-2">
              <Label htmlFor="risco">Risco</Label>
              <Select value={formData.risco} onValueChange={(value) => updateFormData('risco', value)}>
                <SelectTrigger>
                  <SelectValue placeholder="Selecione" />
                </SelectTrigger>
                <SelectContent>
                  <SelectItem value="Alto">Alto</SelectItem>
                  <SelectItem value="Médio">Médio</SelectItem>
                  <SelectItem value="Baixo">Baixo</SelectItem>
                </SelectContent>
              </Select>
            </div>
          </div>

          {/* Scheduling */}
          <div className="grid grid-cols-1 md:grid-cols-3 gap-4">
            <div className="space-y-2">
              <Label htmlFor="data_inicio_programacao">Data/Hora Início *</Label>
              <Input
                id="data_inicio_programacao"
                type="datetime-local"
                value={formData.data_inicio_programacao}
                onChange={(e) => updateFormData('data_inicio_programacao', e.target.value)}
                required
              />
            </div>

            <div className="space-y-2">
              <Label htmlFor="data_fim_programacao">Data/Hora Fim</Label>
              <Input
                id="data_fim_programacao"
                type="datetime-local"
                value={formData.data_fim_programacao}
                onChange={(e) => updateFormData('data_fim_programacao', e.target.value)}
              />
            </div>

            <div className="space-y-2">
              <Label htmlFor="duracao">Duração (horas)</Label>
              <Input
                id="duracao"
                type="number"
                step="0.5"
                value={formData["duração da Programação"]}
                onChange={(e) => updateFormData("duração da Programação", e.target.value)}
                placeholder="Ex: 2.5"
              />
            </div>
          </div>

          {/* Additional Information */}
          <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
            <div className="space-y-2">
              <Label htmlFor="requisitante">Requisitante</Label>
              <Input
                id="requisitante"
                value={formData.requisitante}
                onChange={(e) => updateFormData('requisitante', e.target.value)}
                placeholder="Nome do solicitante"
              />
            </div>

            <div className="space-y-2">
              <Label htmlFor="area_principal_afetada">Área Principal Afetada</Label>
              <Input
                id="area_principal_afetada"
                value={formData.area_principal_afetada}
                onChange={(e) => updateFormData('area_principal_afetada', e.target.value)}
                placeholder="Área impactada"
              />
            </div>
          </div>

          <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
            <div className="space-y-2">
              <Label htmlFor="origem">Origem</Label>
              <Input
                id="origem"
                value={formData.origem}
                onChange={(e) => updateFormData('origem', e.target.value)}
                placeholder="Origem da solicitação"
              />
            </div>

            <div className="space-y-2">
              <Label htmlFor="ic_rdm">IC RDM</Label>
              <Input
                id="ic_rdm"
                value={formData.ic_rdm}
                onChange={(e) => updateFormData('ic_rdm', e.target.value)}
                placeholder="Identificador IC"
              />
            </div>
          </div>

          <div className="space-y-2">
            <Label htmlFor="warroom_preventivo">War Room Preventivo</Label>
            <Select value={formData.warroom_preventivo} onValueChange={(value) => updateFormData('warroom_preventivo', value)}>
              <SelectTrigger>
                <SelectValue placeholder="Selecione" />
              </SelectTrigger>
              <SelectContent>
                <SelectItem value="Sim">Sim</SelectItem>
                <SelectItem value="Não">Não</SelectItem>
              </SelectContent>
            </Select>
          </div>

          {/* Form Actions */}
          <div className="flex justify-end gap-3 pt-4 border-t">
            <Button
              type="button"
              variant="outline"
              onClick={handleClose}
              disabled={loading}
            >
              <X className="h-4 w-4 mr-2" />
              Cancelar
            </Button>
            <Button
              type="submit"
              disabled={loading}
              className="bg-primary hover:bg-primary/90"
            >
              <Save className="h-4 w-4 mr-2" />
              {loading ? 'Salvando...' : 'Salvar RDM'}
            </Button>
          </div>
        </form>
      </DialogContent>
    </Dialog>
  );
};
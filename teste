export interface WebSocketMessage {
  event: 'startTimer' | 'updateObservacao' | 'updateOperador' | 'updateStatusFinal' | 'getState' | 'updateAcionamento';
  chamado: number;
  level?: number;
  state?: TimerState;
}

export interface SendMessage {
  action: 'startTimer' | 'updateObservacao' | 'updateOperador' | 'updateStatusFinal' | 'getState' | 'updateAcionamento';
  chamado: number;
  level?: number;
  duration?: number;
  observacao?: string;
  operador?: string;
  statusFinal?: string;
  levelStatusKey?: string;
  status?: string;
  pessoaAcionada?: string;
  statusAcionamento?: string;
}

export const useWebsocketTimers = () => {
  const [timers, setTimers] = useState<Map<number, TimerState>>(new Map());
  const [isConnected, setIsConnected] = useState(false);
  const ws = useRef<WebSocket | null>(null);
  const reconnectAttempts = useRef(0);
  const maxReconnectAttempts = 5;
  const reconnectTimeout = useRef<NodeJS.Timeout | null>(null);

  // Chamados que o cliente quer garantir que sejam consultados ao conectar
  const watchedChamadosRef = useRef<Set<number>>(new Set());

  const connect = useCallback(() => {
    try {
      if (ws.current && ws.current.readyState === WebSocket.CONNECTING) {
        return;
      }

      const wsUrl = 'wss://rsgjd6wsza.execute-api.us-east-1.amazonaws.com/dev';
      console.log(`üîå Tentando conectar no WebSocket: ${wsUrl}`);

      ws.current = new WebSocket(wsUrl);

      const connectionTimeout = setTimeout(() => {
        if (ws.current && ws.current.readyState === WebSocket.CONNECTING) {
          ws.current.close();
          toast({
            title: "Timeout de Conex√£o",
            description: "WebSocket demorou muito para conectar. Tentando novamente...",
            variant: "destructive",
          });
        }
      }, 10000);

      ws.current.onopen = () => {
        clearTimeout(connectionTimeout);
        setIsConnected(true);
        reconnectAttempts.current = 0;

        console.log('‚úÖ WebSocket conectado com sucesso');
        toast({
          title: "Conectado",
          description: "WebSocket conectado com sucesso",
        });
      };

      ws.current.onmessage = (event) => {
        try {
          const message: WebSocketMessage = JSON.parse(event.data);

          if (message.state && message.chamado) {
            setTimers(prev => {
              const oldState = prev.get(message.chamado);
              const isDifferent = JSON.stringify(oldState) !== JSON.stringify(message.state);

              if (isDifferent) {
                console.log(`üîî Novo evento para chamado ${message.chamado}`, message.state);
              }

              const newTimers = new Map(prev);
              newTimers.set(message.chamado, message.state!);
              return newTimers;
            });
          }
        } catch (error) {
          console.error('‚ùå Erro ao processar mensagem WebSocket:', error);
        }
      };

      ws.current.onclose = (event) => {
        clearTimeout(connectionTimeout);
        setIsConnected(false);

        console.warn('‚ö†Ô∏è WebSocket desconectado - C√≥digo:', event.code, 'Motivo:', event.reason);

        if (event.code !== 1000 && reconnectAttempts.current < maxReconnectAttempts) {
          reconnectAttempts.current++;
          const delay = Math.min(1000 * Math.pow(2, reconnectAttempts.current), 30000);
          console.log(`üîÑ Tentando reconectar em ${delay}ms (tentativa ${reconnectAttempts.current}/${maxReconnectAttempts})`);

          reconnectTimeout.current = setTimeout(() => {
            connect();
          }, delay);
        } else if (reconnectAttempts.current >= maxReconnectAttempts) {
          console.error('‚ùå M√°ximo de tentativas de reconex√£o atingido');
          toast({
            title: "Falha na Conex√£o",
            description: "N√£o foi poss√≠vel conectar ao WebSocket ap√≥s v√°rias tentativas",
            variant: "destructive",
          });
        }
      };

      ws.current.onerror = () => {
        clearTimeout(connectionTimeout);
        console.error('‚ùå Erro WebSocket detectado');
      };

    } catch (error) {
      console.error('‚ùå Erro ao conectar WebSocket:', error);
      toast({
        title: "Erro de Inicializa√ß√£o",
        description: "Erro ao inicializar conex√£o WebSocket",
        variant: "destructive",
      });
    }
  }, []);

  const disconnect = useCallback(() => {
    if (reconnectTimeout.current) {
      clearTimeout(reconnectTimeout.current);
      reconnectTimeout.current = null;
    }

    if (ws.current) {
      ws.current.close(1000, 'Desconex√£o intencional');
      ws.current = null;
    }

    setIsConnected(false);
    console.log('üîå WebSocket desconectado manualmente');
  }, []);

  const sendMessage = useCallback((message: SendMessage) => {
    if (ws.current && ws.current.readyState === WebSocket.OPEN) {
      try {
        const payload = JSON.stringify(message); // Armazena o payload em uma vari√°vel
        ws.current.send(payload);

        // Inclui a vari√°vel payload no console.log
        console.log(`üì§ Mensagem enviada: ${message.action} (chamado ${message.chamado})`);
        console.log('Payload:', payload);

        return true;
      } catch (error) {
        console.error('‚ùå Erro ao enviar mensagem:', error);
        toast({
          title: "Erro ao Enviar",
          description: "N√£o foi poss√≠vel enviar a mensagem",
          variant: "destructive",
        });
        return false;
      }
    } else {
      toast({
        title: "N√£o Conectado",
        description: "WebSocket n√£o est√° conectado. Tentando reconectar...",
        variant: "destructive",
      });
      connect();
      return false;
    }
  }, [connect]);

  // A√ß√µes (mantive todas as existentes)
  const startTimer = useCallback((chamado: number, level: number, duration: number = 1200) => {
    return sendMessage({ action: 'startTimer', chamado, level, duration });
  }, [sendMessage]);

  const updateObservacao = useCallback((chamado: number, level: number, observacao: string) => {
    return sendMessage({ action: 'updateObservacao', chamado, level, observacao });
  }, [sendMessage]);

  const updateOperador = useCallback((chamado: number, operador: string) => {
    return sendMessage({ action: 'updateOperador', chamado, operador });
  }, [sendMessage]);

  const updateAcionamento = useCallback((chamado: number, level: number, operador: string, pessoaAcionada: string, statusAcionamento: string) => {
    return sendMessage({ action: 'updateAcionamento', chamado, level, operador, pessoaAcionada});
  }, [sendMessage]);

  const updateStatusFinal = useCallback((
    chamado: number,
    levelOrKeyOrStatus: number | string,
    maybeStatus?: string
  ) => {
    // caso 1: numeric + status -> level number
    if (typeof levelOrKeyOrStatus === 'number') {
      const level = levelOrKeyOrStatus;
      const status = maybeStatus!;
      const levelStatusKey = `level${level}_status`;
      return sendMessage({ action: 'updateStatusFinal', chamado, levelStatusKey, status });
    }

    // caso 2: string + status (treat second param as levelStatusKey)
    if (typeof maybeStatus === 'string') {
      const levelStatusKey = levelOrKeyOrStatus;
      const status = maybeStatus;
      return sendMessage({ action: 'updateStatusFinal', chamado, levelStatusKey, status });
    }

    // caso 3: apenas chamado + statusFinal (retrocompat√≠vel)
    const statusFinal = levelOrKeyOrStatus;
    return sendMessage({ action: 'updateStatusFinal', chamado, statusFinal });
  }, [sendMessage]);

  const getState = useCallback((chamado: number) => {
    return sendMessage({ action: 'getState', chamado });
  }, [sendMessage]);

import React, { useEffect, useRef, useState } from "react";

// Defina a URL do WebSocket direto aqui
const WS_URL = "wss://seu-endpoint.execute-api.us-east-1.amazonaws.com/prod";

interface TimerData {
  chamado: number;
  timerActive: boolean;
  startedAt: string | null;
  durationMinutes: number;
  timeRemaining: number;
}

const Timer: React.FC<{ chamado: number }> = ({ chamado }) => {
  const ws = useRef<WebSocket | null>(null);
  const [connected, setConnected] = useState(false);
  const [timerActive, setTimerActive] = useState(false);
  const [timeRemaining, setTimeRemaining] = useState(0);
  const [startedAt, setStartedAt] = useState<string | null>(null);

  // Conecta no WebSocket
  useEffect(() => {
    console.log("üåê Conectando no WS...");
    ws.current = new WebSocket(WS_URL);

    ws.current.onopen = () => {
      console.log("‚úÖ WebSocket conectado");
      setConnected(true);

      // Pede estado atual do chamado
      const msg = { action: "getState", chamado };
      ws.current?.send(JSON.stringify(msg));
      console.log("üì® Solicitando estado inicial:", msg);
    };

    ws.current.onmessage = (event) => {
      try {
        const data = JSON.parse(event.data);
        console.log("üì° Mensagem recebida do WS:", data);
        if (data.type === "TIMER_UPDATED" && data.chamado === chamado) {
          setTimerActive(data.timerActive);
          setTimeRemaining(data.timeRemaining);
          setStartedAt(data.startedAt || null);
        }
      } catch (e) {
        console.error("‚ùå Erro ao processar mensagem WS:", e);
      }
    };

    ws.current.onclose = () => {
      console.log("üîå WebSocket desconectado");
      setConnected(false);
    };

    ws.current.onerror = (err) => {
      console.error("‚ùå Erro no WebSocket:", err);
    };

    return () => {
      ws.current?.close();
    };
  }, [chamado]);

  // Timer local decrementando
  useEffect(() => {
    if (!timerActive) return;
    const interval = setInterval(() => {
      setTimeRemaining((prev) => Math.max(prev - 1, 0));
    }, 1000);
    return () => clearInterval(interval);
  }, [timerActive]);

  const handleStart = () => {
    if (!connected || !ws.current || ws.current.readyState !== WebSocket.OPEN) {
      console.warn("‚è≥ WS n√£o conectado ainda!");
      return;
    }
    const msg = { action: "startTimer", chamado };
    console.log("‚ñ∂Ô∏è Enviando startTimer:", msg);
    ws.current.send(JSON.stringify(msg));
  };

  const handlePause = () => {
    if (!connected || !ws.current || ws.current.readyState !== WebSocket.OPEN) {
      console.warn("‚è≥ WS n√£o conectado ainda!");
      return;
    }
    const msg = { action: "pauseTimer", chamado };
    console.log("‚è∏ Enviando pauseTimer:", msg);
    ws.current.send(JSON.stringify(msg));
  };

  const formatTime = (seconds: number) => {
    const m = Math.floor(seconds / 60)
      .toString()
      .padStart(2, "0");
    const s = (seconds % 60).toString().padStart(2, "0");
    return `${m}:${s}`;
  };

  return (
    <div style={{ border: "1px solid #ccc", padding: "1rem", width: "250px" }}>
      <h3>Chamado: {chamado}</h3>
      <p>Status: {timerActive ? "‚è±Ô∏è Ativo" : "‚è∏ Pausado"}</p>
      <p>Tempo restante: {formatTime(timeRemaining)}</p>
      <button onClick={handleStart} disabled={!connected}>
        Iniciar
      </button>
      <button onClick={handlePause} disabled={!connected}>
        Pausar
      </button>
      <p>WS: {connected ? "Conectado ‚úÖ" : "Desconectado ‚ùå"}</p>
    </div>
  );
};

export default Timer;

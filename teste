import json
import boto3
import os
from datetime import datetime
from decimal import Decimal

# Nome da tabela
TABLE_NAME = os.environ.get("DYNAMODB_TABLE", "painelmonitoracao_obs")

dynamodb = boto3.resource("dynamodb", region_name="us-east-1")
table = dynamodb.Table(TABLE_NAME)

# üîπ Headers de CORS (sempre inclu√≠dos nas respostas)
CORS_HEADERS = {
    "Access-Control-Allow-Origin": "*",
    "Access-Control-Allow-Headers": "Content-Type",
    "Access-Control-Allow-Methods": "OPTIONS,POST"
}

def lambda_handler(event, context):
    try:
        print("Evento recebido:", json.dumps(event))
        print("Usando tabela:", TABLE_NAME)

        body = event.get("body")
        if body:
            body = json.loads(body)
        else:
            return {
                "statusCode": 400,
                "headers": CORS_HEADERS,
                "body": json.dumps({"error": "Body da requisi√ß√£o vazio"})
            }

        chamado = body.get("chamado")    # chave prim√°ria (number)
        observacao = body.get("observacao")
        status = body.get("status")
        operador = body.get("operador")

        if chamado is None or not observacao or not status or not operador:
            return {
                "statusCode": 400,
                "headers": CORS_HEADERS,
                "body": json.dumps({
                    "error": "Campos obrigat√≥rios: chamado (number), observacao, status, operador"
                })
            }

        # Garantir que chamado seja Number no DynamoDB
        item = {
            "chamado": Decimal(str(chamado)),
            "observacao": observacao,
            "status": status,
            "operador": operador,
            "createdAt": datetime.utcnow().isoformat()
        }

        print("Tentando salvar item:", item)
        table.put_item(Item=item)
        print("Item salvo com sucesso")

        return {
            "statusCode": 200,
            "headers": CORS_HEADERS,
            "body": json.dumps({
                "message": "Registro inserido com sucesso",
                "item": {
                    "chamado": int(chamado),
                    "observacao": observacao,
                    "status": status,
                    "operador": operador,
                    "createdAt": item["createdAt"]
                }
            })
        }

    except Exception as e:
        print("Erro na lambda:", str(e))
        return {
            "statusCode": 500,
            "headers": CORS_HEADERS,
            "body": json.dumps({"error": str(e)})
        }

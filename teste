/**
 * Versão responsiva mobile-first da ActionTable
 * Usa cards empilhados em mobile e tabela em desktop
 */

import { Card, CardContent } from '@/components/ui/card';
import { Badge } from '@/components/ui/badge';
import { Button } from '@/components/ui/button';
import { Tooltip, TooltipContent, TooltipProvider, TooltipTrigger } from '@/components/ui/tooltip';
import {
  Check,
  AlertTriangle,
  Timer,
  Play,
  User,
  UserCheck,
  Edit3
} from 'lucide-react';

interface AlertData {
  id: string;
  chamado: string;
  tipo_chamado: string;
  grupo_chamado: string;
  status_chamado: string;
  abertura_chamado: string;
  resumo_chamado: string;
  severidade_chamado: string;
  acionado: string;
  chat: boolean;
  link_chamado: string;
}

interface MobileCardViewProps {
  alert: AlertData;
  onOpenDetails: (alert: AlertData) => void;
  onAssumeOperator: (chamado: string) => void;
  onStartTimer: (chamado: string, alert: AlertData) => void;
  onOpenTimerManagement: (chamado: string) => void;
  onAcknowledgment: (alert: AlertData) => void;
  isConnected: boolean;
  isChatConnected: boolean;
  getSeverityColor: (severity: string) => string;
  formatDate: (date: string) => string;
  activeLevel?: number | null;
  remainingTime?: number;
  formatTime?: (time: number) => string;
  getTimerColor?: (time: number) => string;
  responsavel?: string;
  isChat?: boolean;
}

/**
 * Card mobile para visualização responsiva de alertas
 */
export const MobileAlertCard = ({
  alert,
  onOpenDetails,
  onAssumeOperator,
  onStartTimer,
  onOpenTimerManagement,
  onAcknowledgment,
  isConnected,
  isChatConnected,
  getSeverityColor,
  formatDate,
  activeLevel,
  remainingTime = 0,
  formatTime = (t) => `${Math.floor(t / 60)}:${String(t % 60).padStart(2, '0')}`,
  getTimerColor = () => 'text-foreground',
  responsavel = '',
  isChat = false
}: MobileCardViewProps) => {
  return (
    <Card className="border-border">
      <CardContent className="p-4 space-y-3">
        {/* Header */}
        <div className="flex items-start justify-between gap-2">
          <div className="flex-1 min-w-0">
            <div className="flex items-center gap-2 flex-wrap">
              <Button
                variant="link"
                className="p-0 h-auto font-bold text-base"
                onClick={() => onOpenDetails(alert)}
              >
                #{alert.chamado}
              </Button>
              <Badge className={getSeverityColor(alert.severidade_chamado)}>
                {alert.severidade_chamado}
              </Badge>
            </div>
            <p className="text-sm font-medium mt-1 line-clamp-2">{alert.resumo_chamado}</p>
          </div>
        </div>

        {/* Info */}
        <div className="space-y-1.5 text-sm">
          <div className="flex gap-2">
            <span className="text-muted-foreground min-w-[70px]">Tipo:</span>
            <span className="font-medium truncate">{alert.tipo_chamado}</span>
          </div>
          <div className="flex gap-2">
            <span className="text-muted-foreground min-w-[70px]">Grupo:</span>
            <span className="font-medium truncate">{alert.grupo_chamado}</span>
          </div>
          <div className="flex gap-2">
            <span className="text-muted-foreground min-w-[70px]">Abertura:</span>
            <span className="font-medium text-xs">{formatDate(alert.abertura_chamado)}</span>
          </div>
        </div>

        {/* Responsável */}
        <div className="flex items-center justify-between pt-2 border-t border-border">
          <div className="flex items-center gap-2 flex-1 min-w-0">
            {responsavel ? (
              <>
                <UserCheck className="h-4 w-4 text-green-600 flex-shrink-0" />
                <span className="text-sm font-medium truncate">{responsavel}</span>
              </>
            ) : (
              <>
                <User className="h-4 w-4 text-muted-foreground flex-shrink-0" />
                <span className="text-sm text-muted-foreground">Sem responsável</span>
              </>
            )}
          </div>
          <Button
            variant="ghost"
            size="sm"
            onClick={() => onAssumeOperator(alert.chamado)}
            className="h-8 w-8 p-0 flex-shrink-0"
          >
            <Edit3 className="h-4 w-4" />
          </Button>
        </div>

        {/* Ações */}
        <div className="flex items-center gap-2 pt-2 border-t border-border">
          {activeLevel ? (
            <Button
              variant="outline"
              size="sm"
              onClick={() => onOpenTimerManagement(alert.chamado)}
              className="flex-1"
            >
              <Timer className={`h-4 w-4 mr-2 ${getTimerColor(remainingTime)}`} />
              <span className={getTimerColor(remainingTime)}>
                {formatTime(remainingTime)}
              </span>
            </Button>
          ) : (
            <Button
              variant="outline"
              size="sm"
              onClick={() => onStartTimer(alert.chamado, alert)}
              disabled={!isConnected}
              className="flex-1"
            >
              <Play className="h-4 w-4 mr-2" />
              Iniciar
            </Button>
          )}

          <TooltipProvider>
            <Tooltip>
              <TooltipTrigger asChild>
                <Button
                  variant={isChat ? "secondary" : "default"}
                  size="sm"
                  onClick={() => !isChat && onAcknowledgment(alert)}
                  disabled={!isChatConnected || isChat}
                  className="w-10 h-9 p-0"
                >
                  {isChat ? (
                    <Check className="h-4 w-4 text-green-600" />
                  ) : (
                    <AlertTriangle className="h-4 w-4" />
                  )}
                </Button>
              </TooltipTrigger>
              <TooltipContent>
                {isChat ? 'Chat enviado' : 'Acionar Chat'}
              </TooltipContent>
            </Tooltip>
          </TooltipProvider>
        </div>
      </CardContent>
    </Card>
  );
};

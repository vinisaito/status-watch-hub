import { useState, useEffect, useCallback } from 'react';

interface AlertData {
  id: string;
  chamado: string;
  tipo_chamado: string;
  grupo_chamado: string;
  status_chamado: string;
  abertura_chamado: string;
  resumo_chamado: string;
  severidade_chamado: string;
  chat: boolean;
}

export const useAlertData = () => {
  const [alertData, setAlertData] = useState<AlertData[]>([]);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState<string | null>(null);

  const fetchAlertData = useCallback(async () => {
    try {
      setLoading(true);
      setError(null);
      
      const response = await fetch('https://f6ffk8e9fe.execute-api.us-east-1.amazonaws.com/prod/acompanhamento');
      
      if (!response.ok) {
        throw new Error(`Erro na API: ${response.status} ${response.statusText}`);
      }
      
      const data = await response.json();
      console.log('Dados recebidos da API:', data);
      
      // Converte os dados da API para o formato esperado
      const formattedData: AlertData[] = Array.isArray(data) ? data.map((item, index) => ({
        id: item.chamado?.toString() || index.toString(),
        chamado: item.chamado?.toString() || '',
        tipo_chamado: item.tipo_chamado || 'Incidente',
        grupo_chamado: item.grupo_chamado || 'Não definido',
        status_chamado: item.status_chamado || 'Aberto',
        abertura_chamado: item.abertura_chamado || new Date().toISOString(),
        resumo_chamado: item.resumo_chamado || 'Sem descrição',
        severidade_chamado: item.severidade_chamado || 'Média',
        chat: item.chat || false
      })) : [];
      
      setAlertData(formattedData);
    } catch (error) {
      console.error('Erro ao buscar dados:', error);
      setError(error instanceof Error ? error.message : 'Erro desconhecido');
      
      // Dados de exemplo para desenvolvimento/fallback
      const mockData: AlertData[] = [
        {
          id: '1',
          chamado: '12345',
          tipo_chamado: 'Incidente',
          grupo_chamado: 'TI - Infraestrutura',
          status_chamado: 'Aberto',
          abertura_chamado: new Date().toISOString(),
          resumo_chamado: 'Servidor de produção com lentidão',
          severidade_chamado: 'Alta - 4',
          chat: false
        },
        {
          id: '2',
          chamado: '12346',
          tipo_chamado: 'Solicitação',
          grupo_chamado: 'TI - Suporte',
          status_chamado: 'Em Andamento',
          abertura_chamado: new Date(Date.now() - 3600000).toISOString(),
          resumo_chamado: 'Solicitação de acesso ao sistema',
          severidade_chamado: 'Média - 3',
          chat: false
        },
        {
          id: '3',
          chamado: '12347',
          tipo_chamado: 'Incidente',
          grupo_chamado: 'TI - Redes',
          status_chamado: 'Aberto',
          abertura_chamado: new Date(Date.now() - 7200000).toISOString(),
          resumo_chamado: 'Falha na conexão de internet',
          severidade_chamado: 'Crítica - 4',
          chat: false
        }
      ];
      
      setAlertData(mockData);
    } finally {
      setLoading(false);
    }
  }, []);

  const updateAcknowledgment = useCallback((alertId: string, acknowledged: boolean) => {
    setAlertData(prev => 
      prev.map(alert => 
        alert.id === alertId 
          ? { ...alert, chat: acknowledged }
          : alert
      )
    );
  }, []);

  useEffect(() => {
    fetchAlertData();
    
    // Atualiza dados a cada 30 segundos
    const interval = setInterval(fetchAlertData, 30000);
    
    return () => clearInterval(interval);
  }, [fetchAlertData]);

  return {
    alertData,
    loading,
    error,
    refetch: fetchAlertData,
    updateAcknowledgment
  };
};

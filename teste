MONITORING CARDS:
import { useState } from 'react';
import { AlertTriangle, AlertCircle, Clock, Timer, UserCheck, BarChart3, MessageCircle, CheckCircle2 } from 'lucide-react';
import { cn } from '@/lib/utils';

interface AlertData {
  id: string;
  chamado: string;
  tipo_chamado: string;
  grupo_chamado: string;
  status_chamado: string;
  abertura_chamado: string;
  resumo_chamado: string;
  severidade_chamado: string;
  acionado: string;
  chat: boolean;
  sending_chat?: boolean;
}

interface MonitoringCardsProps {
  alertData: AlertData[];
  onFilterSelect: (filter: string | null) => void;
}

export const MonitoringCards = ({ alertData, onFilterSelect }: MonitoringCardsProps) => {
  const [activeFilter, setActiveFilter] = useState<string | null>(null);

  const handleCardClick = (filterKey: string) => {
    if (activeFilter === filterKey) {
      setActiveFilter(null);
      onFilterSelect(null);
    } else {
      setActiveFilter(filterKey);
      onFilterSelect(filterKey);
    }
  };

  const getTimeRemaining = (openingTime: string) => {
    const now = new Date();
    const opening = new Date(openingTime);
    const diffMs = now.getTime() - opening.getTime();
    const diffMinutes = Math.floor(diffMs / (1000 * 60));
    const slaMinutes = 60;
    return slaMinutes - diffMinutes;
  };

  const total = alertData.length;
  const pendenteEnvioChat = alertData.filter(a => a.sending_chat === false || a.sending_chat === undefined).length;
  const confirmados = alertData.filter(a => a.sending_chat === true).length;

  const tempoExpirado = alertData.filter(alert => {
    const timeRemaining = getTimeRemaining(alert.abertura_chamado);
    return timeRemaining < 0;
  }).length;

  const dezMinutosRestantes = alertData.filter(alert => {
    const timeRemaining = getTimeRemaining(alert.abertura_chamado);
    return timeRemaining >= 0 && timeRemaining <= 10;
  }).length;

  const cincoMinutosRestantes = alertData.filter(alert => {
    const timeRemaining = getTimeRemaining(alert.abertura_chamado);
    return timeRemaining >= 0 && timeRemaining <= 5;
  }).length;

  const comOperador = alertData.filter(a => a.acionado === 'OK').length;
  const semOperador = alertData.filter(a => a.acionado !== 'OK').length;
  const cenariosCrise = alertData.filter(a => a.severidade_chamado === '1' || a.severidade_chamado === '2').length;

  return (
    <div className="flex flex-col gap-3 w-full">
      <CompactCard
        title="Cenários de Crise"
        count={cenariosCrise}
        totalCount={alertData.length}
        icon={AlertCircle}
        type="cenarios-crise"
        filterKey="CENARIOS_CRISE"
        isActive={activeFilter === 'CENARIOS_CRISE'}
        onClick={() => handleCardClick('CENARIOS_CRISE')}
      />

      <CompactCard
        title="Tempo Expirado"
        count={tempoExpirado}
        totalCount={alertData.length}
        icon={AlertTriangle}
        type="tempo-expirado"
        filterKey="TEMPO_EXPIRADO"
        isActive={activeFilter === 'TEMPO_EXPIRADO'}
        onClick={() => handleCardClick('TEMPO_EXPIRADO')}
      />

      <CompactCard
        title="Pendente Envio Chat"
        count={pendenteEnvioChat}
        totalCount={alertData.length}
        icon={MessageCircle}
        type="pendente-chat"
        filterKey="PENDENTE_ENVIO_CHAT"
        isActive={activeFilter === 'PENDENTE_ENVIO_CHAT'}
        onClick={() => handleCardClick('PENDENTE_ENVIO_CHAT')}
      />

      <CompactCard
        title="5min Restantes"
        count={cincoMinutosRestantes}
        totalCount={alertData.length}
        icon={Timer}
        type="cinco-minutos"
        filterKey="CINCO_MINUTOS"
        isActive={activeFilter === 'CINCO_MINUTOS'}
        onClick={() => handleCardClick('CINCO_MINUTOS')}
      />

      <CompactCard
        title="Sem Operador"
        count={semOperador}
        totalCount={alertData.length}
        icon={UserCheck}
        type="sem-operador"
        filterKey="SEM_OPERADOR"
        isActive={activeFilter === 'SEM_OPERADOR'}
        onClick={() => handleCardClick('SEM_OPERADOR')}
      />
    </div>
  );
};

interface CompactCardProps {
  title: string;
  count: number;
  totalCount: number;
  icon: React.ComponentType<any>;
  type: string;
  filterKey: string;
  isActive: boolean;
  onClick: () => void;
}

function CompactCard({ title, count, totalCount, icon: Icon, type, isActive, onClick }: CompactCardProps) {
  // Cor padrão
  const defaultBg = 'bg-gray-100 dark:bg-gray-800';
  const defaultBorder = 'border-gray-300 dark:border-gray-700';
  const defaultText = 'text-gray-800 dark:text-gray-100';
  const defaultHover = 'hover:bg-gray-200 dark:hover:bg-gray-700 hover:border-gray-400 dark:hover:border-gray-500';

  // Lógica de cor condicional
  let colorBg = defaultBg;
  let colorBorder = defaultBorder;
  let colorText = defaultText;
  let colorHover = defaultHover;
  let animation = '';

  // Exemplo: se for tempo expirado e houver valor, fica vermelho
  if (type === 'tempo-expirado' && count > 0) {
    colorBg = 'bg-red-100 dark:bg-red-900';
    colorBorder = 'border-red-400 dark:border-red-700';
    colorText = 'text-red-700 dark:text-red-300';
    colorHover = 'hover:bg-red-200 dark:hover:bg-red-800 hover:border-red-500 dark:hover:border-red-600';
    animation = 'animate-pulse-critical';
  }
  // Exemplo: se for 5min restantes e houver valor, fica amarelo
  if (type === 'cinco-minutos' && count > 0) {
    colorBg = 'bg-yellow-100 dark:bg-yellow-900';
    colorBorder = 'border-yellow-400 dark:border-yellow-700';
    colorText = 'text-yellow-700 dark:text-yellow-300';
    colorHover = 'hover:bg-yellow-200 dark:hover:bg-yellow-800 hover:border-yellow-500 dark:hover:border-yellow-600';
    animation = 'animate-pulse';
  }
  // Exemplo: se for pendente envio chat e houver valor, fica laranja
  if (type === 'pendente-chat' && count > 0) {
    colorBg = 'bg-orange-100 dark:bg-orange-900';
    colorBorder = 'border-orange-400 dark:border-orange-700';
    colorText = 'text-orange-700 dark:text-orange-300';
    colorHover = 'hover:bg-orange-200 dark:hover:bg-orange-800 hover:border-orange-500 dark:hover:border-orange-600';
    animation = '';
  }
  // Exemplo: se for cenários de crise e houver valor, fica roxo
  if (type === 'cenarios-crise' && count > 0) {
    colorBg = 'bg-purple-100 dark:bg-purple-900';
    colorBorder = 'border-purple-400 dark:border-purple-700';
    colorText = 'text-purple-700 dark:text-purple-300';
    colorHover = 'hover:bg-purple-200 dark:hover:bg-purple-800 hover:border-purple-500 dark:hover:border-purple-600';
    animation = 'animate-glow-crisis';
  }

  return (
    <div
      onClick={onClick}
      className={cn(
        "p-4 rounded-lg border-2 cursor-pointer transition-all duration-300 hover:scale-102 relative",
        colorBg,
        colorBorder,
        colorHover,
        animation,
        isActive && "ring-2 ring-primary/50 ring-offset-2 ring-offset-background"
      )}
    >
      <div className="flex items-center justify-between gap-3">
        <div className="flex items-center gap-3 flex-1 min-w-0">
          <div className={cn("p-2 rounded-lg bg-black/20 flex-shrink-0", colorText)}>
            <Icon size={18} />
          </div>
          <div className="flex-1 min-w-0">
            <div className={cn("text-xs font-medium uppercase tracking-wide truncate", colorText)}>
              {title}
            </div>
            <div className="text-xs text-muted-foreground truncate">
              {count === 0 ? "Nenhum" : `${count}/${totalCount}`}
            </div>
          </div>
        </div>
        <div className={cn("text-2xl font-bold flex-shrink-0", colorText)}>
          {count}
        </div>
      </div>
      {isActive && (
        <div className="absolute top-2 right-2 w-2 h-2 bg-primary rounded-full animate-pulse" />
      )}
    </div>
  );
}

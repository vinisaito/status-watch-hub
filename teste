// src/services/websocket.ts
// Serviço WebSocket com fila de mensagens e sistema de subscribers

type Listener = (msg: any) => void;

class WebSocketService {
  private socket: WebSocket | null = null;
  private listeners: Listener[] = [];
  private pendingMessages: any[] = [];
  private isConnecting = false;

  private url: string;

  constructor() {
    // Usa env var (ex: VITE_WS_URL="wss://xxxx.execute-api.sa-east-1.amazonaws.com/production")
    this.url =
      import.meta.env.VITE_WS_URL ??
      "ws://localhost:8080"; // fallback local
  }

  private connect() {
    if (this.isConnecting || this.socket?.readyState === WebSocket.OPEN) {
      return;
    }
    this.isConnecting = true;

    this.socket = new WebSocket(this.url);

    this.socket.onopen = () => {
      console.info("[WS] Conectado");
      this.isConnecting = false;

      // envia tudo que ficou na fila
      while (this.pendingMessages.length > 0) {
        const msg = this.pendingMessages.shift();
        this.send(msg);
      }
    };

    this.socket.onmessage = (event) => {
      try {
        const data = JSON.parse(event.data);
        this.listeners.forEach((cb) => cb(data));
      } catch (err) {
        console.error("[WS] erro parse msg", err);
      }
    };

    this.socket.onclose = () => {
      console.warn("[WS] desconectado, tentando reconectar em 3s...");
      this.isConnecting = false;
      setTimeout(() => this.connect(), 3000);
    };

    this.socket.onerror = (err) => {
      console.error("[WS] erro", err);
      this.socket?.close();
    };
  }

  public subscribe(cb: Listener) {
    if (!this.socket || this.socket.readyState !== WebSocket.OPEN) {
      this.connect();
    }
    this.listeners.push(cb);
    return () => {
      this.listeners = this.listeners.filter((fn) => fn !== cb);
    };
  }

  public send(payload: any) {
    const msg = JSON.stringify(payload);

    if (this.socket?.readyState === WebSocket.OPEN) {
      this.socket.send(msg);
    } else {
      console.warn("[WS] não conectado, enfileirando:", payload);
      this.pendingMessages.push(payload);
      if (!this.isConnecting) {
        this.connect();
      }
    }
  }
}

// Exporta uma instância global
export const ws = new WebSocketService();

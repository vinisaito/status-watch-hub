import json
import boto3
import os
from botocore.exceptions import ClientError
from datetime import datetime

dynamodb = boto3.client('dynamodb')
TABLE_NAME = os.environ.get('TABLE_NAME', 'painelciops_chatacionados')

CORS_HEADERS = {
    'Access-Control-Allow-Origin': '*',
    'Access-Control-Allow-Headers': '*',
    'Content-Type': 'application/json'
}



def lambda_handler(event, context):
    method = event.get('httpMethod')  # REST API (v1)
    if not method:
        method = event.get("requestContext", {}).get("http", {}).get("method")  # HTTP API (v2)
    
    print("Método recebido:", method)

    if method == 'OPTIONS':
        # Pré-voo CORS
        return {
            'statusCode': 200,
            'headers': CORS_HEADERS,
            'body': json.dumps({'message': 'CORS OK'})
        }

    if method == 'GET':
        return listar_acionados()

    elif method == 'POST':
        return marcar_acionado(event)

    return {
        'statusCode': 405,
        'headers': CORS_HEADERS,
        'body': json.dumps({'message': 'Método não permitido'})
    }

def listar_acionados():
    try:
        response = dynamodb.scan(TableName=TABLE_NAME)
        items = response.get('Items', [])
        result = [
            {
                'chamado': int(item['chamado']['N']),
                'timestamp': item['timestamp']['S']
            } for item in items
        ]
        return {
            'statusCode': 200,
            'headers': CORS_HEADERS,
            'body': json.dumps(result)
        }

    except ClientError as e:
        return {
            'statusCode': 500,
            'headers': CORS_HEADERS,
            'body': json.dumps({'message': 'Erro ao buscar dados', 'error': str(e)})
        }

def marcar_acionado(event):
    try:
        body = json.loads(event.get('body', '{}'))
        numero_chamado = body.get('chamado')

        if numero_chamado is None:
            return {
                'statusCode': 400,
                'headers': CORS_HEADERS,
                'body': json.dumps({'message': 'chamado é obrigatório'})
            }

        timestamp = datetime.utcnow().isoformat()

        dynamodb.put_item(
            TableName=TABLE_NAME,
            Item={
                'chamado': {'N': str(numero_chamado)},
                'timestamp': {'S': timestamp}
            },
            ConditionExpression='attribute_not_exists(chamado)'
        )

        return {
            'statusCode': 200,
            'headers': CORS_HEADERS,
            'body': json.dumps({'message': 'Incidente acionado com sucesso'})
        }

    except ClientError as e:
        if e.response['Error']['Code'] == 'ConditionalCheckFailedException':
            return {
                'statusCode': 409,
                'headers': CORS_HEADERS,
                'body': json.dumps({'message': 'Incidente já foi acionado'})
            }
        return {
            'statusCode': 500,
            'headers': CORS_HEADERS,
            'body': json.dumps({'message': 'Erro ao salvar', 'error': str(e)})
        }

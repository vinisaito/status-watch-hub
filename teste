import { useState } from 'react';
import {
  Dialog,
  DialogContent,
  DialogHeader,
  DialogTitle,
} from '@/components/ui/dialog';
import { Badge } from '@/components/ui/badge';
import { Button } from '@/components/ui/button';
import { Separator } from '@/components/ui/separator';
import { ScrollArea } from '@/components/ui/scroll-area';
import { 
  Calendar, 
  Clock, 
  User, 
  AlertTriangle, 
  Tag, 
  FileText,
  Users,
  X
} from 'lucide-react';

interface AlertData {
  id: string;
  chamado: string;
  tipo_chamado: string;
  grupo_chamado: string;
  status_chamado: string;
  abertura_chamado: string;
  resumo_chamado: string;
  severidade_chamado: string;
  acionado: string;
  chat: boolean;
}

interface ChamadoDetailsModalProps {
  isOpen: boolean;
  onClose: () => void;
  alertData: AlertData | null;
}

export const ChamadoDetailsModal = ({ isOpen, onClose, alertData }: ChamadoDetailsModalProps) => {
  if (!alertData) return null;

  const formatDate = (dateString: string) => {
    if (!dateString || dateString === '' || dateString === 'null' || dateString === 'undefined') {
      return '-';
    }

    try {
      let date: Date;
      const cleanString = String(dateString).trim();

      if (/^\d{13}$/.test(cleanString)) {
        date = new Date(parseInt(cleanString));
      } else if (/^\d{10}$/.test(cleanString)) {
        date = new Date(parseInt(cleanString) * 1000);
      } else if (/^\d{2}\/\d{2}\/\d{4}/.test(cleanString)) {
        const parts = cleanString.split(' ');
        const datePart = parts[0];
        const timePart = parts[1] || '00:00:00';
        const [day, month, year] = datePart.split('/');
        const [hour, minute, second] = timePart.split(':');

        date = new Date(
          parseInt(year),
          parseInt(month) - 1,
          parseInt(day),
          parseInt(hour || '0'),
          parseInt(minute || '0'),
          parseInt(second || '0')
        );
      } else {
        date = new Date(cleanString);
      }

      if (isNaN(date.getTime())) return cleanString;

      const year = date.getFullYear();
      if (year < 1900 || year > 2100) return cleanString;

      return date.toLocaleString('pt-BR', {
        day: '2-digit',
        month: '2-digit',
        year: 'numeric',
        hour: '2-digit',
        minute: '2-digit',
        second: '2-digit',
      });
    } catch (error) {
      return String(dateString);
    }
  };

  const getSeverityColor = (severity: string) => {
    return severity.includes('4')
      ? 'bg-destructive text-destructive-foreground'
      : 'bg-yellow-500 text-yellow-950';
  };

  const isChat = alertData.acionado === 'true' || alertData.chat;

  return (
    <Dialog open={isOpen} onOpenChange={onClose}>
      <DialogContent className="max-w-5xl max-h-[85vh] bg-gradient-to-br from-background to-background/95 border-2 border-primary/20 shadow-2xl">
        <DialogHeader className="pb-6 border-b border-primary/10">
          <DialogTitle className="text-2xl font-bold flex items-center gap-3 bg-gradient-to-r from-primary to-primary/80 bg-clip-text text-transparent">
            <div className="p-2 rounded-lg bg-primary/10 text-primary">
              <FileText className="h-6 w-6" />
            </div>
            Detalhes do Chamado #{alertData.chamado}
          </DialogTitle>
        </DialogHeader>

        <ScrollArea className="max-h-[calc(85vh-140px)] pr-4">
          <div className="space-y-8">
            {/* Status e Severidade */}
            <div className="flex flex-wrap gap-3 items-center p-4 bg-gradient-to-r from-accent/50 to-accent/30 rounded-xl border border-accent/50">
              <Badge 
                className={`${isChat ? 'bg-gradient-to-r from-green-500 to-green-600 text-white shadow-lg' : 'bg-gradient-to-r from-yellow-500 to-yellow-600 text-white shadow-lg'} text-sm px-4 py-2 font-semibold`}
              >
                {isChat ? '✅ Acionado' : '⏳ Pendente'}
              </Badge>
              <Badge className={`${getSeverityColor(alertData.severidade_chamado)} text-sm px-4 py-2 font-semibold shadow-lg`}>
                <AlertTriangle className="h-4 w-4 mr-2" />
                Severidade {alertData.severidade_chamado}
              </Badge>
              <Badge className="bg-gradient-to-r from-primary/20 to-primary/10 text-primary border-primary/30 text-sm px-4 py-2 font-semibold">
                {alertData.status_chamado}
              </Badge>
            </div>

            {/* Informações Principais */}
            <div className="grid grid-cols-1 md:grid-cols-2 gap-8">
              {/* Coluna Esquerda */}
              <div className="p-6 bg-gradient-to-br from-card to-card/80 rounded-xl border border-border/50 shadow-lg">
                <div className="space-y-5">
                  <h3 className="text-xl font-bold text-foreground flex items-center gap-3 border-b border-primary/20 pb-3">
                    <div className="p-2 rounded-lg bg-primary/10 text-primary">
                      <Tag className="h-5 w-5" />
                    </div>
                    Informações Básicas
                  </h3>
                  
                  <div className="space-y-4">
                    <div className="space-y-2">
                      <span className="text-sm font-semibold text-primary/80 uppercase tracking-wide">Número do Chamado</span>
                      <div className="text-lg font-mono font-bold bg-gradient-to-r from-primary/10 to-primary/5 border border-primary/20 px-4 py-3 rounded-lg">
                        #{alertData.chamado}
                      </div>
                    </div>

                    <div className="space-y-2">
                      <span className="text-sm font-semibold text-primary/80 uppercase tracking-wide flex items-center gap-2">
                        <Users className="h-4 w-4" />
                        Grupo Responsável
                      </span>
                      <div className="text-base bg-gradient-to-r from-accent/20 to-accent/10 border border-accent/30 px-4 py-3 rounded-lg">
                        {alertData.grupo_chamado}
                      </div>
                    </div>

                    <div className="space-y-2">
                      <span className="text-sm font-semibold text-primary/80 uppercase tracking-wide">Classificação</span>
                      <div className="text-base bg-gradient-to-r from-accent/20 to-accent/10 border border-accent/30 px-4 py-3 rounded-lg">
                        {alertData.tipo_chamado}
                      </div>
                    </div>
                  </div>
                </div>
              </div>

              {/* Coluna Direita */}
              <div className="p-6 bg-gradient-to-br from-card to-card/80 rounded-xl border border-border/50 shadow-lg">
                <div className="space-y-5">
                  <h3 className="text-xl font-bold text-foreground flex items-center gap-3 border-b border-primary/20 pb-3">
                    <div className="p-2 rounded-lg bg-primary/10 text-primary">
                      <Clock className="h-5 w-5" />
                    </div>
                    Temporização
                  </h3>
                  
                  <div className="space-y-4">
                    <div className="space-y-2">
                      <span className="text-sm font-semibold text-primary/80 uppercase tracking-wide flex items-center gap-2">
                        <Calendar className="h-4 w-4" />
                        Data de Abertura
                      </span>
                      <div className="text-base font-mono bg-gradient-to-r from-primary/10 to-primary/5 border border-primary/20 px-4 py-3 rounded-lg">
                        {formatDate(alertData.abertura_chamado)}
                      </div>
                    </div>

                    <div className="space-y-2">
                      <span className="text-sm font-semibold text-primary/80 uppercase tracking-wide">Status Atual</span>
                      <div className="text-base bg-gradient-to-r from-accent/20 to-accent/10 border border-accent/30 px-4 py-3 rounded-lg">
                        {alertData.status_chamado}
                      </div>
                    </div>

                    <div className="space-y-2">
                      <span className="text-sm font-semibold text-primary/80 uppercase tracking-wide">Severidade</span>
                      <div className="flex items-center">
                        <Badge className={`${getSeverityColor(alertData.severidade_chamado)} text-base px-4 py-2 font-bold shadow-lg`}>
                          {alertData.severidade_chamado}
                        </Badge>
                      </div>
                    </div>
                  </div>
                </div>
              </div>
            </div>

            {/* Resumo/Título do Chamado */}
            <div className="p-6 bg-gradient-to-br from-card to-card/80 rounded-xl border border-border/50 shadow-lg">
              <h3 className="text-xl font-bold text-foreground flex items-center gap-3 border-b border-primary/20 pb-4 mb-4">
                <div className="p-2 rounded-lg bg-primary/10 text-primary">
                  <FileText className="h-5 w-5" />
                </div>
                Resumo do Chamado
              </h3>
              <div className="bg-gradient-to-r from-accent/10 to-accent/5 border border-accent/20 p-6 rounded-lg">
                <p className="text-base leading-relaxed text-foreground font-medium">{alertData.resumo_chamado}</p>
              </div>
            </div>

            {/* Informações Técnicas */}
            <div className="p-6 bg-gradient-to-br from-muted/30 to-muted/10 rounded-xl border border-muted/50">
              <h3 className="text-lg font-bold text-foreground mb-4 flex items-center gap-2">
                <div className="w-2 h-2 rounded-full bg-primary"></div>
                Informações Técnicas
              </h3>
              <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
                <div className="space-y-2">
                  <span className="text-sm font-semibold text-primary/80 uppercase tracking-wide">ID do Alerta</span>
                  <div className="text-sm font-mono bg-background border border-border px-3 py-2 rounded-lg">
                    {alertData.id}
                  </div>
                </div>
                <div className="space-y-2">
                  <span className="text-sm font-semibold text-primary/80 uppercase tracking-wide">Status de Acionamento</span>
                  <div className="text-sm bg-background border border-border px-3 py-2 rounded-lg">
                    {alertData.acionado}
                  </div>
                </div>
              </div>
            </div>
          </div>
        </ScrollArea>
      </DialogContent>
    </Dialog>
  );
};

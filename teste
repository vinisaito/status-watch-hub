import json
import boto3
import os
import decimal
from datetime import datetime

dynamodb = boto3.resource("dynamodb")
connections_table = dynamodb.Table(os.environ["CONNECTIONS_TABLE"])
chamados_table = dynamodb.Table(os.environ["CHAMADOS_TABLE"])

# ----------------------
# Encoder para Decimal → int/float
# ----------------------
class DecimalEncoder(json.JSONEncoder):
    def default(self, o):
        if isinstance(o, decimal.Decimal):
            return int(o) if o % 1 == 0 else float(o)
        return super(DecimalEncoder, self).default(o)

def to_json(data):
    return json.dumps(data, cls=DecimalEncoder)

# ----------------------
# Lambda handler
# ----------------------
def lambda_handler(event, context):
    print(f"[DEBUG] Evento recebido: {json.dumps(event)}")

    route = event["requestContext"]["routeKey"]

    if route == "$connect":
        return on_connect(event)
    elif route == "$disconnect":
        return on_disconnect(event)
    elif route == "startTimer":
        return start_timer(event)
    elif route == "updateStatus":
        return update_status(event)
    else:
        return {"statusCode": 400, "body": "Rota inválida"}

# ----------------------
# Conectar
# ----------------------
def on_connect(event):
    connection_id = event["requestContext"]["connectionId"]
    print(f"[DEBUG] Novo cliente conectado: {connection_id}")

    # Salva conexão
    connections_table.put_item(
        Item={
            "connectionId": connection_id,
            "connectedAt": int(datetime.utcnow().timestamp())
        }
    )

    # Envia estado atual dos chamados
    apigw = boto3.client(
        "apigatewaymanagementapi",
        endpoint_url=os.environ["WS_ENDPOINT"]
    )

    response = chamados_table.scan()
    print(f"[DEBUG] Estado atual scan(): {json.dumps(response, cls=DecimalEncoder)}")

    for item in response.get("Items", []):
        message = {
            "action": "currentState",
            "chamado": int(item["chamado"]),
            "status": str(item.get("status", "pendente")),
            "timerStart": int(item["timerStart"]) if "timerStart" in item else None
        }

        try:
            print(f"[DEBUG] Enviando estado inicial para {connection_id}: {message}")
            apigw.post_to_connection(
                Data=to_json(message),
                ConnectionId=connection_id
            )
        except apigw.exceptions.GoneException:
            print(f"[WARN] Conexão {connection_id} não existe mais (Gone). Removendo...")
            connections_table.delete_item(Key={"connectionId": connection_id})
        except Exception as e:
            print(f"[ERROR] Falha ao enviar estado inicial: {e}")

    return {"statusCode": 200, "body": "Connected"}

# ----------------------
# Desconectar
# ----------------------
def on_disconnect(event):
    connection_id = event["requestContext"]["connectionId"]
    print(f"[DEBUG] Cliente desconectado: {connection_id}")

    connections_table.delete_item(Key={"connectionId": connection_id})

    return {"statusCode": 200, "body": "Disconnected"}

# ----------------------
# Iniciar Timer
# ----------------------
def start_timer(event):
    body = json.loads(event["body"])
    chamado = int(body["chamado"])
    timer_start = int(datetime.utcnow().timestamp())

    # Salva no DynamoDB
    chamados_table.put_item(
        Item={
            "chamado": chamado,
            "timerStart": timer_start,
            "status": "pendente"
        }
    )
    print(f"[DEBUG] Chamado salvo: {chamado} - timerStart={timer_start}")

    # Broadcast
    return broadcast({
        "action": "timerStarted",
        "chamado": chamado,
        "timerStart": timer_start
    })

# ----------------------
# Atualizar Status
# ----------------------
def update_status(event):
    body = json.loads(event["body"])
    chamado = int(body["chamado"])
    status = body["status"]

    chamados_table.update_item(
        Key={"chamado": chamado},
        UpdateExpression="SET #s = :s",
        ExpressionAttributeNames={"#s": "status"},
        ExpressionAttributeValues={":s": status}
    )
    print(f"[DEBUG] Status atualizado: {chamado} -> {status}")

    return broadcast({
        "action": "statusUpdated",
        "chamado": chamado,
        "status": status
    })

# ----------------------
# Envio para todos
# ----------------------
def broadcast(message):
    apigw = boto3.client(
        "apigatewaymanagementapi",
        endpoint_url=os.environ["WS_ENDPOINT"]
    )

    connections = connections_table.scan().get("Items", [])
    print(f"[DEBUG] Broadcast → {len(connections)} conexões: {message}")

    for conn in connections:
        conn_id = conn["connectionId"]
        try:
            apigw.post_to_connection(
                Data=to_json(message),
                ConnectionId=conn_id
            )
        except apigw.exceptions.GoneException:
            print(f"[WARN] Conexão {conn_id} não existe mais (Gone). Removendo...")
            connections_table.delete_item(Key={"connectionId": conn_id})
        except Exception as e:
            print(f"[ERROR] Falha ao enviar para {conn_id}: {e}")

    return {"statusCode": 200, "body": "Mensagem enviada"}

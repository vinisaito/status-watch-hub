import React, { useState, useEffect, useCallback, memo } from 'react';
import { Button } from '@/components/ui/button';
import { Textarea } from '@/components/ui/textarea';
import { Input } from '@/components/ui/input';
import { Label } from '@/components/ui/label';
import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';
import { Badge } from '@/components/ui/badge';
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';
import { Trash2, Plus, MessageSquare, Clock, User, RefreshCw } from 'lucide-react';
import { useToast } from '@/hooks/use-toast';
import { cn } from '@/lib/utils';

interface ShiftNote {
  id: string;
  author: string;
  message: string;
  timestamp: string;
  priority: 'normal' | 'important';
}

const formatTimestamp = (timestamp: string) => {
  try {
    const date = new Date(timestamp);
    return date.toLocaleString('pt-BR', {
      day: '2-digit',
      month: '2-digit',
      hour: '2-digit',
      minute: '2-digit',
    });
  } catch {
    return timestamp || '';
  }
};

const ShiftNoteItem = memo(({ note, onRemoveNote }: { note: ShiftNote; onRemoveNote: (id: string) => void }) => {
  return (
    <Card className={cn(
      "relative transition-all duration-300 hover:shadow-lg",
      note.priority === 'important' 
        ? "border-warning bg-gradient-to-br from-warning/5 to-warning/10 shadow-warning/20" 
        : "border-border bg-gradient-to-br from-background to-muted/20"
    )}>
      <CardContent className="p-4">
        <div className="flex items-start justify-between gap-4">
          <div className="flex-1 space-y-3">
            <div className="flex flex-wrap items-center gap-x-4 gap-y-2">
              <div className="flex items-center gap-2 text-sm text-muted-foreground">
                <div className="flex items-center gap-1">
                  <User className="h-3 w-3" />
                  <span className="font-medium text-foreground">{note.author}</span>
                </div>
              </div>
              <div className="flex items-center gap-1 text-sm text-muted-foreground">
                <Clock className="h-3 w-3" />
                <span>{formatTimestamp(note.timestamp)}</span>
              </div>
              {note.priority === 'important' && (
                <Badge variant="secondary" className="bg-warning text-warning-foreground font-semibold">
                  IMPORTANTE
                </Badge>
              )}
            </div>
            <p className="text-foreground leading-relaxed whitespace-pre-wrap break-words">
              {note.message}
            </p>
          </div>
          <Button
            variant="ghost"
            size="icon"
            onClick={() => onRemoveNote(note.id)}
            className="text-muted-foreground hover:text-destructive hover:bg-destructive/10 shrink-0"
            aria-label="Remover recado"
          >
            <Trash2 className="h-4 w-4" />
          </Button>
        </div>
      </CardContent>
    </Card>
  );
});

const ShiftNoteList = ({ notes, onRemoveNote }: { notes: ShiftNote[]; onRemoveNote: (id: string) => void }) => {
  if (!notes || notes.length === 0) {
    return (
      <div className="flex flex-col items-center justify-center py-12 text-center">
        <MessageSquare className="h-12 w-12 text-muted-foreground/50 mb-4" />
        <p className="text-muted-foreground text-lg">Nenhum recado no turno atual</p>
        <p className="text-muted-foreground/70 text-sm">Adicione o primeiro recado para começar</p>
      </div>
    );
  }

  return (
    <div className="space-y-4">
      {notes.map((note) => (
        <ShiftNoteItem key={note.id} note={note} onRemoveNote={onRemoveNote} />
      ))}
    </div>
  );
};

const ShiftNoteForm = ({
  authorName,
  setAuthorName,
  newNote,
  setNewNote,
  isImportant,
  setIsImportant,
  onAddNote,
}: {
  authorName: string;
  setAuthorName: (val: string) => void;
  newNote: string;
  setNewNote: (val: string) => void;
  isImportant: boolean;
  setIsImportant: (val: boolean) => void;
  onAddNote: () => void;
}) => {
  return (
    <Card className="border-primary/20 bg-gradient-to-br from-primary/5 to-primary/10">
      <CardHeader className="pb-4">
        <CardTitle className="flex items-center gap-2 text-primary">
          <MessageSquare className="h-5 w-5" />
          Novo Recado do Turno
        </CardTitle>
      </CardHeader>
      <CardContent className="space-y-4">
        <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
          <div className="space-y-2">
            <Label htmlFor="author-name">Seu Nome</Label>
            <Select value={authorName} onValueChange={setAuthorName}>
              <SelectTrigger className="bg-background/80 border-border/50">
                <SelectValue placeholder="Selecione ou digite seu nome" />
              </SelectTrigger>
              <SelectContent className="bg-background border-border shadow-lg">
                <SelectItem value="João Silva">João Silva</SelectItem>
                <SelectItem value="Maria Santos">Maria Santos</SelectItem>
                <SelectItem value="Pedro Oliveira">Pedro Oliveira</SelectItem>
                <SelectItem value="Ana Costa">Ana Costa</SelectItem>
                <SelectItem value="Carlos Lima">Carlos Lima</SelectItem>
                <SelectItem value="Fernanda Souza">Fernanda Souza</SelectItem>
              </SelectContent>
            </Select>
            {/* Input alternativo para nomes não listados */}
            <Input
              value={authorName}
              onChange={(e) => setAuthorName(e.target.value)}
              placeholder="Ou digite um nome personalizado"
              className="bg-background/80 border-border/50 text-sm"
            />
          </div>
          <div className="space-y-2 md:col-span-1">
            <div className="flex items-center gap-2 pt-7">
              <input
                type="checkbox"
                id="important-checkbox"
                checked={isImportant}
                onChange={(e) => setIsImportant(e.target.checked)}
                className="h-4 w-4 rounded border-border text-primary focus:ring-primary"
              />
              <Label htmlFor="important-checkbox" className="text-sm font-normal cursor-pointer">
                Marcar como importante
              </Label>
            </div>
          </div>
        </div>
        
        <div className="space-y-2">
          <Label htmlFor="note-message">Recado</Label>
          <Textarea
            id="note-message"
            value={newNote}
            onChange={(e) => setNewNote(e.target.value)}
            placeholder="Digite o recado para o próximo turno..."
            className="bg-background/80 border-border/50 min-h-[120px] resize-none"
          />
        </div>

        <div className="flex justify-end pt-2">
          <Button onClick={onAddNote} className="bg-primary hover:bg-primary/90 text-primary-foreground px-6">
            <Plus className="h-4 w-4 mr-2" />
            Adicionar Recado
          </Button>
        </div>
      </CardContent>
    </Card>
  );
};

const API_URL = 'https://f6ffk8e9fe.execute-api.us-east-1.amazonaws.com/prod/recadosturno';

async function postShiftNote(nome: string, recado: string, importante: boolean) {
  const response = await fetch(API_URL, {
    method: 'POST',
    headers: { 'Content-Type': 'application/json' },
    body: JSON.stringify({ nome, recado, importante }),
  });
  if (!response.ok) {
    const errorData = await response.text();
    console.error('POST error:', response.status, errorData);
    throw new Error(JSON.parse(errorData || '{}').error || 'Erro ao salvar recado');
  }
  return response.json();
}

async function deleteShiftNote(key: string) {
  const response = await fetch(API_URL, {
    method: 'DELETE',
    headers: { 'Content-Type': 'application/json' },
    body: JSON.stringify({ key }),
  });
  if (!response.ok) {
    const errorData = await response.text();
    console.error('DELETE error:', response.status, errorData);
    throw new Error(JSON.parse(errorData || '{}').error || 'Erro ao remover recado');
  }
  return response.json();
}

async function getShiftNotes(): Promise<ShiftNote[]> {
  const response = await fetch(API_URL, { method: 'GET' });

  if (!response.ok) {
    const txt = await response.text();
    console.error('GET error:', response.status, txt);
    throw new Error(txt || 'Erro ao carregar recados');
  }

  const text = await response.text();
  let parsed: any = null;
  if (!text) {
    parsed = null;
  } else {
    try {
      parsed = JSON.parse(text);
    } catch (err) {
      console.error('Erro ao parsear JSON do GET:', err, 'texto:', text);
      throw new Error('Resposta inválida do servidor');
    }
  }

  let rawNotes: any[] = [];
  if (parsed == null) {
    rawNotes = [];
  } else if (Array.isArray(parsed)) {
    rawNotes = parsed;
  } else if (parsed.notes && Array.isArray(parsed.notes)) {
    rawNotes = parsed.notes;
  } else if (parsed.recados && Array.isArray(parsed.recados)) {
    rawNotes = parsed.recados;
  } else if (parsed && (parsed.nome || parsed.recado || parsed.key)) {
    rawNotes = [parsed];
  } else {
    console.warn('Formato inesperado do payload GET:', parsed);
    rawNotes = [];
  }

  return rawNotes.map((item: any, idx: number) => ({
    id: item.key || item.id || item.Key || `note-${idx}`,
    author: item.nome || item.author || '',
    message: item.recado || item.message || '',
    timestamp: item.timestamp || item.ts || new Date().toISOString(),
    priority: item.importante ? 'important' : 'normal',
  }));
}

export const ShiftNotes = () => {
  const { toast } = useToast();
  const [notes, setNotes] = useState<ShiftNote[]>([]);
  const [newNote, setNewNote] = useState('');
  const [authorName, setAuthorName] = useState('');
  const [isImportant, setIsImportant] = useState(false);
  const [loading, setLoading] = useState(false);
  const [error, setError] = useState<string | null>(null);

  const loadNotes = useCallback(async () => {
    setLoading(true);
    setError(null);
    try {
      const fetchedNotes = await getShiftNotes();
      setNotes(fetchedNotes);
    } catch (err: any) {
      console.error('Erro ao carregar recados:', err);
      setError(err.message || 'Erro ao carregar recados');
      toast({
        title: 'Erro',
        description: err.message || 'Não foi possível carregar os recados.',
        variant: 'destructive',
      });
    } finally {
      setLoading(false);
    }
  }, [toast]);

  useEffect(() => {
    loadNotes();

    const savedAuthor = localStorage.getItem('shiftNotesAuthor');
    if (savedAuthor) setAuthorName(savedAuthor);
  }, [loadNotes]);

  useEffect(() => {
    if (authorName) {
      localStorage.setItem('shiftNotesAuthor', authorName);
    }
  }, [authorName]);

  const addNote = useCallback(async () => {
    if (!newNote.trim() || !authorName.trim()) {
      toast({
        title: 'Campos obrigatórios',
        description: 'Preencha seu nome e a mensagem do recado.',
        variant: 'destructive',
      });
      return;
    }
    try {
      const data = await postShiftNote(authorName.trim(), newNote.trim(), isImportant);
      const note: ShiftNote = {
        id: data.key,
        author: authorName.trim(),
        message: newNote.trim(),
        timestamp: data.timestamp,
        priority: isImportant ? 'important' : 'normal',
      };
      setNotes((prev) => [note, ...prev]);
      setNewNote('');
      setIsImportant(false);
      toast({ 
        title: 'Recado adicionado!', 
        description: 'O recado foi salvo com sucesso.',
        variant: 'default' 
      });
    } catch (error: any) {
      toast({
        title: 'Erro',
        description: error.message || 'Não foi possível salvar o recado.',
        variant: 'destructive',
      });
    }
  }, [newNote, authorName, isImportant, toast]);

  const removeNote = useCallback(async (noteId: string) => {
    try {
      await deleteShiftNote(noteId);
      setNotes((prev) => prev.filter((note) => note.id !== noteId));
      toast({ 
        title: 'Recado removido', 
        description: 'O recado foi excluído com sucesso.',
        variant: 'destructive' 
      });
    } catch (error: any) {
      toast({
        title: 'Erro',
        description: error.message || 'Não foi possível remover o recado.',
        variant: 'destructive',
      });
    }
  }, [toast]);

  return (
    <div className="h-screen flex flex-col bg-gradient-to-br from-background via-background to-muted/30">
      {/* Header fixo */}
      <div className="flex-none p-6 border-b border-border/50 bg-background/80 backdrop-blur-sm">
        <div className="max-w-4xl mx-auto">
          <div className="flex items-center justify-between">
            <div>
              <h1 className="text-2xl font-bold text-foreground">Recados do Turno</h1>
              <p className="text-muted-foreground">Gerencie as comunicações entre turnos</p>
            </div>
            <Button
              onClick={loadNotes}
              variant="outline"
              size="sm"
              disabled={loading}
              className="border-primary/20 hover:bg-primary/5"
            >
              <RefreshCw className={cn("h-4 w-4 mr-2", loading && "animate-spin")} />
              Atualizar
            </Button>
          </div>
        </div>
      </div>

      {/* Conteúdo com scroll */}
      <div className="flex-1 overflow-hidden">
        <div className="h-full overflow-y-auto">
          <div className="max-w-4xl mx-auto p-6 space-y-8">
            {/* Formulário para novo recado */}
            <ShiftNoteForm
              authorName={authorName}
              setAuthorName={setAuthorName}
              newNote={newNote}
              setNewNote={setNewNote}
              isImportant={isImportant}
              setIsImportant={setIsImportant}
              onAddNote={addNote}
            />

            {/* Lista de recados */}
            <div className="space-y-4">
              <div className="flex items-center justify-between">
                <h2 className="text-xl font-semibold text-foreground">
                  Recados Ativos
                  {notes.length > 0 && (
                    <Badge variant="secondary" className="ml-2">
                      {notes.length}
                    </Badge>
                  )}
                </h2>
              </div>

              {loading ? (
                <Card>
                  <CardContent className="flex items-center justify-center py-12">
                    <div className="flex items-center gap-3 text-muted-foreground">
                      <RefreshCw className="h-5 w-5 animate-spin" />
                      <span>Carregando recados...</span>
                    </div>
                  </CardContent>
                </Card>
              ) : error ? (
                <Card className="border-destructive/50 bg-destructive/5">
                  <CardContent className="flex items-center justify-center py-12">
                    <div className="text-center space-y-2">
                      <p className="text-destructive font-medium">Erro ao carregar recados</p>
                      <p className="text-muted-foreground text-sm">{error}</p>
                      <Button onClick={loadNotes} variant="outline" size="sm">
                        Tentar novamente
                      </Button>
                    </div>
                  </CardContent>
                </Card>
              ) : (
                <ShiftNoteList notes={notes} onRemoveNote={removeNote} />
              )}
            </div>

            {/* Espaçamento inferior para scroll */}
            <div className="h-8" />
          </div>
        </div>
      </div>
    </div>
  );
};

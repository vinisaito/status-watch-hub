import { create } from 'zustand';

interface ChamadoStore {
  ws: WebSocket | null;
  isConnected: boolean;
  messages: any[];
  initWebSocket: () => void;
  sendWS: (data: any) => void;
}

const useChamadoStore = create<ChamadoStore>((set, get) => ({
  ws: null,
  isConnected: false,
  messages: [],

  initWebSocket: () => {
    try {
      const ws = new WebSocket("wss://SEU-ENDPOINT.execute-api.us-east-1.amazonaws.com/production");

      ws.onopen = () => {
        console.log("✅ WebSocket conectado");
        set({ isConnected: true, ws });
      };

      ws.onmessage = (event) => {
        console.log("📩 Mensagem recebida:", event.data);
        try {
          const parsed = JSON.parse(event.data);
          set((state) => ({ messages: [...state.messages, parsed] }));
        } catch (e) {
          console.error("Erro ao parsear mensagem:", e);
        }
      };

      ws.onerror = (error) => {
        console.error("❌ Erro no WebSocket:", error);
      };

      ws.onclose = () => {
        console.warn("⚠️ WebSocket desconectado");
        set({ isConnected: false, ws: null });
        // tenta reconectar em 5s
        setTimeout(() => get().initWebSocket(), 5000);
      };

    } catch (err) {
      console.error("Erro ao iniciar WebSocket:", err);
    }
  },

  sendWS: (data: any) => {
    const ws = get().ws;
    if (ws && ws.readyState === WebSocket.OPEN) {
      console.log("📤 Enviando:", data);
      ws.send(JSON.stringify(data));
    } else {
      console.warn("❌ WebSocket não está conectado, não foi possível enviar:", data);
    }
  }
}));

// export extra (para usar fora de hooks, como no Dashboard.tsx)
export const initWebSocket = () => useChamadoStore.getState().initWebSocket();
export const sendWS = (data: any) => useChamadoStore.getState().sendWS(data);

export default useChamadoStore;

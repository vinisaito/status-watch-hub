import boto3
import json
from datetime import datetime, timezone
from decimal import Decimal

# Conex√£o DynamoDB
DDB = boto3.resource("dynamodb", region_name="us-east-1")
ACOMP_TABLE = DDB.Table("painelmonitoracao_acompanhamento")  # Tabela de alertas
CONN_TABLE = DDB.Table("painelmonitoracao_connections")       # Tabela de conex√µes WebSocket

# API Gateway Management API (WebSocket)
APIGW_ENDPOINT = "https://tgwtw1v4rg.execute-api.us-east-1.amazonaws.com/dev"  # Substitua pelo seu endpoint
apigw = boto3.client("apigatewaymanagementapi", endpoint_url=APIGW_ENDPOINT)

# Serializa√ß√£o Decimal
def json_serial(obj):
    if isinstance(obj, Decimal):
        return int(obj) if obj % 1 == 0 else float(obj)
    raise TypeError

# Calcula tempo restante considerando elapsedSeconds
def calculate_remaining(alerta):
    duration = float(alerta.get("durationMinutes", 15))  # converter Decimal para float
    timer_active = alerta.get("timerActive", False)
    elapsed = float(alerta.get("elapsedSeconds", 0))
    started_at = alerta.get("startedAt")

    if timer_active and started_at:
        try:
            started_dt = datetime.fromisoformat(str(started_at).replace("Z", "+00:00"))
            now = datetime.utcnow().replace(tzinfo=timezone.utc)
            elapsed += (now - started_dt).total_seconds()
        except Exception as e:
            print(f"‚ùå Erro no c√°lculo de elapsed: {e}")

    remaining = max(0, duration * 60 - elapsed)
    return int(remaining), timer_active, elapsed

# Lambda handler
def lambda_handler(event, context):
    route = event.get("requestContext", {}).get("routeKey")
    connection_id = event.get("requestContext", {}).get("connectionId")

    # ---------------- Connect
    if route == "$connect":
        CONN_TABLE.put_item(Item={"connectionId": connection_id})
        print(f"‚úÖ Conex√£o estabelecida: {connection_id}")
        return {"statusCode": 200}

    # ---------------- Disconnect
    elif route == "$disconnect":
        CONN_TABLE.delete_item(Key={"connectionId": connection_id})
        print(f"‚ùå Conex√£o desconectada: {connection_id}")
        return {"statusCode": 200}

    # ---------------- Receber mensagem
    elif route == "sendMessage":
        body = json.loads(event.get("body", "{}"))
        action = body.get("action")          # "startTimer" ou "pauseTimer"
        chamado = body.get("chamado")        # id do chamado

        if not chamado or not action:
            return {"statusCode": 400, "body": "Chamado ou a√ß√£o ausente"}

        alerta_resp = ACOMP_TABLE.get_item(Key={"chamado": int(chamado)})
        alerta = alerta_resp.get("Item")
        if not alerta:
            return {"statusCode": 404, "body": "Chamado n√£o encontrado"}

        now_iso = datetime.utcnow().replace(tzinfo=timezone.utc).isoformat()
        remaining, timer_active, elapsed = calculate_remaining(alerta)

        if action == "startTimer":
            # Reinicia o startedAt mas mant√©m elapsed acumulado
            ACOMP_TABLE.update_item(
                Key={"chamado": int(chamado)},
                UpdateExpression="SET timerActive=:t, startedAt=:s, elapsedSeconds=:e",
                ExpressionAttributeValues={":t": True, ":s": now_iso, ":e": elapsed}
            )
            print(f"‚è± Timer iniciado para chamado {chamado} √†s {now_iso}")
        elif action == "pauseTimer":
            # Atualiza elapsed acumulado e desativa timer
            ACOMP_TABLE.update_item(
                Key={"chamado": int(chamado)},
                UpdateExpression="SET timerActive=:t, elapsedSeconds=:e",
                ExpressionAttributeValues={":t": False, ":e": elapsed}
            )
            print(f"‚è∏ Timer pausado para chamado {chamado}")
        else:
            return {"statusCode": 400, "body": "A√ß√£o inv√°lida"}

        # Busca estado atualizado
        alerta_resp = ACOMP_TABLE.get_item(Key={"chamado": int(chamado)})
        alerta = alerta_resp.get("Item")
        remaining, timer_active, _ = calculate_remaining(alerta)

        # Broadcast para todos os clientes conectados
        connections = CONN_TABLE.scan().get("Items", [])
        for conn in connections:
            try:
                apigw.post_to_connection(
                    ConnectionId=conn["connectionId"],
                    Data=json.dumps({
                        "type": "TIMER_UPDATED",
                        "chamado": alerta["chamado"],
                        "timerActive": timer_active,
                        "startedAt": alerta.get("startedAt"),
                        "durationMinutes": alerta.get("durationMinutes", 15),
                        "timeRemaining": remaining
                    }, default=json_serial)
                )
            except apigw.exceptions.GoneException:
                print(f"‚ùå Conex√£o ausente: {conn['connectionId']}")
                CONN_TABLE.delete_item(Key={"connectionId": conn["connectionId"]})

        return {"statusCode": 200, "body": json.dumps({"message": "ok"})}

    # ---------------- GET estado atual (nova sess√£o)
    elif route == "getState":
        chamado = event.get("queryStringParameters", {}).get("chamado")
        if not chamado:
            return {"statusCode": 400, "body": "Chamado ausente"}

        alerta_resp = ACOMP_TABLE.get_item(Key={"chamado": int(chamado)})
        alerta = alerta_resp.get("Item")
        if not alerta:
            return {"statusCode": 404, "body": "Chamado n√£o encontrado"}

        remaining, timer_active, _ = calculate_remaining(alerta)
        alerta["timeRemaining"] = remaining
        alerta["timerActive"] = timer_active

        print(f"üì° Estado retornado para chamado {chamado}: remaining={remaining}, timerActive={timer_active}")
        return {"statusCode": 200, "body": json.dumps(alerta, default=json_serial)}

    else:
        print(f"‚ùå Rota n√£o suportada: {route}")
        return {"statusCode": 400, "body": "Rota n√£o suportada"}

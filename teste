import React, { useEffect, useState, useRef } from "react";

interface TimerProps {
  chamado: number; // ID do chamado
  durationMinutes?: number; // opcional, padr√£o 15
}

interface TimerData {
  chamado: number;
  timerActive: boolean;
  startedAt?: string;
  durationMinutes: number;
  timeRemaining?: number;
}

const Timer: React.FC<TimerProps> = ({ chamado, durationMinutes = 15 }) => {
  const [timerData, setTimerData] = useState<TimerData>({
    chamado,
    timerActive: false,
    durationMinutes,
    timeRemaining: durationMinutes * 60,
  });

  const wsRef = useRef<WebSocket | null>(null);
  const intervalRef = useRef<NodeJS.Timeout | null>(null);

  // Fun√ß√£o para conectar WSS
  const connectWS = () => {
    const WSS_URL = "wss://SEU_ENDPOINT.execute-api.us-east-1.amazonaws.com/dev";
    console.log("üåê Tentando conectar WebSocket...");
    const ws = new WebSocket(WSS_URL);

    ws.onopen = () => {
      console.log("‚úÖ WebSocket conectado");
      wsRef.current = ws;

      // Solicita estado atual ao entrar na sess√£o
      ws.send(JSON.stringify({ action: "getState", chamado }));
      console.log("üì° Solicitando estado atual do chamado", chamado);
    };

    ws.onmessage = (event) => {
      console.log("üì© Mensagem recebida do WSS:", event.data);
      try {
        const msg = JSON.parse(event.data);
        if (msg.type === "TIMER_UPDATED" || msg.type === "TIMER_STATE") {
          const remaining = msg.timeRemaining ?? msg.durationMinutes * 60;
          setTimerData({
            chamado: msg.chamado,
            timerActive: msg.timerActive,
            startedAt: msg.startedAt,
            durationMinutes: msg.durationMinutes,
            timeRemaining: remaining,
          });
        }
      } catch (e) {
        console.error("‚ùå Erro ao processar mensagem:", e);
      }
    };

    ws.onerror = (err) => {
      console.error("‚ùå WebSocket erro:", err);
    };

    ws.onclose = () => {
      console.log("‚ùå WebSocket desconectado, tentando reconectar em 5s...");
      wsRef.current = null;
      setTimeout(connectWS, 5000);
    };
  };

  useEffect(() => {
    connectWS();

    return () => {
      if (wsRef.current && wsRef.current.readyState === WebSocket.OPEN) {
        wsRef.current.close();
      }
      if (intervalRef.current) {
        clearInterval(intervalRef.current);
      }
    };
  }, []);

  // Intervalo para atualizar o tempo restante localmente
  useEffect(() => {
    if (intervalRef.current) clearInterval(intervalRef.current);

    intervalRef.current = setInterval(() => {
      setTimerData((prev) => {
        if (!prev.timerActive || prev.timeRemaining === undefined) return prev;
        const newRemaining = Math.max(0, prev.timeRemaining - 1);
        return { ...prev, timeRemaining: newRemaining };
      });
    }, 1000);

    return () => {
      if (intervalRef.current) clearInterval(intervalRef.current);
    };
  }, [timerData.timerActive]);

  const handleStart = () => {
    if (wsRef.current && wsRef.current.readyState === WebSocket.OPEN) {
      console.log("‚è± Enviando startTimer...");
      wsRef.current.send(JSON.stringify({ action: "startTimer", chamado }));
    } else {
      console.warn("‚ö† WebSocket n√£o conectado ainda.");
    }
  };

  const handlePause = () => {
    if (wsRef.current && wsRef.current.readyState === WebSocket.OPEN) {
      console.log("‚è∏ Enviando pauseTimer...");
      wsRef.current.send(JSON.stringify({ action: "pauseTimer", chamado }));
    } else {
      console.warn("‚ö† WebSocket n√£o conectado ainda.");
    }
  };

  const formatTime = (seconds?: number) => {
    if (seconds === undefined) return "--:--";
    const m = Math.floor(seconds / 60)
      .toString()
      .padStart(2, "0");
    const s = Math.floor(seconds % 60)
      .toString()
      .padStart(2, "0");
    return `${m}:${s}`;
  };

  return (
    <div style={{ border: "1px solid #ccc", padding: "16px", width: "220px" }}>
      <h3>Chamado {timerData.chamado}</h3>
      <p>Status: {timerData.timerActive ? "‚è± Ativo" : "‚è∏ Pausado"}</p>
      <p>Tempo restante: {formatTime(timerData.timeRemaining)}</p>
      <button onClick={handleStart} style={{ marginRight: "8px" }}>
        Iniciar
      </button>
      <button onClick={handlePause}>Pausar</button>
    </div>
  );
};

export default Timer;

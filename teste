import React, { useEffect, useState, useRef } from "react";

const WS_URL = "wss://m89s04n9ve.execute-api.us-east-1.amazonaws.com/prod"; // Seu endpoint WS
const API_URL = "https://m89s04n9ve.execute-api.us-east-1.amazonaws.com/prod"; // REST API
const CHAMADO_ID = 123; // Defina o ID do chamado fixo para testes

const Timer: React.FC = () => {
  const [timeRemaining, setTimeRemaining] = useState<number>(0);
  const [timerActive, setTimerActive] = useState<boolean>(false);
  const [loading, setLoading] = useState<boolean>(true);

  const ws = useRef<WebSocket | null>(null);
  const intervalRef = useRef<NodeJS.Timeout | null>(null);

  // üîπ Conecta no WebSocket
  useEffect(() => {
    console.log("üîå Conectando ao WebSocket...");
    const socket = new WebSocket(WS_URL);

    socket.onopen = () => {
      console.log("‚úÖ WebSocket conectado!");
    };

    socket.onmessage = (message) => {
      console.log("üì• Mensagem WS recebida:", message.data);
      try {
        const data = JSON.parse(message.data);

        if (data.type === "TIMER_UPDATED") {
          console.log("‚è± Atualiza√ß√£o de timer recebida:", data);
          setTimeRemaining(data.timeRemaining);
          setTimerActive(data.timerActive);
        }
      } catch (err) {
        console.error("‚ùå Erro ao processar mensagem WS:", err);
      }
    };

    socket.onerror = (err) => {
      console.error("‚ö†Ô∏è Erro no WebSocket:", err);
    };

    socket.onclose = () => {
      console.warn("üîå WebSocket desconectado.");
    };

    ws.current = socket;

    return () => {
      console.log("üîå Fechando WebSocket...");
      socket.close();
    };
  }, []);

  // üîπ Buscar estado inicial do timer
  useEffect(() => {
    const fetchState = async () => {
      console.log("üì° Buscando estado inicial...");
      try {
        const res = await fetch(`${API_URL}?chamado=${CHAMADO_ID}`);
        if (!res.ok) throw new Error(`Erro HTTP: ${res.status}`);
        const data = await res.json();
        console.log("üì° Estado inicial:", data);
        setTimeRemaining(data.timeRemaining || 0);
        setTimerActive(data.timerActive || false);
      } catch (err) {
        console.error("‚ùå Erro ao buscar estado inicial:", err);
      } finally {
        setLoading(false);
      }
    };

    fetchState();
  }, []);

  // üîπ Atualiza cron√¥metro localmente a cada segundo
  useEffect(() => {
    if (timerActive) {
      console.log("‚ñ∂Ô∏è Timer ativo, iniciando contagem...");
      intervalRef.current = setInterval(() => {
        setTimeRemaining((prev) => Math.max(prev - 1, 0));
      }, 1000);
    } else {
      console.log("‚è∏ Timer pausado, limpando intervalo...");
      if (intervalRef.current) clearInterval(intervalRef.current);
    }

    return () => {
      if (intervalRef.current) clearInterval(intervalRef.current);
    };
  }, [timerActive]);

  // üîπ Fun√ß√£o para enviar mensagens via WS
  const sendWSMessage = (payload: any) => {
    if (ws.current && ws.current.readyState === WebSocket.OPEN) {
      console.log("üì§ Enviando para WS:", payload);
      ws.current.send(JSON.stringify(payload));
    } else {
      console.error("‚ùå WebSocket n√£o est√° pronto para enviar.");
    }
  };

  const handleStart = () => {
    sendWSMessage({ action: "startTimer", chamado: CHAMADO_ID });
  };

  const handlePause = () => {
    sendWSMessage({ action: "pauseTimer", chamado: CHAMADO_ID });
  };

  const formatTime = (seconds: number) => {
    const min = Math.floor(seconds / 60);
    const sec = seconds % 60;
    return `${String(min).padStart(2, "0")}:${String(sec).padStart(2, "0")}`;
  };

  if (loading) return <p>‚è≥ Carregando...</p>;

  return (
    <div style={{ padding: 20, fontFamily: "Arial", textAlign: "center" }}>
      <h1>‚è± Timer</h1>
      <p style={{ fontSize: "2rem", fontWeight: "bold" }}>
        {formatTime(timeRemaining)}
      </p>
      <div>
        <button
          onClick={handleStart}
          style={{
            padding: "10px 20px",
            margin: "5px",
            backgroundColor: "green",
            color: "white",
            border: "none",
            cursor: "pointer",
          }}
        >
          ‚ñ∂Ô∏è Iniciar
        </button>
        <button
          onClick={handlePause}
          style={{
            padding: "10px 20px",
            margin: "5px",
            backgroundColor: "red",
            color: "white",
            border: "none",
            cursor: "pointer",
          }}
        >
          ‚è∏ Pausar
        </button>
      </div>
    </div>
  );
};

export default Timer;

use-chat-acionados:
import { useState, useEffect, useCallback } from 'react';
import { toast } from '@/hooks/use-toast';

export const useChatAcionados = () => {
  const [acionadosSet, setAcionadosSet] = useState<Set<string>>(new Set());
  const [loading, setLoading] = useState(true);

  // Busca os incidentes acionados no DynamoDB via API
  const fetchAcionados = useCallback(async () => {
    try {
      setLoading(true);
      const res = await fetch('https://f6ffk8e9fe.execute-api.us-east-1.amazonaws.com/prod/chatacionados');
      if (!res.ok) throw new Error(`Erro ao buscar acionados: ${res.status}`);
      const data: { chamado: string }[] = await res.json();
      setAcionadosSet(new Set(data.map(item => item.chamado.toString())));
    } catch (error) {
      toast({
        title: 'Erro ao buscar acionados',
        description: 'Não foi possível carregar os incidentes acionados',
        variant: 'destructive',
      });
    } finally {
      setLoading(false);
    }
  }, []);

  useEffect(() => {
    fetchAcionados();
  }, [fetchAcionados]);

  // Função para adicionar um chamado ao set de acionados
  const addAcionado = useCallback((chamado: string) => {
    setAcionadosSet(prev => new Set([...prev, chamado]));
  }, []);

  // Função para verificar se um chamado foi acionado
  const isAcionado = useCallback((chamado: string) => {
    return acionadosSet.has(chamado);
  }, [acionadosSet]);

  return {
    acionadosSet,
    loading,
    addAcionado,
    isAcionado,
    refetch: fetchAcionados
  };
};







ChamadoDetailsModal:
import { useState } from 'react';
import {
  Dialog,
  DialogContent,
  DialogHeader,
  DialogTitle,
} from '@/components/ui/dialog';
import { Badge } from '@/components/ui/badge';
import { Button } from '@/components/ui/button';
import { Separator } from '@/components/ui/separator';
import { ScrollArea } from '@/components/ui/scroll-area';
import { Accordion, AccordionContent, AccordionItem, AccordionTrigger } from '@/components/ui/accordion';
import {
  Calendar,
  Clock,
  User,
  AlertTriangle,
  Tag,
  FileText,
  Users,
  X,
  History,
  CheckCircle2,
  XCircle,
  Phone,
  MessageSquare
} from 'lucide-react';
import { cn } from '@/lib/utils';

interface AlertData {
  id: string;
  chamado: string;
  tipo_chamado: string;
  grupo_chamado: string;
  status_chamado: string;
  abertura_chamado: string;
  resumo_chamado: string;
  severidade_chamado: string;
  acionado: string;
  link_chamado: URL;
  chat: boolean;
}

interface ChamadoDetailsModalProps {
  isOpen: boolean;
  onClose: () => void;
  alertData: AlertData | null;
  historicoAcionamentos?: {
    operador: string;
    pessoaAcionada: string;
    status: string;
    observacao: string;
    dataHora: string;
    updatedAt: string;
    nivel: number;
  }[];
}

const LEVEL_INFO = {
  1: {
    title: "Primeiro Acionamento",
  },
  2: {
    title: "1ª Escalação",
  },
  3: {
    title: "2ª Escalação",
  },
  4: {
    title: "3ª Escalação",
  },
  5: {
    title: "4ª Escalação",
  }
};

const LEVEL_COLORS = {
  1: { bg: "bg-blue-500/10", border: "border-blue-500/30", text: "text-blue-700 dark:text-blue-400", icon: "text-blue-500" },
  2: { bg: "bg-yellow-500/10", border: "border-yellow-500/30", text: "text-yellow-700 dark:text-yellow-400", icon: "text-yellow-500" },
  3: { bg: "bg-orange-500/10", border: "border-orange-500/30", text: "text-orange-700 dark:text-orange-400", icon: "text-orange-500" },
  4: { bg: "bg-red-500/10", border: "border-red-500/30", text: "text-red-700 dark:text-red-400", icon: "text-red-500" },
  5: { bg: "bg-purple-600/10", border: "border-purple-600/30", text: "text-purple-700 dark:text-purple-400", icon: "text-purple-600" },
};

export const ChamadoDetailsModal = ({ isOpen, onClose, alertData, historicoAcionamentos = [] }: ChamadoDetailsModalProps) => {
  if (!alertData) return null;

  const formatDate = (dateString: string) => {
    if (!dateString || dateString === '' || dateString === 'null' || dateString === 'undefined') {
      return '-';
    }

    try {
      let date: Date;
      const cleanString = String(dateString).trim();

      if (/^\d{13}$/.test(cleanString)) {
        date = new Date(parseInt(cleanString));
      } else if (/^\d{10}$/.test(cleanString)) {
        date = new Date(parseInt(cleanString) * 1000);
      } else if (/^\d{2}\/\d{2}\/\d{4}/.test(cleanString)) {
        const parts = cleanString.split(' ');
        const datePart = parts[0];
        const timePart = parts[1] || '00:00:00';
        const [day, month, year] = datePart.split('/');
        const [hour, minute, second] = timePart.split(':');

        date = new Date(
          parseInt(year),
          parseInt(month) - 1,
          parseInt(day),
          parseInt(hour || '0'),
          parseInt(minute || '0'),
          parseInt(second || '0')
        );
      } else {
        date = new Date(cleanString);
      }

      if (isNaN(date.getTime())) return cleanString;

      const year = date.getFullYear();
      if (year < 1900 || year > 2100) return cleanString;

      return date.toLocaleString('pt-BR', {
        day: '2-digit',
        month: '2-digit',
        year: 'numeric',
        hour: '2-digit',
        minute: '2-digit',
        second: '2-digit',
      });
    } catch (error) {
      return String(dateString);
    }
  };

  const getSeverityColor = (severity: string) => {
    return severity.includes('4')
      ? 'bg-destructive text-destructive-foreground'
      : 'bg-yellow-500 text-yellow-950';
  };

  const isChat = alertData.acionado === 'true' || alertData.chat;

  return (
    <Dialog open={isOpen} onOpenChange={onClose}>
      <DialogContent className="max-w-5xl max-h-[85vh] bg-gradient-to-br from-background to-background/95 border-2 border-primary/20 shadow-2xl">
        <DialogHeader className="pb-6 border-b border-primary/10">
          <DialogTitle className="text-2xl font-bold flex items-center gap-3 bg-gradient-to-r from-primary to-primary/80 bg-clip-text text-transparent">
            <div className="p-2 rounded-lg bg-primary/10 text-primary">
              <FileText className="h-6 w-6" />
            </div>
            Detalhes do Chamado - {alertData.chamado}
          </DialogTitle>
        </DialogHeader>

        <ScrollArea className="max-h-[calc(85vh-140px)] pr-4">
          <div className="space-y-8">

            {/* Histórico de Acionamentos*/}
            <Accordion type="single" collapsible className="w-full">
              <AccordionItem value="historico" className="border-2 border-border rounded-lg bg-card">
                <AccordionTrigger className="px-6 py-4 hover:no-underline hover:bg-muted/50 transition-colors">
                  <div className="flex items-center gap-3">
                    <History className="h-6 w-6 text-primary" />
                    <span className="text-xl font-semibold text-foreground">
                      Histórico de Acionamentos
                    </span>
                    <Badge variant="secondary" className="ml-2">
                      {historicoAcionamentos.length} registro(s)
                    </Badge>
                  </div>
                </AccordionTrigger>
                <AccordionContent className="px-6 pb-6 pt-2">
                  {historicoAcionamentos.length > 0 ? (
                    <div className="relative">
                      {/* Timeline line */}
                      <div className="absolute left-6 top-8 bottom-4 w-0.5 bg-gradient-to-b from-primary/30 via-primary/20 to-transparent" />
                      
                      <div className="space-y-4">
                        {[...historicoAcionamentos]
                          .sort((a, b) => b.nivel - a.nivel)
                          .map((h, idx) => {
                            const levelColor = LEVEL_COLORS[h.nivel as keyof typeof LEVEL_COLORS] || LEVEL_COLORS[1];
                            const StatusIcon = h.status === 'atendido' ? CheckCircle2 : XCircle;
                            const statusColor = h.status === 'atendido' ? 'text-green-500' : 'text-red-500';
                            const statusBg = h.status === 'atendido' ? 'bg-green-500/10' : 'bg-red-500/10';
                            
                            return (
                              <div key={idx} className="relative flex gap-4 group">
                                {/* Timeline node */}
                                <div className="relative z-10">
                                  <div className={cn(
                                    "w-12 h-12 rounded-xl flex items-center justify-center font-bold shadow-sm transition-all duration-200 group-hover:scale-110",
                                    levelColor.bg,
                                    levelColor.border,
                                    levelColor.text,
                                    "border"
                                  )}>
                                    {h.nivel}
                                  </div>
                                </div>

                                {/* Content card */}
                                <div className="flex-1 bg-background rounded-xl border p-5 shadow-sm hover:shadow-md transition-all duration-200 group-hover:border-primary/30">
                                  {/* Header with operator and status */}
                                  <div className="flex flex-wrap items-start justify-between gap-4 mb-4">
                                    <div className="space-y-3 flex-1">
                                      {/* Operator info */}
                                      <div className="flex items-center gap-3">
                                        <div className="p-2 bg-primary/5 rounded-lg">
                                          <User className="h-4 w-4 text-primary" />
                                        </div>
                                        <div>
                                          <p className="text-xs text-muted-foreground">Operador</p>
                                          <p className="font-semibold text-sm">{h.operador}</p>
                                        </div>
                                      </div>

                                      {/* Person contacted */}
                                      <div className="flex items-center gap-3">
                                        <div className="p-2 bg-primary/5 rounded-lg">
                                          <Phone className="h-4 w-4 text-primary" />
                                        </div>
                                        <div>
                                          <p className="text-xs text-muted-foreground">Pessoa Acionada</p>
                                          <p className="font-semibold text-sm">{h.pessoaAcionada}</p>
                                        </div>
                                      </div>
                                    </div>

                                    {/* Status badge */}
                                    <div className="flex flex-col items-end gap-2">
                                      <div className={cn(
                                        "flex items-center gap-2 px-3 py-1.5 rounded-full",
                                        statusBg
                                      )}>
                                        <StatusIcon className={cn("h-4 w-4", statusColor)} />
                                        <span className={cn("text-sm font-medium capitalize", statusColor)}>
                                          {h.status === 'atendido' ? 'Atendido' : 'Não Atendido'}
                                        </span>
                                      </div>

                                      {/* Date and time */}
                                      <div className="flex items-center gap-1.5 text-xs text-muted-foreground">
                                        <Calendar className="h-3 w-3" />
                                        <span>{h.updatedAt}</span>
                                      </div>
                                    </div>
                                  </div>

                                  {/* Observation section */}
                                  {h.observacao && (
                                    <div className="mt-4 pt-4 border-t">
                                      <div className="flex items-start gap-3">
                                        <div className="p-1.5 bg-muted rounded">
                                          <MessageSquare className="h-3.5 w-3.5 text-muted-foreground" />
                                        </div>
                                        <div className="flex-1">
                                          <p className="text-xs text-muted-foreground mb-1">Observações</p>
                                          <p className="text-sm leading-relaxed whitespace-pre-line text-foreground/90">
                                            {h.observacao}
                                          </p>
                                        </div>
                                      </div>
                                    </div>
                                  )}

                                  {/* Level badge */}
                                  <div className="flex items-center gap-2 mt-4">
                                    <Badge 
                                      variant="outline" 
                                      className={cn(
                                        "text-xs",
                                        levelColor.border,
                                        levelColor.text
                                      )}
                                    >
                                      {LEVEL_INFO[h.nivel as keyof typeof LEVEL_INFO]?.title || `Nível ${h.nivel}`}
                                    </Badge>
                                    {idx === 0 && (
                                      <Badge variant="secondary" className="text-xs">
                                        Mais recente
                                      </Badge>
                                    )}
                                  </div>
                                </div>
                              </div>
                            );
                          })}
                      </div>
                    </div>
                  ) : (
                    <div className="flex flex-col items-center justify-center py-12 space-y-4">
                      <div className="p-4 bg-muted/50 rounded-full">
                        <History className="h-8 w-8 text-muted-foreground" />
                      </div>
                      <div className="text-center space-y-2">
                        <h4 className="font-medium text-foreground">Nenhum acionamento registrado</h4>
                        <p className="text-sm text-muted-foreground max-w-sm">
                          Os acionamentos realizados para este chamado aparecerão aqui conforme forem executados.
                        </p>
                      </div>
                    </div>
                  )}
                </AccordionContent>
              </AccordionItem>
            </Accordion>

            {/* Informações Principais */}
            <div className="grid grid-cols-1 md:grid-cols-2 gap-8">
              {/* Coluna Esquerda */}
              <div className="p-6 bg-gradient-to-br from-card to-card/80 rounded-xl border border-border/50 shadow-lg">
                <div className="space-y-5">
                  <h3 className="text-xl font-bold text-foreground flex items-center gap-3 border-b border-primary/20 pb-3">
                    <div className="p-2 rounded-lg bg-primary/10 text-primary">
                      <Tag className="h-5 w-5" />
                    </div>
                    Informações Básicas
                  </h3>

                  <div className="space-y-4">
                    <div className="space-y-2">
                      <span className="text-sm font-semibold text-primary/80 uppercase tracking-wide flex items-center gap-2">
                        <FileText className="h-4 w-4" />
                        Número do Chamado
                      </span>
                      <div 
                        className="text-lg font-mono font-bold bg-gradient-to-r from-primary/10 to-primary/5 border border-primary/20 px-4 py-3 rounded-lg cursor-pointer hover:bg-gradient-to-r hover:from-primary/20 hover:to-primary/10 transition-all duration-200"
                        onClick={() => window.open(alertData.link_chamado, '_blank')}
                      >
                        <div className="flex items-center gap-3">
                          <FileText className="h-5 w-5 text-primary" />
                          <span className="text-primary hover:underline">{alertData.chamado}</span>
                        </div>
                      </div>
                    </div>

                    <div className="space-y-2">
                      <span className="text-sm font-semibold text-primary/80 uppercase tracking-wide flex items-center gap-2">
                        <Users className="h-4 w-4" />
                        Grupo Responsável
                      </span>
                      <div className="text-base font-mono font-bold bg-gradient-to-r from-primary/10 to-primary/5 border border-primary/20 px-4 py-3 rounded-lg">
                        <div className="flex items-center gap-3">
                          <Users className="h-5 w-5 text-primary" />
                          {alertData.grupo_chamado}
                        </div>
                      </div>
                    </div>

                    <div className="space-y-2">
                      <span className="text-sm font-semibold text-primary/80 uppercase tracking-wide flex items-center gap-2">
                        <Tag className="h-4 w-4" />
                        Classificação
                      </span>
                      <div className="text-base font-mono font-bold bg-gradient-to-r from-primary/10 to-primary/5 border border-primary/20 px-4 py-3 rounded-lg">
                        <div className="flex items-center gap-3">
                          <Tag className="h-5 w-5 text-primary" />
                          {alertData.tipo_chamado}
                        </div>
                      </div>
                    </div>
                  </div>
                </div>
              </div>

              {/* Coluna Direita */}
              <div className="p-6 bg-gradient-to-br from-card to-card/80 rounded-xl border border-border/50 shadow-lg">
                <div className="space-y-5">
                  <h3 className="text-xl font-bold text-foreground flex items-center gap-3 border-b border-primary/20 pb-3">
                    <div className="p-2 rounded-lg bg-primary/10 text-primary">
                      <Clock className="h-5 w-5" />
                    </div>
                    Temporização
                  </h3>

                  <div className="space-y-4">
                    <div className="space-y-2">
                      <span className="text-sm font-semibold text-primary/80 uppercase tracking-wide flex items-center gap-2">
                        <Calendar className="h-4 w-4" />
                        Data de Abertura
                      </span>
                      <div className="text-base font-mono font-bold bg-gradient-to-r from-primary/10 to-primary/5 border border-primary/20 px-4 py-3 rounded-lg">
                        <div className="flex items-center gap-3">
                          <Calendar className="h-5 w-5 text-primary" />
                          {formatDate(alertData.abertura_chamado)}
                        </div>
                      </div>
                    </div>

                    <div className="space-y-2">
                      <span className="text-sm font-semibold text-primary/80 uppercase tracking-wide flex items-center gap-2">
                        <Clock className="h-4 w-4" />
                        Status Atual
                      </span>
                      <div className="text-base font-mono font-bold bg-gradient-to-r from-primary/10 to-primary/5 border border-primary/20 px-4 py-3 rounded-lg">
                        <div className="flex items-center gap-3">
                          <Clock className="h-5 w-5 text-primary" />
                          {alertData.status_chamado}
                        </div>
                      </div>
                    </div>

                    <div className="space-y-2">
                      <span className="text-sm font-semibold text-primary/80 uppercase tracking-wide flex items-center gap-2">
                        <AlertTriangle className="h-4 w-4" />
                        Severidade
                      </span>
                      <div className="text-base font-mono font-bold bg-gradient-to-r from-primary/10 to-primary/5 border border-primary/20 px-4 py-3 rounded-lg">
                        <div className="flex items-center gap-3">
                          <AlertTriangle className="h-5 w-5 text-primary" />
                            {alertData.severidade_chamado}
                        </div>
                      </div>
                    </div>
                  </div>
                </div>
              </div>
            </div>

            {/* Resumo/Título do Chamado */}
            <div className="p-6 bg-gradient-to-br from-card to-card/80 rounded-xl border border-border/50 shadow-lg">
              <h3 className="text-xl font-bold text-foreground flex items-center gap-3 border-b border-primary/20 pb-4 mb-4">
                <div className="p-2 rounded-lg bg-primary/10 text-primary">
                  <FileText className="h-5 w-5" />
                </div>
                Resumo do Chamado
              </h3>
              <div className="bg-gradient-to-r from-accent/10 to-accent/5 border border-accent/20 p-6 rounded-lg">
                <p className="text-base leading-relaxed text-foreground font-medium">{alertData.resumo_chamado}</p>
              </div>
            </div>

          </div>
        </ScrollArea>
      </DialogContent>
    </Dialog>
  );
};

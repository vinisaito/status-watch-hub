import { useMemo } from 'react';
import {
  Dialog,
  DialogContent,
  DialogHeader,
  DialogTitle,
} from '@/components/ui/dialog';
import { Badge } from '@/components/ui/badge';
import { ScrollArea } from '@/components/ui/scroll-area';
import { Accordion, AccordionContent, AccordionItem, AccordionTrigger } from '@/components/ui/accordion';
import {
  Calendar,
  Clock,
  User,
  AlertTriangle,
  Tag,
  FileText,
  Users,
  History,
  CheckCircle2,
  XCircle,
  Phone,
  MessageSquare
} from 'lucide-react';
import { cn } from '@/lib/utils';
import { useWebsocketTimers } from '@/hooks/useWebsocketTimers';

interface AlertData {
  id: string;
  chamado: string;
  tipo_chamado: string;
  grupo_chamado: string;
  status_chamado: string;
  abertura_chamado: string;
  resumo_chamado: string;
  severidade_chamado: string;
  acionado: string;
  chat: boolean;
}

interface ChamadoDetailsModalProps {
  isOpen: boolean;
  onClose: () => void;
  alertData: AlertData | null;
}

const LEVEL_INFO = {
  1: { title: "Primeiro Acionamento" },
  2: { title: "1ª Escalação" },
  3: { title: "2ª Escalação" },
  4: { title: "3ª Escalação" },
  5: { title: "4ª Escalação" },
};

const LEVEL_COLORS = {
  1: { bg: "bg-blue-500/10", border: "border-blue-500/30", text: "text-blue-700 dark:text-blue-400" },
  2: { bg: "bg-yellow-500/10", border: "border-yellow-500/30", text: "text-yellow-700 dark:text-yellow-400" },
  3: { bg: "bg-orange-500/10", border: "border-orange-500/30", text: "text-orange-700 dark:text-orange-400" },
  4: { bg: "bg-red-500/10", border: "border-red-500/30", text: "text-red-700 dark:text-red-400" },
  5: { bg: "bg-purple-600/10", border: "border-purple-600/30", text: "text-purple-700 dark:text-purple-400" },
};

export const ChamadoDetailsModal = ({ isOpen, onClose, alertData }: ChamadoDetailsModalProps) => {
  const { timers } = useWebsocketTimers();

  if (!alertData) return null;

  const formatDate = (dateString: string) => {
    if (!dateString || dateString === '' || dateString === 'null' || dateString === 'undefined') {
      return '-';
    }
    try {
      let date: Date;
      const cleanString = String(dateString).trim();

      if (/^\d{13}$/.test(cleanString)) {
        date = new Date(parseInt(cleanString));
      } else if (/^\d{10}$/.test(cleanString)) {
        date = new Date(parseInt(cleanString) * 1000);
      } else if (/^\d{2}\/\d{2}\/\d{4}/.test(cleanString)) {
        const parts = cleanString.split(' ');
        const datePart = parts[0];
        const timePart = parts[1] || '00:00:00';
        const [day, month, year] = datePart.split('/');
        const [hour, minute, second] = timePart.split(':');

        date = new Date(
          parseInt(year),
          parseInt(month) - 1,
          parseInt(day),
          parseInt(hour || '0'),
          parseInt(minute || '0'),
          parseInt(second || '0')
        );
      } else {
        date = new Date(cleanString);
      }

      if (isNaN(date.getTime())) return cleanString;

      return date.toLocaleString('pt-BR', {
        day: '2-digit',
        month: '2-digit',
        year: 'numeric',
        hour: '2-digit',
        minute: '2-digit',
        second: '2-digit',
      });
    } catch {
      return String(dateString);
    }
  };

  const getSeverityColor = (severity: string) => {
    return severity.includes('4')
      ? 'bg-destructive text-destructive-foreground'
      : 'bg-yellow-500 text-yellow-950';
  };

  // gera histórico direto do estado timers
  const historicoAcionamentos = useMemo(() => {
    const timerState = timers.get(parseInt(alertData.chamado));
    if (!timerState) return [];

    const historico = [];
    for (let nivel = 1; nivel <= 5; nivel++) {
      const operador = timerState[`level${nivel}_operador`] || '';
      const pessoaAcionada = timerState[`level${nivel}_pessoaAcionada`] || '';
      const status = timerState[`level${nivel}_statusAcionamento`] || '';
      const observacao = timerState[`level${nivel}_observacao`] || '';
      const dataHora = timerState[`level${nivel}_dataHora`] || '';
      const updatedAt = timerState[`level${nivel}_updatedAt`] || '';

      if (operador || pessoaAcionada || status || observacao || dataHora) {
        historico.push({
          operador,
          pessoaAcionada,
          status,
          observacao,
          dataHora,
          updatedAt: formatDate(updatedAt),
          nivel,
        });
      }
    }
    return historico;
  }, [alertData.chamado, timers]);

  return (
    <Dialog open={isOpen} onOpenChange={onClose}>
      <DialogContent className="max-w-5xl max-h-[85vh] bg-gradient-to-br from-background to-background/95 border-2 border-primary/20 shadow-2xl">
        <DialogHeader className="pb-6 border-b border-primary/10">
          <DialogTitle className="text-2xl font-bold flex items-center gap-3 bg-gradient-to-r from-primary to-primary/80 bg-clip-text text-transparent">
            <div className="p-2 rounded-lg bg-primary/10 text-primary">
              <FileText className="h-6 w-6" />
            </div>
            Detalhes do Chamado - {alertData.chamado}
          </DialogTitle>
        </DialogHeader>

        <ScrollArea className="max-h-[calc(85vh-140px)] pr-4">
          <div className="space-y-8">
            {/* Histórico */}
            <Accordion type="single" collapsible className="w-full">
              <AccordionItem value="historico" className="border-2 border-border rounded-lg bg-card">
                <AccordionTrigger className="px-6 py-4">
                  <div className="flex items-center gap-3">
                    <History className="h-6 w-6 text-primary" />
                    <span className="text-xl font-semibold">Histórico de Acionamentos</span>
                    <Badge variant="secondary" className="ml-2">
                      {historicoAcionamentos.length} registro(s)
                    </Badge>
                  </div>
                </AccordionTrigger>
                <AccordionContent className="px-6 pb-6 pt-2">
                  {historicoAcionamentos.length > 0 ? (
                    <div className="space-y-4">
                      {[...historicoAcionamentos]
                        .sort((a, b) => b.nivel - a.nivel)
                        .map((h, idx) => {
                          const levelColor = LEVEL_COLORS[h.nivel as keyof typeof LEVEL_COLORS] || LEVEL_COLORS[1];
                          const StatusIcon = h.status === 'atendido' ? CheckCircle2 : XCircle;
                          const statusColor = h.status === 'atendido' ? 'text-green-500' : 'text-red-500';
                          const statusBg = h.status === 'atendido' ? 'bg-green-500/10' : 'bg-red-500/10';

                          return (
                            <div key={idx} className="relative flex gap-4 group">
                              <div className={cn("w-12 h-12 flex items-center justify-center rounded-xl font-bold border shadow-sm", levelColor.bg, levelColor.border, levelColor.text)}>
                                {h.nivel}
                              </div>
                              <div className="flex-1 bg-background rounded-xl border p-5 shadow-sm">
                                <div className="flex justify-between items-start">
                                  <div className="space-y-3">
                                    <div className="flex items-center gap-3">
                                      <User className="h-4 w-4 text-primary" />
                                      <span className="font-semibold">{h.operador}</span>
                                    </div>
                                    <div className="flex items-center gap-3">
                                      <Phone className="h-4 w-4 text-primary" />
                                      <span className="font-semibold">{h.pessoaAcionada}</span>
                                    </div>
                                  </div>
                                  <div className={cn("flex items-center gap-2 px-3 py-1.5 rounded-full", statusBg)}>
                                    <StatusIcon className={cn("h-4 w-4", statusColor)} />
                                    <span className={cn("text-sm font-medium capitalize", statusColor)}>
                                      {h.status === 'atendido' ? 'Atendido' : 'Não Atendido'}
                                    </span>
                                  </div>
                                </div>
                                {h.observacao && (
                                  <div className="mt-4 border-t pt-4 text-sm text-muted-foreground">
                                    <MessageSquare className="h-3 w-3 inline mr-2" />
                                    {h.observacao}
                                  </div>
                                )}
                                <div className="mt-2 text-xs text-muted-foreground flex gap-2 items-center">
                                  <Calendar className="h-3 w-3" />
                                  {h.updatedAt}
                                </div>
                              </div>
                            </div>
                          );
                        })}
                    </div>
                  ) : (
                    <div className="flex flex-col items-center justify-center py-12 space-y-4">
                      <History className="h-8 w-8 text-muted-foreground" />
                      <p className="text-sm text-muted-foreground">Nenhum acionamento registrado.</p>
                    </div>
                  )}
                </AccordionContent>
              </AccordionItem>
            </Accordion>

            {/* Informações básicas */}
            <div className="grid grid-cols-1 md:grid-cols-2 gap-8">
              <div className="p-6 bg-card rounded-xl border">
                <h3 className="text-lg font-bold mb-4 flex items-center gap-2">
                  <Tag className="h-4 w-4" /> Informações Básicas
                </h3>
                <p><b>Chamado:</b> #{alertData.chamado}</p>
                <p><b>Grupo:</b> {alertData.grupo_chamado}</p>
                <p><b>Classificação:</b> {alertData.tipo_chamado}</p>
              </div>
              <div className="p-6 bg-card rounded-xl border">
                <h3 className="text-lg font-bold mb-4 flex items-center gap-2">
                  <Clock className="h-4 w-4" /> Temporização
                </h3>
                <p><b>Abertura:</b> {formatDate(alertData.abertura_chamado)}</p>
                <p><b>Status:</b> {alertData.status_chamado}</p>
                <p><b>Severidade:</b> <Badge className={getSeverityColor(alertData.severidade_chamado)}>{alertData.severidade_chamado}</Badge></p>
              </div>
            </div>

            {/* Resumo */}
            <div className="p-6 bg-card rounded-xl border">
              <h3 className="text-lg font-bold mb-4 flex items-center gap-2">
                <FileText className="h-4 w-4" /> Resumo
              </h3>
              <p>{alertData.resumo_chamado}</p>
            </div>
          </div>
        </ScrollArea>
      </DialogContent>
    </Dialog>
  );
};

import React, { useState, useCallback } from 'react';
import { Dialog, DialogContent, DialogHeader, DialogTitle } from '@/components/ui/dialog';
import { Button } from '@/components/ui/button';
import { Textarea } from '@/components/ui/textarea';
import { Input } from '@/components/ui/input';
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';
import { Label } from '@/components/ui/label';
import { Badge } from '@/components/ui/badge';
import { Separator } from '@/components/ui/separator';
import { Collapsible, CollapsibleContent, CollapsibleTrigger } from '@/components/ui/collapsible';
import { Card, CardContent, CardHeader } from '@/components/ui/card';
import { ProgressIndicator } from '@/components/ui/progress-indicator';
import { TimerDisplay } from '@/components/ui/timer-display';
import { ArrowRight, CheckCircle, X, AlertTriangle, Lightbulb, MessageSquare, Timer, Building2, Users, Clock, User, Phone, ChevronDown, ChevronUp, History, Calendar } from 'lucide-react';
import { toast } from '@/hooks/use-toast';
import { cn } from '@/lib/utils';

interface ModernTimerModalProps {
  isOpen: boolean;
  onClose: () => void;
  chamado: number;
  currentLevel: number;
  remainingTime: number;
  chamadoData?: any;
  formatTime: (seconds: number) => string;
  onNextLevel: (chamado: number, level: number, observacao: string) => void;
  updateStatusFinal: (chamado: number, levelStatusKey: string, status: string) => void;
  updateObservacao: (chamado: number, level: number, observacao: string) => void;
  updateAcionamento: (chamado: number, level: number, operador: string, pessoaAcionada: string, statusAcionamento: string) => void;
  historicoAcionamentos?: {
    operador: string;
    pessoaAcionada: string;
    status: string;
    observacao: string;
    dataHora: string;
    updatedAt: string;
    nivel: number;
  }[];
}

const LEVEL_INFO = {
  1: {
    title: "Primeiro Acionamento",
    subtitle: "",
    nextAction: "Avan√ßar para 1¬™ Escala√ß√£o",
    icon: Clock,
    color: "from-primary to-primary/80",
    bgColor: "bg-primary/5 border-primary/20",
    description: "Atendimento Inicial da Equipe"
  },
  2: {
    title: "1¬™ Escala√ß√£o",
    subtitle: "",
    nextAction: "Avan√ßar para 2¬™ Escala√ß√£o",
    icon: Users,
    color: "from-accent to-accent/80",
    bgColor: "bg-accent/5 border-accent/20",
    description: "Acionamento do Gestor de Incidente ou Plantonista"
  },
  3: {
    title: "2¬™ Escala√ß√£o",
    subtitle: "",
    nextAction: "Avan√ßar para 3¬™ Escala√ß√£o",
    icon: Building2,
    color: "from-secondary to-secondary/80",
    bgColor: "bg-secondary/5 border-secondary/20",
    description: "Acionamento do Coordenador"
  },
  4: {
    title: "3¬™ Escala√ß√£o",
    subtitle: "",
    nextAction: "Avan√ßar para 4¬™ Escala√ß√£o",
    icon: Users,
    color: "from-muted to-muted/80",
    bgColor: "bg-muted/5 border-muted/20",
    description: "Acionamento do Gerente"
  },
  5: {
    title: "4¬™ Escala√ß√£o",
    subtitle: "",
    nextAction: "Finalizar Chamado",
    icon: Building2,
    color: "from-destructive to-destructive/80",
    bgColor: "bg-destructive/5 border-destructive/20",
    description: "Acionamento do Kleber Costa"
  }
};

const HistoricoCard: React.FC<{ historico: any; index: number }> = ({ historico, index }) => {
  const levelInfo = LEVEL_INFO[historico.nivel as keyof typeof LEVEL_INFO];
  const LevelIcon = levelInfo?.icon || Clock;
  
  return (
    <Card className="hover:shadow-md transition-all duration-200 border-l-4" style={{ borderLeftColor: `hsl(var(--${historico.nivel <= 2 ? 'primary' : historico.nivel <= 3 ? 'accent' : 'destructive'}))` }}>
      <CardHeader className="pb-3">
        <div className="flex items-start justify-between">
          <div className="flex items-center gap-3">
            <div className={cn(
              "p-2 rounded-lg",
              `bg-${historico.nivel <= 2 ? 'primary' : historico.nivel <= 3 ? 'accent' : 'destructive'}/10`
            )}>
              <LevelIcon className="h-4 w-4" />
            </div>
            <div>
              <div className="font-semibold text-sm">
                {levelInfo?.title || `N√≠vel ${historico.nivel}`}
              </div>
              <div className="text-xs text-muted-foreground">
                {historico.updatedAt}
              </div>
            </div>
          </div>
          <Badge 
            variant={historico.status === 'atendido' ? 'default' : 'destructive'}
            className="text-xs"
          >
            {historico.status === 'atendido' ? '‚úÖ Atendido' : '‚ùå N√£o Atendido'}
          </Badge>
        </div>
      </CardHeader>
      <CardContent className="pt-0 space-y-2">
        <div className="grid grid-cols-2 gap-3 text-sm">
          <div>
            <span className="text-muted-foreground">Operador:</span>
            <p className="font-medium truncate">{historico.operador}</p>
          </div>
          <div>
            <span className="text-muted-foreground">Pessoa Acionada:</span>
            <p className="font-medium truncate">{historico.pessoaAcionada}</p>
          </div>
        </div>
        {historico.observacao && (
          <div className="text-sm">
            <span className="text-muted-foreground">Observa√ß√£o:</span>
            <p className="text-muted-foreground mt-1 line-clamp-2">
              {historico.observacao}
            </p>
          </div>
        )}
      </CardContent>
    </Card>
  );
};

export const ModernTimerModal: React.FC<ModernTimerModalProps> = ({
  isOpen,
  onClose,
  chamado,
  currentLevel,
  remainingTime,
  chamadoData,
  formatTime,
  onNextLevel,
  updateStatusFinal,
  updateObservacao,
  updateAcionamento,
  historicoAcionamentos = []
}) => {
  const [observacao, setObservacao] = useState('');
  const [pessoaAcionada, setPessoaAcionada] = useState('');
  const [statusAtendimento, setStatusAtendimento] = useState('');
  const [operador, setOperador] = useState('');
  const [isProcessing, setIsProcessing] = useState(false);
  const [isHistoricoOpen, setIsHistoricoOpen] = useState(false);
  
  const levelStatusKey = `level${currentLevel}_status`;
  const [finalizado, setFinalizado] = useState(
    chamadoData?.statusFinal === "finished" || chamadoData?.[levelStatusKey] === "finished"
  );

  React.useEffect(() => {
    setFinalizado(
      chamadoData?.statusFinal === "finished" || chamadoData?.[levelStatusKey] === "finished"
    );
  }, [chamadoData, levelStatusKey]);

  const levelInfo = finalizado
    ? {
      title: "Chamado Finalizado",
      subtitle: "Processo encerrado com sucesso",
      description: "O chamado foi resolvido e encerrado",
      icon: CheckCircle,
      color: "from-primary to-primary/80",
      bgColor: "bg-primary/5 border-primary/20",
      nextAction: "Finalizado"
    }
    : LEVEL_INFO[currentLevel as keyof typeof LEVEL_INFO];

  const validateForm = useCallback(() => {
    const errors = [];

    if (!operador) {
      errors.push("Operador √© obrigat√≥rio");
    }

    if (!pessoaAcionada.trim()) {
      errors.push("Nome da pessoa acionada √© obrigat√≥rio");
    } else if (pessoaAcionada.trim().length < 2) {
      errors.push("Nome deve ter pelo menos 2 caracteres");
    }

    if (!statusAtendimento) {
      errors.push("Status de atendimento √© obrigat√≥rio");
    }

    if (!observacao.trim()) {
      errors.push("Observa√ß√µes s√£o obrigat√≥rias");
    } else if (observacao.trim().length < 10) {
      errors.push("Observa√ß√µes devem ter pelo menos 10 caracteres");
    }

    if (errors.length > 0) {
      toast({
        title: "‚ö†Ô∏è Campos Obrigat√≥rios",
        description: errors.join(". "),
        variant: "destructive",
      });
      return false;
    }

    return true;
  }, [operador, pessoaAcionada, statusAtendimento, observacao]);

  const handleAction = useCallback(async (action: 'next' | 'finish') => {
    if (!validateForm()) return;

    setIsProcessing(true);

    try {
      const fullObservacao = `Operador: ${operador}\nPessoa Acionada: ${pessoaAcionada.trim()}\nStatus: ${statusAtendimento}\n\nDetalhes: ${observacao.trim()}`;

      if (finalizado && action !== 'finish') {
        toast({
          title: "‚ö†Ô∏è Chamado j√° finalizado",
          description: "N√£o √© poss√≠vel alterar n√≠veis pois o chamado est√° finalizado",
          variant: "destructive",
        });
        return;
      }

      switch (action) {
        case 'next': {
          const updates = [
            updateStatusFinal(chamado, levelStatusKey, "finished"),
            updateObservacao(chamado, currentLevel, observacao || ""),
            updateAcionamento(chamado, currentLevel, operador || "", pessoaAcionada || "", statusAtendimento || "")
          ];

          if (currentLevel >= 5) {
            await Promise.all(updates);
            toast({
              title: "‚úÖ Chamado Finalizado",
              description: `Chamado ${chamado} foi finalizado com sucesso!`
            });
          } else {
            await Promise.all(updates);
            await onNextLevel(chamado, currentLevel + 1, observacao || "");

            const nextLevelInfo = LEVEL_INFO[(currentLevel + 1) as keyof typeof LEVEL_INFO];
            toast({
              title: `üöÄ ${nextLevelInfo?.title} Iniciado`,
              description: `Timer de 20 minutos iniciado para ${nextLevelInfo?.title}`,
            });
          }
          break;
        }

        case 'finish': {
          const updates = [
            updateStatusFinal(chamado, levelStatusKey, "finished"),
            updateObservacao(chamado, currentLevel, observacao || ""),
            updateAcionamento(chamado, currentLevel, operador || "", pessoaAcionada || "", statusAtendimento || "")
          ];

          await Promise.all(updates);
          setFinalizado(true);
          toast({
            title: "‚úÖ Chamado Finalizado",
            description: `Chamado ${chamado} foi finalizado com sucesso!`,
          });
          break;
        }
      }

      // Reset form
      setObservacao('');
      setPessoaAcionada('');
      setOperador('');
      setStatusAtendimento('');
      onClose();

    } catch (error) {
      console.error("‚ùå Erro no handleAction:", error);
      toast({
        title: "‚ùå Erro na Opera√ß√£o",
        description: "Ocorreu um erro ao processar a a√ß√£o. Verifique os logs.",
        variant: "destructive",
      });
    } finally {
      setIsProcessing(false);
    }
  }, [validateForm, updateAcionamento, pessoaAcionada, statusAtendimento, observacao, currentLevel, chamado, onNextLevel, onClose, updateStatusFinal, updateObservacao, finalizado, levelStatusKey]);

  if (!levelInfo) return null;

  const LevelIcon = levelInfo.icon;
  const isFormValid = operador && pessoaAcionada.trim().length >= 2 && statusAtendimento && observacao.trim().length >= 10;

  return (
    <Dialog open={isOpen} onOpenChange={onClose}>
      <DialogContent className="sm:max-w-4xl max-h-[90vh] overflow-y-auto">
        {/* Header Section */}
        <DialogHeader className="relative pb-6">
          <div className={cn(
            "absolute inset-0 bg-gradient-to-r opacity-5 rounded-t-lg",
            levelInfo.color
          )} />

          <div className="relative z-10 space-y-4">
            <div className="flex flex-col lg:flex-row lg:items-center lg:justify-between gap-4">
              <div className="flex items-center gap-4">
                <div className={cn(
                  "p-3 rounded-xl bg-gradient-to-r",
                  levelInfo.color,
                  "text-white shadow-lg"
                )}>
                  <LevelIcon className="h-8 w-8" />
                </div>

                <div className="space-y-1">
                  <DialogTitle className="text-2xl font-bold">
                    {levelInfo.title}
                  </DialogTitle>
                  <p className="text-muted-foreground">
                    {levelInfo.description}
                  </p>
                  <div className="flex items-center gap-2">
                    <Badge variant="outline" className="text-xs">
                      Chamado #{chamado}
                    </Badge>
                    <Badge
                      variant={finalizado ? "default" : "secondary"}
                      className="text-xs"
                    >
                      {finalizado ? "Finalizado" : "Em Andamento"}
                    </Badge>
                  </div>
                </div>
              </div>
            </div>
          </div>
        </DialogHeader>

        <div className="space-y-6">
          {/* Hist√≥rico de Acionamentos - Collapsible */}
          {historicoAcionamentos.length > 0 && (
            <Collapsible 
              open={isHistoricoOpen} 
              onOpenChange={setIsHistoricoOpen}
              className="space-y-2"
            >
              <CollapsibleTrigger asChild>
                <Button 
                  variant="outline" 
                  className="w-full justify-between h-12 hover:bg-muted/50"
                >
                  <div className="flex items-center gap-2">
                    <History className="h-4 w-4" />
                    <span className="font-medium">Hist√≥rico de Acionamentos</span>
                    <Badge variant="secondary" className="ml-2">
                      {historicoAcionamentos.length}
                    </Badge>
                  </div>
                  {isHistoricoOpen ? (
                    <ChevronUp className="h-4 w-4" />
                  ) : (
                    <ChevronDown className="h-4 w-4" />
                  )}
                </Button>
              </CollapsibleTrigger>
              
              <CollapsibleContent className="space-y-3">
                <div className="grid gap-3 max-h-64 overflow-y-auto pr-2">
                  {historicoAcionamentos.map((historico, index) => (
                    <HistoricoCard 
                      key={index} 
                      historico={historico} 
                      index={index} 
                    />
                  ))}
                </div>
              </CollapsibleContent>
            </Collapsible>
          )}

          {/* Timer and Progress Section */}
          <div className="grid grid-cols-1 xl:grid-cols-2 gap-6">
            <TimerDisplay
              remainingTime={remainingTime}
              formatTime={formatTime}
              className="w-full"
            />
            <ProgressIndicator
              currentLevel={currentLevel}
              className="w-full"
            />
          </div>

          <Separator />

          {/* Required Information Section */}
          <div className="space-y-4">
            <div className="flex items-center gap-2">
              <Phone className="h-5 w-5 text-primary" />
              <Label className="text-lg font-semibold">
                Dados do Acionamento
              </Label>
            </div>

            <div className="grid grid-cols-1 md:grid-cols-3 gap-4">
              {/* Operador */}
              <div className="space-y-2">
                <Label htmlFor="operador" className="text-sm font-medium flex items-center gap-2">
                  <User className="h-3 w-3" />
                  Operador
                  <span className="text-destructive">*</span>
                </Label>
                <Select
                  value={operador}
                  onValueChange={setOperador}
                  disabled={isProcessing || finalizado}
                >
                  <SelectTrigger className={cn(
                    "border-2 focus:border-primary transition-colors",
                    operador && "border-primary/50"
                  )}>
                    <SelectValue placeholder="Selecione o operador" />
                  </SelectTrigger>
                  <SelectContent>
                    <SelectItem value="ALBERTO LAGES">ALBERTO LAGES</SelectItem>
                    <SelectItem value="ALEXANDRE LIMA SILVA">ALEXANDRE LIMA SILVA</SelectItem>
                    <SelectItem value="ANSELMO ALVES PESSOA">ANSELMO ALVES PESSOA</SelectItem>
                    <SelectItem value="BRUNO MAZZO FEITOSA">BRUNO MAZZO FEITOSA</SelectItem>
                    <SelectItem value="CAIO CESAR ALVES DA LUZ">CAIO CESAR ALVES DA LUZ</SelectItem>
                    <SelectItem value="CLAUDIA ZORZAN DE CAMARGO">CLAUDIA ZORZAN DE CAMARGO</SelectItem>
                    <SelectItem value="JEFFERSON DA SILVA SOUZA">JEFFERSON DA SILVA SOUZA</SelectItem>
                    <SelectItem value="JULIANA BEATRIZ DE ANGELO">JULIANA BEATRIZ DE ANGELO</SelectItem>
                    <SelectItem value="MARIA LUIZA DOS SANTOS COIADO">MARIA LUIZA DOS SANTOS COIADO</SelectItem>
                    <SelectItem value="RAFAEL NUNES PACHECO">RAFAEL NUNES PACHECO</SelectItem>
                    <SelectItem value="SERGIO ANTONIO DA SILVA">SERGIO ANTONIO DA SILVA</SelectItem>
                    <SelectItem value="VICTOR HUGO ALMEIDA FERNANDES">VICTOR HUGO ALMEIDA FERNANDES</SelectItem>
                    <SelectItem value="VINICIUS RHYU VITURINO SAITO">VINICIUS RHYU VITURINO SAITO</SelectItem>
                  </SelectContent>
                </Select>
              </div>

              {/* Nome da Pessoa Acionada */}
              <div className="space-y-2">
                <Label htmlFor="pessoa-acionada" className="text-sm font-medium flex items-center gap-2">
                  <User className="h-3 w-3" />
                  Pessoa Acionada
                  <span className="text-destructive">*</span>
                </Label>
                <Input
                  id="pessoa-acionada"
                  type="text"
                  value={pessoaAcionada}
                  onChange={(e) => setPessoaAcionada(e.target.value)}
                  placeholder="Nome da pessoa acionada"
                  className={cn(
                    "border-2 focus:border-primary transition-colors",
                    pessoaAcionada.trim().length >= 2 && "border-primary/50"
                  )}
                  disabled={isProcessing || finalizado}
                  maxLength={100}
                />
              </div>

              {/* Status do Atendimento */}
              <div className="space-y-2">
                <Label htmlFor="status-atendimento" className="text-sm font-medium flex items-center gap-2">
                  <CheckCircle className="h-3 w-3" />
                  Status do Atendimento
                  <span className="text-destructive">*</span>
                </Label>
                <Select
                  value={statusAtendimento}
                  onValueChange={setStatusAtendimento}
                  disabled={isProcessing || finalizado}
                >
                  <SelectTrigger className={cn(
                    "border-2 focus:border-primary transition-colors",
                    statusAtendimento && "border-primary/50"
                  )}>
                    <SelectValue placeholder="Status do atendimento" />
                  </SelectTrigger>
                  <SelectContent>
                    <SelectItem value="atendido">‚úÖ Atendido</SelectItem>
                    <SelectItem value="nao-atendido">‚ùå N√£o Atendido</SelectItem>
                  </SelectContent>
                </Select>
              </div>
            </div>
          </div>

          <Separator />

          {/* Observations Section */}
          <div className="space-y-4">
            <div className="flex items-center gap-2">
              <MessageSquare className="h-5 w-5 text-primary" />
              <Label htmlFor="observacao" className="text-lg font-semibold">
                Observa√ß√µes
              </Label>
            </div>

            <Textarea
              id="observacao"
              value={observacao}
              onChange={(e) => setObservacao(e.target.value)}
              placeholder="Descreva as informa√ß√µes do acionamento..."
              rows={4}
              className={cn(
                "border-2 focus:border-primary transition-colors resize-none",
                observacao.trim().length >= 10 && "border-primary/50"
              )}
              disabled={isProcessing || finalizado}
              maxLength={1000}
            />

            <div className="flex justify-between items-center text-xs">
              <span className="text-muted-foreground">
                {observacao.length}/1000 caracteres
              </span>
              {observacao.trim().length >= 10 && (
                <div className="flex items-center gap-1 text-primary">
                  <CheckCircle className="h-3 w-3" />
                  <span>V√°lido</span>
                </div>
              )}
            </div>
          </div>

          <Separator />

          {/* Action Buttons */}
          <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
            {/* Finish Button */}
            <Button
              variant="secondary"
              size="lg"
              onClick={() => handleAction('finish')}
              disabled={!isFormValid || isProcessing || finalizado}
              className="h-16"
            >
              <CheckCircle className="h-5 w-5 mr-2" />
              <div className="text-left">
                <div className="font-semibold">Finalizar Acompanhamento</div>
                <div className="text-xs opacity-80">Encerrar chamado</div>
              </div>
            </Button>

            {/* Next Level Button */}
            <Button
              variant="default"
              size="lg"
              onClick={() => handleAction('next')}
              disabled={!isFormValid || isProcessing || finalizado}
              className="h-16"
            >
              {finalizado ? (
                <>
                  <CheckCircle className="h-5 w-5 mr-2" />
                  <div className="text-left">
                    <div className="font-semibold">Finalizado</div>
                    <div className="text-xs opacity-80">Chamado encerrado</div>
                  </div>
                </>
              ) : currentLevel >= 5 ? (
                <>
                  <CheckCircle className="h-5 w-5 mr-2" />
                  <div className="text-left">
                    <div className="font-semibold">Concluir Final</div>
                    <div className="text-xs opacity-80">√öltima escala√ß√£o</div>
                  </div>
                </>
              ) : (
                <>
                  <ArrowRight className="h-5 w-5 mr-2" />
                  <div className="text-left">
                    <div className="font-semibold">{levelInfo.nextAction}</div>
                    <div className="text-xs opacity-80">Pr√≥xima escala√ß√£o</div>
                  </div>
                </>
              )}
            </Button>
          </div>

          {/* Processing Indicator */}
          {isProcessing && (
            <div className="fixed inset-0 bg-background/80 backdrop-blur-sm flex items-center justify-center z-50">
              <Card className="p-6">
                <div className="flex items-center gap-3">
                  <div className="animate-spin rounded-full h-5 w-5 border-b-2 border-primary"></div>
                  <span className="font-medium">Processando...</span>
                </div>
              </Card>
            </div>
          )}
        </div>
      </DialogContent>
    </Dialog>
  );
};

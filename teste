import { useState, useEffect } from 'react';
import {
  Settings,
  Sun,
  Moon,
  AlertTriangle,
  FileText,
  MessageSquare,
  BookOpen
} from 'lucide-react';
import { Button } from '@/components/ui/button';
import { toast } from '@/hooks/use-toast';
import { MonitoringCards } from './MonitoringCards';
import { ActionTable } from './ActionTable';
import { CriticalIncidents } from './CriticalIncidents';
import { RDMTracker } from './RDMTracker';
import { ShiftNotes } from './ShiftNotes';
import { WebhookConfig } from './WebhookConfig';
import { InstructionsSection } from './InstructionsSection';
import { Sheet, SheetContent } from "@/components/ui/sheet";
import MaintenancePage from './MaintenancePage';
import { useChatAcionados } from '@/hooks/use-chat-acionados';

export interface AlertData {
  id: string;
  chamado: string;
  tipo_chamado: string;
  grupo_chamado: string;
  status_chamado: string;
  abertura_chamado: string;
  resumo_chamado: string;
  severidade_chamado: string;
  acionado: string;
  chat: boolean;
}

const Dashboard = () => {
  const [isDarkMode, setIsDarkMode] = useState(true);
  const [showWebhookConfig, setShowWebhookConfig] = useState(false);
  const [alertData, setAlertData] = useState<AlertData[]>([]);
  const [loading, setLoading] = useState(false);
  const [activeSection, setActiveSection] = useState<'incidents' | 'rdm' | 'notes' | 'instructions' | null>(null);
  const [filter, setFilter] = useState<string | null>(null);
  const [websocket, setWebsocket] = useState<WebSocket | null>(null);
  
  const { isAcionado } = useChatAcionados();

  const connectWebSocket = () => {
    setLoading(true);
    
    const ws = new WebSocket('wss://wpo4vov2k8.execute-api.us-east-1.amazonaws.com/prod/');
    
    ws.onopen = () => {
      console.log('WebSocket conectado');
      setLoading(false);
      toast({
        title: "Conexão estabelecida",
        description: "WebSocket conectado com sucesso",
      });
    };
    
    ws.onmessage = (event) => {
      try {
        console.log('Mensagem recebida do WebSocket:', event.data);

        const data = JSON.parse(event.data);
        console.log("Dados parseados:", data);

        // Garante que sempre teremos um array
        const apiData = Array.isArray(data)
          ? data
          : data.body
            ? JSON.parse(data.body)
            : data.dados || [];

        console.log("Array final de dados:", apiData);

        if (!apiData || apiData.length === 0) {
          console.log("Nenhum dado encontrado no WebSocket");
          return;
        }

        const transformedData: AlertData[] = apiData.map((item: any, index: number) => {
          console.log('Item recebido para transformação:', item);
          return {
            id: `alert-${index}`,
            tipo_chamado: item.tipo_chamado || item.TipoChamado || 'N/A',
            chamado: item.chamado || item.Chamado || 'N/A',
            grupo_chamado: item.grupo_chamado || 'N/A',
            status_chamado: item.status_chamado || 'N/A',
            abertura_chamado: item.dat_abertura_chamado || item.abertura_chamado || item.data_abertura || '',
            resumo_chamado: item.resumo_chamado || 'Título não disponível',
            severidade_chamado: item.severidade_chamado || item.Severidade || 'N/A',
            acionado: item.acionado || 'N/A',
            chat: false,
          };
        });

        // Atualiza estado direto, ignorando filtros temporariamente
        setAlertData(transformedData);

        // Toca alerta se houver algum não acionado
        const unacknowledged = transformedData.filter(alert => !alert.acionado);
        if (unacknowledged.length > 0) {
          playAlertSound();
        }
      } catch (error) {
        console.error('Erro ao processar dados do WebSocket:', error);
        toast({
          title: "Erro ao processar dados",
          description: "Erro ao interpretar dados do WebSocket",
          variant: "destructive",
        });
      }
    };
    
    ws.onerror = (error) => {
      console.error('Erro no WebSocket:', error);
      setLoading(false);
      toast({
        title: "Erro de conexão",
        description: "Erro na conexão WebSocket",
        variant: "destructive",
      });
    };
    
    ws.onclose = (event) => {
      console.log('WebSocket desconectado, código:', event.code, 'razão:', event.reason);
      setLoading(false);
      
      if (event.code !== 1000) {
        toast({
          title: "Conexão perdida",
          description: "Tentando reconectar em 5 segundos...",
          variant: "destructive",
        });
        
        setTimeout(() => {
          if (!websocket || websocket.readyState === WebSocket.CLOSED) {
            connectWebSocket();
          }
        }, 5000);
      }
    };
    
    setWebsocket(ws);
    return ws;
  };

  const playAlertSound = () => {
    const audio = new Audio('data:audio/wav;base64,UklGRnoGAABXQVZFZm10IBAAAAABAAEAQB8AAEAfAAABAAgAZGF0YQoGAACBhYqFbF1fdJivrJBhNjVgodDbq2EcBj+a2/LDciUFLIHO8tiJNwgZaLvt559NEAxQp+PwtmMcBjiR1/LMeSwFJHfH8N2QQAoUXrTp66hVFApGn+Dqu2sgBDR+w/PCaWEbEBOa5rWgdyoEKAA=');
    audio.play().catch(() => {
      console.log('Alert sound could not be played');
    });
  };

  const toggleTheme = () => {
    setIsDarkMode(!isDarkMode);
    if (isDarkMode) {
      document.documentElement.classList.remove('dark');
      document.documentElement.classList.add('light');
    } else {
      document.documentElement.classList.remove('light');
      document.documentElement.classList.add('dark');
    }
  };

  const updateAlertAcknowledgment = (alertId: string, acknowledged: boolean) => {
    setAlertData(prev =>
      prev.map(alert =>
        alert.id === alertId
          ? { ...alert, chat: acknowledged }
          : alert
      )
    );
  };

  useEffect(() => {
    connectWebSocket();
    return () => {
      if (websocket) websocket.close(1000, 'Component unmounting');
    };
  }, []);

  useEffect(() => {
    document.documentElement.classList.add('dark');
  }, []);

  const sidebarItems = [
    { title: "Incidentes Críticos", icon: AlertTriangle, key: 'incidents' as const },
    { title: "Acompanhamento RDMs", icon: FileText, key: 'rdm' as const },
    { title: "Recados do Turno", icon: MessageSquare, key: 'notes' as const },
    { title: "Instruções Operacionais", icon: BookOpen, key: 'instructions' as const },
  ];

  // DEBUG: ignorando filtros temporariamente
  const filteredData = alertData;

  return (
    <div className="min-h-screen flex bg-background text-foreground">
      <div className="flex-1 flex flex-col">
        <div className="bg-dashboard-bg border-b border-border p-6 text-center">
          <h1 className="text-3xl font-bold mb-2" style={{ color: isDarkMode ? '#d2d3d8ff' : '#4a90e2' }}>
            PAINEL CIOPS - MONITORAÇÃO
          </h1>
          <div className="text-sm">
            <span className={`inline-flex items-center gap-1 ${
              websocket?.readyState === WebSocket.OPEN ? 'text-green-500' :
              websocket?.readyState === WebSocket.CONNECTING ? 'text-yellow-500' :
              'text-red-500'
            }`}>
              <div className={`w-2 h-2 rounded-full ${
                websocket?.readyState === WebSocket.OPEN ? 'bg-green-500' :
                websocket?.readyState === WebSocket.CONNECTING ? 'bg-yellow-500' :
                'bg-red-500'
              }`}></div>
              {websocket?.readyState === WebSocket.OPEN ? 'WebSocket Conectado' :
               websocket?.readyState === WebSocket.CONNECTING ? 'Conectando...' :
               'WebSocket Desconectado'}
            </span>
          </div>
        </div>

        <div className="flex-1 bg-dashboard-bg">
          <div className="container mx-auto p-6 max-w-7xl">
            <div className="space-y-8">
              <div className="text-center">
                <MonitoringCards
                  alertData={alertData}
                  onFilterSelect={(filterKey) => setFilter(prev => prev === filterKey ? null : filterKey)}
                />
              </div>

              <ActionTable
                alertData={filteredData}
                onUpdateAcknowledgment={updateAlertAcknowledgment}
                loading={loading}
                websocket={websocket}
              />
            </div>
          </div>
        </div>
      </div>

      {/* Sidebar e Sheet permanecem iguais */}
      {/* ... */}
    </div>
  );
};

export default Dashboard;

MetricCard:
import { LucideIcon } from "lucide-react";
import { Card } from "@/components/ui/card";
import { Progress } from "@/components/ui/progress";
import { ArrowUp, ArrowDown } from "lucide-react";
import { cn } from "@/lib/utils";

interface MetricCardProps {
  title: string;
  value: string;
  trend?: "up" | "down";
  trendValue?: string;
  icon: LucideIcon;
  variant?: "primary" | "secondary" | "accent" | "success" | "warning";
  performance?: number;
}

const variantStyles = {
  primary: {
    iconBg: "bg-[hsl(var(--blue-medium))]/10",
    iconColor: "text-[hsl(var(--blue-medium))]",
    progressColor: "bg-[hsl(var(--blue-medium))]",
    trendBg: "bg-[hsl(var(--blue-soft))]",
  },
  secondary: {
    iconBg: "bg-[hsl(var(--blue-accent))]/10",
    iconColor: "text-[hsl(var(--blue-accent))]",
    progressColor: "bg-[hsl(var(--blue-accent))]",
    trendBg: "bg-[hsl(var(--blue-soft))]",
  },
  accent: {
    iconBg: "bg-[hsl(var(--blue-dark))]/10",
    iconColor: "text-[hsl(var(--blue-dark))]",
    progressColor: "bg-[hsl(var(--blue-dark))]",
    trendBg: "bg-[hsl(var(--neutral-100))]",
  },
  success: {
    iconBg: "bg-[hsl(var(--success-light))]",
    iconColor: "text-[hsl(var(--success))]",
    progressColor: "bg-[hsl(var(--success))]",
    trendBg: "bg-[hsl(var(--success-light))]",
  },
  warning: {
    iconBg: "bg-[hsl(var(--warning-light))]",
    iconColor: "text-[hsl(var(--warning))]",
    progressColor: "bg-[hsl(var(--warning))]",
    trendBg: "bg-[hsl(var(--warning-light))]",
  },
};

export const MetricCard = ({
  title,
  value,
  trend,
  trendValue,
  icon: Icon,
  variant = "primary",
  performance,
}: MetricCardProps) => {
  const styles = variantStyles[variant];

  return (
    <Card className="group relative overflow-hidden border-[hsl(var(--border))] bg-card transition-all duration-300 hover:shadow-[var(--shadow-lg)] hover:-translate-y-1">
      <div className="absolute inset-0 bg-gradient-to-br from-transparent via-transparent to-[hsl(var(--blue-soft))]/20 opacity-0 group-hover:opacity-100 transition-opacity duration-500" />
      
      <div className="relative p-6">
        <div className="flex items-start justify-between mb-4">
          <div className={cn(
            "p-3 rounded-xl transition-transform duration-300 group-hover:scale-110",
            styles.iconBg
          )}>
            <Icon className={cn("h-6 w-6", styles.iconColor)} />
          </div>
        </div>

        <div className="space-y-1 mb-4">
          <h3 className="text-sm font-medium text-muted-foreground tracking-wide uppercase">
            {title}
          </h3>
          <p className="text-3xl font-bold text-foreground tracking-tight">
            {value}
          </p>
        </div>

        {typeof performance === "number" && (
          <div className="space-y-2 pt-4 border-t border-[hsl(var(--border))]">
            <div className="flex items-center justify-between">
              <span className="text-xs font-medium text-muted-foreground uppercase tracking-wide">
                Performance
              </span>
              <span className={cn(
                "text-sm font-bold tabular-nums",
                styles.iconColor
              )}>
                {Math.round(performance)}%
              </span>
            </div>
            <div className="relative h-2 bg-[hsl(var(--neutral-100))] rounded-full overflow-hidden">
              <div
                className={cn(
                  "h-full rounded-full transition-all duration-1000 ease-out",
                  styles.progressColor
                )}
                style={{ width: `${performance}%` }}
              />
            </div>
          </div>
        )}
      </div>
    </Card>
  );
};


AreReport:
import { Card } from "@/components/ui/card";
import { cn } from "@/lib/utils";
import { CheckCircle2, Clock, AlertCircle, RotateCcw } from "lucide-react";

interface AreaReportProps {
  area: string;
  manager?: string;
  performance: number;
  revenue: string;
  status: "excellent" | "good" | "attention";
  rdmStats: {
    concluidas: number;
    emAndamento: number;
    abertas: number;
    rollback: number;
  };
  areaColor?: string;
  borderColor?: string;
  accentColor?: string;
}

const statusConfig = {
  excellent: {
    color: "text-[hsl(var(--success))]",
    bgColor: "bg-[hsl(var(--success-light))]",
    label: "Excelente",
  },
  good: {
    color: "text-[hsl(var(--blue-accent))]",
    bgColor: "bg-[hsl(var(--blue-soft))]",
    label: "Bom",
  },
  attention: {
    color: "text-[hsl(var(--warning))]",
    bgColor: "bg-[hsl(var(--warning-light))]",
    label: "Atenção",
  },
};

export const AreaReport = ({ area, manager: _manager, performance: _performance, revenue, status, rdmStats, areaColor = "blue-medium", borderColor, accentColor }: AreaReportProps) => {
  const statusStyle = statusConfig[status];

  return (
    <Card
      className="group relative overflow-hidden bg-card transition-all duration-300 hover:shadow-lg hover:-translate-y-1"
      style={{ borderColor: borderColor ?? "hsl(var(--border))", borderWidth: "2px" }}
    >
      <div 
        className="absolute inset-0 opacity-0 group-hover:opacity-60 transition-opacity duration-500" 
        style={{ background: `linear-gradient(135deg, transparent 0%, ${accentColor ?? "hsl(var(--blue-soft))"} 100%)` }}
      />
      
      <div className="relative p-5">
        {/* Header */}
        <div className="flex items-start justify-between mb-4">
          <div>
            <h3 className="text-lg font-bold text-foreground mb-1">{area}</h3>
          </div>
          <div className={cn("px-3 py-1 rounded-full text-xs font-semibold", statusStyle.bgColor, statusStyle.color)}>
            {statusStyle.label}
          </div>
        </div>

        {/* Revenue */}
        <div className="mb-4">
          <p className="text-2xl font-bold text-foreground">{revenue}</p>
          <p className="text-xs text-muted-foreground uppercase tracking-wide">RDMs</p>
        </div>

        {/* Performance section removed */}

        {/* RDM Stats */}
        <div className="grid grid-cols-2 gap-3 pt-4 border-t border-[hsl(var(--border))]">
          <div className="flex items-center gap-2">
            <CheckCircle2 className="h-4 w-4 text-[hsl(var(--success))]" />
            <div>
              <p className="text-sm font-bold text-foreground">{rdmStats.concluidas}</p>
              <p className="text-xs text-muted-foreground">Concluídas</p>
            </div>
          </div>
          <div className="flex items-center gap-2">
            <Clock className="h-4 w-4 text-[hsl(var(--warning))]" />
            <div>
              <p className="text-sm font-bold text-foreground">{rdmStats.emAndamento}</p>
              <p className="text-xs text-muted-foreground">Em Andamento</p>
            </div>
          </div>
          <div className="flex items-center gap-2">
            <AlertCircle className="h-4 w-4 text-[hsl(var(--blue-accent))]" />
            <div>
              <p className="text-sm font-bold text-foreground">{rdmStats.abertas}</p>
              <p className="text-xs text-muted-foreground">Abertas</p>
            </div>
          </div>
          <div className="flex items-center gap-2">
            <RotateCcw className="h-4 w-4 text-[hsl(var(--destructive))]" />
            <div>
              <p className="text-sm font-bold text-foreground">{rdmStats.rollback}</p>
              <p className="text-xs text-muted-foreground">Rollback</p>
            </div>
          </div>
        </div>
      </div>
    </Card>
  );
};


Index:
import { MetricCard } from "@/components/MetricCard";
import { AreaReport } from "@/components/AreaReport";
import { RotateCcw, Clock, CheckCircle2, AlertCircle } from "lucide-react";
import { useState, useRef, useEffect } from "react";
import { SnakeLine } from "@/components/SnakeLine";
import RDMTimeline from "@/components/RDMTimeline";
import type { ProductLine, RDM } from "@/types/rdm";
import { Separator } from "@/components/ui/separator";

const Index = () => {
  const [selectedIndex, setSelectedIndex] = useState<number | null>(null);
  const [lineCoords, setLineCoords] = useState<{ startX: number; startY: number; endX: number; endY: number } | null>(null);
  const cardRefs = useRef<(HTMLDivElement | null)[]>([]);
  const timelineRef = useRef<HTMLDivElement>(null);

  const metrics = [
    {
      title: "Concluídas",
      value: "142",
      icon: CheckCircle2,
      variant: "success" as const,
      performance: 92,
    },
    {
      title: "Em Andamento",
      value: "28",
      icon: Clock,
      variant: "warning" as const,
      performance: 78,
    },
    {
      title: "Abertas",
      value: "37",
      icon: AlertCircle,
      variant: "primary" as const,
      performance: 64,
    },
    {
      title: "Rollback",
      value: "5",
      icon: RotateCcw,
      variant: "accent" as const,
      performance: 55,
    },
  ];

  useEffect(() => {
    const updateCoords = () => {
      if (selectedIndex !== null && cardRefs.current[selectedIndex] && timelineRef.current) {
        const cardRect = cardRefs.current[selectedIndex]!.getBoundingClientRect();
        const timelineRect = timelineRef.current.getBoundingClientRect();

        const clamp = (val: number, min: number, max: number) => Math.min(Math.max(val, min), max);
        const vw = window.innerWidth;
        const vh = window.innerHeight;

        setLineCoords({
          startX: clamp(cardRect.left + cardRect.width / 2, 0, vw),
          startY: clamp(cardRect.top + cardRect.height, 0, vh),
          endX: clamp(timelineRect.left + timelineRect.width / 2, 0, vw),
          endY: clamp(timelineRect.top, 0, vh),
        });
      } else {
        setLineCoords(null);
      }
    };

    const raf = requestAnimationFrame(updateCoords);
    window.addEventListener("resize", updateCoords);
    window.addEventListener("scroll", updateCoords, { passive: true });

    return () => {
      cancelAnimationFrame(raf);
      window.removeEventListener("resize", updateCoords);
      window.removeEventListener("scroll", updateCoords);
    };
  }, [selectedIndex]);

  const areaReports = [
    {
      area: "Porto Seguro",
      performance: 92,
      revenue: "134",
      status: "excellent" as const,
      rdmStats: { concluidas: 120, emAndamento: 18, abertas: 10, rollback: 4 },
      areaColor: "porto-seguro",
    },
    {
      area: "Porto Serviço",
      performance: 85,
      revenue: "12",
      status: "good" as const,
      rdmStats: { concluidas: 95, emAndamento: 22, abertas: 14, rollback: 6 },
      areaColor: "porto-servico",
    },
    {
      area: "Porto Bank",
      performance: 88,
      revenue: "90",
      status: "excellent" as const,
      rdmStats: { concluidas: 140, emAndamento: 12, abertas: 8, rollback: 3 },
      areaColor: "porto-bank",
    },
    {
      area: "Porto Saúde",
      performance: 72,
      revenue: "156",
      status: "attention" as const,
      rdmStats: { concluidas: 60, emAndamento: 28, abertas: 20, rollback: 9 },
      areaColor: "porto-saude",
    },
    {
      area: "Canais Digitais",
      performance: 95,
      revenue: "12",
      status: "excellent" as const,
      rdmStats: { concluidas: 160, emAndamento: 10, abertas: 5, rollback: 2 },
      areaColor: "canais-digitais",
    },
    {
      area: "Infraestrutura",
      performance: 68,
      revenue: "13",
      status: "attention" as const,
      rdmStats: { concluidas: 55, emAndamento: 24, abertas: 18, rollback: 7 },
      areaColor: "infraestrutura",
    },
    {
      area: "Atendimento",
      performance: 81,
      revenue: "10",
      status: "good" as const,
      rdmStats: { concluidas: 100, emAndamento: 20, abertas: 12, rollback: 5 },
      areaColor: "atendimento",
    },
    {
      area: "Arquitetura",
      performance: 74,
      revenue: "80",
      status: "attention" as const,
      rdmStats: { concluidas: 70, emAndamento: 15, abertas: 11, rollback: 4 },
      areaColor: "arquitetura",
    },
  ];

  const buildProductLine = (areaName: string, idx: number): ProductLine => {
    const colors = [
      "#00d6fc", "#0046c0", "#001864", "#2ccc8a",
      "#6b45ff", "#7fa8c3", "#ff5a49", "#c39fd1",
    ];

  // Generate enough RDMs to show 4 full rows (8 per row).
  // We generate 34 so that after filtering out 11:30 and 15:30 we still have 32.
  const rdmCount = 34;
    const rdmsAll: RDM[] = Array.from({ length: rdmCount }).map((_, i) => {
      const num = (i + 1).toString().padStart(3, "0");
      const hour = 8 + Math.floor(i / 2);
      const minute = (i % 2) * 30;
      const time = `${hour.toString().padStart(2, "0")}:${minute.toString().padStart(2, "0")}`;
      const status: RDM["status"] = i % 7 === 0 ? "failed" : i % 3 === 0 ? "pending" : "executed";
      return {
        id: `${areaName}-${num}`,
        number: num,
        time,
        status,
        description:
          i % 5 === 0
            ? "Atividade"
            : undefined,
      };
    });
    const rdms = rdmsAll.filter((r) => r.time !== "11:30" && r.time !== "15:30");

    return {
      id: `produto-${idx + 1}`,
      name: "",
      color: colors[idx % colors.length],
      rdms,
    };
  };

  return (
    <div className="min-h-screen bg-gradient-to-br from-[hsl(var(--background))] via-[hsl(var(--neutral-50))] to-[hsl(var(--blue-soft))]">
      {/* Header */}
      <header className="bg-white/80 backdrop-blur-sm py-2 px-6 shadow-sm sticky top-0 z-20 border-b border-[hsl(var(--border))]">
        <div className="max-w-7xl mx-auto">
          <div className="flex justify-center">
            <img src="/logo.png" alt="Logo" className="h-12 md:h-16 w-auto" />
          </div>
        </div>
      </header>

      <main className="max-w-7xl mx-auto px-6 py-8">
        {/* Metrics Section */}
        <section className="mb-12">
          <div className="mb-8 text-center">
            <h2 className="text-2xl md:text-3xl font-bold text-foreground mb-2 tracking-tight">
              Requisições de Mudanças das Últimas 24 horas
            </h2>
          </div>
          <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6">
            {metrics.map((metric, index) => (
              <div key={index} className="animate-fade-in" style={{ animationDelay: `${index * 100}ms` }}>
                <MetricCard {...metric} />
              </div>
            ))}
          </div>
        </section>

  <Separator className="my-8" />

        {/* Area Reports Section */}
        <section>
          
          {selectedIndex === null ? (
            <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6">
              {areaReports.map((report, index) => (
                <div
                  key={index}
                  ref={(el) => (cardRefs.current[index] = el)}
                  role="button"
                  tabIndex={0}
                  onClick={() => setSelectedIndex(index)}
                  onKeyDown={(e) => {
                    if (e.key === "Enter" || e.key === " ") {
                      e.preventDefault();
                      setSelectedIndex(index);
                    }
                  }}
                  className="cursor-pointer focus:outline-none focus:ring-2 focus:ring-primary rounded-lg animate-fade-in"
                  style={{ animationDelay: `${index * 80}ms` }}
                >
                  <AreaReport {...report} />
                </div>
              ))}
            </div>
          ) : (
            <div className="space-y-6 animate-fade-in">
              <div className="flex items-center justify-between bg-white/50 backdrop-blur-sm p-4 rounded-lg border border-[hsl(var(--border))]">
                <div className="text-sm font-medium text-foreground">
                  Mostrando detalhes de <span className="font-bold text-[hsl(var(--blue-medium))]">{areaReports[selectedIndex].area}</span>
                </div>
                <button
                  onClick={() => setSelectedIndex(null)}
                  className="text-sm font-medium px-4 py-2 rounded-lg border border-[hsl(var(--border))] bg-white hover:bg-[hsl(var(--blue-soft))] hover:border-[hsl(var(--blue-medium))] transition-all duration-300 shadow-sm hover:shadow-md"
                >
                  ← Voltar para todas as áreas
                </button>
              </div>
              <div ref={(el) => (cardRefs.current[selectedIndex] = el)} className="mb-6">
                <AreaReport {...areaReports[selectedIndex]} />
              </div>
              <div className="rounded-lg border border-[hsl(var(--border))] bg-card p-6 shadow-lg">
                <RDMTimeline
                  productLine={buildProductLine(
                    areaReports[selectedIndex].area,
                    selectedIndex
                  )}
                />
              </div>
            </div>
          )}
        </section>
      </main>

      {/* Snake Line Animation */}
      {lineCoords && (
        <SnakeLine
          startX={lineCoords.startX}
          startY={lineCoords.startY}
          endX={lineCoords.endX}
          endY={lineCoords.endY}
        />
      )}
    </div>
  );
};

export default Index;




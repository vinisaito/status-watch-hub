// src/services/websocket.ts
// Servi√ßo WebSocket robusto com fila, reconex√£o e subscri√ß√£o

type Listener = (msg: any) => void;

class WebSocketService {
  private socket: WebSocket | null = null;
  private listeners: Listener[] = [];
  private pendingMessages: any[] = [];
  private isConnecting = false;

  // üî• Defina aqui a URL fixa do seu WebSocket no API Gateway
  private url: string = "wss://rsgjd6wsza.execute-api.us-east-1.amazonaws.com/dev";

  private connect() {
    if (this.isConnecting || this.socket?.readyState === WebSocket.OPEN) {
      return;
    }

    this.isConnecting = true;
    console.info("[WS] Conectando em:", this.url);

    this.socket = new WebSocket(this.url);

    this.socket.onopen = () => {
      console.info("[WS] ‚úÖ Conectado");
      this.isConnecting = false;

      // drena fila
      while (this.pendingMessages.length > 0) {
        const msg = this.pendingMessages.shift();
        this.send(msg);
      }
    };

    this.socket.onmessage = (event) => {
      let data: any = event.data;

      try {
        data = JSON.parse(event.data);
      } catch {
        console.debug("[WS] Mensagem recebida (texto):", event.data);
      }

      this.listeners.forEach((cb) => cb(data));
    };

    this.socket.onclose = () => {
      console.warn("[WS] ‚ùå Desconectado, tentando reconectar em 3s...");
      this.isConnecting = false;
      setTimeout(() => this.connect(), 3000);
    };

    this.socket.onerror = (err) => {
      console.error("[WS] ‚ö†Ô∏è Erro:", err);
      this.socket?.close();
    };
  }

  public subscribe(cb: Listener) {
    if (!this.socket || this.socket.readyState !== WebSocket.OPEN) {
      this.connect();
    }
    this.listeners.push(cb);

    return () => {
      this.listeners = this.listeners.filter((fn) => fn !== cb);
    };
  }

  public send(payload: any) {
    const msg = JSON.stringify(payload);

    if (this.socket?.readyState === WebSocket.OPEN) {
      this.socket.send(msg);
      console.debug("[WS] Enviado:", payload);
    } else {
      console.warn("[WS] n√£o conectado, enfileirando:", payload);
      this.pendingMessages.push(payload);
      if (!this.isConnecting) {
        this.connect();
      }
    }
  }
}

// Exporta inst√¢ncia global
export const ws = new WebSocketService();

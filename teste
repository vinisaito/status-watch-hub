import React, { useState, useEffect, useMemo } from 'react';
import { Check, AlertTriangle, ExternalLink, Zap, Group, Calendar, Info, XCircle, Flame, ChevronLeft, ChevronRight, ArrowUpDown, ArrowUp, ArrowDown } from 'lucide-react';
import { Card, CardContent, CardHeader } from '@/components/ui/card';
import { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from '@/components/ui/table';
import { Badge } from '@/components/ui/badge';
import { Button } from '@/components/ui/button';
import { toast } from '@/hooks/use-toast';
import { Tooltip, TooltipContent, TooltipProvider, TooltipTrigger } from '@/components/ui/tooltip';
import { Dialog, DialogContent, DialogHeader, DialogTitle } from '@/components/ui/dialog';
import { AlertData, ActionTableProps, SortField, SortDirection } from '@/types/ActionTable';
import { useEscalation } from '@/hooks/useEscalation';
import { escalationApi } from '@/services/escalationApi';
import { MobileCard } from '@/components/ActionTable/MobileCard';
import { formatDate, truncateText, getSeverityColor } from '@/utils/formatters';
import useChamadoStore from "@/store/useChamadoStore";
import { ConfirmColumn } from "@/components/ConfirmColumn";

// Mock data for demonstration
const mockAlertData: AlertData[] = [
  {
    id: '1',
    chamado: '12345',
    tipo_chamado: 'Incidente',
    grupo_chamado: 'Infraestrutura',
    status_chamado: 'Aberto',
    abertura_chamado: '2024-01-15T10:30:00',
    resumo_chamado: 'Falha no servidor de aplicação principal',
    severidade_chamado: 'Severidade 4',
    chat: false
  },
  {
    id: '2',
    chamado: '12346',
    tipo_chamado: 'Solicitação',
    grupo_chamado: 'Rede',
    status_chamado: 'Em Andamento',
    abertura_chamado: '2024-01-15T09:15:00',
    resumo_chamado: 'Configuração de nova VLAN para departamento',
    severidade_chamado: 'Severidade 3',
    chat: true
  }
];

export const ActionTable = ({ alertData = mockAlertData, onUpdateAcknowledgment, loading = false }: ActionTableProps) => {
  const [selectedIncident, setSelectedIncident] = useState<AlertData | null>(null);
  const [expandedRows, setExpandedRows] = useState<Set<string>>(new Set());
  const [currentPage, setCurrentPage] = useState(1);
  const itemsPerPage = 5;

  const [sortField, setSortField] = useState<SortField>('chamado');
  const [sortDirection, setSortDirection] = useState<SortDirection>('desc');

  const [acionadosSet, setAcionadosSet] = useState<Set<string>>(new Set());
  const [chamadoModalOpen, setChamadoModalOpen] = useState(false);

  const {
    escalationStates,
    confirmationObservations,
    showStatusConfirmation,
    pendingStatusChange,
    setConfirmationObservations,
    setShowStatusConfirmation,
    setPendingStatusChange,
    setEscalationStates,
    startConfirmation,
    confirmReceived,
    startEscalation
  } = useEscalation(alertData);

  // Busca os incidentes acionados no DynamoDB via API
  useEffect(() => {
    const fetchAcionados = async () => {
      try {
        const acionados = await escalationApi.getAcionados();
        setAcionadosSet(acionados);
      } catch (error) {
        toast({
          title: 'Erro ao buscar acionados',
          description: 'Não foi possível carregar os incidentes acionados',
          variant: 'destructive',
        });
      }
    };
    fetchAcionados();
  }, []);

  const handleAcknowledgment = async (alert: AlertData) => {
    try {
      const response = await fetch(
        "https://f6ffk8e9fe.execute-api.us-east-1.amazonaws.com/prod/webhook"
      );
      const data = await response.json();

      const grupoEntry = data.grupos.find(
        (g: any) => g.grupo_chamado === alert.grupo_chamado
      );

      if (!grupoEntry || !grupoEntry.webhooks.length) {
        toast({
          title: "Webhook não configurado",
          description: `Configure o webhook para o Grupo: ${alert.grupo_chamado}`,
          variant: "destructive",
        });
        return;
      }

      const activeWebhook = grupoEntry.webhooks.find((w: any) => w.ativo);
      if (!activeWebhook) {
        toast({
          title: "Nenhum webhook ativo",
          description: `O grupo ${alert.grupo_chamado} não possui webhooks ativos`,
          variant: "destructive",
        });
        return;
      }

      const webhookUrl = activeWebhook.url;

      await escalationApi.sendWebhookMessage(webhookUrl, alert);
      await escalationApi.markAsAcionado(alert.chamado);

      setAcionadosSet(prev => new Set([...prev, alert.chamado.toString()]));
      onUpdateAcknowledgment?.(alert.id, true);

      startConfirmation(alert.chamado);

      toast({
        title: "Alerta acionado com sucesso",
        description: `Mensagem enviada para o Grupo: ${alert.grupo_chamado}`,
      });

    } catch (error: any) {
      toast({
        title: "Erro ao acionar alerta",
        description: error.message || "Não foi possível concluir o acionamento",
        variant: "destructive",
      });
    }
  };

  const handleIncidentClick = (alert: AlertData) => {
    if (alert.tipo_chamado.toLowerCase().includes('incidente')) {
      setSelectedIncident(alert);
    }
  };

  const handleChamadoClick = (alert: AlertData) => {
    setSelectedIncident(alert);
    setChamadoModalOpen(true);
  };

  const getStatusBadgeClass = (chat: boolean) =>
    chat
      ? 'bg-success/90 text-white border-success/50 shadow-md'
      : 'bg-destructive/90 text-white border-destructive/50 shadow-md';

  const getStatusIcon = (chat: boolean) =>
    chat ? <Check className="h-4 w-4" /> : <XCircle className="h-4 w-4" />;

  const getStatusText = (chat: boolean) => {
    return chat ? 'ACIONADO VIA CHAT' : 'NÃO ACIONADO VIA CHAT';
  };

  const handlePageChange = (page: number) => {
    setCurrentPage(page);
  };

  const handleSort = (field: SortField) => {
    if (sortField === field) {
      if (sortDirection === 'asc') {
        setSortDirection('desc');
      } else if (sortDirection === 'desc') {
        setSortDirection(null);
        setSortField('chamado');
      } else {
        setSortDirection('asc');
      }
    } else {
      setSortField(field);
      setSortDirection('asc');
    }
  };

  const getSortIcon = (field: SortField) => {
    if (sortField !== field) {
      return <ArrowUpDown className="h-4 w-4 ml-1 opacity-50" />;
    }
    if (sortDirection === 'asc') {
      return <ArrowUp className="h-4 w-4 ml-1" />;
    }
    if (sortDirection === 'desc') {
      return <ArrowDown className="h-4 w-4 ml-1" />;
    }
    return <ArrowUpDown className="h-4 w-4 ml-1 opacity-50" />;
  };

  // Funções de escalação
  const handleConfirmationObservationChange = (alertId: string, value: string) => {
    setConfirmationObservations(prev => ({ ...prev, [alertId]: value }));
  };

  const handlePendingObservationChange = (alertId: string, value: string) => {
    setPendingStatusChange(prev => ({
      ...prev,
      [alertId]: { ...prev[alertId], observations: value }
    }));
  };

  const prepareStatusChange = (alertId: string, status: string) => {
    setPendingStatusChange(prev => ({ ...prev, [alertId]: { status, observations: '' } }));
    setShowStatusConfirmation(prev => ({ ...prev, [alertId]: true }));
  };

  const confirmStatusChange = async (alertId: string) => {
    const pending = pendingStatusChange[alertId];
    if (!pending || !pending.observations.trim()) {
      toast({
        title: "Observações obrigatórias",
        description: "Por favor, preencha as observações antes de confirmar",
        variant: "destructive",
      });
      return;
    }

    const attended = pending.status === 'attended';
    
    try {
      const currentState = escalationStates[alertId];
      
      const escalations = [
        { 
          level: 1, 
          status: currentState.currentLevel === 1 ? (attended ? "atendido" : "nao_atendido") : (currentState.currentLevel > 1 ? "finalizado" : ""), 
          observations: currentState.currentLevel === 1 ? pending.observations : "", 
          eventTimestamp: currentState.currentLevel === 1 ? new Date().toISOString() : "" 
        },
        { 
          level: 2, 
          status: currentState.currentLevel === 2 ? (attended ? "atendido" : "nao_atendido") : (currentState.currentLevel > 2 ? "finalizado" : ""), 
          observations: currentState.currentLevel === 2 ? pending.observations : "", 
          eventTimestamp: currentState.currentLevel === 2 ? new Date().toISOString() : "" 
        },
        { 
          level: 3, 
          status: currentState.currentLevel === 3 ? (attended ? "atendido" : "nao_atendido") : (currentState.currentLevel > 3 ? "finalizado" : ""), 
          observations: currentState.currentLevel === 3 ? pending.observations : "", 
          eventTimestamp: currentState.currentLevel === 3 ? new Date().toISOString() : "" 
        },
        { 
          level: 4, 
          status: currentState.currentLevel === 4 ? (attended ? "atendido" : "nao_atendido") : "", 
          observations: currentState.currentLevel === 4 ? pending.observations : "", 
          eventTimestamp: currentState.currentLevel === 4 ? new Date().toISOString() : "" 
        }
      ];

      await escalationApi.saveToAPI(alertId, {
        escalations,
        obsChat: attended ? "Escalação atendida com sucesso" : "Escalação não atendida - prosseguindo",
        confirmChat: confirmationObservations[alertId] || "",
        sendChat: new Date().toISOString(),
        timerActive: false,
      });
    } catch (error) {
      // Continua o processo mesmo se falhar na API
    }

    setEscalationStates(prev => ({
      ...prev,
      [alertId]: {
        ...prev[alertId],
        isAttended: attended,
        observations: pending.observations,
        status: attended ? 'completed' : prev[alertId].status,
        timerActive: attended ? false : prev[alertId].timerActive
      }
    }));

    setShowStatusConfirmation(prev => ({ ...prev, [alertId]: false }));
    setPendingStatusChange(prev => {
      const newState = { ...prev };
      delete newState[alertId];
      return newState;
    });

    if (attended) {
      toast({
        title: "Escalação atendida",
        description: "Processo finalizado com sucesso",
      });
    }
  };

  const cancelStatusChange = (alertId: string) => {
    setShowStatusConfirmation(prev => ({ ...prev, [alertId]: false }));
    setPendingStatusChange(prev => {
      const newState = { ...prev };
      delete newState[alertId];
      return newState;
    });
  };

  const goBackEscalation = (alertId: string) => {
    setEscalationStates(prev => {
      const currentState = prev[alertId];
      if (currentState && currentState.currentLevel > 0) {
        const previousLevel = Math.max(0, currentState.currentLevel - 1);
        
        return {
          ...prev,
          [alertId]: {
            ...currentState,
            currentLevel: previousLevel as 0 | 1 | 2 | 3 | 4,
            status: previousLevel === 0 ? 'pending' : 'escalating',
            timerActive: true,
            timeRemaining: previousLevel === 0 ? 20 * 60 : 10 * 60,
            isAttended: false,
            observations: ''
          }
        };
      }
      return prev;
    });

    setShowStatusConfirmation(prev => ({ ...prev, [alertId]: false }));
    setPendingStatusChange(prev => {
      const newState = { ...prev };
      delete newState[alertId];
      return newState;
    });

    toast({
      title: "Escalação revertida",
      description: "Processo voltou ao nível anterior e timer reiniciado",
    });
  };

  // Dados ordenados e paginados
  const { sortedAndPaginatedData, totalPages } = useMemo(() => {
    let sortedData = [...alertData];

    if (sortField && sortDirection) {
      sortedData.sort((a, b) => {
        let aValue: any = a[sortField];
        let bValue: any = b[sortField];

        if (sortField === 'chamado') {
          aValue = parseInt(a.chamado) || 0;
          bValue = parseInt(b.chamado) || 0;
        } else if (sortField === 'abertura_chamado') {
          aValue = new Date(a.abertura_chamado).getTime() || 0;
          bValue = new Date(b.abertura_chamado).getTime() || 0;
        } else {
          aValue = String(aValue).toLowerCase();
          bValue = String(bValue).toLowerCase();
        }

        if (aValue < bValue) {
          return sortDirection === 'asc' ? -1 : 1;
        }
        if (aValue > bValue) {
          return sortDirection === 'asc' ? 1 : -1;
        }
        return 0;
      });
    } else {
      sortedData.sort((a, b) => {
        const chamadoA = parseInt(a.chamado) || 0;
        const chamadoB = parseInt(b.chamado) || 0;
        return chamadoB - chamadoA;
      });
    }

    const startIndex = (currentPage - 1) * itemsPerPage;
    const endIndex = startIndex + itemsPerPage;
    const paginatedData = sortedData.slice(startIndex, endIndex);
    const totalPages = Math.ceil(sortedData.length / itemsPerPage);

    return {
      sortedAndPaginatedData: paginatedData,
      totalPages
    };
  }, [alertData, currentPage, itemsPerPage, sortField, sortDirection]);

  useEffect(() => {
    setCurrentPage(1);
  }, [alertData]);

  return (
    <TooltipProvider>
      <Card className="bg-card border-border">
        <CardHeader>
        </CardHeader>
        <CardContent>
          {/* Layout para Mobile */}
          <div className="block lg:hidden space-y-4">
            {loading ? (
              <div className="text-center py-8">
                <div className="inline-block animate-spin rounded-full h-8 w-8 border-b-2 border-primary mb-4"></div>
                <p>Carregando dados...</p>
              </div>
            ) : sortedAndPaginatedData.length === 0 ? (
              <div className="text-center py-8 text-muted-foreground">
                Nenhum dado disponível
              </div>
            ) : (
              sortedAndPaginatedData.map((alert) => {
                const isChat = acionadosSet.has(alert.chamado.toString());
                const state = escalationStates[alert.chamado];
                const currentObservation = confirmationObservations[alert.chamado] || '';
                const showConfirmation = showStatusConfirmation[alert.chamado];
                const pendingChange = pendingStatusChange[alert.chamado];

                return (
                  <MobileCard
                    key={alert.id}
                    alert={alert}
                    isChat={isChat}
                    state={state}
                    currentObservation={currentObservation}
                    showConfirmation={showConfirmation}
                    pendingChange={pendingChange}
                    onHandleAcknowledgment={handleAcknowledgment}
                    onHandleChamadoClick={handleChamadoClick}
                    onHandleIncidentClick={handleIncidentClick}
                    onStartConfirmation={startConfirmation}
                    onConfirmReceived={confirmReceived}
                    onStartEscalation={startEscalation}
                    onObservationChange={handleConfirmationObservationChange}
                    onPendingObservationChange={handlePendingObservationChange}
                    onPrepareStatusChange={prepareStatusChange}
                    onConfirmStatusChange={confirmStatusChange}
                    onCancelStatusChange={cancelStatusChange}
                    onGoBack={goBackEscalation}
                    formatDate={formatDate}
                    truncateText={truncateText}
                    getSeverityColor={getSeverityColor}
                  />
                );
              })
            )}

            {/* Paginação Mobile */}
            {!loading && sortedAndPaginatedData.length > 0 && totalPages > 1 && (
              <div className="flex items-center justify-between mt-4 px-2">
                <div className="text-sm text-muted-foreground">
                  Página {currentPage} de {totalPages}
                </div>
                <div className="flex items-center gap-1">
                  <Button
                    variant="outline"
                    size="sm"
                    onClick={() => handlePageChange(currentPage - 1)}
                    disabled={currentPage === 1}
                    className="h-8 w-8 p-0"
                  >
                    <ChevronLeft className="h-4 w-4" />
                  </Button>
                  <Button
                    variant="outline"
                    size="sm"
                    onClick={() => handlePageChange(currentPage + 1)}
                    disabled={currentPage === totalPages}
                    className="h-8 w-8 p-0"
                  >
                    <ChevronRight className="h-4 w-4" />
                  </Button>
                </div>
              </div>
            )}
          </div>

          {/* Layout para Desktop */}
          <div className="hidden lg:block">
            <div className="w-full overflow-x-auto">
              <div className="min-w-[1000px]">
                <Table>
                  <TableHeader>
                    <TableRow className="border-border hover:bg-accent">
                      <TableHead className="text-muted-foreground min-w-[80px]">
                        <Button
                          variant="ghost"
                          className="h-auto p-0 font-medium text-muted-foreground hover:text-foreground text-xs"
                          onClick={() => handleSort('chamado')}
                        >
                          Chamado
                          {getSortIcon('chamado')}
                        </Button>
                      </TableHead>
                      <TableHead className="text-muted-foreground min-w-[100px]">
                        <Button
                          variant="ghost"
                          className="h-auto p-0 font-medium text-muted-foreground hover:text-foreground text-xs"
                          onClick={() => handleSort('tipo_chamado')}
                        >
                          Classificação
                          {getSortIcon('tipo_chamado')}
                        </Button>
                      </TableHead>
                      <TableHead className="text-muted-foreground min-w-[90px]">
                        <Button
                          variant="ghost"
                          className="h-auto p-0 font-medium text-muted-foreground hover:text-foreground text-xs"
                          onClick={() => handleSort('grupo_chamado')}
                        >
                          Grupo
                          {getSortIcon('grupo_chamado')}
                        </Button>
                      </TableHead>
                      <TableHead className="text-muted-foreground min-w-[80px]">
                        <Button
                          variant="ghost"
                          className="h-auto p-0 font-medium text-muted-foreground hover:text-foreground text-xs"
                          onClick={() => handleSort('status_chamado')}
                        >
                          Status
                          {getSortIcon('status_chamado')}
                        </Button>
                      </TableHead>
                      <TableHead className="text-muted-foreground min-w-[100px]">
                        <Button
                          variant="ghost"
                          className="h-auto p-0 font-medium text-muted-foreground hover:text-foreground text-xs"
                          onClick={() => handleSort('abertura_chamado')}
                        >
                          Abertura
                          {getSortIcon('abertura_chamado')}
                        </Button>
                      </TableHead>
                      <TableHead className="text-muted-foreground min-w-[150px] max-w-[200px]">
                        <Button
                          variant="ghost"
                          className="h-auto p-0 font-medium text-muted-foreground hover:text-foreground text-xs"
                          onClick={() => handleSort('resumo_chamado')}
                        >
                          Título
                          {getSortIcon('resumo_chamado')}
                        </Button>
                      </TableHead>
                      <TableHead className="text-muted-foreground min-w-[90px]">
                        <Button
                          variant="ghost"
                          className="h-auto p-0 font-medium text-muted-foreground hover:text-foreground text-xs"
                          onClick={() => handleSort('severidade_chamado')}
                        >
                          Severidade
                          {getSortIcon('severidade_chamado')}
                        </Button>
                      </TableHead>
                      <TableHead className="text-muted-foreground min-w-[120px]">Confirmação</TableHead>
                      <TableHead className="text-muted-foreground min-w-[70px]">Chat</TableHead>
                    </TableRow>
                  </TableHeader>
                  <TableBody>
                    {loading ? (
                      <TableRow>
                        <TableCell colSpan={10} className="text-center py-8">
                          Carregando dados...
                        </TableCell>
                      </TableRow>
                    ) : sortedAndPaginatedData.length === 0 ? (
                      <TableRow>
                        <TableCell colSpan={10} className="text-center py-8 text-muted-foreground">
                          Nenhum dado disponível
                        </TableCell>
                      </TableRow>
                    ) : (
                      sortedAndPaginatedData.map((alert) => {
                        const isChat = acionadosSet.has(alert.chamado.toString());
                        const state = escalationStates[alert.chamado];
                        const currentObservation = confirmationObservations[alert.chamado] || '';
                        const showConfirmation = showStatusConfirmation[alert.chamado];
                        const pendingChange = pendingStatusChange[alert.chamado];

                        return (
                          <TableRow
                            key={alert.id}
                            className="border-border hover:bg-accent transition-colors"
                          >
                            <TableCell className="font-medium">
                              <Button
                                variant="link"
                                size="sm"
                                className="p-0 text-foreground hover:underline text-xs"
                                onClick={() => handleChamadoClick(alert)}
                              >
                                {alert.chamado}
                              </Button>
                            </TableCell>
                            <TableCell>
                              <Tooltip>
                                <TooltipTrigger asChild>
                                  <span className="truncate block max-w-[80px] text-xs">
                                    {alert.tipo_chamado}
                                  </span>
                                </TooltipTrigger>
                                <TooltipContent>
                                  <p className="max-w-xs">{alert.tipo_chamado}</p>
                                </TooltipContent>
                              </Tooltip>
                            </TableCell>
                            <TableCell className="text-xs">{alert.grupo_chamado}</TableCell>
                            <TableCell className="text-xs">{alert.status_chamado}</TableCell>
                            <TableCell className="text-xs">
                              {formatDate(alert.abertura_chamado)}
                            </TableCell>
                            <TableCell>
                              <div className="flex items-center gap-2">
                                <Tooltip>
                                  <TooltipTrigger asChild>
                                    <span className="truncate block max-w-[120px] text-xs">
                                      {alert.resumo_chamado}
                                    </span>
                                  </TooltipTrigger>
                                  <TooltipContent>
                                    <p className="max-w-md">{alert.resumo_chamado}</p>
                                  </TooltipContent>
                                </Tooltip>
                                {alert.tipo_chamado.toLowerCase().includes('incidente') && (
                                  <Button
                                    variant="ghost"
                                    size="sm"
                                    onClick={() => handleIncidentClick(alert)}
                                    className="p-1 h-auto hover:bg-accent flex-shrink-0"
                                    title="Iniciar processo de crise"
                                  >
                                    <ExternalLink className="h-3 w-3" />
                                  </Button>
                                )}
                              </div>
                            </TableCell>
                            <TableCell>
                              <Badge className={`${getSeverityColor(alert.severidade_chamado)} text-xs`}>
                                {alert.severidade_chamado}
                              </Badge>
                            </TableCell>
                            <TableCell className="min-w-[120px]">
                              <ConfirmColumn
                                alert={alert}
                                currentObservation={currentObservation}
                                showConfirmation={!!showConfirmation}
                                pendingChange={pendingChange}
                                onStartConfirmation={startConfirmation}
                                onConfirmReceived={confirmReceived}
                                onStartEscalation={startEscalation}
                                onObservationChange={handleConfirmationObservationChange}
                                onPendingObservationChange={handlePendingObservationChange}
                                onPrepareStatusChange={prepareStatusChange}
                                onConfirmStatusChange={confirmStatusChange}
                                onCancelStatusChange={cancelStatusChange}
                                onGoBack={goBackEscalation}
                              />
                            </TableCell>
                            <TableCell>
                              <Button
                                variant={isChat ? "default" : "outline"}
                                size="sm"
                                onClick={() => !isChat && handleAcknowledgment(alert)}
                                disabled={isChat}
                                className={`${isChat
                                  ? 'bg-success text-success-foreground hover:bg-success/90'
                                  : 'border-border hover:bg-accent'
                                  } h-7 w-7 p-0`}
                              >
                                {isChat ? (
                                  <Check className="h-3 w-3" />
                                ) : (
                                  <AlertTriangle className="h-3 w-3" />
                                )}
                              </Button>
                            </TableCell>
                          </TableRow>
                        );
                      })
                    )}
                  </TableBody>
                </Table>
              </div>
            </div>

            {/* Paginação Desktop */}
            {!loading && sortedAndPaginatedData.length > 0 && totalPages > 1 && (
              <div className="flex items-center justify-between mt-4 pt-4 border-t border-border">
                <div className="text-sm text-muted-foreground">
                  Mostrando {((currentPage - 1) * itemsPerPage) + 1} a {Math.min(currentPage * itemsPerPage, alertData.length)} de {alertData.length} registros
                </div>
                <div className="flex items-center gap-2">
                  <Button
                    variant="outline"
                    size="sm"
                    onClick={() => handlePageChange(currentPage - 1)}
                    disabled={currentPage === 1}
                    className="h-8 px-3"
                  >
                    <ChevronLeft className="h-4 w-4 mr-1" />
                    Anterior
                  </Button>

                  <div className="flex items-center gap-1">
                    {[...Array(Math.min(totalPages, 5))].map((_, index) => {
                      let page;
                      if (totalPages <= 5) {
                        page = index + 1;
                      } else if (currentPage <= 3) {
                        page = index + 1;
                      } else if (currentPage >= totalPages - 2) {
                        page = totalPages - 4 + index;
                      } else {
                        page = currentPage - 2 + index;
                      }

                      return (
                        <Button
                          key={page}
                          variant={currentPage === page ? "default" : "outline"}
                          size="sm"
                          onClick={() => handlePageChange(page)}
                          className="h-8 w-8 p-0"
                        >
                          {page}
                        </Button>
                      );
                    })}
                  </div>

                  <Button
                    variant="outline"
                    size="sm"
                    onClick={() => handlePageChange(currentPage + 1)}
                    disabled={currentPage === totalPages}
                    className="h-8 px-3"
                  >
                    Próximo
                    <ChevronRight className="h-4 w-4 ml-1" />
                  </Button>
                </div>
              </div>
            )}
          </div>

          {/* Dialog do Modal de Chamado */}
          <Dialog open={chamadoModalOpen} onOpenChange={setChamadoModalOpen}>
            <DialogContent className="max-w-3xl max-h-[80vh] border-border shadow-2xl overflow-y-auto">
              <DialogHeader className="pb-6 border-b border-border">
                <DialogTitle className="text-left">
                  {/* Header com design melhorado */}
                  <div className="relative overflow-hidden rounded-2xl p-6 mb-4 bg-gradient-to-r from-primary to-primary/80">
                    {/* Número do chamado e título */}
                    <div className="relative z-10 flex items-start gap-4">
                      <div className="p-3 rounded-xl bg-white/20 backdrop-blur-sm border border-white/30 shadow-lg">
                        {selectedIncident?.tipo_chamado === "Solicitação" ? (
                          <Zap className="h-6 w-6 text-white drop-shadow-sm" />
                        ) : selectedIncident?.tipo_chamado === "Incidente" ? (
                          <AlertTriangle className="h-6 w-6 text-white drop-shadow-sm" />
                        ) : (
                          <Zap className="h-6 w-6 text-white drop-shadow-sm" />
                        )}
                      </div>

                      <div className="flex-1">
                        <div className="flex items-center gap-3 mb-2">
                          <span className="text-2xl font-bold text-white drop-shadow-sm">
                            {selectedIncident?.chamado}
                          </span>
                          <div className="h-1 flex-1 bg-white/20 rounded-full">
                            <div className="h-full w-3/4 bg-white/40 rounded-full"></div>
                          </div>
                        </div>

                        <h2 className="text-lg font-medium text-white/95 leading-relaxed drop-shadow-sm">
                          {selectedIncident?.resumo_chamado}
                        </h2>
                      </div>
                    </div>

                    {/* Status badges */}
                    {selectedIncident && (
                      <div className="relative z-10 flex flex-wrap items-center gap-3 mt-6">
                        <div className="animate-fade-in">
                          <div className={`${getStatusBadgeClass(selectedIncident.chat)} flex items-center gap-2 px-4 py-2 rounded-xl 
                              backdrop-blur-sm border border-white/20 shadow-lg`}>
                            {getStatusIcon(selectedIncident.chat)}
                            <span className="font-medium text-sm">
                              {getStatusText(selectedIncident.chat)}
                            </span>
                          </div>
                        </div>

                        <div className="animate-fade-in">
                          <div className="bg-white/20 text-white flex items-center gap-2 px-4 py-2 rounded-xl 
                              backdrop-blur-sm border border-white/30 shadow-lg">
                            <span className="font-medium text-sm">{selectedIncident.tipo_chamado}</span>
                          </div>
                        </div>
                      </div>
                    )}
                  </div>
                </DialogTitle>
              </DialogHeader>

              {/* Conteúdo principal */}
              {selectedIncident && (
                <div className="grid grid-cols-1 md:grid-cols-2 gap-6 mt-6">
                  <div className="space-y-4">
                    {/* Card Grupo */}
                    <div className="group relative overflow-hidden rounded-xl bg-card border border-border p-5 
                        shadow-lg hover:shadow-xl transition-all duration-300 hover:-translate-y-1">
                      <div className="absolute top-0 left-0 w-full h-1 bg-gradient-to-r from-primary to-blue-500"></div>
                      <div className="flex items-start gap-4">
                        <div className="p-2 rounded-lg bg-primary/10 group-hover:bg-primary/20 transition-colors duration-300">
                          <Group className="h-5 w-5 text-primary" />
                        </div>
                        <div className="flex-1">
                          <p className="text-sm text-muted-foreground font-medium mb-1">Grupo</p>
                          <p className="font-bold text-foreground text-lg">{selectedIncident.grupo_chamado}</p>
                        </div>
                      </div>
                    </div>

                    {/* Card Abertura */}
                    <div className="group relative overflow-hidden rounded-xl bg-card border border-border p-5 
                        shadow-lg hover:shadow-xl transition-all duration-300 hover:-translate-y-1">
                      <div className="absolute top-0 left-0 w-full h-1 bg-gradient-to-r from-green-500 to-emerald-500"></div>
                      <div className="flex items-start gap-4">
                        <div className="p-2 rounded-lg bg-green-500/10 group-hover:bg-green-500/20 transition-colors duration-300">
                          <Calendar className="h-5 w-5 text-green-600" />
                        </div>
                        <div className="flex-1">
                          <p className="text-sm text-muted-foreground font-medium mb-1">Data de Abertura</p>
                          <p className="font-bold text-foreground text-lg">{formatDate(selectedIncident.abertura_chamado)}</p>
                        </div>
                      </div>
                    </div>
                  </div>

                  <div className="space-y-4">
                    {/* Card Status */}
                    <div className="group relative overflow-hidden rounded-xl bg-card border border-border p-5 
                        shadow-lg hover:shadow-xl transition-all duration-300 hover:-translate-y-1">
                      <div className="absolute top-0 left-0 w-full h-1 bg-gradient-to-r from-blue-500 to-cyan-500"></div>
                      <div className="flex items-start gap-4">
                        <div className="p-2 rounded-lg bg-blue-500/10 group-hover:bg-blue-500/20 transition-colors duration-300">
                          <Info className="h-5 w-5 text-blue-600" />
                        </div>
                        <div className="flex-1">
                          <p className="text-sm text-muted-foreground font-medium mb-1">Status</p>
                          <p className="font-bold text-foreground text-lg">{selectedIncident.status_chamado}</p>
                        </div>
                      </div>
                    </div>

                    {/* Card Severidade */}
                    <div className="group relative overflow-hidden rounded-xl bg-card border border-border p-5 
                        shadow-lg hover:shadow-xl transition-all duration-300 hover:-translate-y-1">
                      <div className="absolute top-0 left-0 w-full h-1 bg-gradient-to-r from-red-500 to-orange-500"></div>
                      <div className="flex items-start gap-4">
                        <div className="p-2 rounded-lg bg-red-500/10 group-hover:bg-red-500/20 transition-colors duration-300">
                          <Flame className="h-5 w-5 text-red-600" />
                        </div>
                        <div className="flex-1">
                          <p className="text-sm text-muted-foreground font-medium mb-1">Severidade</p>
                          <p className="font-bold text-foreground text-lg">{selectedIncident.severidade_chamado}</p>
                        </div>
                      </div>
                    </div>
                  </div>
                </div>
              )}
            </DialogContent>
          </Dialog>
        </CardContent>
      </Card>
    </TooltipProvider>
  );
};

const Index = () => {
  return (
    <div className="min-h-screen bg-background p-4">
      <ActionTable 
        alertData={mockAlertData} 
        onUpdateAcknowledgment={() => {}} 
        loading={false} 
      />
    </div>
  );
};

export default Index;

// Handler para a√ß√µes do modal
const handleAction = useCallback(async (action: 'next' | 'previous' | 'finish') => {
  if (!validateObservacao()) return;

  setIsProcessing(true);

  try {
    const trimmedObservacao = observacao.trim();
    
    switch (action) {
      case 'next':
        if (currentLevel >= 5) {
          // Atualiza status final via WebSocket
          updateStatusFinal(chamado, "finalizado");
          // Chama Lambda
          await onFinalize(chamado, trimmedObservacao);

          toast({
            title: "‚úÖ Chamado Finalizado",
            description: `Chamado ${chamado} foi finalizado com sucesso!`,
          });
        } else {
          await onNextLevel(chamado, currentLevel + 1, trimmedObservacao);
          const nextLevelInfo = LEVEL_INFO[(currentLevel + 1) as keyof typeof LEVEL_INFO];
          toast({
            title: `üöÄ ${nextLevelInfo?.title} Iniciado`,
            description: `Timer de 20 minutos iniciado para ${nextLevelInfo?.title}`,
          });
        }
        break;
        
      case 'previous':
        if (currentLevel > 1) {
          await onPreviousLevel(chamado, currentLevel - 1, trimmedObservacao);
          const prevLevelInfo = LEVEL_INFO[(currentLevel - 1) as keyof typeof LEVEL_INFO];
          toast({
            title: `‚¨ÖÔ∏è Retornando para ${prevLevelInfo?.title}`,
            description: `Timer reiniciado para ${prevLevelInfo?.title}`,
          });
        }
        break;
        
      case 'finish':
        // Envia status final via WebSocket
        updateStatusFinal(chamado, "finalizado");
        // Chama Lambda
        await onFinalize(chamado, trimmedObservacao);

        toast({
          title: "‚úÖ Chamado Finalizado",
          description: `Chamado ${chamado} foi finalizado com sucesso!`,
        });
        break;
    }
    
    // Limpar o form e fechar modal
    setObservacao('');
    onClose();
    
  } catch (error) {
    toast({
      title: "‚ùå Erro na Opera√ß√£o",
      description: "Ocorreu um erro ao processar a a√ß√£o. Tente novamente.",
      variant: "destructive",
    });
  } finally {
    setIsProcessing(false);
  }
}, [validateObservacao, observacao, currentLevel, chamado, onNextLevel, onPreviousLevel, onFinalize, onClose, updateStatusFinal]);

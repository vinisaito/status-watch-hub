import { useState, useMemo, useCallback } from 'react';
import { Check, AlertTriangle, Timer, Play, Pause, CheckCircle, Edit3, Search, ChevronLeft, ChevronRight, ArrowUpDown, ArrowUp, ArrowDown, Settings } from 'lucide-react';
import { Card, CardContent, CardHeader } from '@/components/ui/card';
import { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from '@/components/ui/table';
import { Badge } from '@/components/ui/badge';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { Label } from '@/components/ui/label';
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';
import { toast } from '@/hooks/use-toast';
import { Tooltip, TooltipContent, TooltipProvider, TooltipTrigger } from '@/components/ui/tooltip';
import { Dialog, DialogContent, DialogHeader, DialogTitle, DialogDescription } from '@/components/ui/dialog';
import { Textarea } from '@/components/ui/textarea';
import { useEffect } from 'react';

// WebSocket hook
import { useWebsocketTimers } from "@/hooks/useWebsocketTimers";

// Modern Timer Management Modal
import { ModernTimerModal } from '@/components/ActionTable/ModernTimerModal';

// Details Modal
import { ChamadoDetailsModal } from '@/components/ActionTable/ChamadoDetailsModal';

interface AlertData {
  id: string;
  chamado: string;
  tipo_chamado: string;
  grupo_chamado: string;
  status_chamado: string;
  abertura_chamado: string;
  resumo_chamado: string;
  severidade_chamado: string;
  acionado: string;
  chat: boolean;
}

interface ActionTableProps {
  alertData: AlertData[];
  onUpdateAcknowledgment: (alertId: string, acknowledged: boolean) => void;
  loading: boolean;
}

type SortField = keyof AlertData;
type SortDirection = 'asc' | 'desc' | null;

// Informa√ß√µes dos n√≠veis de escala√ß√£o
const LEVEL_NAMES = {
  1: "Primeiro Acionamento",
  2: "1¬™ Escala√ß√£o",
  3: "2¬™ Escala√ß√£o",
  4: "3¬™ Escala√ß√£o",
  5: "4¬™ Escala√ß√£o"
};

export const ActionTable = ({ alertData, onUpdateAcknowledgment, loading }: ActionTableProps) => {
  // Estados principais
  const [currentPage, setCurrentPage] = useState(1);
  const [searchTerm, setSearchTerm] = useState('');
  const [itemsPerPage, setItemsPerPage] = useState<number>(5);
  const [sortField, setSortField] = useState<SortField>('chamado');
  const [sortDirection, setSortDirection] = useState<SortDirection>('desc');

  // Estados dos modais
  const [observacaoDialogOpen, setObservacaoDialogOpen] = useState(false);
  const [timerManagementOpen, setTimerManagementOpen] = useState(false);
  const [detailsModalOpen, setDetailsModalOpen] = useState(false);
  const [selectedChamadoForEdit, setSelectedChamadoForEdit] = useState<string>('');
  const [selectedChamadoForTimer, setSelectedChamadoForTimer] = useState<string>('');
  const [selectedChamadoForDetails, setSelectedChamadoForDetails] = useState<AlertData | null>(null);
  const [observacaoText, setObservacaoText] = useState('');
  const [operadorText, setOperadorText] = useState('');

  // WebSocket
  const {
    timers,
    isConnected,
    startTimer,
    updateObservacao,
    updateOperador,
    updateStatusFinal,
    updateAcionamento,
    getRemainingTime,
    formatTime,
    isTimerActive,
    getState,
    setWatchedChamados
  } = useWebsocketTimers();

  // Primeiro registrar os chamados que queremos monitorar
  useEffect(() => {
    if (!alertData || alertData.length === 0) return;

    const chamadosNum = alertData.map(a => parseInt(a.chamado));
    setWatchedChamados(chamadosNum);

    // For√ßar getState imediatamente
    chamadosNum.forEach(chamado => getState(chamado));
  }, [alertData, setWatchedChamados, getState]);

  // Estados locais para observa√ß√µes
  const [localObservacoes, setLocalObservacoes] = useState<Map<string, { observacao: string; operador: string }>>(new Map());

  // Fun√ß√µes utilit√°rias
  const formatDate = useCallback((dateString: string) => {
    if (!dateString || dateString === '' || dateString === 'null' || dateString === 'undefined') {
      return '-';
    }

    try {
      let date: Date;
      const cleanString = String(dateString).trim();

      if (/^\d{13}$/.test(cleanString)) {
        date = new Date(parseInt(cleanString));
      } else if (/^\d{10}$/.test(cleanString)) {
        date = new Date(parseInt(cleanString) * 1000);
      } else if (/^\d{2}\/\d{2}\/\d{4}/.test(cleanString)) {
        const parts = cleanString.split(' ');
        const datePart = parts[0];
        const timePart = parts[1] || '00:00:00';
        const [day, month, year] = datePart.split('/');
        const [hour, minute, second] = timePart.split(':');

        date = new Date(
          parseInt(year),
          parseInt(month) - 1,
          parseInt(day),
          parseInt(hour || '0'),
          parseInt(minute || '0'),
          parseInt(second || '0')
        );
      } else {
        date = new Date(cleanString);
      }

      if (isNaN(date.getTime())) return cleanString;

      const year = date.getFullYear();
      if (year < 1900 || year > 2100) return cleanString;

      return date.toLocaleString('pt-BR', {
        day: '2-digit',
        month: '2-digit',
        year: 'numeric',
        hour: '2-digit',
        minute: '2-digit',
        second: '2-digit',
      });
    } catch (error) {
      return String(dateString);
    }
  }, []);

  const getSeverityColor = useCallback((severity: string) => {
    return severity.includes('4')
      ? 'bg-destructive text-destructive-foreground'
      : 'bg-yellow-500 text-yellow-950';
  }, []);

  // Fun√ß√£o para obter o n√≠vel atual ativo do timer
  const getCurrentActiveLevel = useCallback((chamado: number) => {
    const timerState = timers.get(chamado);
    if (!timerState) return null;

    // Verificar levels de 1 a 5 para encontrar o ativo
    for (let level = 1; level <= 5; level++) {
      const statusKey = `level${level}_status` as keyof typeof timerState;
      if (timerState[statusKey] === 'running') {
        return level;
      }
    }
    return null;
  }, [timers]);

  // Fun√ß√£o para montar o hist√≥rico de acionamentos do chamado
  const getHistoricoAcionamentos = useCallback((chamadoNum: number) => {
    const timerState = timers.get(chamadoNum);
    if (!timerState) return [];

    const historico: {
      operador: string;
      pessoaAcionada: string;
      status: string;
      observacao: string;
      dataHora: string;
      updatedAt: string;
      nivel: number;
    }[] = [];

    for (let nivel = 1; nivel <= 5; nivel++) {
      const operador = timerState[`level${nivel}_operador`] || '';
      const pessoaAcionada = timerState[`level${nivel}_pessoaAcionada`] || '';
      const status = timerState[`level${nivel}_statusAcionamento`] || '';
      const observacao = timerState[`level${nivel}_observacao`] || '';
      const dataHora = timerState[`level${nivel}_dataHora`] || '';
      const updatedAt = timerState[`level${nivel}_updatedAt`] || '';
      if (operador || pessoaAcionada || status || observacao || dataHora) {
        historico.push({
          operador,
          pessoaAcionada,
          status,
          observacao,
          dataHora,
          updatedAt: formatDate(updatedAt),
          nivel,
        });
      }
    }
    return historico;
  }, [timers, formatDate]);

  // Handlers para acionamento
  const handleAcknowledgment = useCallback(async (alert: AlertData) => {
    try {
      toast({
        title: "Alerta acionado",
        description: `Chamado ${alert.chamado} foi acionado com sucesso`,
      });

      onUpdateAcknowledgment(alert.id, true);
    } catch (error: any) {
      toast({
        title: "Erro ao acionar alerta",
        description: error.message || "N√£o foi poss√≠vel concluir o acionamento",
        variant: "destructive",
      });
    }
  }, [onUpdateAcknowledgment]);

  // Handlers para timer
  const handleStartTimer = useCallback((chamado: string) => {
    const chamadoNum = parseInt(chamado);
    const duration = 1200; // 20 minutos em segundos

    console.log(`Iniciando Primeiro Acionamento para chamado ${chamado}`);

    const success = startTimer(chamadoNum, 1, duration);

    if (success) {
      toast({
        title: "üöÄ Primeiro Acionamento Iniciado",
        description: `Timer de 20 minutos iniciado para chamado ${chamado}`,
      });

      setTimeout(() => {
        getState(chamadoNum);
      }, 1000);
    }
  }, [startTimer, getState]);

  // Handlers para gerenciamento de etapas
  const handleOpenTimerManagement = useCallback((chamado: string) => {
    setSelectedChamadoForTimer(chamado);
    setTimerManagementOpen(true);
  }, []);

  // Handler para abrir modal de detalhes
  const handleOpenDetails = useCallback((alert: AlertData) => {
    setSelectedChamadoForDetails(alert);
    setDetailsModalOpen(true);
  }, []);

  // CORRIGIDO: Fun√ß√£o para avan√ßar para pr√≥ximo n√≠vel
  const handleNextLevel = useCallback(async (chamado: string, nextLevel: number, observacao: string) => {
    try {
      const chamadoNum = parseInt(chamado);
      const duration = 1200; // 20 minutos para cada etapa

      // Primeiro salvar a observa√ß√£o do n√≠vel atual
      const currentLevel = getCurrentActiveLevel(chamadoNum);
      if (currentLevel && observacao.trim()) {
        updateObservacao(chamadoNum, currentLevel, observacao.trim());
      }

      // Iniciar o pr√≥ximo n√≠vel
      const success = startTimer(chamadoNum, nextLevel, duration);

      if (success) {
        const levelName = LEVEL_NAMES[nextLevel as keyof typeof LEVEL_NAMES] || `N√≠vel ${nextLevel}`;

        // Aguardar um momento para garantir que o timer foi iniciado
        await new Promise(resolve => setTimeout(resolve, 500));

        // Atualizar estado
        getState(chamadoNum);

        return true;
      }

      return false;
    } catch (error) {
      console.error('Erro em handleNextLevel:', error);
      throw error;
    }
  }, [startTimer, updateObservacao, getState, getCurrentActiveLevel]);

  // CORRIGIDO: Fun√ß√£o para voltar ao n√≠vel anterior
  const handlePreviousLevel = useCallback(async (chamado: string, previousLevel: number, observacao: string) => {
    try {
      const chamadoNum = parseInt(chamado);

      // Salvar observa√ß√£o do n√≠vel atual
      const currentLevel = getCurrentActiveLevel(chamadoNum);
      if (currentLevel && observacao.trim()) {
        updateObservacao(chamadoNum, currentLevel, observacao.trim());
      }

      // Iniciar o n√≠vel anterior
      const duration = 1200; // 20 minutos
      const success = startTimer(chamadoNum, previousLevel, duration);

      if (success) {
        // Aguardar um momento para garantir que o timer foi iniciado
        await new Promise(resolve => setTimeout(resolve, 500));

        // Atualizar estado
        getState(chamadoNum);

        return true;
      }

      return false;
    } catch (error) {
      console.error('Erro em handlePreviousLevel:', error);
      throw error;
    }
  }, [startTimer, updateObservacao, getState, getCurrentActiveLevel]);

  // CORRIGIDO: Fun√ß√£o para finalizar chamado
  const handleFinalize = useCallback(async (chamado: string, observacao: string) => {
    try {
      const chamadoNum = parseInt(chamado);

      // Salvar observa√ß√£o final
      const currentLevel = getCurrentActiveLevel(chamadoNum);
      if (currentLevel && observacao.trim()) {
        updateObservacao(chamadoNum, currentLevel, observacao.trim());
      }

      // Finalizar o chamado
      updateStatusFinal(chamadoNum, 'finished');

      // Aguardar um momento para garantir que o status foi atualizado
      await new Promise(resolve => setTimeout(resolve, 500));

      // Atualizar estado
      getState(chamadoNum);

      return true;
    } catch (error) {
      console.error('Erro em handleFinalize:', error);
      throw error;
    }
  }, [updateObservacao, updateStatusFinal, getState, getCurrentActiveLevel]);

  // Handlers para observa√ß√£o
  const handleOpenObservacao = useCallback((chamado: string) => {
    setSelectedChamadoForEdit(chamado);
    const existing = localObservacoes.get(chamado);
    setObservacaoText(existing?.observacao || '');
    setOperadorText(existing?.operador || '');
    setObservacaoDialogOpen(true);
  }, [localObservacoes]);

  const handleSaveObservacao = useCallback(() => {
    if (!selectedChamadoForEdit) return;

    const chamadoNum = parseInt(selectedChamadoForEdit);

    if (observacaoText.trim()) {
      updateObservacao(chamadoNum, 1, observacaoText.trim());
    }

    if (operadorText.trim()) {
      updateOperador(chamadoNum, operadorText.trim());
    }

    setLocalObservacoes(prev => {
      const newMap = new Map(prev);
      newMap.set(selectedChamadoForEdit, {
        observacao: observacaoText.trim(),
        operador: operadorText.trim()
      });
      return newMap;
    });

    setObservacaoDialogOpen(false);
    setObservacaoText('');
    setOperadorText('');

    toast({
      title: "‚úÖ Observa√ß√£o Salva",
      description: `Observa√ß√£o do chamado ${selectedChamadoForEdit} foi salva`,
    });
  }, [selectedChamadoForEdit, observacaoText, operadorText, updateObservacao, updateOperador]);

  // Handlers para ordena√ß√£o
  const handleSort = useCallback((field: SortField) => {
    if (sortField === field) {
      if (sortDirection === 'asc') {
        setSortDirection('desc');
      } else if (sortDirection === 'desc') {
        setSortDirection(null);
        setSortField('chamado');
      } else {
        setSortDirection('asc');
      }
    } else {
      setSortField(field);
      setSortDirection('asc');
    }
  }, [sortField, sortDirection]);

  const getSortIcon = useCallback((field: SortField) => {
    if (sortField !== field) {
      return <ArrowUpDown className="h-4 w-4 ml-1 opacity-50" />;
    }
    if (sortDirection === 'asc') {
      return <ArrowUp className="h-4 w-4 ml-1" />;
    }
    if (sortDirection === 'desc') {
      return <ArrowDown className="h-4 w-4 ml-1" />;
    }
    return <ArrowUpDown className="h-4 w-4 ml-1 opacity-50" />;
  }, [sortField, sortDirection]);

  // Dados filtrados e paginados
  const filteredData = useMemo(() => {
    if (!searchTerm.trim()) return alertData;

    const searchLower = searchTerm.toLowerCase().trim();
    return alertData.filter(alert =>
      Object.values(alert).some(value =>
        String(value).toLowerCase().includes(searchLower)
      )
    );
  }, [alertData, searchTerm]);

  const { sortedAndPaginatedData, totalPages } = useMemo(() => {
    let sortedData = [...filteredData];

    if (sortField && sortDirection) {
      sortedData.sort((a, b) => {
        let aValue: any = a[sortField];
        let bValue: any = b[sortField];

        if (sortField === 'chamado') {
          aValue = parseInt(a.chamado) || 0;
          bValue = parseInt(b.chamado) || 0;
        } else if (sortField === 'abertura_chamado') {
          aValue = new Date(a.abertura_chamado).getTime() || 0;
          bValue = new Date(b.abertura_chamado).getTime() || 0;
        } else {
          aValue = String(aValue).toLowerCase();
          bValue = String(bValue).toLowerCase();
        }

        if (aValue < bValue) return sortDirection === 'asc' ? -1 : 1;
        if (aValue > bValue) return sortDirection === 'asc' ? 1 : -1;
        return 0;
      });
    } else {
      sortedData.sort((a, b) => {
        const chamadoA = parseInt(a.chamado) || 0;
        const chamadoB = parseInt(b.chamado) || 0;
        return chamadoB - chamadoA;
      });
    }

    const startIndex = (currentPage - 1) * itemsPerPage;
    const endIndex = startIndex + itemsPerPage;
    const paginatedData = sortedData.slice(startIndex, endIndex);
    const totalPages = Math.ceil(sortedData.length / itemsPerPage);

    return { sortedAndPaginatedData: paginatedData, totalPages };
  }, [filteredData, currentPage, itemsPerPage, sortField, sortDirection]);

  // Handlers para pagina√ß√£o
  const handleItemsPerPageChange = useCallback((value: string) => {
    const num = parseInt(value, 10);
    setItemsPerPage(num);
    setCurrentPage(1);
  }, []);

  const handlePageChange = useCallback((page: number) => {
    setCurrentPage(page);
  }, []);

  return (
    <TooltipProvider>
      <Card className="bg-card border-border shadow-elegant">
        <CardHeader>
          {/* Status da Conex√£o WebSocket */}
          <div className="flex items-center justify-between mb-4">
            
          </div>

          {/* Campo de Pesquisa */}
          <div className="relative mb-4">
            <Search className="absolute left-3 top-1/2 h-4 w-4 -translate-y-1/2 text-muted-foreground" />
            <Input
              placeholder="Pesquisar por chamado, tipo, grupo, status, t√≠tulo..."
              value={searchTerm}
              onChange={(e) => setSearchTerm(e.target.value)}
              className="pl-10"
            />
          </div>

          {searchTerm && (
            <div className="text-sm text-muted-foreground">
              {filteredData.length === 0 ? (
                <span>Nenhum resultado encontrado para "{searchTerm}"</span>
              ) : (
                <span>
                  {filteredData.length} resultado{filteredData.length !== 1 ? 's' : ''}
                  {filteredData.length !== alertData.length && ` de ${alertData.length} `}
                  para "{searchTerm}"
                </span>
              )}
            </div>
          )}
        </CardHeader>

        <CardContent>
          {/* Responsive Layout */}
          <div className="w-full">
            <Table className="w-full">
              <TableHeader>
                <TableRow className="border-border hover:bg-accent">
                  <TableHead className="text-muted-foreground w-[80px]">
                    <Button
                      variant="ghost"
                      className="h-auto p-0 font-medium text-muted-foreground hover:text-foreground text-xs"
                      onClick={() => handleSort('chamado')}
                    >
                      Chamado
                      {getSortIcon('chamado')}
                    </Button>
                  </TableHead>
                  <TableHead className="text-muted-foreground hidden md:table-cell">
                    <Button
                      variant="ghost"
                      className="h-auto p-0 font-medium text-muted-foreground hover:text-foreground text-xs"
                      onClick={() => handleSort('tipo_chamado')}
                    >
                      Classifica√ß√£o
                      {getSortIcon('tipo_chamado')}
                    </Button>
                  </TableHead>
                  <TableHead className="text-muted-foreground hidden lg:table-cell">
                    <Button
                      variant="ghost"
                      className="h-auto p-0 font-medium text-muted-foreground hover:text-foreground text-xs"
                      onClick={() => handleSort('grupo_chamado')}
                    >
                      Grupo
                      {getSortIcon('grupo_chamado')}
                    </Button>
                  </TableHead>
                  <TableHead className="text-muted-foreground hidden lg:table-cell">
                    <Button
                      variant="ghost"
                      className="h-auto p-0 font-medium text-muted-foreground hover:text-foreground text-xs"
                      onClick={() => handleSort('status_chamado')}
                    >
                      Status
                      {getSortIcon('status_chamado')}
                    </Button>
                  </TableHead>
                  <TableHead className="text-muted-foreground hidden xl:table-cell">
                    <Button
                      variant="ghost"
                      className="h-auto p-0 font-medium text-muted-foreground hover:text-foreground text-xs"
                      onClick={() => handleSort('abertura_chamado')}
                    >
                      Abertura
                      {getSortIcon('abertura_chamado')}
                    </Button>
                  </TableHead>
                  <TableHead className="text-muted-foreground">
                    <Button
                      variant="ghost"
                      className="h-auto p-0 font-medium text-muted-foreground hover:text-foreground text-xs"
                      onClick={() => handleSort('resumo_chamado')}
                    >
                      T√≠tulo
                      {getSortIcon('resumo_chamado')}
                    </Button>
                  </TableHead>
                  <TableHead className="text-muted-foreground hidden sm:table-cell">
                    <Button
                      variant="ghost"
                      className="h-auto p-0 font-medium text-muted-foreground hover:text-foreground text-xs"
                      onClick={() => handleSort('severidade_chamado')}
                    >
                      Severidade
                      {getSortIcon('severidade_chamado')}
                    </Button>
                  </TableHead>
                  <TableHead className="text-muted-foreground w-[200px] text-center">
                    <span className="text-xs font-medium">Timer WebSocket</span>
                  </TableHead>
                  <TableHead className="text-muted-foreground w-[60px] text-center">Chat</TableHead>
                  <TableHead className="text-muted-foreground w-[80px] text-center">Observa√ß√£o</TableHead>
                </TableRow>
              </TableHeader>
              <TableBody>
                {loading ? (
                  <TableRow>
                    <TableCell colSpan={10} className="text-center py-8">
                      <div className="inline-block animate-spin rounded-full h-8 w-8 border-b-2 border-primary mb-4"></div>
                      <p>Carregando dados...</p>
                    </TableCell>
                  </TableRow>
                ) : sortedAndPaginatedData.length === 0 ? (
                  <TableRow>
                    <TableCell colSpan={10} className="text-center py-8 text-muted-foreground">
                      {searchTerm ? 'Nenhum resultado encontrado' : 'Nenhum dado dispon√≠vel'}
                    </TableCell>
                  </TableRow>
                ) : (
                  sortedAndPaginatedData.map((alert) => {
                    const isChat = alert.acionado === 'true' || alert.chat;
                    const observacao = localObservacoes.get(alert.chamado);
                    const chamadoNum = parseInt(alert.chamado);
                    const activeLevel = getCurrentActiveLevel(chamadoNum);
                    const timerState = timers.get(chamadoNum);
                    const remainingTime = activeLevel ? getRemainingTime(chamadoNum, activeLevel) : 0;
                    const isFinalized = timerState?.statusFinal === 'finished';

                    return (
                      <TableRow key={alert.id} className="border-border hover:bg-accent transition-colors">
                        <TableCell className="font-medium">
                          <Button
                            variant="link"
                            size="sm"
                            onClick={() => handleOpenDetails(alert)}
                            className="p-0 text-primary hover:underline text-xs font-bold"
                          >
                            {alert.chamado}
                          </Button>
                        </TableCell>
                        <TableCell className="hidden md:table-cell">
                          <Tooltip>
                            <TooltipTrigger asChild>
                              <span className="truncate block max-w-[100px] text-xs">
                                {alert.tipo_chamado}
                              </span>
                            </TooltipTrigger>
                            <TooltipContent>
                              <p className="max-w-xs">{alert.tipo_chamado}</p>
                            </TooltipContent>
                          </Tooltip>
                        </TableCell>
                        <TableCell className="text-xs hidden lg:table-cell">{alert.grupo_chamado}</TableCell>
                        <TableCell className="text-xs hidden lg:table-cell">{alert.status_chamado}</TableCell>
                        <TableCell className="text-xs hidden xl:table-cell">{formatDate(alert.abertura_chamado)}</TableCell>
                        <TableCell>
                          <Tooltip>
                            <TooltipTrigger asChild>
                              <span className="truncate block max-w-[150px] text-xs">
                                {alert.resumo_chamado}
                              </span>
                            </TooltipTrigger>
                            <TooltipContent>
                              <p className="max-w-md">{alert.resumo_chamado}</p>
                            </TooltipContent>
                          </Tooltip>
                        </TableCell>
                        <TableCell className="hidden sm:table-cell">
                          <Badge className={`${getSeverityColor(alert.severidade_chamado)} text-xs`}>
                            {alert.severidade_chamado}
                          </Badge>
                        </TableCell>
                        <TableCell>
                          <div className="flex flex-col items-center gap-2">
                            {isFinalized ? (
                              <div className="space-y-1 text-center">
                                <Badge className="bg-green-600 text-white text-xs font-semibold px-3 py-1 whitespace-nowrap">
                                  ‚úÖ FINALIZADO
                                </Badge>
                                {timerState?.operador && (
                                  <div className="text-xs text-muted-foreground bg-muted rounded px-2 py-1">
                                    üë§ {timerState.operador}
                                  </div>
                                )}
                              </div>
                            ) : activeLevel && timerState ? (
                              <div className="space-y-1 text-center">
                                <div className="flex items-center gap-1 justify-center">
                                  <Timer className="h-3 w-3 text-timer-active animate-pulse" />
                                  <Badge className="bg-timer-active text-white text-xs font-semibold px-2 py-1 whitespace-nowrap">
                                    {LEVEL_NAMES[activeLevel as keyof typeof LEVEL_NAMES]}
                                  </Badge>
                                </div>
                                <div className="text-lg font-mono font-black text-timer-active tracking-wide">
                                  {formatTime(remainingTime)}
                                </div>
                                <Button
                                  variant="default"
                                  size="sm"
                                  onClick={() => handleOpenTimerManagement(alert.chamado)}
                                  className="h-6 px-2 text-xs font-semibold"
                                >
                                  <Settings className="h-3 w-3 mr-1" />
                                  Gerenciar
                                </Button>
                                {timerState.operador && (
                                  <div className="text-xs text-muted-foreground bg-muted rounded px-2 py-1">
                                    üë§ {timerState.operador}
                                  </div>
                                )}
                                {remainingTime <= 300 && remainingTime > 0 && (
                                  <Badge variant="destructive" className="text-xs animate-pulse">
                                    ‚ö†Ô∏è √öltimos 5 min
                                  </Badge>
                                )}
                              </div>
                            ) : (
                              <div className="flex flex-col items-center gap-2">
                                <Button
                                  variant="default"
                                  size="sm"
                                  onClick={() => handleStartTimer(alert.chamado)}
                                  className="h-7 px-3 text-xs font-semibold whitespace-nowrap"
                                  disabled={!isConnected}
                                >
                                  <Play className="h-3 w-3 mr-1" />
                                  Iniciar (20min)
                                </Button>
                                {!isConnected && (
                                  <span className="text-xs text-destructive">WebSocket desconectado</span>
                                )}
                              </div>
                            )}
                          </div>
                        </TableCell>
                        <TableCell>
                          <Tooltip>
                            <TooltipTrigger asChild>
                              <Button
                                variant={isChat ? "default" : "outline"}
                                size="sm"
                                onClick={() => !isChat && handleAcknowledgment(alert)}
                                disabled={isChat}
                                className="h-8 w-8 p-0"
                              >
                                {isChat ? (
                                  <Check className="h-4 w-4" />
                                ) : (
                                  <AlertTriangle className="h-4 w-4" />
                                )}
                              </Button>
                            </TooltipTrigger>
                            <TooltipContent>
                              <p>{isChat ? 'J√° acionado' : 'Acionar grupo'}</p>
                            </TooltipContent>
                          </Tooltip>
                        </TableCell>
                        <TableCell>
                          <Tooltip>
                            <TooltipTrigger asChild>
                              <Button
                                variant={observacao ? "default" : "outline"}
                                size="sm"
                                onClick={() => handleOpenObservacao(alert.chamado)}
                                className="h-8 w-8 p-0"
                              >
                                {observacao ? (
                                  <CheckCircle className="h-4 w-4" />
                                ) : (
                                  <Edit3 className="h-4 w-4" />
                                )}
                              </Button>
                            </TooltipTrigger>
                            <TooltipContent>
                              <p>{observacao ? 'Observa√ß√£o salva' : 'Adicionar observa√ß√£o'}</p>
                            </TooltipContent>
                          </Tooltip>
                        </TableCell>
                      </TableRow>
                    );
                  })
                )}
              </TableBody>
            </Table>
          </div>

          {/* Pagina√ß√£o */}
          {!loading && sortedAndPaginatedData.length > 0 && totalPages > 1 && (
            <div className="flex flex-col sm:flex-row items-center justify-between mt-4 pt-4 border-t border-border gap-4">
              <div className="text-sm text-muted-foreground text-center sm:text-left">
                Mostrando {((currentPage - 1) * itemsPerPage) + 1} a {Math.min(currentPage * itemsPerPage, filteredData.length)} de {filteredData.length} registros
                {searchTerm && filteredData.length !== alertData.length && ` (filtrados de ${alertData.length})`}
              </div>

              <div className="flex items-center gap-2">
                <Label htmlFor="itemsPerPage" className="text-sm font-medium whitespace-nowrap">
                  Por P√°gina:
                </Label>
                <Select value={itemsPerPage.toString()} onValueChange={handleItemsPerPageChange}>
                  <SelectTrigger className="w-20">
                    <SelectValue />
                  </SelectTrigger>
                  <SelectContent>
                    <SelectItem value="5">5</SelectItem>
                    <SelectItem value="10">10</SelectItem>
                    <SelectItem value="15">15</SelectItem>
                    <SelectItem value="20">20</SelectItem>
                  </SelectContent>
                </Select>
              </div>

              <div className="flex items-center gap-2">
                <Button
                  variant="outline"
                  size="sm"
                  onClick={() => handlePageChange(currentPage - 1)}
                  disabled={currentPage === 1}
                  className="h-8 px-3"
                >
                  <ChevronLeft className="h-4 w-4 mr-1" />
                  Anterior
                </Button>

                <div className="flex items-center gap-1">
                  {[...Array(Math.min(totalPages, 5))].map((_, index) => {
                    let page;
                    if (totalPages <= 5) {
                      page = index + 1;
                    } else if (currentPage <= 3) {
                      page = index + 1;
                    } else if (currentPage >= totalPages - 2) {
                      page = totalPages - 4 + index;
                    } else {
                      page = currentPage - 2 + index;
                    }

                    return (
                      <Button
                        key={page}
                        variant={currentPage === page ? "default" : "outline"}
                        size="sm"
                        onClick={() => handlePageChange(page)}
                        className="h-8 w-8 p-0"
                      >
                        {page}
                      </Button>
                    );
                  })}
                </div>

                <Button
                  variant="outline"
                  size="sm"
                  onClick={() => handlePageChange(currentPage + 1)}
                  disabled={currentPage === totalPages}
                  className="h-8 px-3"
                >
                  Pr√≥ximo
                  <ChevronRight className="h-4 w-4 ml-1" />
                </Button>
              </div>
            </div>
          )}

          {/* Modern Timer Management Modal */}
          {selectedChamadoForTimer && (
            <ModernTimerModal
              isOpen={timerManagementOpen}
              onClose={() => {
                setTimerManagementOpen(false);
                setSelectedChamadoForTimer('');
              }}
              chamado={parseInt(selectedChamadoForTimer)}
              currentLevel={getCurrentActiveLevel(parseInt(selectedChamadoForTimer)) || 1}
              remainingTime={getCurrentActiveLevel(parseInt(selectedChamadoForTimer)) ? getRemainingTime(parseInt(selectedChamadoForTimer), getCurrentActiveLevel(parseInt(selectedChamadoForTimer))!) : 0}
              formatTime={formatTime}
              updateObservacao={updateObservacao}
              updateAcionamento={updateAcionamento}
              updateStatusFinal={updateStatusFinal}
              onNextLevel={(c, l, o) => handleNextLevel(c.toString(), l, o)}
              onPreviousLevel={handlePreviousLevel}
              historicoAcionamentos={getHistoricoAcionamentos(parseInt(selectedChamadoForTimer))}
            />
          )}

          {/* Chamado Details Modal */}
          {selectedChamadoForDetails && (
            <ChamadoDetailsModal
              isOpen={detailsModalOpen}
              onClose={() => {
                setDetailsModalOpen(false);
                setSelectedChamadoForDetails(null);
              }}
              chamadoData={selectedChamadoForDetails}
              historicoAcionamentos={getHistoricoAcionamentos(parseInt(selectedChamadoForDetails.chamado))}
              formatDate={formatDate}
              getCurrentActiveLevel={getCurrentActiveLevel}
              timers={timers}
              formatTime={formatTime}
              getRemainingTime={getRemainingTime}
            />
          )}

          {/* Modal de Observa√ß√£o */}
          <Dialog open={observacaoDialogOpen} onOpenChange={setObservacaoDialogOpen}>
            <DialogContent className="sm:max-w-lg border-border bg-card shadow-modal">
              <DialogHeader className="text-left">
                <DialogTitle className="text-xl bg-gradient-to-r from-primary to-primary/70 bg-clip-text text-transparent">
                  üìù Observa√ß√£o - Chamado {selectedChamadoForEdit}
                </DialogTitle>
                <DialogDescription className="text-muted-foreground">
                  Registre observa√ß√µes importantes e defina o operador respons√°vel pelo chamado
                </DialogDescription>
              </DialogHeader>
              <div className="space-y-6 pt-2">
                <div className="space-y-2">
                  <Label htmlFor="operador" className="text-sm font-semibold text-foreground">
                    üë§ Operador Respons√°vel
                  </Label>
                  <Input
                    id="operador"
                    value={operadorText}
                    onChange={(e) => setOperadorText(e.target.value)}
                    placeholder="Ex: Jo√£o Silva"
                    className="border-border focus:border-primary transition-colors"
                  />
                </div>
                <div className="space-y-2">
                  <Label htmlFor="observacao" className="text-sm font-semibold text-foreground">
                    üìÑ Observa√ß√µes
                  </Label>
                  <Textarea
                    id="observacao"
                    value={observacaoText}
                    onChange={(e) => setObservacaoText(e.target.value)}
                    placeholder="Descreva o status atual, a√ß√µes tomadas, pr√≥ximos passos..."
                    rows={5}
                    className="border-border focus:border-primary transition-colors resize-none"
                  />
                  <div className="text-xs text-muted-foreground">
                    {observacaoText.length}/500 caracteres
                  </div>
                </div>
                <div className="flex justify-end gap-3 pt-4 border-t border-border">
                  <Button
                    variant="outline"
                    onClick={() => setObservacaoDialogOpen(false)}
                    className="px-6"
                  >
                    Cancelar
                  </Button>
                  <Button
                    variant="default"
                    onClick={handleSaveObservacao}
                    className="px-6"
                    disabled={!operadorText.trim() && !observacaoText.trim()}
                  >
                    üíæ Salvar Observa√ß√£o
                  </Button>
                </div>
              </div>
            </DialogContent>
          </Dialog>
        </CardContent>
      </Card>
    </TooltipProvider>
  );
};











import React from 'react';
import { Dialog, DialogContent, DialogHeader, DialogTitle } from '@/components/ui/dialog';
import { Badge } from '@/components/ui/badge';
import { Separator } from '@/components/ui/separator';
import { Accordion, AccordionContent, AccordionItem, AccordionTrigger } from '@/components/ui/accordion';
import { 
  Calendar, 
  Clock, 
  User, 
  Phone, 
  MessageSquare, 
  History,
  CheckCircle2,
  XCircle,
  Timer,
  AlertTriangle
} from 'lucide-react';
import { cn } from '@/lib/utils';

interface AlertData {
  id: string;
  chamado: string;
  tipo_chamado: string;
  grupo_chamado: string;
  status_chamado: string;
  abertura_chamado: string;
  resumo_chamado: string;
  severidade_chamado: string;
  acionado: string;
  chat: boolean;
}

interface HistoricoItem {
  operador: string;
  pessoaAcionada: string;
  status: string;
  observacao: string;
  dataHora: string;
  updatedAt: string;
  nivel: number;
}

interface ChamadoDetailsModalProps {
  isOpen: boolean;
  onClose: () => void;
  chamadoData: AlertData;
  historicoAcionamentos: HistoricoItem[];
  formatDate: (date: string) => string;
  getCurrentActiveLevel: (chamado: number) => number | null;
  timers: Map<number, any>;
  formatTime: (seconds: number) => string;
  getRemainingTime: (chamado: number, level: number) => number;
}

const LEVEL_NAMES = {
  1: "Primeiro Acionamento",
  2: "1¬™ Escala√ß√£o",
  3: "2¬™ Escala√ß√£o",
  4: "3¬™ Escala√ß√£o",
  5: "4¬™ Escala√ß√£o"
};

const LEVEL_COLORS = {
  1: { bg: "bg-blue-500/10", border: "border-blue-500/30", text: "text-blue-700 dark:text-blue-400", icon: "text-blue-500" },
  2: { bg: "bg-yellow-500/10", border: "border-yellow-500/30", text: "text-yellow-700 dark:text-yellow-400", icon: "text-yellow-500" },
  3: { bg: "bg-orange-500/10", border: "border-orange-500/30", text: "text-orange-700 dark:text-orange-400", icon: "text-orange-500" },
  4: { bg: "bg-red-500/10", border: "border-red-500/30", text: "text-red-700 dark:text-red-400", icon: "text-red-500" },
  5: { bg: "bg-purple-600/10", border: "border-purple-600/30", text: "text-purple-700 dark:text-purple-400", icon: "text-purple-600" },
};

export const ChamadoDetailsModal: React.FC<ChamadoDetailsModalProps> = ({
  isOpen,
  onClose,
  chamadoData,
  historicoAcionamentos,
  formatDate,
  getCurrentActiveLevel,
  timers,
  formatTime,
  getRemainingTime
}) => {
  const chamadoNum = parseInt(chamadoData.chamado);
  const activeLevel = getCurrentActiveLevel(chamadoNum);
  const timerState = timers.get(chamadoNum);
  const remainingTime = activeLevel ? getRemainingTime(chamadoNum, activeLevel) : 0;
  const isFinalized = timerState?.statusFinal === 'finished';

  const getSeverityColor = (severity: string) => {
    return severity.includes('4')
      ? 'bg-destructive text-destructive-foreground'
      : 'bg-yellow-500 text-yellow-950';
  };

  return (
    <Dialog open={isOpen} onOpenChange={onClose}>
      <DialogContent className="sm:max-w-4xl max-h-[85vh] overflow-y-auto border-border shadow-modal">
        {/* Header Section */}
        <DialogHeader className="pb-6">
          <div className="flex flex-col lg:flex-row lg:items-start lg:justify-between gap-6">
            <div className="space-y-4">
              <DialogTitle className="text-3xl font-bold text-foreground flex items-center gap-3">
                üìã Chamado #{chamadoData.chamado}
                <Badge
                  variant={isFinalized ? "default" : "secondary"}
                  className={cn(
                    "text-sm font-medium ml-2",
                    isFinalized && "bg-success text-success-foreground"
                  )}
                >
                  {isFinalized ? "Finalizado" : "Em Andamento"}
                </Badge>
              </DialogTitle>
              
              <div className="space-y-3">
                <div className="flex items-center gap-2">
                  <Badge className={getSeverityColor(chamadoData.severidade_chamado)}>
                    {chamadoData.severidade_chamado}
                  </Badge>
                  {remainingTime < 0 && (
                    <Badge variant="destructive" className="animate-pulse">
                      üö® TEMPO EXCEDIDO
                    </Badge>
                  )}
                </div>
              </div>
            </div>

            {/* Timer Status */}
            {activeLevel && !isFinalized && (
              <div className="bg-primary/5 border border-primary/20 rounded-xl p-4 text-center">
                <div className="flex items-center justify-center gap-2 mb-2">
                  <Timer className="h-5 w-5 text-primary" />
                  <span className="font-semibold text-primary">
                    {LEVEL_NAMES[activeLevel as keyof typeof LEVEL_NAMES]}
                  </span>
                </div>
                <div className="text-2xl font-mono font-bold text-primary">
                  {formatTime(remainingTime)}
                </div>
                {remainingTime <= 300 && remainingTime > 0 && (
                  <div className="text-xs text-destructive font-semibold mt-1">
                    ‚ö†Ô∏è √öltimos 5 minutos
                  </div>
                )}
              </div>
            )}
          </div>
        </DialogHeader>

        <div className="space-y-6">
          {/* Informa√ß√µes do Chamado */}
          <div className="bg-card border rounded-lg p-6">
            <h3 className="text-xl font-semibold mb-4 flex items-center gap-2">
              <AlertTriangle className="h-5 w-5 text-primary" />
              Informa√ß√µes do Chamado
            </h3>
            
            <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4">
              <div className="space-y-2">
                <Label className="text-sm font-medium text-muted-foreground">Tipo</Label>
                <p className="text-sm font-semibold">{chamadoData.tipo_chamado}</p>
              </div>
              
              <div className="space-y-2">
                <Label className="text-sm font-medium text-muted-foreground">Grupo</Label>
                <p className="text-sm font-semibold">{chamadoData.grupo_chamado}</p>
              </div>
              
              <div className="space-y-2">
                <Label className="text-sm font-medium text-muted-foreground">Status</Label>
                <p className="text-sm font-semibold">{chamadoData.status_chamado}</p>
              </div>
              
              <div className="space-y-2">
                <Label className="text-sm font-medium text-muted-foreground">Abertura</Label>
                <p className="text-sm font-semibold flex items-center gap-1">
                  <Calendar className="h-4 w-4" />
                  {formatDate(chamadoData.abertura_chamado)}
                </p>
              </div>
              
              <div className="space-y-2">
                <Label className="text-sm font-medium text-muted-foreground">Acionado</Label>
                <div className="flex items-center gap-2">
                  {chamadoData.acionado === 'true' || chamadoData.chat ? (
                    <Badge variant="default" className="bg-success text-success-foreground">
                      ‚úÖ Sim
                    </Badge>
                  ) : (
                    <Badge variant="secondary">
                      ‚ùå N√£o
                    </Badge>
                  )}
                </div>
              </div>
            </div>
            
            <Separator className="my-4" />
            
            <div className="space-y-2">
              <Label className="text-sm font-medium text-muted-foreground">Resumo</Label>
              <p className="text-sm leading-relaxed bg-muted p-3 rounded-lg">
                {chamadoData.resumo_chamado}
              </p>
            </div>
          </div>

          {/* Hist√≥rico de Acionamentos */}
          {historicoAcionamentos.length > 0 && (
            <Accordion type="single" collapsible className="w-full" defaultValue="historico">
              <AccordionItem value="historico" className="border-2 border-border rounded-lg bg-card">
                <AccordionTrigger className="px-6 py-4 hover:no-underline hover:bg-muted/50 transition-colors">
                  <div className="flex items-center gap-3">
                    <History className="h-6 w-6 text-primary" />
                    <span className="text-xl font-semibold text-foreground">
                      Hist√≥rico de Acionamentos
                    </span>
                    <Badge variant="secondary" className="ml-2">
                      {historicoAcionamentos.length} registro(s)
                    </Badge>
                  </div>
                </AccordionTrigger>
                <AccordionContent className="px-6 pb-6 pt-2">
                  <div className="relative">
                    {/* Timeline line */}
                    <div className="absolute left-6 top-8 bottom-4 w-0.5 bg-gradient-to-b from-primary/30 via-primary/20 to-transparent" />
                    
                    <div className="space-y-4">
                      {[...historicoAcionamentos]
                        .sort((a, b) => b.nivel - a.nivel)
                        .map((h, idx) => {
                          const levelColor = LEVEL_COLORS[h.nivel as keyof typeof LEVEL_COLORS] || LEVEL_COLORS[1];
                          const StatusIcon = h.status === 'atendido' ? CheckCircle2 : XCircle;
                          const statusColor = h.status === 'atendido' ? 'text-green-500' : 'text-red-500';
                          const statusBg = h.status === 'atendido' ? 'bg-green-500/10' : 'bg-red-500/10';
                          
                          return (
                            <div key={idx} className="relative flex gap-4 group">
                              {/* Timeline node */}
                              <div className="relative z-10">
                                <div className={cn(
                                  "w-12 h-12 rounded-xl flex items-center justify-center font-bold shadow-sm transition-all duration-200 group-hover:scale-110",
                                  levelColor.bg,
                                  levelColor.border,
                                  levelColor.text,
                                  "border"
                                )}>
                                  {h.nivel}
                                </div>
                              </div>

                              {/* Content card */}
                              <div className="flex-1 bg-background rounded-xl border p-5 shadow-sm hover:shadow-md transition-all duration-200 group-hover:border-primary/30">
                                {/* Header with operator and status */}
                                <div className="flex flex-wrap items-start justify-between gap-4 mb-4">
                                  <div className="space-y-3 flex-1">
                                    {/* Operator info */}
                                    <div className="flex items-center gap-3">
                                      <div className="p-2 bg-primary/5 rounded-lg">
                                        <User className="h-4 w-4 text-primary" />
                                      </div>
                                      <div>
                                        <p className="text-xs text-muted-foreground">Operador</p>
                                        <p className="font-semibold text-sm">{h.operador}</p>
                                      </div>
                                    </div>

                                    {/* Person contacted */}
                                    <div className="flex items-center gap-3">
                                      <div className="p-2 bg-primary/5 rounded-lg">
                                        <Phone className="h-4 w-4 text-primary" />
                                      </div>
                                      <div>
                                        <p className="text-xs text-muted-foreground">Pessoa Acionada</p>
                                        <p className="font-semibold text-sm">{h.pessoaAcionada}</p>
                                      </div>
                                    </div>
                                  </div>

                                  {/* Status badge */}
                                  <div className="flex flex-col items-end gap-2">
                                    <div className={cn(
                                      "flex items-center gap-2 px-3 py-1.5 rounded-full",
                                      statusBg
                                    )}>
                                      <StatusIcon className={cn("h-4 w-4", statusColor)} />
                                      <span className={cn("text-sm font-medium capitalize", statusColor)}>
                                        {h.status === 'atendido' ? 'Atendido' : 'N√£o Atendido'}
                                      </span>
                                    </div>

                                    {/* Date and time */}
                                    <div className="flex items-center gap-1.5 text-xs text-muted-foreground">
                                      <Calendar className="h-3 w-3" />
                                      <span>{h.updatedAt}</span>
                                    </div>
                                  </div>
                                </div>

                                {/* Observation section */}
                                {h.observacao && (
                                  <div className="mt-4 pt-4 border-t">
                                    <div className="flex items-start gap-3">
                                      <div className="p-1.5 bg-muted rounded">
                                        <MessageSquare className="h-3.5 w-3.5 text-muted-foreground" />
                                      </div>
                                      <div className="flex-1">
                                        <p className="text-xs text-muted-foreground mb-1">Observa√ß√µes</p>
                                        <p className="text-sm leading-relaxed whitespace-pre-line text-foreground/90">
                                          {h.observacao}
                                        </p>
                                      </div>
                                    </div>
                                  </div>
                                )}

                                {/* Level badge */}
                                <div className="flex items-center gap-2 mt-4">
                                  <Badge 
                                    variant="outline" 
                                    className={cn(
                                      "text-xs",
                                      levelColor.border,
                                      levelColor.text
                                    )}
                                  >
                                    {LEVEL_NAMES[h.nivel as keyof typeof LEVEL_NAMES] || `N√≠vel ${h.nivel}`}
                                  </Badge>
                                  {idx === 0 && (
                                    <Badge variant="secondary" className="text-xs">
                                      Mais recente
                                    </Badge>
                                  )}
                                </div>
                              </div>
                            </div>
                          );
                        })}
                    </div>
                  </div>
                </AccordionContent>
              </AccordionItem>
            </Accordion>
          )}

          {/* Status Summary */}
          <div className="bg-muted/30 border rounded-lg p-6">
            <div className="grid grid-cols-1 md:grid-cols-3 gap-6">
              <div className="text-center">
                <div className="flex items-center justify-center gap-2 mb-2">
                  <Clock className="h-5 w-5 text-primary" />
                  <span className="font-semibold">Status Atual</span>
                </div>
                <p className="text-sm text-muted-foreground">
                  {isFinalized ? 'Finalizado' : activeLevel ? `${LEVEL_NAMES[activeLevel as keyof typeof LEVEL_NAMES]}` : 'Aguardando in√≠cio'}
                </p>
              </div>

              <div className="text-center">
                <div className="flex items-center justify-center gap-2 mb-2">
                  <History className="h-5 w-5 text-primary" />
                  <span className="font-semibold">Acionamentos</span>
                </div>
                <p className="text-sm text-muted-foreground">
                  {historicoAcionamentos.length} registrados
                </p>
              </div>

              <div className="text-center">
                <div className="flex items-center justify-center gap-2 mb-2">
                  <Timer className="h-5 w-5 text-primary" />
                  <span className="font-semibold">Tempo Restante</span>
                </div>
                <p className="text-sm text-muted-foreground">
                  {isFinalized ? 'Conclu√≠do' : activeLevel ? formatTime(remainingTime) : 'N√£o iniciado'}
                </p>
              </div>
            </div>
          </div>
        </div>
      </DialogContent>
    </Dialog>
  );
};

// Componente Label simples caso n√£o exista
const Label = ({ className, children, ...props }: { className?: string; children: React.ReactNode }) => (
  <label className={className} {...props}>{children}</label>
);

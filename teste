MetricCard:
import { LucideIcon } from "lucide-react";
import { Card } from "@/components/ui/card";
import { Progress } from "@/components/ui/progress";
import { ArrowUp, ArrowDown } from "lucide-react";
import { cn } from "@/lib/utils";

interface MetricCardProps {
  title: string;
  value: string;
  trend: "up" | "down";
  icon: LucideIcon;
  color?: string; // tailwind class for text/bg e.g., 'text-blue-600 bg-blue-100'
  performance?: number; // optional percentage to render a progress bar
}

export const MetricCard = ({ title, value, trend, icon: Icon, color, performance }: MetricCardProps) => {
  const iconColor = color?.includes("text-") ? color : undefined;
  const bgTint = color?.includes("bg-") ? color : undefined;
  // Derive indicator color class from text color if provided (fallback to primary)
  // Expecting classes like 'text-blue-600' -> map to 'bg-blue-600'
  const indicatorClass = iconColor
    ? iconColor.replace("text-", "bg-")
    : "bg-primary";

  return (
    <Card className="p-6 hover:shadow-lg transition-shadow">
      <div className="flex items-start justify-between mb-4">
        <div className={cn("p-2 rounded-lg", bgTint ? bgTint : "bg-primary/10") }>
          <Icon className={cn("h-6 w-6", iconColor ? iconColor : "text-primary")} />
        </div>
      </div>
      <h3 className="text-sm font-medium text-muted-foreground mb-2">{title}</h3>
      <p className="text-3xl font-bold text-foreground mb-2">{value}</p>
      {typeof performance === 'number' && (
        <div className="mt-3">
          <div className="flex items-center justify-between mb-2">
            <span className="text-sm font-medium text-foreground">Performance</span>
            <span className="text-sm font-bold text-foreground">{Math.round(performance)}%</span>
          </div>
          <Progress value={performance} className="h-2" indicatorClassName={indicatorClass} />
        </div>
      )}
    </Card>
  );
};


Index:
import { MetricCard } from "@/components/MetricCard";
import { AreaReport } from "@/components/AreaReport";
import { RotateCcw, Timer, Check, Target } from "lucide-react"; // removed BarChart3
import { useState, useRef, useEffect } from "react";
import Timeline from "@/components/Timeline";
import { SnakeLine } from "@/components/SnakeLine";
import RDMTimeline from "@/components/RDMTimeline";
import type { ProductLine, RDM } from "@/types/rdm";

const Index = () => {
  const [selectedIndex, setSelectedIndex] = useState<number | null>(null);
  const [lineCoords, setLineCoords] = useState<{ startX: number; startY: number; endX: number; endY: number } | null>(null);
  const cardRefs = useRef<(HTMLDivElement | null)[]>([]);
  const timelineRef = useRef<HTMLDivElement>(null);

  const metrics = [
    {
      title: "Concluídas",
      value: "R$ 45.2M",
      change: "+12.5% vs mês anterior",
      trend: "up" as const,
      icon: Check,
      performance: 92,
      color: "text-emerald-600 bg-emerald-100",
    },
    {
      title: "Em Andamento",
      value: "32.4K",
      change: "+8.2% vs mês anterior",
      trend: "up" as const,
      icon: Timer,
      performance: 78,
      color: "text-amber-600 bg-amber-100",
    },
    {
      title: "Abertas",
      value: "24.8%",
      change: "+2.1% vs mês anterior",
      trend: "up" as const,
      icon: Target,
      performance: 64,
      color: "text-blue-600 bg-blue-100",
    },
    {
      title: "Rollback",
      value: "87.3%",
      change: "-1.2% vs mês anterior",
      trend: "down" as const,
      icon: RotateCcw,
      performance: 55,
      color: "text-rose-600 bg-rose-100",
    },
  ];

  useEffect(() => {
    const updateCoords = () => {
      if (selectedIndex !== null && cardRefs.current[selectedIndex] && timelineRef.current) {
        const cardRect = cardRefs.current[selectedIndex]!.getBoundingClientRect();
        const timelineRect = timelineRef.current.getBoundingClientRect();

        const clamp = (val: number, min: number, max: number) => Math.min(Math.max(val, min), max);
        const vw = window.innerWidth;
        const vh = window.innerHeight;

        setLineCoords({
          startX: clamp(cardRect.left + cardRect.width / 2, 0, vw),
          startY: clamp(cardRect.top + cardRect.height, 0, vh),
          endX: clamp(timelineRect.left + timelineRect.width / 2, 0, vw),
          endY: clamp(timelineRect.top, 0, vh),
        });
      } else {
        setLineCoords(null);
      }
    };

    // Initial calculation (after layout)
    const raf = requestAnimationFrame(updateCoords);

    // Update on resize and scroll to keep the line aligned
    window.addEventListener("resize", updateCoords);
    window.addEventListener("scroll", updateCoords, { passive: true });

    return () => {
      cancelAnimationFrame(raf);
      window.removeEventListener("resize", updateCoords);
      window.removeEventListener("scroll", updateCoords);
    };
  }, [selectedIndex]);

  const areaReports = [
    {
      area: "Porto Seguro",
      manager: "Ana Silva",
      performance: 92,
      revenue: "R$ 12.5M",
      status: "excellent" as const,
    },
    {
      area: "Porto Serviço",
      manager: "Carlos Oliveira",
      performance: 85,
      revenue: "R$ 10.8M",
      status: "good" as const,
    },
    {
      area: "Porto Bank",
      manager: "Mariana Costa",
      performance: 88,
      revenue: "R$ 15.2M",
      status: "excellent" as const,
    },
    {
      area: "Porto Saúde",
      manager: "Roberto Santos",
      performance: 72,
      revenue: "R$ 6.7M",
      status: "attention" as const,
    },
    {
      area: "Canais Digitais",
      manager: "Juliana Mendes",
      performance: 95,
      revenue: "R$ 8.4M",
      status: "excellent" as const,
    },
    {
      area: "Infraestrutura",
      manager: "Fernando Lima",
      performance: 68,
      revenue: "R$ 5.1M",
      status: "attention" as const,
    },
    {
      area: "Atendimento",
      manager: "Luiz Ferreira",
      performance: 81,
      revenue: "R$ 9.3M",
      status: "good" as const,
    },
    {
      area: "Arquitetura",
      manager: "Patrícia Almeida",
      performance: 74,
      revenue: "R$ 2.1M",
      status: "attention" as const,
    },
  ];

  // Build a sample ProductLine with RDMs for the selected area
  const buildProductLine = (areaName: string, idx: number): ProductLine => {
    const colors = [
      "#3b82f6", // blue-500
      "#10b981", // emerald-500
      "#f59e0b", // amber-500
      "#ef4444", // red-500
      "#8b5cf6", // violet-500
      "#14b8a6", // teal-500
      "#eab308", // yellow-500
      "#06b6d4", // cyan-500
    ];

    const rdmCount = 16; // show 2 rows (8 per row)
    const rdms: RDM[] = Array.from({ length: rdmCount }).map((_, i) => {
      const num = (i + 1).toString().padStart(3, "0");
      const hour = 8 + Math.floor(i / 2);
      const minute = (i % 2) * 30;
      const time = `${hour.toString().padStart(2, "0")}:${minute.toString().padStart(2, "0")}`;
      const status: RDM["status"] = i % 7 === 0 ? "failed" : i % 3 === 0 ? "pending" : "executed";
      return {
        id: `${areaName}-${num}`,
        number: num,
        time,
        status,
        description:
          i % 5 === 0
            ? `Atividade ${num} para ${areaName}. Detalhe descritivo opcional.`
            : undefined,
      };
    });

    return {
      id: `produto-${idx + 1}`,
      name: `RDMS - ${areaName}`,
      color: colors[idx % colors.length],
      rdms: rdms,
    };
  };

  return (
    <div className="min-h-screen bg-[#eff4ef]">
      {/* Header */}
      <header className="bg-white py-2 px-6 shadow-sm">
        <div className="max-w-7xl mx-auto">
          <div className="flex justify-center">
            <img src="/logo.png" alt="Logo" className="h-20 md:h-24 w-auto" />
          </div>
        </div>
      </header>

      <main className="max-w-7xl mx-auto px-6 py-8">
        {/* Metrics Section */}
        <section className="mb-10">
          <h2 className="text-2xl font-bold text-foreground mb-6 text-center">Indicadores Principais</h2>
          <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6">
            {metrics.map((metric, index) => (
              <MetricCard key={index} {...metric} />
            ))}
          </div>
        </section>

        {/* Area Reports Section */}
        <section>
          <h2 className="text-2xl font-bold text-foreground mb-6 text-center">Performance por Área</h2>
          {selectedIndex === null ? (
            <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6">
              {areaReports.map((report, index) => (
                <div
                  key={index}
                  ref={(el) => (cardRefs.current[index] = el)}
                  role="button"
                  tabIndex={0}
                  onClick={() => setSelectedIndex(index)}
                  onKeyDown={(e) => { if (e.key === 'Enter' || e.key === ' ') { e.preventDefault(); setSelectedIndex(index); } }}
                  className="cursor-pointer focus:outline-none focus:ring-2 focus:ring-primary rounded-lg"
                >
                  <AreaReport {...report} />
                </div>
              ))}
            </div>
          ) : (
            <div className="space-y-6">
              <div className="flex items-center justify-between">
                <div className="text-sm text-muted-foreground">Mostrando detalhes de</div>
                <button
                  onClick={() => setSelectedIndex(null)}
                  className="text-sm px-3 py-1.5 rounded-md border border-border hover:bg-accent transition-colors"
                >
                  Mostrar todas as áreas
                </button>
              </div>
              <div 
                ref={(el) => (cardRefs.current[selectedIndex] = el)}
                className="mb-6"
              >
                <AreaReport {...areaReports[selectedIndex]} />
              </div>
              <div ref={timelineRef} className="rounded-lg border p-4">
                <RDMTimeline
                  productLine={buildProductLine(
                    areaReports[selectedIndex].area,
                    selectedIndex
                  )}
                />
              </div>
            </div>
          )}
        </section>
      </main>

      {/* Snake Line Animation */}
      {lineCoords && (
        <SnakeLine
          startX={lineCoords.startX}
          startY={lineCoords.startY}
          endX={lineCoords.endX}
          endY={lineCoords.endY}
        />
      )}
    </div>
  );
};

export default Index;















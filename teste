import { useState, useMemo, useCallback, useEffect } from 'react';
import {
  Check,
  AlertTriangle,
  Timer,
  Play,
  Settings,
  Search,
  ChevronLeft,
  ChevronRight,
  ArrowUpDown,
  ArrowUp,
  ArrowDown,
  User,
  UserCheck,
  Edit3
} from 'lucide-react';

// UI Components
import { Card, CardContent, CardHeader } from '@/components/ui/card';
import { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from '@/components/ui/table';
import { Badge } from '@/components/ui/badge';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { Label } from '@/components/ui/label';
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';
import { Combobox } from '@/components/ui/combobox';
import { Tooltip, TooltipContent, TooltipProvider, TooltipTrigger } from '@/components/ui/tooltip';

// Hooks e funcionalidades
import { toast } from '@/hooks/use-toast';
import { useWebsocketTimers } from "@/hooks/useWebsocketTimers";
import { useChat } from "@/hooks/useChat";

// Componentes customizados
import { ModernTimerModal } from '@/components/ActionTable/ModernTimerModal';
import { ChamadoDetailsModal } from '@/components/ActionTable/ChamadoDetailsModal';
import { AssumeOperatorModal } from '@/components/ActionTable/AssumeOperatorModal';
import { ActionTableFilters } from '@/components/ActionTable/ActionTableFilters';
import { ActionTableBody } from '@/components/ActionTable/ActionTableBody';

/**
 * ====================================================================================
 * INTERFACES E TIPOS
 * ====================================================================================
 */

interface AlertData {
  id: string;
  chamado: string;
  tipo_chamado: string;
  grupo_chamado: string;
  status_chamado: string;
  abertura_chamado: string;
  resumo_chamado: string;
  severidade_chamado: string;
  acionado: string;
  chat: boolean;
  link_chamado: string;
  timestamp_chat?: string;
  sending_chat?: boolean;
}

interface ActionTableProps {
  alertData: AlertData[];
  onUpdateAcknowledgment: (alertId: string, acknowledged: boolean) => void;
  loading: boolean;
}

type SortField = keyof AlertData;
type SortDirection = 'asc' | 'desc' | null;

/**
 * ====================================================================================
 * CONSTANTES E CONFIGURAÇÕES
 * ====================================================================================
 */

// Informações dos níveis de escalação do sistema de timer
const LEVEL_NAMES = {
  1: "Primeiro Acionamento",
  2: "1ª Escalação",
  3: "2ª Escalação",
  4: "3ª Escalação",
  5: "4ª Escalação"
};

// Função para obter duração do timer baseada no nível, tipo e severidade
const getTimerDuration = (level: number, tipoChamado?: string, severidade?: string): number => {
  // Caso especial: incidente com severidade alta (7 minutos)
  if (tipoChamado?.toLowerCase().includes('incidente') && severidade?.includes('4')) {
    return 420; // 7 minutos em segundos
  }

  // Caso padrão: 20 min para nível 1, 10 min para os demais
  return level === 1 ? 1200 : 600;
};

/**
 * ====================================================================================
 * COMPONENTE PRINCIPAL - ActionTable
 * ====================================================================================
 */

export const ActionTable = ({ alertData, onUpdateAcknowledgment, loading }: ActionTableProps) => {

  /**
   * -----------------------------------------------------------------------------------
   * ESTADOS DO COMPONENTE
   * -----------------------------------------------------------------------------------
   */

  // Estados de paginação e filtros
  const [currentPage, setCurrentPage] = useState(1);
  const [searchTerm, setSearchTerm] = useState('');
  const [itemsPerPage, setItemsPerPage] = useState<number>(5);
  // Filtros adicionais
  const [filterGrupo, setFilterGrupo] = useState<string>('all');
  const [filterTipo, setFilterTipo] = useState<string>('all');
  const [filterSeveridade, setFilterSeveridade] = useState<string>('all');
  // Estado pode ser: todos | ativos | finalizados | comResponsavel | semResponsavel | chatEnviado | chatPendente
  const [filterEstado, setFilterEstado] = useState<string>('all');

  // Estados de ordenação
  const [sortField, setSortField] = useState<SortField>('chamado');
  const [sortDirection, setSortDirection] = useState<SortDirection>('desc');

  // Estados dos modais
  const [timerManagementOpen, setTimerManagementOpen] = useState(false);
  const [selectedChamadoForTimer, setSelectedChamadoForTimer] = useState<string>('');

  // Estados do modal de detalhes do chamado
  const [chamadoDetailsOpen, setChamadoDetailsOpen] = useState(false);
  const [selectedChamadoForDetails, setSelectedChamadoForDetails] = useState<AlertData | null>(null);

  // Estados do modal de assumir operador
  const [assumeOperatorOpen, setAssumeOperatorOpen] = useState(false);
  const [selectedChamadoForOperator, setSelectedChamadoForOperator] = useState<string>('');

  // Estado local para armazenar status do chat por chamado (timestamp e flag de envio)
  const [chatStatusMap, setChatStatusMap] = useState<Map<string, { timestamp_chat: string; sending_chat: boolean }>>(new Map());
  // Mapeamento de filhos: chamado pai -> array de chamados filhos
  const [childrenMap, setChildrenMap] = useState<Map<number, number[]>>(new Map());
  // Persistência local para manter bloqueio de envio após reload
  const [chatSentLocal, setChatSentLocal] = useState<Set<string>>(new Set());

  // Carrega do localStorage ao montar
  useEffect(() => {
    try {
      const raw = localStorage.getItem('chatSent');
      if (raw) {
        const arr = JSON.parse(raw);
        if (Array.isArray(arr)) setChatSentLocal(new Set(arr.map(String)));
      }
    } catch {}
  }, []);

  const persistChatSentLocal = useCallback((next: Set<string>) => {
    setChatSentLocal(new Set(next));
    try {
      localStorage.setItem('chatSent', JSON.stringify(Array.from(next)));
    } catch {}
  }, []);

  /**
   * -----------------------------------------------------------------------------------
   * HOOK WEBSOCKET PARA GERENCIAMENTO DE TIMERS
   * -----------------------------------------------------------------------------------
   */

  const {
    timers,
    isConnected,
    startTimer,
    updateObservacao,
    updateAcionamento,
    updateRelacionamentos,
    updateStatusFinal,
    getRemainingTime,
    formatTime,
    getState,
    setWatchedChamados,
    updateOperador, // Certifique-se de que está importando updateOperador
    updateOutage
  } = useWebsocketTimers();

  // Hook de Chat (Google Chat via WebSocket API Gateway -> Lambda)
  const { sendAlertCardToGroupChat, isConnected: isChatConnected, sendUpdateChat } = useChat();

  /**
   * -----------------------------------------------------------------------------------
   * EFEITO PARA REGISTRAR CHAMADOS NO WEBSOCKET
   * -----------------------------------------------------------------------------------
   */

  // Registra os chamados que queremos monitorar no WebSocket quando os dados mudam
  useEffect(() => {
    if (!alertData || alertData.length === 0) return;

    const chamadosNum = alertData.map(a => parseInt(a.chamado));
    setWatchedChamados(chamadosNum);

    // Força a busca do estado atual de cada chamado
    chamadosNum.forEach(chamado => getState(chamado));
  }, [alertData, setWatchedChamados, getState]);

  /**
   * -----------------------------------------------------------------------------------
   * FUNÇÕES UTILITÁRIAS
   * -----------------------------------------------------------------------------------
   */

  /**
   * Obtém a cor do timer baseada no tempo restante
   * @param remainingTime Tempo restante em segundos
   * @returns Classe CSS para colorir o timer
   */
  const getTimerColor = useCallback((remainingTime: number) => {
    if (remainingTime > 600) {
      return 'text-green-600';
    } else if (remainingTime > 300) {
      return 'text-yellow-500';
    } else if (remainingTime > 120) {
      return 'text-orange-500';
    } else {
      return 'text-red-600 animate-pulse';
    }
  }, []);

  /**
   * Formata uma string de data para o padrão brasileiro
   * @param dateString String da data a ser formatada
   * @returns Data formatada ou valor original em caso de erro
   */
  const formatDate = useCallback((dateString: string) => {
    if (!dateString || dateString === '' || dateString === 'null' || dateString === 'undefined') {
      return '-';
    }

    try {
      let date: Date;
      const cleanString = String(dateString).trim();

      // Trata diferentes formatos de timestamp
      if (/^\d{13}$/.test(cleanString)) {
        // Timestamp em millisegundos
        date = new Date(parseInt(cleanString));
      } else if (/^\d{10}$/.test(cleanString)) {
        // Timestamp em segundos
        date = new Date(parseInt(cleanString) * 1000);
      } else if (/^\d{2}\/\d{2}\/\d{4}/.test(cleanString)) {
        // Formato brasileiro DD/MM/YYYY
        const parts = cleanString.split(' ');
        const datePart = parts[0];
        const timePart = parts[1] || '00:00:00';
        const [day, month, year] = datePart.split('/');
        const [hour, minute, second] = timePart.split(':');

        date = new Date(
          parseInt(year),
          parseInt(month) - 1,
          parseInt(day),
          parseInt(hour || '0'),
          parseInt(minute || '0'),
          parseInt(second || '0')
        );
      } else {
        // Tenta parsing padrão
        date = new Date(cleanString);
      }

      // Validações básicas
      if (isNaN(date.getTime())) return cleanString;

      const year = date.getFullYear();
      if (year < 1900 || year > 2100) return cleanString;

      return date.toLocaleString('pt-BR', {
        day: '2-digit',
        month: '2-digit',
        year: 'numeric',
        hour: '2-digit',
        minute: '2-digit',
        second: '2-digit',
      });
    } catch (error) {
      return String(dateString);
    }
  }, []);

  /**
   * Obtém a cor da badge baseada na severidade
   * @param severity String da severidade
   * @returns Classes CSS para a badge
   */
  const getSeverityColor = useCallback((severity: string) => {
    return severity.includes('4')
      ? 'bg-destructive text-destructive-foreground'
      : 'bg-yellow-500 text-yellow-950';
  }, []);

  /**
   * Obtém o nível ativo atual do timer para um chamado
   * @param chamado Número do chamado
   * @returns Nível ativo (1-5) ou null se nenhum timer ativo
   */
  const getCurrentActiveLevel = useCallback((chamado: number) => {
    const timerState = timers.get(chamado);
    if (!timerState) return null;

    // Verifica levels de 1 a 5 para encontrar o ativo
    for (let level = 1; level <= 5; level++) {
      const statusKey = `level${level}_status` as keyof typeof timerState;
      if (timerState[statusKey] === 'running') {
        return level;
      }
    }
    return null;
  }, [timers]);

  /**
   * Monta o histórico de acionamentos do chamado
   * @param chamadoNum Número do chamado
   * @returns Array com histórico dos acionamentos
   */
  const getHistoricoAcionamentos = useCallback((chamadoNum: number) => {
    const timerState = timers.get(chamadoNum);
    if (!timerState) return [];

    const historico: {
      operador: string;
      pessoaAcionada: string;
      status: string;
      observacao: string;
      dataHora: string;
      updatedAt: string;
      nivel: number;
    }[] = [];

    // Percorre todos os níveis e coleta informações do histórico
    for (let nivel = 1; nivel <= 5; nivel++) {
      const operador = timerState[`level${nivel}_operador`] || '';
      const pessoaAcionada = timerState[`level${nivel}_pessoaAcionada`] || '';
      const status = timerState[`level${nivel}_statusAcionamento`] || '';
      const observacao = timerState[`level${nivel}_observacao`] || '';
      const dataHora = timerState[`level${nivel}_dataHora`] || '';
      const updatedAt = timerState[`level${nivel}_updatedAt`] || '';

      if (operador || pessoaAcionada || status || observacao || dataHora) {
        historico.push({
          operador,
          pessoaAcionada,
          status,
          observacao,
          dataHora,
          updatedAt: formatDate(updatedAt),
          nivel,
        });
      }
    }
    return historico;
  }, [timers, formatDate]);

  /**
   * -----------------------------------------------------------------------------------
   * HANDLERS DE ACIONAMENTO
   * -----------------------------------------------------------------------------------
   */

  /**
   * Processa o acionamento de um alerta
   * @param alert Dados do alerta a ser acionado
   */
  const handleAcknowledgment = useCallback(async (alert: AlertData) => {
    try {
      // Evita reenvio se já foi enviado via chat (considera sending_chat de diferentes formatos)
      const sentFlagRaw: any = (alert as any).sending_chat;
      const alreadySent = typeof sentFlagRaw === 'boolean'
        ? sentFlagRaw
        : typeof sentFlagRaw === 'string'
          ? sentFlagRaw.trim().toLowerCase() === 'true'
          : typeof sentFlagRaw === 'number'
            ? sentFlagRaw === 1
            : false;
      if (alreadySent || alert.chat || alert.acionado === 'true') {
        toast({
          title: "Já enviado via chat",
          description: `Chamado ${alert.chamado} já foi enviado ao Google Chat e não pode ser reenviado.`,
        });
        return;
      }

      // Envia atualização via WebSocket imediatamente ao clicar
      const chamadoNum = parseInt(alert.chamado);
      if (!Number.isNaN(chamadoNum)) {
        const nowIso = new Date().toISOString();
        await sendUpdateChat(chamadoNum, { timestamp: nowIso, sending: true });
        // Atualiza estado local para refletir imediatamente no modal
        setChatStatusMap(prev => {
          const next = new Map(prev);
          next.set(alert.chamado, { timestamp_chat: nowIso, sending_chat: true });
          return next;
        });
        // Atualiza persistência local para bloquear após reload
        persistChatSentLocal(new Set([...
          Array.from(chatSentLocal),
          String(alert.chamado)
        ]));
      }

      // Envia card para o Google Chat conforme modelo solicitado
      const ok = await sendAlertCardToGroupChat({
        chamado: alert.chamado,
        severidade_chamado: alert.severidade_chamado,
        resumo_chamado: alert.resumo_chamado,
        abertura_chamado: alert.abertura_chamado,
        grupo_chamado: alert.grupo_chamado,
        tipo_chamado: alert.tipo_chamado,
      });
      if (ok) {
        toast({
          title: "Chat acionado",
          description: `Chamado ${alert.chamado} foi enviado ao Google Chat`,
        });
        onUpdateAcknowledgment(alert.id, true);
        // Mantém como enviado (sending_chat: true) após sucesso
        setChatStatusMap(prev => {
          const next = new Map(prev);
          const current = next.get(alert.chamado);
          if (current) next.set(alert.chamado, { ...current, sending_chat: true });
          return next;
        });
      } else {
        toast({
          title: "Falha ao acionar chat",
          description: `Não foi possível acionar o chat para o chamado ${alert.chamado}`,
          variant: "destructive",
        });
      }
    } catch (error: any) {
      toast({
        title: "Erro ao acionar alerta",
        description: error.message || "Não foi possível concluir o acionamento",
        variant: "destructive",
      });
    }
  }, [onUpdateAcknowledgment, sendAlertCardToGroupChat]);

  /**
   * -----------------------------------------------------------------------------------
   * HANDLERS DE OPERADOR
   * -----------------------------------------------------------------------------------
   */

  /**
   * Abre o modal para assumir/alterar operador do chamado
   * @param chamado String do número do chamado
   */
  const handleOpenAssumeOperator = useCallback((chamado: string) => {
    setSelectedChamadoForOperator(chamado);
    setAssumeOperatorOpen(true);
  }, []);

  /**
   * Fecha o modal de assumir operador
   */
  const handleCloseAssumeOperator = useCallback(() => {
    setAssumeOperatorOpen(false);
    setSelectedChamadoForOperator('');
  }, []);

  /**
   * Processa a atribuição de operador ao chamado
   * @param chamado String do número do chamado
   * @param operatorName Nome do operador
   */
  const handleAssumeOperator = useCallback(async (chamado: string, operatorName: string) => {
    try {
      const chamadoNum = parseInt(chamado);
      const timestamp_responsavel = new Date().toISOString();
      const ResponsavelAcompanhamento = operatorName;

      // Chama a rota UpdateOperador com os campos extras
      updateOperador(
        chamadoNum,
        operatorName,
        timestamp_responsavel,
        ResponsavelAcompanhamento
      );

      // Aguarda e força atualização do estado (garante que todas sessões recebam via WebSocket)
      setTimeout(() => {
        getState(chamadoNum); // já existe, mas pode ser reforçado
      }, 500);

      // Adicional: escute por eventos de atualização do operador no hook useWebsocketTimers
      // (Certifique-se que o hook já faz isso, se não, adicione um listener para eventos do tipo 'operadorAtualizado' e atualize timers)

      return Promise.resolve();
    } catch (error) {
      console.error('Erro ao assumir operador:', error);
      throw error;
    }
  }, [getState, updateOperador]);

  /**
   * -----------------------------------------------------------------------------------
   * HANDLERS DE DETALHES DO CHAMADO
   * -----------------------------------------------------------------------------------
   */

  /**
   * Abre o modal de detalhes do chamado
   * @param alert Dados do alerta selecionado
   */
  const handleOpenChamadoDetails = useCallback((alert: AlertData) => {
    setSelectedChamadoForDetails(alert);
    setChamadoDetailsOpen(true);
    // Hidrata filhos do chamado a partir do estado do servidor, caso exista
    try {
      const parentChamadoNum = parseInt(alert.chamado);
      const state = timers.get(parentChamadoNum);
      const filhos = (state?.filhos as Array<number | string> | undefined) || [];
      if (filhos && Array.isArray(filhos) && filhos.length > 0) {
        const normalized = filhos
          .map((v) => (typeof v === 'string' ? parseInt(v) : v))
          .filter((n) => typeof n === 'number' && !Number.isNaN(n)) as number[];
        if (normalized.length > 0) {
          setChildrenMap((prev) => {
            const next = new Map(prev);
            next.set(parentChamadoNum, normalized);
            return next;
          });
        }
      }
    } catch (e) {
      console.warn('Não foi possível hidratar filhos do chamado ao abrir detalhes:', e);
    }
  }, []);

  /**
   * Fecha o modal de detalhes do chamado
   */
  const handleCloseChamadoDetails = useCallback(() => {
    setChamadoDetailsOpen(false);
    setSelectedChamadoForDetails(null);
  }, []);

  // Atualiza filhos do chamado a partir do modal de detalhes
  const handleUpdateChildren = useCallback((parentChamado: number, children: number[]) => {
    setChildrenMap(prev => {
      const next = new Map(prev);
      next.set(parentChamado, children);
      return next;
    });

    // Envia relacionamentos para API (pai = parentChamado no item filho será tratado na Lambda; aqui atualizamos o pai com lista de filhos)
    try {
      // Atualiza o registro do pai com a lista de filhos
      const parentLevel = getCurrentActiveLevel(parentChamado) || 1;
      updateRelacionamentos(parentChamado, { filhos: children, level: parentLevel });
      // Para cada filho, define o campo pai = parentChamado
      if (children && children.length > 0) {
        children.forEach((child) => {
          const childLevel = getCurrentActiveLevel(child) || 1;
          updateRelacionamentos(child, { pai: parentChamado, level: childLevel });
        });
      }
      // Opcional: solicitar estado atualizado após breve intervalo
      setTimeout(() => getState(parentChamado), 500);
    } catch (e) {
      console.error('Erro ao atualizar relacionamentos (filhos/pai):', e);
    }
  }, [getState, updateRelacionamentos, getCurrentActiveLevel]);

  // Mantém childrenMap sincronizado com o estado vindo do servidor (via WebSocket)
  useEffect(() => {
    try {
      if (!timers || timers.size === 0) return;

      setChildrenMap(prev => {
        const next = new Map(prev);
        timers.forEach((state, chamado) => {
          const filhos = (state as any)?.filhos as Array<number | string> | undefined;
          if (Array.isArray(filhos)) {
            const normalized = filhos
              .map((v) => (typeof v === 'string' ? parseInt(v) : v))
              .filter((n) => typeof n === 'number' && !Number.isNaN(n)) as number[];
            const current = next.get(chamado) || [];
            // compara conteúdo
            const equal = current.length === normalized.length && current.every((v, i) => v === normalized[i]);
            if (!equal) {
              next.set(chamado, normalized);
            }
          }
        });
        return next;
      });
    } catch (e) {
      console.warn('Falha ao sincronizar childrenMap a partir do timers:', e);
    }
  }, [timers]);

  /**
   * -----------------------------------------------------------------------------------
   * HANDLERS DE TIMER
   * -----------------------------------------------------------------------------------
   */

  /**
   * Inicia o timer para o primeiro acionamento
   * @param chamado String do número do chamado
   * @param alert Dados do alerta para obter tipo e severidade
   */
  const handleStartTimer = useCallback((chamado: string, alert: AlertData) => {
    const chamadoNum = parseInt(chamado);

    console.log(`Iniciando Primeiro Acionamento para chamado ${chamado}`);

    const success = startTimer(chamadoNum, 1, getTimerDuration(1, alert.tipo_chamado, alert.severidade_chamado));

    if (success) {
      toast({
        title: "🚀 Primeiro Acionamento Iniciado",
        description: `Timer de 20 minutos iniciado para chamado ${chamado}`,
      });

      // Aguarda e força atualização do estado
      setTimeout(() => {
        getState(chamadoNum);
      }, 1000);
    }
  }, [startTimer, getState]);

  /**
   * Abre o modal de gerenciamento de timer
   * @param chamado String do número do chamado
   */
  const handleOpenTimerManagement = useCallback((chamado: string) => {
    setSelectedChamadoForTimer(chamado);
    setTimerManagementOpen(true);
  }, []);

  /**
   * -----------------------------------------------------------------------------------
   * HANDLERS DE GERENCIAMENTO DE ETAPAS
   * -----------------------------------------------------------------------------------
   */

  /**
   * Avança para o próximo nível do timer
   * @param chamado String do número do chamado
   * @param nextLevel Próximo nível a ser ativado
   * @param observacao Observação do nível atual
   * @param alert Dados do alerta para obter tipo e severidade
   */
  const handleNextLevel = useCallback(async (chamado: string, nextLevel: number, observacao: string, alert?: AlertData) => {
    try {
      const chamadoNum = parseInt(chamado);

      // Salva observação do nível atual antes de avançar
      const currentLevel = getCurrentActiveLevel(chamadoNum);
      if (currentLevel && observacao.trim()) {
        updateObservacao(chamadoNum, currentLevel, observacao.trim());
      }

      // Inicia o próximo nível
      const success = startTimer(chamadoNum, nextLevel, getTimerDuration(nextLevel, alert?.tipo_chamado, alert?.severidade_chamado));

      if (success) {
        // Aguarda para garantir que o timer foi iniciado
        await new Promise(resolve => setTimeout(resolve, 500));

        // Atualiza estado
        getState(chamadoNum);
        return true;
      }

      return false;
    } catch (error) {
      console.error('Erro em handleNextLevel:', error);
      throw error;
    }
  }, [startTimer, updateObservacao, getState, getCurrentActiveLevel]);

  /**
   * Volta para o nível anterior do timer
   * @param chamado String do número do chamado  
   * @param previousLevel Nível anterior a ser ativado
   * @param observacao Observação do nível atual
   * @param alert Dados do alerta para obter tipo e severidade
   */
  const handlePreviousLevel = useCallback(async (chamado: string, previousLevel: number, observacao: string, alert?: AlertData) => {
    try {
      const chamadoNum = parseInt(chamado);

      // Salva observação do nível atual
      const currentLevel = getCurrentActiveLevel(chamadoNum);
      if (currentLevel && observacao.trim()) {
        updateObservacao(chamadoNum, currentLevel, observacao.trim());
      }

      // Inicia o nível anterior
      const success = startTimer(chamadoNum, previousLevel, getTimerDuration(previousLevel, alert?.tipo_chamado, alert?.severidade_chamado));

      if (success) {
        // Aguarda para garantir que o timer foi iniciado
        await new Promise(resolve => setTimeout(resolve, 500));

        // Atualiza estado
        getState(chamadoNum);
        return true;
      }

      return false;
    } catch (error) {
      console.error('Erro em handlePreviousLevel:', error);
      throw error;
    }
  }, [startTimer, updateObservacao, getState, getCurrentActiveLevel]);

  /**
   * Finaliza o chamado
   * @param chamado String do número do chamado
   * @param observacao Observação final
   */
  const handleFinalize = useCallback(async (chamado: string, observacao: string) => {
    try {
      const chamadoNum = parseInt(chamado);

      // Salva observação final
      const currentLevel = getCurrentActiveLevel(chamadoNum);
      if (currentLevel && observacao.trim()) {
        updateObservacao(chamadoNum, currentLevel, observacao.trim());
      }

      // Finaliza o chamado
      updateStatusFinal(chamadoNum, 'finalizado');

      // Aguarda para garantir que o status foi atualizado
      await new Promise(resolve => setTimeout(resolve, 500));

      // Atualiza estado
      getState(chamadoNum);
      return true;
    } catch (error) {
      console.error('Erro em handleFinalize:', error);
      throw error;
    }
  }, [updateObservacao, updateStatusFinal, getState, getCurrentActiveLevel]);

  /**
   * -----------------------------------------------------------------------------------
   * HANDLERS DE ORDENAÇÃO
   * -----------------------------------------------------------------------------------
   */

  /**
   * Gerencia a ordenação das colunas da tabela
   * @param field Campo a ser ordenado
   */
  const handleSort = useCallback((field: SortField) => {
    if (sortField === field) {
      // Cicla entre asc -> desc -> null (volta ao padrão)
      if (sortDirection === 'asc') {
        setSortDirection('desc');
      } else if (sortDirection === 'desc') {
        setSortDirection(null);
        setSortField('chamado');
      } else {
        setSortDirection('asc');
      }
    } else {
      setSortField(field);
      setSortDirection('asc');
    }
  }, [sortField, sortDirection]);

  /**
   * Obtém o ícone de ordenação para uma coluna
   * @param field Campo da coluna
   * @returns JSX do ícone apropriado
   */
  const getSortIcon = useCallback((field: SortField) => {
    if (sortField !== field) {
      return <ArrowUpDown className="h-4 w-4 ml-1 opacity-50" />;
    }
    if (sortDirection === 'asc') {
      return <ArrowUp className="h-4 w-4 ml-1" />;
    }
    if (sortDirection === 'desc') {
      return <ArrowDown className="h-4 w-4 ml-1" />;
    }
    return <ArrowUpDown className="h-4 w-4 ml-1 opacity-50" />;
  }, [sortField, sortDirection]);

  /**
   * -----------------------------------------------------------------------------------
   * PROCESSAMENTO DE DADOS (FILTRO, ORDENAÇÃO E PAGINAÇÃO)
   * -----------------------------------------------------------------------------------
   */

  // Filtragem dos dados baseada no termo de busca
  // Opções únicas para selects de filtro
  const uniqueGrupos = useMemo(() => {
    return Array.from(new Set(alertData.map(a => a.grupo_chamado).filter(Boolean))).sort();
  }, [alertData]);

  const uniqueTipos = useMemo(() => {
    return Array.from(new Set(alertData.map(a => a.tipo_chamado).filter(Boolean))).sort();
  }, [alertData]);

  const uniqueSeveridades = useMemo(() => {
    return Array.from(new Set(alertData.map(a => a.severidade_chamado).filter(Boolean))).sort();
  }, [alertData]);

  const hasActiveFilters = useMemo(() => {
    return (
      filterGrupo !== 'all' ||
      filterTipo !== 'all' ||
      filterSeveridade !== 'all' ||
      filterEstado !== 'all'
    );
  }, [filterGrupo, filterTipo, filterSeveridade, filterEstado]);

  const filteredData = useMemo(() => {
    const searchLower = searchTerm.toLowerCase().trim();

    return alertData.filter((alert) => {
      // Filtro por busca
      if (searchLower) {
        // inclui busca em dados do alerta e também no responsável atual do timer
        const chamadoNum = parseInt(alert.chamado);
        const timerState = timers.get(chamadoNum) as any;
        const responsavelAtual = (timerState?.ResponsavelAcompanhamento || '').toString().toLowerCase();
        const matchesSearch =
          Object.values(alert).some((value) => String(value).toLowerCase().includes(searchLower)) ||
          responsavelAtual.includes(searchLower);
        if (!matchesSearch) return false;
      }

      // Filtro por Grupo
      if (filterGrupo !== 'all' && alert.grupo_chamado !== filterGrupo) return false;
      // Filtro por Tipo
      if (filterTipo !== 'all' && alert.tipo_chamado !== filterTipo) return false;
      // Filtro por Severidade
      if (filterSeveridade !== 'all' && alert.severidade_chamado !== filterSeveridade) return false;

      // Filtro de Estado (usa timers e estados locais)
      if (filterEstado !== 'all') {
        const chamadoNum = parseInt(alert.chamado);
        const timerState = timers.get(chamadoNum) as any;
        const hasResponsavel = (timerState?.ResponsavelAcompanhamento || '').toString().trim().length > 0;

        // Normaliza flag de envio via chat (similar à linha da tabela)
        const wsChatRaw: any = timerState?.sending_chat ?? timerState?.sending;
        const localChatState = chatStatusMap.get(alert.chamado);
        const sentFlagRaw: any =
          typeof wsChatRaw !== 'undefined'
            ? wsChatRaw
            : typeof localChatState?.sending_chat !== 'undefined'
              ? localChatState?.sending_chat
              : (alert as any).sending_chat;
        const sentNormalized = typeof sentFlagRaw === 'boolean'
          ? sentFlagRaw
          : typeof sentFlagRaw === 'string'
            ? sentFlagRaw.trim().toLowerCase() === 'true'
            : typeof sentFlagRaw === 'number'
              ? sentFlagRaw === 1
              : false;
        const isChat = sentNormalized || chatSentLocal.has(alert.chamado) || alert.acionado === 'true' || alert.chat;

        if (filterEstado === 'comResponsavel' && !hasResponsavel) return false;
        if (filterEstado === 'semResponsavel' && hasResponsavel) return false;
        if (filterEstado === 'chatEnviado' && !isChat) return false;
        if (filterEstado === 'chatPendente' && isChat) return false;
      }

      return true;
    });
  }, [alertData, searchTerm, filterGrupo, filterTipo, filterSeveridade, filterEstado, timers, chatStatusMap, chatSentLocal]);

  // Ordenação e paginação dos dados filtrados
  const { sortedAndPaginatedData, totalPages } = useMemo(() => {
    let sortedData = [...filteredData];

    if (sortField && sortDirection) {
      sortedData.sort((a, b) => {
        let aValue: any = a[sortField];
        let bValue: any = b[sortField];

        // Tratamento especial para campos específicos
        if (sortField === 'chamado') {
          aValue = parseInt(a.chamado) || 0;
          bValue = parseInt(b.chamado) || 0;
        } else if (sortField === 'abertura_chamado') {
          aValue = new Date(a.abertura_chamado).getTime() || 0;
          bValue = new Date(b.abertura_chamado).getTime() || 0;
        } else {
          aValue = String(aValue).toLowerCase();
          bValue = String(bValue).toLowerCase();
        }

        if (aValue < bValue) return sortDirection === 'asc' ? -1 : 1;
        if (aValue > bValue) return sortDirection === 'asc' ? 1 : -1;
        return 0;
      });
    } else {
      // Ordenação padrão por chamado (decrescente)
      sortedData.sort((a, b) => {
        const chamadoA = parseInt(a.chamado) || 0;
        const chamadoB = parseInt(b.chamado) || 0;
        return chamadoB - chamadoA;
      });
    }

    // Paginação
    const startIndex = (currentPage - 1) * itemsPerPage;
    const endIndex = startIndex + itemsPerPage;
    const paginatedData = sortedData.slice(startIndex, endIndex);
    const totalPages = Math.ceil(sortedData.length / itemsPerPage);

    return { sortedAndPaginatedData: paginatedData, totalPages };
  }, [filteredData, currentPage, itemsPerPage, sortField, sortDirection]);

  /**
   * -----------------------------------------------------------------------------------
   * HANDLERS DE PAGINAÇÃO
   * -----------------------------------------------------------------------------------
   */

  /**
   * Altera o número de itens por página
   * @param value String do novo valor
   */
  const handleItemsPerPageChange = useCallback((value: string) => {
    const num = parseInt(value, 10);
    setItemsPerPage(num);
    setCurrentPage(1); // Volta para primeira página
  }, []);

  /**
   * Altera a página atual
   * @param page Número da nova página
   */
  const handlePageChange = useCallback((page: number) => {
    setCurrentPage(page);
  }, []);

  /**
   * -----------------------------------------------------------------------------------
   * RENDER DO COMPONENTE
   * -----------------------------------------------------------------------------------
   */

  return (
    <TooltipProvider>
      <Card className="bg-card border-border shadow-elegant">
        <CardHeader>
          <ActionTableFilters
            searchTerm={searchTerm}
            setSearchTerm={setSearchTerm}
            filterGrupo={filterGrupo}
            setFilterGrupo={setFilterGrupo}
            filterTipo={filterTipo}
            setFilterTipo={setFilterTipo}
            filterSeveridade={filterSeveridade}
            setFilterSeveridade={setFilterSeveridade}
            filterEstado={filterEstado}
            setFilterEstado={setFilterEstado}
            uniqueGrupos={uniqueGrupos}
            uniqueTipos={uniqueTipos}
            uniqueSeveridades={uniqueSeveridades}
            hasActiveFilters={hasActiveFilters}
            setCurrentPage={setCurrentPage}
          />

          {/* Contador de resultados */}
          {(searchTerm || hasActiveFilters) && (
            <div className="text-sm text-muted-foreground">
              {filteredData.length === 0 ? (
                searchTerm ? (
                  <span>Nenhum resultado encontrado para "{searchTerm}"</span>
                ) : (
                  <span>Nenhum resultado com os filtros selecionados</span>
                )
              ) : (
                <span>
                  {filteredData.length} resultado{filteredData.length !== 1 ? 's' : ''}
                  {(searchTerm || hasActiveFilters) && filteredData.length !== alertData.length && ` de ${alertData.length}`}
                  {searchTerm && ` para "${searchTerm}"`}
                </span>
              )}
            </div>
          )}
        </CardHeader>

        <CardContent>
          {/* Tabela Responsiva */}
          <div className="w-full">
            <Table className="w-full">
              <TableHeader>
                <TableRow className="border-border hover:bg-accent">
                  {/* Cabeçalhos das colunas com ordenação */}
                  <TableHead className="text-muted-foreground w-[80px]">
                    <Button
                      variant="ghost"
                      className="h-auto p-0 font-medium text-muted-foreground hover:text-foreground text-xs"
                      onClick={() => handleSort('chamado')}
                    >
                      Chamado
                      {getSortIcon('chamado')}
                    </Button>
                  </TableHead>
                  <TableHead className="text-muted-foreground hidden md:table-cell">
                    <Button
                      variant="ghost"
                      className="h-auto p-0 font-medium text-muted-foreground hover:text-foreground text-xs"
                      onClick={() => handleSort('tipo_chamado')}
                    >
                      Classificação
                      {getSortIcon('tipo_chamado')}
                    </Button>
                  </TableHead>
                  <TableHead className="text-muted-foreground hidden lg:table-cell">
                    <Button
                      variant="ghost"
                      className="h-auto p-0 font-medium text-muted-foreground hover:text-foreground text-xs"
                      onClick={() => handleSort('grupo_chamado')}
                    >
                      Grupo
                      {getSortIcon('grupo_chamado')}
                    </Button>
                  </TableHead>
                  <TableHead className="text-muted-foreground hidden xl:table-cell">
                    <Button
                      variant="ghost"
                      className="h-auto p-0 font-medium text-muted-foreground hover:text-foreground text-xs"
                      onClick={() => handleSort('abertura_chamado')}
                    >
                      Abertura
                      {getSortIcon('abertura_chamado')}
                    </Button>
                  </TableHead>
                  <TableHead className="text-muted-foreground">
                    <Button
                      variant="ghost"
                      className="h-auto p-0 font-medium text-muted-foreground hover:text-foreground text-xs"
                      onClick={() => handleSort('resumo_chamado')}
                    >
                      Título
                      {getSortIcon('resumo_chamado')}
                    </Button>
                  </TableHead>
                  <TableHead className="text-muted-foreground hidden sm:table-cell">
                    <Button
                      variant="ghost"
                      className="h-auto p-0 font-medium text-muted-foreground hover:text-foreground text-xs"
                      onClick={() => handleSort('severidade_chamado')}
                    >
                      Severidade
                      {getSortIcon('severidade_chamado')}
                    </Button>
                  </TableHead>
                  <TableHead className="text-muted-foreground w-[120px] text-center">
                    <span className="text-xs font-medium">Responsável</span>
                  </TableHead>
                  <TableHead className="text-muted-foreground w-[200px] text-center">
                    <span className="text-xs font-medium">Temporizador</span>
                  </TableHead>
                  <TableHead className="text-muted-foreground w-[60px] text-center">Chat</TableHead>
                </TableRow>
              </TableHeader>

              <ActionTableBody
                loading={loading}
                sortedAndPaginatedData={sortedAndPaginatedData}
                searchTerm={searchTerm}
                chatStatusMap={chatStatusMap}
                timers={timers}
                chatSentLocal={chatSentLocal}
                getCurrentActiveLevel={getCurrentActiveLevel}
                getRemainingTime={getRemainingTime}
                getTimerColor={getTimerColor}
                getSeverityColor={getSeverityColor}
                formatDate={formatDate}
                isConnected={isConnected}
                isChatConnected={isChatConnected}
                handleOpenChamadoDetails={handleOpenChamadoDetails}
                handleOpenAssumeOperator={handleOpenAssumeOperator}
                handleStartTimer={handleStartTimer}
                handleOpenTimerManagement={handleOpenTimerManagement}
                handleAcknowledgment={handleAcknowledgment}
                LEVEL_NAMES={LEVEL_NAMES}
              />
            </Table>
          </div>

          {/* Sistema de Paginação */}
          {!loading && sortedAndPaginatedData.length > 0 && totalPages > 1 && (
            <div className="flex flex-col sm:flex-row items-center justify-between mt-4 pt-4 border-t border-border gap-4">
              {/* Contador de registros */}
              <div className="text-sm text-muted-foreground text-center sm:text-left">
                Mostrando {((currentPage - 1) * itemsPerPage) + 1} a {Math.min(currentPage * itemsPerPage, filteredData.length)} de {filteredData.length} registros
                {(searchTerm || hasActiveFilters) && filteredData.length !== alertData.length && ` (filtrados de ${alertData.length})`}
              </div>

              {/* Seletor de itens por página */}
              <div className="flex items-center gap-2">
                <Label htmlFor="itemsPerPage" className="text-sm font-medium whitespace-nowrap">
                  Por Página:
                </Label>
                <Select value={itemsPerPage.toString()} onValueChange={handleItemsPerPageChange}>
                  <SelectTrigger className="w-20">
                    <SelectValue />
                  </SelectTrigger>
                  <SelectContent>
                    <SelectItem value="5">5</SelectItem>
                    <SelectItem value="10">10</SelectItem>
                    <SelectItem value="15">15</SelectItem>
                    <SelectItem value="20">20</SelectItem>
                  </SelectContent>
                </Select>
              </div>

              {/* Controles de navegação */}
              <div className="flex items-center gap-2">
                <Button
                  variant="outline"
                  size="sm"
                  onClick={() => handlePageChange(currentPage - 1)}
                  disabled={currentPage === 1}
                  className="h-8 px-3"
                >
                  <ChevronLeft className="h-4 w-4 mr-1" />
                  Anterior
                </Button>

                {/* Botões numerados de páginas */}
                <div className="flex items-center gap-1">
                  {[...Array(Math.min(totalPages, 5))].map((_, index) => {
                    let page;
                    if (totalPages <= 5) {
                      page = index + 1;
                    } else if (currentPage <= 3) {
                      page = index + 1;
                    } else if (currentPage >= totalPages - 2) {
                      page = totalPages - 4 + index;
                    } else {
                      page = currentPage - 2 + index;
                    }

                    return (
                      <Button
                        key={page}
                        variant={currentPage === page ? "default" : "outline"}
                        size="sm"
                        onClick={() => handlePageChange(page)}
                        className="h-8 w-8 p-0"
                      >
                        {page}
                      </Button>
                    );
                  })}
                </div>

                <Button
                  variant="outline"
                  size="sm"
                  onClick={() => handlePageChange(currentPage + 1)}
                  disabled={currentPage === totalPages}
                  className="h-8 px-3"
                >
                  Próximo
                  <ChevronRight className="h-4 w-4 ml-1" />
                </Button>
              </div>
            </div>
          )}

          {/* Modal de Assumir/Alterar Operador */}
          {selectedChamadoForOperator && (
            <AssumeOperatorModal
              isOpen={assumeOperatorOpen}
              onClose={handleCloseAssumeOperator}
              chamado={selectedChamadoForOperator}
              currentOperator={timers.get(parseInt(selectedChamadoForOperator))?.ResponsavelAcompanhamento}
              onAssume={handleAssumeOperator}
            />
          )}

          {/* Modal de Gerenciamento de Timer */}
          {selectedChamadoForTimer && (
            <ModernTimerModal
              isOpen={timerManagementOpen}
              onClose={() => {
                setTimerManagementOpen(false);
                setSelectedChamadoForTimer('');
              }}
              chamado={Number(selectedChamadoForTimer)}
              currentLevel={getCurrentActiveLevel(Number(selectedChamadoForTimer)) || 1}
              remainingTime={
                getCurrentActiveLevel(Number(selectedChamadoForTimer))
                  ? getRemainingTime(
                      Number(selectedChamadoForTimer),
                      getCurrentActiveLevel(Number(selectedChamadoForTimer))!
                    )
                  : 0
              }
              formatTime={formatTime}
              updateObservacao={updateObservacao}
              updateAcionamento={updateAcionamento}
              updateStatusFinal={updateStatusFinal}
              onNextLevel={(chamado, nextLevel, observacao) =>
                handleNextLevel(
                  String(chamado),
                  nextLevel,
                  observacao,
                  sortedAndPaginatedData.find((a) => a.chamado === String(chamado))
                )
              }
              updateOutage={updateOutage}
              // Replicação para filhos
              childrenSelected={childrenMap.get(Number(selectedChamadoForTimer)) || []}
              startTimer={startTimer}
              
              historicoAcionamentos={getHistoricoAcionamentos(Number(selectedChamadoForTimer))}
            />
          )}

          {/* Modal de Detalhes do Chamado */}
          {(() => {
            // Monta os dados do alerta mesclando possíveis fontes de status do chat
            let mergedAlert: AlertData | null = null;
            if (selectedChamadoForDetails) {
              const chamadoNum = parseInt(selectedChamadoForDetails.chamado);
              const timerState = timers.get(chamadoNum) as any;

              // Extrai possíveis campos vindos do estado do WebSocket (se existirem)
              const timerSendingRaw = timerState?.sending_chat ?? timerState?.sending;
              const timerTimestampRaw = timerState?.timestamp_chat ?? timerState?.timestamp;

              const normalizeBool = (val: any): boolean | undefined =>
                typeof val === 'boolean'
                  ? val
                  : typeof val === 'string'
                    ? val.trim().toLowerCase() === 'true'
                    : typeof val === 'number'
                      ? val === 1
                      : undefined;

              const timerSending = normalizeBool(timerSendingRaw);
              const timerTimestamp = typeof timerTimestampRaw !== 'undefined' && timerTimestampRaw !== null
                ? String(timerTimestampRaw)
                : undefined;

              // Dados locais setados ao acionar via tabela nesta sessão
              const localChat = chatStatusMap.get(selectedChamadoForDetails.chamado) || {};

              // Ordem de precedência: dados originais -> timer WS -> estado local (mais recente)
              mergedAlert = {
                ...selectedChamadoForDetails,
                ...(typeof timerSending !== 'undefined' || typeof timerTimestamp !== 'undefined'
                  ? { ...(typeof timerSending !== 'undefined' ? { sending_chat: timerSending } : {}), ...(timerTimestamp ? { timestamp_chat: timerTimestamp } : {}) }
                  : {}),
                ...localChat as any,
              } as AlertData;
            }

            return (
              <ChamadoDetailsModal
                isOpen={chamadoDetailsOpen}
                onClose={handleCloseChamadoDetails}
                alertData={mergedAlert}
                allAlerts={alertData}
                historicoAcionamentos={
                  selectedChamadoForDetails
                    ? getHistoricoAcionamentos(parseInt(selectedChamadoForDetails.chamado))
                    : []
                }
                childrenSelected={selectedChamadoForDetails ? (childrenMap.get(parseInt(selectedChamadoForDetails.chamado)) || []) : []}
                onUpdateChildren={handleUpdateChildren}
              />
            );
          })()}
        </CardContent>
      </Card>
    </TooltipProvider>
  );
};

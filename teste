import React, { useState, useEffect, useCallback, memo } from 'react';
import { Button } from '@/components/ui/button';
import { Textarea } from '@/components/ui/textarea';
import { Input } from '@/components/ui/input';
import { Label } from '@/components/ui/label';
import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';
import { Badge } from '@/components/ui/badge';
import { Trash2, Plus, MessageSquare, Clock, User, RefreshCw, AlertCircle, CheckCircle2, Send, Sparkles } from 'lucide-react';
import { useToast } from '@/hooks/use-toast';
import { cn } from '@/lib/utils';

interface ShiftNote {
  id: string;
  author: string;
  message: string;
  timestamp: string;
  priority: 'normal' | 'important';
}

const formatTimestamp = (timestamp: string) => {
  try {
    const date = new Date(timestamp);
    return date.toLocaleString('pt-BR', {
      day: '2-digit',
      month: '2-digit',
      hour: '2-digit',
      minute: '2-digit',
    });
  } catch {
    return timestamp || '';
  }
};

const ShiftNoteItem = memo(({ note, onRemoveNote, index }: { note: ShiftNote; onRemoveNote: (id: string) => void; index: number }) => {
  return (
    <Card 
      className={cn(
        "relative transition-smooth hover:shadow-hover border-2 overflow-hidden animate-fade-in",
        note.priority === 'important'
          ? "border-alert-warning-border bg-gradient-to-br from-alert-warning-bg via-background to-alert-warning-bg/50"
          : "border-panel-border bg-gradient-to-br from-card via-background to-card"
      )}
      style={{ animationDelay: `${index * 50}ms` }}
    >
      {note.priority === 'important' && (
        <div className="absolute top-0 left-0 right-0 h-1 bg-gradient-to-r from-alert-warning via-alert-warning/70 to-alert-warning" />
      )}
      
      <CardContent className="p-5">
        <div className="flex items-start justify-between gap-4">
          <div className="flex-1 space-y-3">
            <div className="flex flex-wrap items-center gap-3">
              <div className="flex items-center gap-2">
                <div className="flex items-center justify-center w-8 h-8 rounded-lg bg-gradient-to-br from-primary/10 to-accent/10 border border-primary/20">
                  <User className="h-4 w-4 text-primary" />
                </div>
                <span className="font-semibold text-foreground">{note.author}</span>
              </div>
              
              <div className="flex items-center gap-1.5 text-sm text-muted-foreground">
                <Clock className="h-3.5 w-3.5" />
                <span>{formatTimestamp(note.timestamp)}</span>
              </div>
              
              {note.priority === 'important' && (
                <Badge className="bg-alert-warning text-white border-alert-warning-border shadow-sm">
                  <Sparkles className="h-3 w-3 mr-1" />
                  IMPORTANTE
                </Badge>
              )}
            </div>
            
            <div className={cn(
              "p-4 rounded-xl border-2 leading-relaxed whitespace-pre-wrap break-words",
              note.priority === 'important'
                ? "border-alert-warning-border bg-alert-warning-bg/30"
                : "border-panel-border bg-background/50"
            )}>
              <p className="text-foreground">{note.message}</p>
            </div>
          </div>
          
          <Button
            variant="ghost"
            size="icon"
            onClick={() => onRemoveNote(note.id)}
            className="hover:bg-destructive/10 hover:text-destructive transition-smooth flex-shrink-0"
            aria-label="Remover recado"
          >
            <Trash2 className="h-4 w-4" />
          </Button>
        </div>
      </CardContent>
    </Card>
  );
});

const ShiftNoteList = ({ notes, onRemoveNote }: { notes: ShiftNote[]; onRemoveNote: (id: string) => void }) => {
  if (!notes || notes.length === 0) {
    return (
      <div className="flex flex-col items-center justify-center py-16 px-4 border-2 border-dashed border-panel-border rounded-2xl bg-gradient-to-br from-background to-background/50">
        <div className="w-20 h-20 rounded-full bg-gradient-to-br from-primary/10 to-accent/10 flex items-center justify-center mb-6 relative">
          <MessageSquare className="h-10 w-10 text-primary/50" />
          <div className="absolute inset-0 rounded-full bg-primary/5 animate-pulse-glow" />
        </div>
        <p className="text-lg font-semibold text-foreground mb-2">Nenhum recado no turno atual</p>
        <p className="text-sm text-muted-foreground">Adicione o primeiro recado para começar</p>
      </div>
    );
  }

  return (
    <div className="space-y-3">
      {notes.map((note, index) => (
        <ShiftNoteItem key={note.id} note={note} onRemoveNote={onRemoveNote} index={index} />
      ))}
    </div>
  );
};

const ShiftNoteForm = ({
  authorName,
  setAuthorName,
  newNote,
  setNewNote,
  isImportant,
  setIsImportant,
  onAddNote,
}: {
  authorName: string;
  setAuthorName: (val: string) => void;
  newNote: string;
  setNewNote: (val: string) => void;
  isImportant: boolean;
  setIsImportant: (val: boolean) => void;
  onAddNote: () => void;
}) => {
  return (
    <Card className="border-panel-border shadow-card hover:shadow-hover transition-smooth overflow-hidden bg-gradient-to-br from-card via-card to-background">
      <CardHeader className="relative overflow-hidden border-b border-panel-border bg-gradient-to-r from-primary/5 via-accent/5 to-primary/5 backdrop-blur-sm">
        <div className="absolute inset-0 bg-gradient-to-r from-primary/10 via-transparent to-accent/10 opacity-50" />
        <CardTitle className="relative flex items-center gap-3">
          <div className="relative flex items-center justify-center w-10 h-10 rounded-xl bg-gradient-to-br from-primary to-accent shadow-glow">
            <MessageSquare className="h-5 w-5 text-white" />
            <div className="absolute inset-0 rounded-xl bg-white/20 animate-pulse-glow" />
          </div>
          <div>
            <h2 className="text-2xl font-bold bg-gradient-to-r from-primary to-accent bg-clip-text text-transparent">
              Recados da Equipe
            </h2>
            <p className="text-sm text-muted-foreground font-normal mt-0.5">
              Comunicação entre turnos
            </p>
          </div>
        </CardTitle>
      </CardHeader>
      
      <CardContent className="p-6 space-y-6">
        <div className="relative border-2 border-panel-border rounded-2xl p-6 bg-gradient-to-br from-panel-bg to-background shadow-card">
          <div className="absolute top-0 left-0 right-0 h-1 bg-gradient-to-r from-primary via-accent to-primary rounded-t-2xl" />
          
          <div className="space-y-5">
            <div className="grid grid-cols-1 md:grid-cols-2 gap-5">
              <div className="space-y-2">
                <Label htmlFor="author-name" className="flex items-center gap-2 text-sm font-medium text-foreground">
                  <User className="h-4 w-4 text-primary" />
                  Seu Nome
                </Label>
                <Input
                  id="author-name"
                  value={authorName}
                  onChange={(e) => setAuthorName(e.target.value)}
                  placeholder="Digite seu nome"
                  className="h-11 bg-background border-2 focus:border-primary transition-smooth"
                />
              </div>
              
              <div className="flex items-end">
                <div className="flex items-center gap-3 h-11 px-4 rounded-lg border-2 border-panel-border bg-background hover:border-accent/50 transition-smooth">
                  <input
                    type="checkbox"
                    id="important-checkbox"
                    checked={isImportant}
                    onChange={(e) => setIsImportant(e.target.checked)}
                    className="h-4 w-4 rounded border-border accent-alert-warning cursor-pointer"
                  />
                  <Label htmlFor="important-checkbox" className="text-sm font-medium cursor-pointer flex items-center gap-2">
                    <Sparkles className="h-3.5 w-3.5 text-alert-warning" />
                    Marcar como importante
                  </Label>
                </div>
              </div>
            </div>

            <div className="space-y-2">
              <Label htmlFor="note-message" className="flex items-center gap-2 text-sm font-medium text-foreground">
                <MessageSquare className="h-4 w-4 text-accent" />
                Mensagem do Recado
              </Label>
              <Textarea
                id="note-message"
                value={newNote}
                onChange={(e) => setNewNote(e.target.value)}
                placeholder="Digite o recado para o próximo turno..."
                className="min-h-[140px] resize-none bg-background border-2 focus:border-accent transition-smooth"
              />
              <p className="text-xs text-muted-foreground flex items-center gap-1.5">
                <span className="w-1 h-1 rounded-full bg-muted-foreground" />
                Seja claro e objetivo na sua comunicação
              </p>
            </div>

            <Button 
              onClick={onAddNote} 
              className="w-full h-11 bg-gradient-to-r from-primary to-accent hover:shadow-glow transition-smooth font-semibold"
            >
              <Send className="h-4 w-4 mr-2" />
              Enviar Recado
            </Button>
          </div>
        </div>
      </CardContent>
    </Card>
  );
};

const API_URL = 'https://f6ffk8e9fe.execute-api.us-east-1.amazonaws.com/prod/recadosturno';

async function postShiftNote(nome: string, recado: string, importante: boolean) {
  const response = await fetch(API_URL, {
    method: 'POST',
    headers: { 'Content-Type': 'application/json' },
    body: JSON.stringify({ nome, recado, importante }),
  });
  if (!response.ok) {
    const errorData = await response.text();
    console.error('POST error:', response.status, errorData);
    throw new Error(JSON.parse(errorData || '{}').error || 'Erro ao salvar recado');
  }
  return response.json();
}

async function deleteShiftNote(key: string) {
  const response = await fetch(API_URL, {
    method: 'DELETE',
    headers: { 'Content-Type': 'application/json' },
    body: JSON.stringify({ key }),
  });
  if (!response.ok) {
    const errorData = await response.text();
    console.error('DELETE error:', response.status, errorData);
    throw new Error(JSON.parse(errorData || '{}').error || 'Erro ao remover recado');
  }
  return response.json();
}

async function getShiftNotes(): Promise<ShiftNote[]> {
  const response = await fetch(API_URL, { method: 'GET' });

  if (!response.ok) {
    const txt = await response.text();
    console.error('GET error:', response.status, txt);
    throw new Error(txt || 'Erro ao carregar recados');
  }

  const text = await response.text();
  let parsed: any = null;
  if (!text) {
    parsed = null;
  } else {
    try {
      parsed = JSON.parse(text);
    } catch (err) {
      console.error('Erro ao parsear JSON do GET:', err, 'texto:', text);
      throw new Error('Resposta inválida do servidor');
    }
  }

  let rawNotes: any[] = [];
  if (parsed == null) {
    rawNotes = [];
  } else if (Array.isArray(parsed)) {
    rawNotes = parsed;
  } else if (parsed.notes && Array.isArray(parsed.notes)) {
    rawNotes = parsed.notes;
  } else if (parsed.recados && Array.isArray(parsed.recados)) {
    rawNotes = parsed.recados;
  } else if (parsed && (parsed.nome || parsed.recado || parsed.key)) {
    rawNotes = [parsed];
  } else {
    console.warn('Formato inesperado do payload GET:', parsed);
    rawNotes = [];
  }

  return rawNotes.map((item: any, idx: number) => ({
    id: item.key || item.id || item.Key || `note-${idx}`,
    author: item.nome || item.author || '',
    message: item.recado || item.message || '',
    timestamp: item.timestamp || item.ts || new Date().toISOString(),
    priority: item.importante ? 'important' : 'normal',
  }));
}

export const ShiftNotes = () => {
  const { toast } = useToast();
  const [notes, setNotes] = useState<ShiftNote[]>([]);
  const [newNote, setNewNote] = useState('');
  const [authorName, setAuthorName] = useState('');
  const [isImportant, setIsImportant] = useState(false);
  const [loading, setLoading] = useState(false);
  const [error, setError] = useState<string | null>(null);

  const loadNotes = useCallback(async () => {
    setLoading(true);
    setError(null);
    try {
      const fetchedNotes = await getShiftNotes();
      setNotes(fetchedNotes);
    } catch (err: any) {
      console.error('Erro ao carregar recados:', err);
      setError(err.message || 'Erro ao carregar recados');
      toast({
        title: 'Erro',
        description: err.message || 'Não foi possível carregar os recados.',
        variant: 'destructive',
      });
    } finally {
      setLoading(false);
    }
  }, [toast]);

  useEffect(() => {
    loadNotes();

    const savedAuthor = localStorage.getItem('shiftNotesAuthor');
    if (savedAuthor) setAuthorName(savedAuthor);
  }, [loadNotes]);

  useEffect(() => {
    if (authorName) {
      localStorage.setItem('shiftNotesAuthor', authorName);
    }
  }, [authorName]);

  const addNote = useCallback(async () => {
    if (!newNote.trim() || !authorName.trim()) {
      toast({
        title: 'Campos obrigatórios',
        description: 'Preencha seu nome e a mensagem do recado.',
        variant: 'destructive',
      });
      return;
    }
    try {
      const data = await postShiftNote(authorName.trim(), newNote.trim(), isImportant);
      const note: ShiftNote = {
        id: data.key,
        author: authorName.trim(),
        message: newNote.trim(),
        timestamp: data.timestamp,
        priority: isImportant ? 'important' : 'normal',
      };
      setNotes((prev) => [note, ...prev]);
      setNewNote('');
      setIsImportant(false);
      toast({
        title: 'Recado enviado!',
        description: 'O recado foi salvo com sucesso.',
        variant: 'default'
      });
    } catch (error: any) {
      toast({
        title: 'Erro',
        description: error.message || 'Não foi possível salvar o recado.',
        variant: 'destructive',
      });
    }
  }, [newNote, authorName, isImportant, toast]);

  const removeNote = useCallback(async (noteId: string) => {
    try {
      await deleteShiftNote(noteId);
      setNotes((prev) => prev.filter((note) => note.id !== noteId));
      toast({
        title: 'Recado removido',
        description: 'O recado foi excluído com sucesso.',
        variant: 'default'
      });
    } catch (error: any) {
      toast({
        title: 'Erro',
        description: error.message || 'Não foi possível remover o recado.',
        variant: 'destructive',
      });
    }
  }, [toast]);

  const importantCount = notes.filter(n => n.priority === 'important').length;

  return (
    <div className="min-h-screen bg-gradient-to-br from-background via-background to-muted/30">
      <div className="max-w-5xl mx-auto p-6 space-y-8">
        {/* Formulário para novo recado */}
        <ShiftNoteForm
          authorName={authorName}
          setAuthorName={setAuthorName}
          newNote={newNote}
          setNewNote={setNewNote}
          isImportant={isImportant}
          setIsImportant={setIsImportant}
          onAddNote={addNote}
        />

        {/* Lista de recados */}
        <Card className="border-panel-border shadow-card hover:shadow-hover transition-smooth overflow-hidden bg-gradient-to-br from-card via-card to-background">
          <CardHeader className="border-b border-panel-border bg-gradient-to-r from-background to-muted/20">
            <div className="flex items-center justify-between">
              <div className="flex items-center gap-3">
                <div className="w-1.5 h-8 bg-gradient-to-b from-primary to-accent rounded-full" />
                <div>
                  <h2 className="text-xl font-bold text-foreground flex items-center gap-2">
                    Recados Ativos
                    {notes.length > 0 && (
                      <Badge variant="secondary" className="ml-1">
                        {notes.length}
                      </Badge>
                    )}
                  </h2>
                  {importantCount > 0 && (
                    <p className="text-sm text-alert-warning flex items-center gap-1.5 mt-1">
                      <AlertCircle className="h-3.5 w-3.5" />
                      {importantCount} importante{importantCount !== 1 ? 's' : ''}
                    </p>
                  )}
                </div>
              </div>
              
              <Button
                onClick={loadNotes}
                variant="outline"
                size="sm"
                disabled={loading}
                className="border-panel-border hover:border-primary hover:bg-primary/5 transition-smooth"
              >
                <RefreshCw className={cn("h-4 w-4 mr-2", loading && "animate-spin")} />
                Atualizar
              </Button>
            </div>
          </CardHeader>

          <CardContent className="p-6">
            {loading ? (
              <div className="flex flex-col items-center justify-center py-16">
                <div className="w-16 h-16 rounded-full bg-gradient-to-br from-primary/10 to-accent/10 flex items-center justify-center mb-4">
                  <RefreshCw className="h-8 w-8 text-primary animate-spin" />
                </div>
                <p className="text-muted-foreground font-medium">Carregando recados...</p>
              </div>
            ) : error ? (
              <div className="flex flex-col items-center justify-center py-16 px-4 border-2 border-dashed border-destructive/50 rounded-2xl bg-destructive/5">
                <div className="w-16 h-16 rounded-full bg-destructive/10 flex items-center justify-center mb-4">
                  <AlertCircle className="h-8 w-8 text-destructive" />
                </div>
                <p className="text-destructive font-semibold mb-2">Erro ao carregar recados</p>
                <p className="text-muted-foreground text-sm mb-4">{error}</p>
                <Button onClick={loadNotes} variant="outline" size="sm" className="border-destructive/50 hover:bg-destructive/5">
                  <RefreshCw className="h-4 w-4 mr-2" />
                  Tentar novamente
                </Button>
              </div>
            ) : (
              <ShiftNoteList notes={notes} onRemoveNote={removeNote} />
            )}
          </CardContent>
        </Card>
      </div>
    </div>
  );
};

import { useState } from 'react';
import {
  Dialog,
  DialogContent,
  DialogHeader,
  DialogTitle,
} from '@/components/ui/dialog';
import { Badge } from '@/components/ui/badge';
import { Button } from '@/components/ui/button';
import { Separator } from '@/components/ui/separator';
import { ScrollArea } from '@/components/ui/scroll-area';
import { 
  Calendar, 
  Clock, 
  User, 
  AlertTriangle, 
  Tag, 
  FileText,
  Users,
  X
} from 'lucide-react';

interface AlertData {
  id: string;
  chamado: string;
  tipo_chamado: string;
  grupo_chamado: string;
  status_chamado: string;
  abertura_chamado: string;
  resumo_chamado: string;
  severidade_chamado: string;
  acionado: string;
  chat: boolean;
}

interface ChamadoDetailsModalProps {
  isOpen: boolean;
  onClose: () => void;
  alertData: AlertData | null;
}

export const ChamadoDetailsModal = ({ isOpen, onClose, alertData }: ChamadoDetailsModalProps) => {
  if (!alertData) return null;

  const formatDate = (dateString: string) => {
    if (!dateString || dateString === '' || dateString === 'null' || dateString === 'undefined') {
      return '-';
    }

    try {
      let date: Date;
      const cleanString = String(dateString).trim();

      if (/^\d{13}$/.test(cleanString)) {
        date = new Date(parseInt(cleanString));
      } else if (/^\d{10}$/.test(cleanString)) {
        date = new Date(parseInt(cleanString) * 1000);
      } else if (/^\d{2}\/\d{2}\/\d{4}/.test(cleanString)) {
        const parts = cleanString.split(' ');
        const datePart = parts[0];
        const timePart = parts[1] || '00:00:00';
        const [day, month, year] = datePart.split('/');
        const [hour, minute, second] = timePart.split(':');

        date = new Date(
          parseInt(year),
          parseInt(month) - 1,
          parseInt(day),
          parseInt(hour || '0'),
          parseInt(minute || '0'),
          parseInt(second || '0')
        );
      } else {
        date = new Date(cleanString);
      }

      if (isNaN(date.getTime())) return cleanString;

      const year = date.getFullYear();
      if (year < 1900 || year > 2100) return cleanString;

      return date.toLocaleString('pt-BR', {
        day: '2-digit',
        month: '2-digit',
        year: 'numeric',
        hour: '2-digit',
        minute: '2-digit',
        second: '2-digit',
      });
    } catch (error) {
      return String(dateString);
    }
  };

  const getSeverityColor = (severity: string) => {
    return severity.includes('4')
      ? 'bg-destructive text-destructive-foreground'
      : 'bg-yellow-500 text-yellow-950';
  };

  const isChat = alertData.acionado === 'true' || alertData.chat;

  return (
    <Dialog open={isOpen} onOpenChange={onClose}>
      <DialogContent className="max-w-4xl max-h-[80vh] bg-card border-border">
        <DialogHeader className="flex flex-row items-center justify-between space-y-0 pb-4">
          <DialogTitle className="text-xl font-bold flex items-center gap-2">
            <FileText className="h-5 w-5 text-primary" />
            Detalhes do Chamado #{alertData.chamado}
          </DialogTitle>
          <Button
            variant="ghost"
            size="sm"
            onClick={onClose}
            className="h-8 w-8 p-0"
          >
            <X className="h-4 w-4" />
          </Button>
        </DialogHeader>

        <ScrollArea className="max-h-[calc(80vh-120px)]">
          <div className="space-y-6">
            {/* Status e Severidade */}
            <div className="flex flex-wrap gap-4 items-center">
              <Badge 
                variant={isChat ? "default" : "secondary"}
                className={`${isChat ? 'bg-green-600 text-white' : ''} text-sm px-3 py-1`}
              >
                {isChat ? '✅ Acionado' : '⏳ Pendente'}
              </Badge>
              <Badge className={`${getSeverityColor(alertData.severidade_chamado)} text-sm px-3 py-1`}>
                <AlertTriangle className="h-3 w-3 mr-1" />
                Severidade {alertData.severidade_chamado}
              </Badge>
              <Badge variant="outline" className="text-sm px-3 py-1">
                {alertData.status_chamado}
              </Badge>
            </div>

            <Separator />

            {/* Informações Principais */}
            <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
              {/* Coluna Esquerda */}
              <div className="space-y-4">
                <div className="space-y-3">
                  <h3 className="text-lg font-semibold text-foreground flex items-center gap-2">
                    <Tag className="h-4 w-4" />
                    Informações Básicas
                  </h3>
                  
                  <div className="space-y-3">
                    <div className="flex flex-col space-y-1">
                      <span className="text-sm font-medium text-muted-foreground">Número do Chamado</span>
                      <span className="text-base font-mono bg-muted px-3 py-2 rounded-md">
                        #{alertData.chamado}
                      </span>
                    </div>

                    <div className="flex flex-col space-y-1">
                      <span className="text-sm font-medium text-muted-foreground flex items-center gap-1">
                        <Users className="h-3 w-3" />
                        Grupo Responsável
                      </span>
                      <span className="text-base bg-muted px-3 py-2 rounded-md">
                        {alertData.grupo_chamado}
                      </span>
                    </div>

                    <div className="flex flex-col space-y-1">
                      <span className="text-sm font-medium text-muted-foreground">Classificação</span>
                      <span className="text-base bg-muted px-3 py-2 rounded-md">
                        {alertData.tipo_chamado}
                      </span>
                    </div>
                  </div>
                </div>
              </div>

              {/* Coluna Direita */}
              <div className="space-y-4">
                <div className="space-y-3">
                  <h3 className="text-lg font-semibold text-foreground flex items-center gap-2">
                    <Clock className="h-4 w-4" />
                    Temporização
                  </h3>
                  
                  <div className="space-y-3">
                    <div className="flex flex-col space-y-1">
                      <span className="text-sm font-medium text-muted-foreground flex items-center gap-1">
                        <Calendar className="h-3 w-3" />
                        Data de Abertura
                      </span>
                      <span className="text-base font-mono bg-muted px-3 py-2 rounded-md">
                        {formatDate(alertData.abertura_chamado)}
                      </span>
                    </div>

                    <div className="flex flex-col space-y-1">
                      <span className="text-sm font-medium text-muted-foreground">Status Atual</span>
                      <span className="text-base bg-muted px-3 py-2 rounded-md">
                        {alertData.status_chamado}
                      </span>
                    </div>

                    <div className="flex flex-col space-y-1">
                      <span className="text-sm font-medium text-muted-foreground">Severidade</span>
                      <div className="flex items-center gap-2">
                        <Badge className={`${getSeverityColor(alertData.severidade_chamado)}`}>
                          {alertData.severidade_chamado}
                        </Badge>
                      </div>
                    </div>
                  </div>
                </div>
              </div>
            </div>

            <Separator />

            {/* Resumo/Título do Chamado */}
            <div className="space-y-3">
              <h3 className="text-lg font-semibold text-foreground flex items-center gap-2">
                <FileText className="h-4 w-4" />
                Resumo do Chamado
              </h3>
              <div className="bg-muted p-4 rounded-lg">
                <p className="text-base leading-relaxed">{alertData.resumo_chamado}</p>
              </div>
            </div>

            <Separator />

            {/* Informações Técnicas */}
            <div className="space-y-3">
              <h3 className="text-lg font-semibold text-foreground">Informações Técnicas</h3>
              <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                <div className="space-y-2">
                  <span className="text-sm font-medium text-muted-foreground">ID do Alerta</span>
                  <span className="text-sm font-mono bg-muted px-2 py-1 rounded block">
                    {alertData.id}
                  </span>
                </div>
                <div className="space-y-2">
                  <span className="text-sm font-medium text-muted-foreground">Status de Acionamento</span>
                  <span className="text-sm bg-muted px-2 py-1 rounded block">
                    {alertData.acionado}
                  </span>
                </div>
              </div>
            </div>
          </div>
        </ScrollArea>

        {/* Footer com ações */}
        <div className="flex justify-end gap-3 pt-4 border-t border-border">
          <Button variant="outline" onClick={onClose}>
            Fechar
          </Button>
          <Button 
            variant="default"
            onClick={() => {
              // Aqui você pode adicionar ações específicas se necessário
              console.log('Ação no chamado:', alertData.chamado);
            }}
          >
            <User className="h-4 w-4 mr-2" />
            Assumir Chamado
          </Button>
        </div>
      </DialogContent>
    </Dialog>
  );
};

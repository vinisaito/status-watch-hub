import json
import os
import pyodbc
import traceback

    try:
        # --- L√™ vari√°veis de ambiente ---
        server = os.environ["SERVER"]
        user = os.environ["USER"]
        password = os.environ["PASSWORD"]
        database = os.environ["DATABASE"]
        port = os.environ.get("PORT", "1433")

        print(f"‚ÑπÔ∏è Conectando ao banco: {server}:{port} | DB: {database}")

        # --- String de conex√£o com timeout mais curto ---
        conn_str = (
            f"DRIVER={{ODBC Driver 18 for SQL Server}};"
            f"SERVER={server},{port};"
            f"DATABASE={database};"
            f"UID={user};"
            f"PWD={password};"
            "Encrypt=yes;"
            "TrustServerCertificate=yes;"
            "Connection Timeout=10;"
        )

        # --- Teste de conex√£o ---
        print("üîÑ Tentando conectar...")
        conn = pyodbc.connect(conn_str)
        print("‚úÖ Conex√£o estabelecida com sucesso.")

        cursor = conn.cursor()

        # --- Consulta SQL ---
        query = """
        SELECT 
            [rdm],
            [solicitante],
            [requisitante],
            [status],
            [area_afetada],
            [ambiente],
            [resumo],
            [descricao],
            [grupo_executor],
            [executor],
            [depto_grupo_executor],
            [depto_executor],
            [recurso_principal],
            [data_inicio_programacao],
            [data_fim_programacao]
        FROM [mdb].[dbo].[view_ciops_rdm]
        """

        print("üìÑ Executando query...")
        cursor.execute(query)

        columns = [col[0] for col in cursor.description]
        results = [dict(zip(columns, row)) for row in cursor.fetchall()]

        cursor.close()
        conn.close()
        print(f"‚úÖ Consulta conclu√≠da. {len(results)} registros retornados.")

        return {
            "statusCode": 200,
            "headers": {
                "Content-Type": "application/json",
                "Access-Control-Allow-Origin": "*"
            },
            "body": json.dumps(results, default=str)
        }

    except pyodbc.InterfaceError as e:
        print("‚ùå Erro de interface (prov√°vel timeout ou host inacess√≠vel):", str(e))
        traceback.print_exc()
        return {
            "statusCode": 504,
            "body": json.dumps({
                "erro": "Timeout ou host inacess√≠vel",
                "detalhes": str(e),
                "trace": traceback.format_exc()
            })
        }

    except pyodbc.Error as e:
        print("‚ùå Erro SQL:", str(e))
        traceback.print_exc()
        return {
            "statusCode": 500,
            "body": json.dumps({
                "erro": "Erro SQL ao executar consulta",
                "detalhes": str(e),
                "trace": traceback.format_exc()
            })
        }

    except Exception as e:
        print("‚ùå Erro inesperado:", str(e))
        traceback.print_exc()
        return {
            "statusCode": 500,
            "body": json.dumps({
                "erro": "Erro inesperado",
                "detalhes": str(e),
                "trace": traceback.format_exc()
            })
        }

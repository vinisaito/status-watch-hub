import json
import boto3
import os
from datetime import datetime, timezone
from decimal import Decimal

# ---------- Config ----------
dynamodb = boto3.resource("dynamodb")
table = dynamodb.Table(os.environ["RDM_TABLE"])

# ---------- Headers CORS ----------
cors_headers = {
    "Access-Control-Allow-Origin": "*",
    "Access-Control-Allow-Methods": "OPTIONS,POST,GET",
    "Access-Control-Allow-Headers": "Content-Type"
}


def lambda_handler(event, context):
    """
    Lambda REST API para registrar e consultar RDMs no DynamoDB.
    Métodos:
      - POST → cria/atualiza um RDM
      - GET  → busca um RDM específico (via query param ?rdm=123)
      - OPTIONS → resposta CORS
    """

    try:
        method = event.get("httpMethod", "")

        # --- Requisição OPTIONS (CORS preflight) ---
        if method == "OPTIONS":
            return {
                "statusCode": 200,
                "headers": cors_headers,
                "body": json.dumps({"message": "CORS preflight OK"})
            }

        # --- Método GET (consultar RDM) ---
        if method == "GET":
            query = event.get("queryStringParameters") or {}
            rdm = query.get("rdm")

            if not rdm:
                return {
                    "statusCode": 400,
                    "headers": cors_headers,
                    "body": json.dumps({"error": "Parâmetro 'rdm' é obrigatório no GET"})
                }

            try:
                rdm = int(rdm)
            except ValueError:
                return {
                    "statusCode": 400,
                    "headers": cors_headers,
                    "body": json.dumps({"error": "O parâmetro 'rdm' deve ser numérico"})
                }

            # Buscar item no DynamoDB
            response = table.get_item(Key={"rdm": Decimal(rdm)})
            item = response.get("Item")

            if not item:
                return {
                    "statusCode": 404,
                    "headers": cors_headers,
                    "body": json.dumps({"error": f"RDM {rdm} não encontrado"})
                }

            # Converter Decimal -> int para JSON válido
            item["rdm"] = int(item["rdm"])

            return {
                "statusCode": 200,
                "headers": cors_headers,
                "body": json.dumps(item)
            }

        # --- Método POST (registrar/atualizar RDM) ---
        if method == "POST":
            raw_body = event.get("body")
            body = json.loads(raw_body) if raw_body else {}

            rdm = body.get("rdm")
            status = body.get("status")
            timestamp = body.get("timestamp")

            if rdm is None or status is None:
                return {
                    "statusCode": 400,
                    "headers": cors_headers,
                    "body": json.dumps({"error": "Campos obrigatórios: rdm e status"})
                }

            try:
                rdm = int(rdm)
            except (ValueError, TypeError):
                return {
                    "statusCode": 400,
                    "headers": cors_headers,
                    "body": json.dumps({"error": "O campo 'rdm' deve ser numérico"})
                }

            if not timestamp:
                timestamp = datetime.now(timezone.utc).isoformat()

            table.put_item(
                Item={
                    "rdm": Decimal(rdm),
                    "status": str(status),
                    "timestamp": str(timestamp),
                }
            )

            return {
                "statusCode": 200,
                "headers": cors_headers,
                "body": json.dumps({
                    "message": "RDM registrado com sucesso!",
                    "item": {"rdm": rdm, "status": status, "timestamp": timestamp}
                }),
            }

        # --- Método não suportado ---
        return {
            "statusCode": 405,
            "headers": cors_headers,
            "body": json.dumps({"error": f"Método {method} não permitido"})
        }

    except Exception as e:
        print("Erro ao processar:", e)
        return {
            "statusCode": 500,
            "headers": cors_headers,
            "body": json.dumps({"error": str(e)}),
        }

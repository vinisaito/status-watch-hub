import React from "react";
import { Dialog, DialogContent, DialogHeader, DialogTitle } from "@/components/ui/dialog";
import { Badge } from "@/components/ui/badge";
import { 
  Calendar, 
  Clock, 
  Users, 
  FileText, 
  AlertCircle, 
  CheckCircle2, 
  XCircle, 
  RotateCcw,
  Wrench
} from "lucide-react";
import type { RDM } from "@/types/rdm";
import { cn } from "@/lib/utils";

interface RDMDetailModalProps {
  rdm: RDM | null;
  open: boolean;
  onOpenChange: (open: boolean) => void;
}

const RDMDetailModal: React.FC<RDMDetailModalProps> = ({ rdm, open, onOpenChange }) => {
  if (!rdm) return null;

  const getCategory = () => {
    if (rdm.category) return rdm.category;
    if (rdm.status === "executed") return "concluidas";
    if (rdm.status === "failed") return "rollback";
    return "em_andamento";
  };

  const getStatusConfig = () => {
    const cat = getCategory();
    const raw = (rdm.rawStatus ?? "").toString().trim().toLowerCase();
    const noAcc = raw.normalize("NFD").replace(/\p{Diacritic}/gu, "");
    const isImplantacao = /implantacao/.test(noAcc);

    switch (cat) {
      case "concluidas":
        return {
          Icon: CheckCircle2,
          label: "Concluída",
          colorClass: "text-[hsl(var(--success))]",
          bgClass: "bg-[hsl(var(--success))]/10",
          borderClass: "border-[hsl(var(--success))]/20"
        };
      case "rollback":
        return {
          Icon: RotateCcw,
          label: "Rollback",
          colorClass: "text-[hsl(var(--destructive))]",
          bgClass: "bg-[hsl(var(--destructive))]/10",
          borderClass: "border-[hsl(var(--destructive))]/20"
        };
      case "em_andamento":
        return {
          Icon: isImplantacao ? Wrench : Clock,
          label: isImplantacao ? "Em Implantação" : "Em Andamento",
          colorClass: "text-[hsl(var(--warning))]",
          bgClass: "bg-[hsl(var(--warning))]/10",
          borderClass: "border-[hsl(var(--warning))]/20"
        };
      case "aberta":
        return {
          Icon: AlertCircle,
          label: "Aberta",
          colorClass: "text-[hsl(var(--blue-accent))]",
          bgClass: "bg-[hsl(var(--blue-accent))]/10",
          borderClass: "border-[hsl(var(--blue-accent))]/20"
        };
      case "em_aprovacao":
        return {
          Icon: Clock,
          label: "Em Aprovação",
          colorClass: "text-[hsl(var(--blue-medium))]",
          bgClass: "bg-[hsl(var(--blue-medium))]/10",
          borderClass: "border-[hsl(var(--blue-medium))]/20"
        };
      case "cancelada":
        return {
          Icon: XCircle,
          label: "Cancelada",
          colorClass: "text-[hsl(var(--destructive))]",
          bgClass: "bg-[hsl(var(--destructive))]/10",
          borderClass: "border-[hsl(var(--destructive))]/20"
        };
      default:
        return {
          Icon: Clock,
          label: "Pendente",
          colorClass: "text-muted-foreground",
          bgClass: "bg-muted/50",
          borderClass: "border-border"
        };
    }
  };

  const statusConfig = getStatusConfig();
  const StatusIcon = statusConfig.Icon;

  return (
    <Dialog open={open} onOpenChange={onOpenChange}>
      <DialogContent className="max-w-2xl max-h-[90vh] overflow-y-auto">
        <DialogHeader className="space-y-4 pb-4 border-b">
          <div className="flex items-start justify-between gap-4">
            <div className="flex-1">
              <DialogTitle className="text-2xl font-bold mb-2">
                RDM {rdm.number}
              </DialogTitle>
              <div className="flex items-center gap-2">
                <Badge 
                  variant="outline" 
                  className={cn(
                    "flex items-center gap-1.5 px-3 py-1 text-sm font-medium border-2",
                    statusConfig.colorClass,
                    statusConfig.bgClass,
                    statusConfig.borderClass
                  )}
                >
                  <StatusIcon className="w-4 h-4" />
                  {rdm.rawStatus ?? statusConfig.label}
                </Badge>
                {rdm.time && (
                  <Badge variant="secondary" className="flex items-center gap-1.5">
                    <Clock className="w-3 h-3" />
                    {rdm.time}
                  </Badge>
                )}
              </div>
            </div>
          </div>
        </DialogHeader>

        <div className="space-y-4 pt-4">
          {/* Resumo destacado */}
          {rdm.resumo && (
            <div className={cn(
              "rounded-lg border-2 p-4 transition-all",
              statusConfig.bgClass,
              statusConfig.borderClass
            )}>
              <div className="flex items-start gap-3">
                <FileText className={cn("w-5 h-5 mt-0.5 flex-shrink-0", statusConfig.colorClass)} />
                <div className="flex-1">
                  <h4 className="font-semibold mb-2 text-foreground">Resumo</h4>
                  <p className="text-sm text-foreground/80 leading-relaxed whitespace-pre-wrap">
                    {rdm.resumo}
                  </p>
                </div>
              </div>
            </div>
          )}

          {/* Grid de informações */}
          <div className="grid grid-cols-1 md:grid-cols-2 gap-3">
            {/* Área Afetada */}
            {rdm.area && (
              <div className="bg-card border rounded-lg p-4 hover:border-primary/50 transition-colors">
                <div className="flex items-center gap-2 mb-2">
                  <AlertCircle className="w-4 h-4 text-primary" />
                  <span className="text-xs font-medium text-muted-foreground uppercase tracking-wide">
                    Área Afetada
                  </span>
                </div>
                <p className="text-sm font-semibold text-foreground">{rdm.area}</p>
              </div>
            )}

            {/* Grupo Executor */}
            {rdm.grupoExecutor && (
              <div className="bg-card border rounded-lg p-4 hover:border-primary/50 transition-colors">
                <div className="flex items-center gap-2 mb-2">
                  <Users className="w-4 h-4 text-primary" />
                  <span className="text-xs font-medium text-muted-foreground uppercase tracking-wide">
                    Grupo Executor
                  </span>
                </div>
                <p className="text-sm font-semibold text-foreground">{rdm.grupoExecutor}</p>
              </div>
            )}
          </div>

          {/* Datas de Programação */}
          {(rdm.dataInicioProgramacao || rdm.dataFimProgramacao) && (
            <div className="bg-gradient-to-br from-muted/30 to-muted/10 border rounded-lg p-4">
              <div className="flex items-center gap-2 mb-3">
                <Calendar className="w-4 h-4 text-primary" />
                <h4 className="text-sm font-semibold text-foreground">Programação</h4>
              </div>
              <div className="grid grid-cols-1 sm:grid-cols-2 gap-3">
                {rdm.dataInicioProgramacao && (
                  <div>
                    <p className="text-xs text-muted-foreground mb-1">Início</p>
                    <p className="text-sm font-medium text-foreground">
                      {rdm.dataInicioProgramacao}
                    </p>
                  </div>
                )}
                {rdm.dataFimProgramacao && (
                  <div>
                    <p className="text-xs text-muted-foreground mb-1">Fim</p>
                    <p className="text-sm font-medium text-foreground">
                      {rdm.dataFimProgramacao}
                    </p>
                  </div>
                )}
              </div>
            </div>
          )}

          {/* Descrição adicional */}
          {rdm.description && !rdm.resumo && (
            <div className="bg-card border rounded-lg p-4">
              <div className="flex items-start gap-3">
                <FileText className="w-4 h-4 text-muted-foreground mt-0.5" />
                <div className="flex-1">
                  <h4 className="text-sm font-semibold mb-2 text-foreground">Descrição</h4>
                  <p className="text-sm text-muted-foreground leading-relaxed">
                    {rdm.description}
                  </p>
                </div>
              </div>
            </div>
          )}
        </div>
      </DialogContent>
    </Dialog>
  );
};

export default RDMDetailModal;

import React, { useEffect, useRef, useState } from "react";

type Props = {
  wsUrl: string; // Ex: "wss://xxxxxx.execute-api.us-east-1.amazonaws.com/dev"
  chamado: number;
};

const Timer: React.FC<Props> = ({ wsUrl, chamado }) => {
  const wsRef = useRef<WebSocket | null>(null);
  const [connected, setConnected] = useState(false);
  const [status, setStatus] = useState<string>("pendente");
  const [timerStart, setTimerStart] = useState<number | null>(null);
  const [elapsed, setElapsed] = useState<number>(0);

  // Atualiza cronômetro a cada segundo
  useEffect(() => {
    let interval: NodeJS.Timer | null = null;
    if (timerStart) {
      interval = setInterval(() => {
        setElapsed(Math.floor(Date.now() / 1000) - timerStart);
      }, 1000);
    }
    return () => {
      if (interval) clearInterval(interval);
    };
  }, [timerStart]);

  // Conectar WebSocket
  useEffect(() => {
    const ws = new WebSocket(wsUrl);
    wsRef.current = ws;

    ws.onopen = () => {
      console.log("✅ WebSocket conectado");
      setConnected(true);
    };

    ws.onmessage = (msg) => {
      try {
        const data = JSON.parse(msg.data.toString());
        console.log("📩 Mensagem recebida:", data);

        if (data.action === "timerStarted" && data.chamado === chamado) {
          setTimerStart(data.timerStart);
        }
        if (data.action === "statusUpdated" && data.chamado === chamado) {
          setStatus(data.status);
        }
      } catch (err) {
        console.error("Erro ao parsear mensagem:", err);
      }
    };

    ws.onclose = () => {
      console.log("❌ WebSocket desconectado");
      setConnected(false);
    };

    return () => {
      ws.close();
    };
  }, [wsUrl, chamado]);

  // Envia mensagens
  const sendMessage = (msg: object) => {
    if (wsRef.current && connected) {
      wsRef.current.send(JSON.stringify(msg));
    }
  };

  const startTimer = () => {
    sendMessage({ action: "startTimer", chamado });
  };

  const updateStatus = (newStatus: string) => {
    sendMessage({ action: "updateStatus", chamado, status: newStatus });
  };

  return (
    <div className="p-4 rounded-xl shadow-lg bg-white border max-w-md mx-auto">
      <h2 className="text-xl font-bold mb-2">Chamado #{chamado}</h2>
      <p className="mb-1">
        Status: <span className="font-semibold">{status}</span>
      </p>
      <p className="mb-4">
        Tempo:{" "}
        {timerStart ? (
          <span className="font-mono">{elapsed}s</span>
        ) : (
          "Aguardando iniciar"
        )}
      </p>

      <div className="flex gap-2">
        <button
          onClick={startTimer}
          className="px-4 py-2 rounded-lg bg-green-500 text-white hover:bg-green-600"
        >
          Iniciar Timer
        </button>
        <button
          onClick={() => updateStatus("acionado")}
          className="px-4 py-2 rounded-lg bg-blue-500 text-white hover:bg-blue-600"
        >
          Acionar
        </button>
        <button
          onClick={() => updateStatus("escalado")}
          className="px-4 py-2 rounded-lg bg-red-500 text-white hover:bg-red-600"
        >
          Escalar
        </button>
      </div>
    </div>
  );
};

export default Timer;

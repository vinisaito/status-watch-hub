import React, { useEffect, useState, useRef } from "react";

// ================= CONFIGURA√á√ïES =================
// URLs que voc√™ pode definir diretamente aqui
const WS_URL = "wss://SEU_ENDPOINT_WS.execute-api.us-east-1.amazonaws.com/prod";
const REST_URL = "https://SEU_ENDPOINT_REST.execute-api.us-east-1.amazonaws.com/prod/getState";

interface TimerProps {
  chamado: number; // ID do chamado
}

const Timer: React.FC<TimerProps> = ({ chamado }) => {
  const [timerActive, setTimerActive] = useState(false);
  const [timeRemaining, setTimeRemaining] = useState(0); // segundos
  const [durationMinutes, setDurationMinutes] = useState(15);
  const [startedAt, setStartedAt] = useState<string | null>(null);

  const wsRef = useRef<WebSocket | null>(null);
  const intervalRef = useRef<NodeJS.Timer | null>(null);

  // --------- Conecta WebSocket
  useEffect(() => {
    console.log("üîå Conectando no WebSocket...");
    const ws = new WebSocket(WS_URL);
    wsRef.current = ws;

    ws.onopen = () => {
      console.log("‚úÖ WebSocket conectado");

      // Buscar estado inicial via REST
      fetch(`${REST_URL}?chamado=${chamado}`)
        .then(res => res.json())
        .then(data => {
          console.log("üì° Estado inicial recebido:", data);
          setTimerActive(data.timerActive);
          setTimeRemaining(data.timeRemaining || data.durationMinutes * 60);
          setDurationMinutes(data.durationMinutes || 15);
          setStartedAt(data.startedAt || null);
        })
        .catch(err => console.error("‚ùå Erro ao buscar estado inicial:", err));
    };

    ws.onmessage = (event) => {
      try {
        const msg = JSON.parse(event.data);
        if (msg.type === "TIMER_UPDATED" && msg.chamado === chamado) {
          console.log("üì© Mensagem recebida do WS:", msg);
          setTimerActive(msg.timerActive);
          setTimeRemaining(msg.timeRemaining || msg.durationMinutes * 60);
          setDurationMinutes(msg.durationMinutes || 15);
          setStartedAt(msg.startedAt || null);
        }
      } catch (err) {
        console.error("‚ùå Erro ao processar mensagem WS:", err);
      }
    };

    ws.onclose = () => console.log("‚ùå WebSocket desconectado");
    ws.onerror = (err) => console.error("‚ùå WebSocket erro:", err);

    return () => {
      ws.close();
    };
  }, [chamado]);

  // --------- Intervalo para decrementar tempo localmente
  useEffect(() => {
    if (intervalRef.current) clearInterval(intervalRef.current);

    if (timerActive) {
      intervalRef.current = setInterval(() => {
        setTimeRemaining(prev => Math.max(prev - 1, 0));
      }, 1000);
    }

    return () => {
      if (intervalRef.current) clearInterval(intervalRef.current);
    };
  }, [timerActive]);

  // --------- Fun√ß√£o para enviar a√ß√£o ao WS
  const sendAction = (action: "startTimer" | "pauseTimer") => {
    if (!wsRef.current || wsRef.current.readyState !== WebSocket.OPEN) {
      console.log("‚è≥ WebSocket ainda n√£o conectado");
      return;
    }

    console.log(`‚úâÔ∏è Enviando ${action}...`);
    wsRef.current.send(JSON.stringify({ action, chamado }));
  };

  // --------- Formata tempo em MM:SS
  const formatTime = (seconds: number) => {
    const m = Math.floor(seconds / 60).toString().padStart(2, "0");
    const s = Math.floor(seconds % 60).toString().padStart(2, "0");
    return `${m}:${s}`;
  };

  return (
    <div style={{ border: "1px solid #ccc", padding: "1rem", width: "220px" }}>
      <h3>Chamado {chamado}</h3>
      <p>Tempo restante: {formatTime(timeRemaining)}</p>
      <p>Status: {timerActive ? "üü¢ Rodando" : "‚è∏ Pausado"}</p>
      <button onClick={() => sendAction("startTimer")} style={{ marginRight: "0.5rem" }}>
        Iniciar
      </button>
      <button onClick={() => sendAction("pauseTimer")}>Pausar</button>
    </div>
  );
};

export default Timer;

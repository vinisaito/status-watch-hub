// ActionTable.tsx
import React, { useState, useMemo, useCallback, useEffect, useRef } from 'react';
import { Check, AlertTriangle, Timer, Play, CheckCircle, Edit3, Search, ChevronLeft, ChevronRight, ArrowUpDown, ArrowUp, ArrowDown } from 'lucide-react';
import { Card, CardContent, CardHeader } from '@/components/ui/card';
import { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from '@/components/ui/table';
import { Badge } from '@/components/ui/badge';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { Label } from '@/components/ui/label';
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';
import { toast } from '@/hooks/use-toast';
import { Tooltip, TooltipContent, TooltipProvider, TooltipTrigger } from '@/components/ui/tooltip';

// Hooks customizados
import { useEscalacao } from '@/hooks/useEscalacao';
import { useObservacoes } from '@/hooks/useObservacao';
import { useChatAcionados, useChatAcionadosTimestamps } from '@/hooks/useChatAcionados';

// Componentes
import { EscalacaoDialog } from './EscalacaoDialog';
import { ObservacaoDialog } from './ObservacaoDialog';
import { ChamadoModal } from './ChamadoModal';

interface AlertData {
  id: string;
  chamado: string;
  tipo_chamado: string;
  grupo_chamado: string;
  status_chamado: string;
  abertura_chamado: string;
  resumo_chamado: string;
  severidade_chamado: string;
  acionado: string;
  chat: boolean;
}

interface ActionTableProps {
  alertData: AlertData[];
  onUpdateAcknowledgment: (alertId: string, acknowledged: boolean) => void;
  loading: boolean;
}

type SortField = keyof AlertData;
type SortDirection = 'asc' | 'desc' | null;

// === WEBSOCKET: seu endpoint fornecido ===
const WEBSOCKET_URL = 'wss://rsgjd6wsza.execute-api.us-east-1.amazonaws.com/dev/';

// Structure we keep per chamado (simplificado)
type TimerEntry = {
  chamado: string;
  // preferimos usar endTimeMs (timestamp em ms). Se não disponível, remainingSeconds é fallback.
  endTimeMs?: number | null;
  remainingSeconds?: number | null; // seconds remaining (if server supplied only remaining)
  updatedAt?: number; // quando recebemos a info
  source?: string; // exemplo: 'level1', 'level2', 'remaining'
};

export const ActionTable: React.FC<ActionTableProps> = ({ alertData, onUpdateAcknowledgment, loading }) => {
  // Estados principais (mantidos)
  const [currentPage, setCurrentPage] = useState(1);
  const [searchTerm, setSearchTerm] = useState('');
  const [itemsPerPage, setItemsPerPage] = useState<number>(() => {
    const saved = sessionStorage.getItem("itemsPerPage");
    return saved ? parseInt(saved, 10) : 5;
  });
  const [sortField, setSortField] = useState<SortField>('chamado');
  const [sortDirection, setSortDirection] = useState<SortDirection>('desc');

  // Modais (mantidos)
  const [chamadoModalOpen, setChamadoModalOpen] = useState(false);
  const [selectedIncident, setSelectedIncident] = useState<AlertData | null>(null);
  const [observacaoDialogOpen, setObservacaoDialogOpen] = useState(false);
  const [selectedChamadoForEdit, setSelectedChamadoForEdit] = useState<string>('');
  const [escalacaoDialogOpen, setEscalacaoDialogOpen] = useState(false);
  const [selectedChamadoEscalacao, setSelectedChamadoEscalacao] = useState<string>('');

  // Seus hooks
  const { acionadosSet, isAcionado, addAcionado } = useChatAcionados();
  const { getTimestampForChamado, hasTimestamp } = useChatAcionadosTimestamps();
  const { observacoesData, saveObservacao } = useObservacoes();
  const {
    escalacaoData,
    currentTimer,
    isTimerActive,
    currentEtapa,
    setCurrentEtapa,
    formatTime,
    iniciarEscalacao,
    avancarEtapa,
    voltarEtapa,
    finalizarEscalacao
  } = useEscalacao();

  // ---------------------------------------------------
  // TIMERS via WebSocket - estado e lógica
  // ---------------------------------------------------
  const [timers, setTimers] = useState<Record<string, TimerEntry>>({});
  const wsRef = useRef<WebSocket | null>(null);
  const reconnectTimeoutRef = useRef<number | null>(null);
  const reconnectAttemptsRef = useRef(0);
  const [tick, setTick] = useState(0); // força rerender a cada segundo

  // ---------- parser robusto ----------
  const parseIncoming = useCallback((raw: any): TimerEntry[] => {
    // returns array of TimerEntry parsed from the message
    const out: TimerEntry[] = [];
    if (raw == null) return out;

    // Helper to normalize a single object
    const normalize = (obj: any): TimerEntry | null => {
      if (!obj) return null;

      // try to get chamado id from known fields
      const chamado = obj.chamado ?? obj.id ?? obj.chamado_id ?? obj.pk ?? obj.PK;
      if (!chamado) return null;

      const now = Date.now();
      const entry: TimerEntry = {
        chamado: String(chamado),
        updatedAt: now
      };

      // Case A: explicit fields level1_timerStart + level1_duration (duration in ms or seconds?)
      // We'll accept numbers in ms (13 digits) or seconds (10 digits) - convert to ms.
      const toMsIfLikelySeconds = (n: any) => {
        const v = Number(n);
        if (isNaN(v)) return undefined;
        if (v < 1e11) return v * 1000; // seconds -> ms
        return v; // already ms
      };

      // if level1 present, prefer it
      if (obj.level1_timerStart || obj.level1_duration || obj.level1_status) {
        const startMs = obj.level1_timerStart ? toMsIfLikelySeconds(obj.level1_timerStart) : undefined;
        // duration might be ms or seconds; if < 100000 interpret as seconds
        let durationMs: number | undefined;
        if (obj.level1_duration != null) {
          const d = Number(obj.level1_duration);
          if (!isNaN(d)) durationMs = d < 1e5 ? d * 1000 : d;
        }
        if (startMs && durationMs) {
          entry.endTimeMs = startMs + durationMs;
          entry.source = 'level1';
          return entry;
        }
      }

      // if level2 present and level1 not use it
      if (obj.level2_timerStart || obj.level2_duration || obj.level2_status) {
        const startMs = obj.level2_timerStart ? toMsIfLikelySeconds(obj.level2_timerStart) : undefined;
        let durationMs: number | undefined;
        if (obj.level2_duration != null) {
          const d = Number(obj.level2_duration);
          if (!isNaN(d)) durationMs = d < 1e5 ? d * 1000 : d;
        }
        if (startMs && durationMs) {
          entry.endTimeMs = startMs + durationMs;
          entry.source = 'level2';
          return entry;
        }
      }

      // Case B: server sends remaining in seconds or ms
      if (obj.remainingTime != null || obj.remaining_seconds != null || obj.remaining_ms != null) {
        if (obj.remaining_ms != null) {
          const ms = Number(obj.remaining_ms);
          if (!isNaN(ms)) {
            entry.endTimeMs = Date.now() + ms;
            entry.source = 'remaining_ms';
            return entry;
          }
        }
        const sec = obj.remainingTime != null ? Number(obj.remainingTime) : Number(obj.remaining_seconds);
        if (!isNaN(sec)) {
          entry.endTimeMs = Date.now() + Math.max(0, Math.floor(sec)) * 1000;
          entry.source = 'remaining_seconds';
          return entry;
        }
      }

      // Case C: server may send an absolute 'endsAt' field
      if (obj.endsAt || obj.end_time || obj.endTime) {
        const val = obj.endsAt ?? obj.end_time ?? obj.endTime;
        const maybeMs = Number(val);
        if (!isNaN(maybeMs)) {
          // convert if looks like seconds
          entry.endTimeMs = maybeMs < 1e11 ? maybeMs * 1000 : maybeMs;
          entry.source = 'endsAt';
          return entry;
        }
        // else try parse date string
        const parsed = Date.parse(String(val));
        if (!isNaN(parsed)) {
          entry.endTimeMs = parsed;
          entry.source = 'endsAt_str';
          return entry;
        }
      }

      // Nothing recognized -> null
      return null;
    };

    // If raw is string attempt parse JSON
    let payload = raw;
    if (typeof raw === 'string') {
      try { payload = JSON.parse(raw); } catch { /* keep raw */ }
    }

    // If message looks like {"body": "..."} or {"payload": "..."}
    if (payload && payload.body) {
      try {
        const b = typeof payload.body === 'string' ? JSON.parse(payload.body) : payload.body;
        payload = b;
      } catch (e) {
        // leave as-is
      }
    }
    if (payload && payload.payload) {
      payload = payload.payload;
    }

    if (Array.isArray(payload)) {
      for (const item of payload) {
        const n = normalize(item);
        if (n) out.push(n);
      }
      return out;
    }

    const single = normalize(payload);
    if (single) out.push(single);
    return out;
  }, []);

  // ---------- update timers state from parsed entries ----------
  const upsertTimerEntries = useCallback((entries: TimerEntry[]) => {
    if (!entries || entries.length === 0) return;
    setTimers(prev => {
      const next = { ...prev };
      for (const e of entries) {
        const key = e.chamado;
        const existing = next[key];
        // prefer newer update (we compare updatedAt)
        if (!existing || (e.updatedAt && (!existing.updatedAt || e.updatedAt >= existing.updatedAt))) {
          next[key] = { ...existing, ...e, updatedAt: e.updatedAt ?? Date.now() };
        }
      }
      return next;
    });
  }, []);

  // ---------- WebSocket connection with reconnection ----------
  useEffect(() => {
    let closedByUs = false;

    function connect() {
      console.debug('[WS] connecting to', WEBSOCKET_URL);
      const ws = new WebSocket(WEBSOCKET_URL);
      wsRef.current = ws;

      ws.onopen = () => {
        console.debug('[WS] open');
        reconnectAttemptsRef.current = 0;
        toast({ title: 'WS conectado', description: 'Conexão WebSocket estabelecida', variant: 'default' });
        // se precisar enviar subscribe, faça aqui. Exemplo:
        // ws.send(JSON.stringify({ action: 'subscribe', channel: 'timers' }));
      };

      ws.onmessage = (ev) => {
        try {
          const raw = (() => {
            try { return JSON.parse(ev.data); } catch { return ev.data; }
          })();
          console.debug('[WS] message raw:', raw);
          const parsed = parseIncoming(raw);
          if (parsed && parsed.length) {
            upsertTimerEntries(parsed);
          } else {
            // opcional: log se mensagem não foi reconhecida
            console.debug('[WS] mensagem não mapeada para timers:', raw);
          }
        } catch (err) {
          console.error('[WS] erro onmessage:', err);
        }
      };

      ws.onerror = (err) => {
        console.error('[WS] error', err);
      };

      ws.onclose = (ev) => {
        console.warn('[WS] closed', ev.code, ev.reason);
        if (!closedByUs) {
          // tentar reconectar com backoff exponencial
          reconnectAttemptsRef.current++;
          const backoff = Math.min(30000, 1000 * Math.pow(1.5, reconnectAttemptsRef.current));
          console.debug(`[WS] reconectando em ${backoff}ms`);
          if (reconnectTimeoutRef.current) window.clearTimeout(reconnectTimeoutRef.current);
          reconnectTimeoutRef.current = window.setTimeout(connect, backoff);
        }
      };
    }

    connect();

    return () => {
      closedByUs = true;
      if (reconnectTimeoutRef.current) {
        window.clearTimeout(reconnectTimeoutRef.current);
        reconnectTimeoutRef.current = null;
      }
      if (wsRef.current) {
        try { wsRef.current.close(); } catch {}
        wsRef.current = null;
      }
    };
  }, [parseIncoming, upsertTimerEntries]);

  // ---------- ticker para re-render a cada segundo ----------
  useEffect(() => {
    const id = window.setInterval(() => {
      setTick(t => t + 1);
    }, 1000);
    return () => clearInterval(id);
  }, []);

  // ---------- helper: remaining seconds para um chamado ----------
  const getRemainingSeconds = useCallback((chamado: string) => {
    const t = timers[chamado];
    if (!t) return null;
    if (t.endTimeMs != null) {
      const ms = t.endTimeMs - Date.now();
      return Math.max(0, Math.ceil(ms / 1000));
    }
    if (t.remainingSeconds != null) {
      // remainingSeconds is a snapshot; we will approximate by decreasing with tick
      // we stored updatedAt so we can compute elapsed
      if (t.updatedAt) {
        const elapsedSec = Math.floor((Date.now() - t.updatedAt) / 1000);
        return Math.max(0, Math.ceil((t.remainingSeconds ?? 0) - elapsedSec));
      }
      return Math.max(0, Math.ceil(t.remainingSeconds ?? 0));
    }
    return null;
  }, [timers, tick]);

  const formatDuration = useCallback((seconds: number | null) => {
    if (seconds == null) return '00:00';
    const s = Math.max(0, Math.floor(seconds));
    const hours = Math.floor(s / 3600);
    const minutes = Math.floor((s % 3600) / 60);
    const secs = s % 60;
    if (hours > 0) {
      return `${String(hours).padStart(2, '0')}:${String(minutes).padStart(2, '0')}:${String(secs).padStart(2, '0')}`;
    }
    return `${String(minutes).padStart(2, '0')}:${String(secs).padStart(2, '0')}`;
  }, []);

  // ---------------------------------------------------
  // Restante do seu ActionTable (handlers + UI)
  // ---------------------------------------------------

  // Reaproveitei sua função handleAcknowledgment (sem alterar).
  const handleAcknowledgment = useCallback(async (alert: AlertData) => {
    try {
      const response = await fetch("https://f6ffk8e9fe.execute-api.us-east-1.amazonaws.com/prod/webhook");
      const data = await response.json();

      const grupoEntry = data.grupos.find(
        (g: any) => g.grupo_chamado === alert.grupo_chamado
      );

      if (!grupoEntry || !grupoEntry.webhooks.length) {
        toast({
          title: "Webhook não configurado",
          description: `Configure o webhook para o Grupo: ${alert.grupo_chamado}`,
          variant: "destructive",
        });
        return;
      }

      const activeWebhook = grupoEntry.webhooks.find((w: any) => w.ativo);
      if (!activeWebhook) {
        toast({
          title: "Nenhum webhook ativo",
          description: `O grupo ${alert.grupo_chamado} não possui webhooks ativos`,
          variant: "destructive",
        });
        return;
      }

      const message = {
        cards: [{
          header: { title: "<b>🚨 O CIOPs precisa da sua atenção! <b>" },
          sections: [
            {
              widgets: [{
                textParagraph: {
                  text: `É necessário confirmação de recebimento e ciência pelo grupo responsável.`
                }
              }]
            },
            {
              widgets: [{
                textParagraph: {
                  text:
                    "<b>Detalhes do Evento:</b><br><br>" +
                    "<b>📌 Chamado: </b>" + alert.chamado + "<br><br>" +
                    "<b>⚠️ Severidade: </b>" + alert.severidade_chamado + "<br><br>" +
                    "<b>📰 Título: </b>" + alert.resumo_chamado + "<br><br>" +
                    "<b>📅 Abertura: </b>" + alert.abertura_chamado + "<br><br>" +
                    "<b>👥 Grupo: </b>" + alert.grupo_chamado
                }
              }]
            }
          ]
        }]
      };

      await fetch(activeWebhook.url, {
        method: "POST",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify(message),
      });

      const res = await fetch(
        "https://f6ffk8e9fe.execute-api.us-east-1.amazonaws.com/prod/chatacionados",
        {
          method: "POST",
          headers: { "Content-Type": "application/json" },
          body: JSON.stringify({ chamado: alert.chamado.toString() }),
        }
      );

      if (!res.ok) {
        const errorData = await res.json();
        throw new Error(errorData.message || "Erro ao marcar como acionado");
      }

      addAcionado(alert.chamado.toString());
      onUpdateAcknowledgment(alert.id, true);

      toast({
        title: "Alerta acionado com sucesso",
        description: `Mensagem enviada para o Grupo: ${alert.grupo_chamado}`,
      });

    } catch (error: any) {
      toast({
        title: "Erro ao acionar alerta",
        description: error.message || "Não foi possível concluir o acionamento",
        variant: "destructive",
      });
    }
  }, [addAcionado, onUpdateAcknowledgment]);

  // Outros handlers e utilitários (mantive como você tinha)
  const handleOpenObservacao = useCallback((chamado: string) => {
    setSelectedChamadoForEdit(chamado);
    setObservacaoDialogOpen(true);
  }, []);

  const handleChamadoClick = useCallback((alert: AlertData) => {
    setSelectedIncident(alert);
    setChamadoModalOpen(true);
  }, []);

  const handleIniciarEscalacao = useCallback((chamado: string) => {
    iniciarEscalacao(chamado);
    setSelectedChamadoEscalacao(chamado);
    setEscalacaoDialogOpen(true);
  }, [iniciarEscalacao]);

  const handleSort = useCallback((field: SortField) => {
    if (sortField === field) {
      if (sortDirection === 'asc') {
        setSortDirection('desc');
      } else if (sortDirection === 'desc') {
        setSortDirection(null);
        setSortField('chamado');
      } else {
        setSortDirection('asc');
      }
    } else {
      setSortField(field);
      setSortDirection('asc');
    }
  }, [sortField, sortDirection]);

  const getSortIcon = useCallback((field: SortField) => {
    if (sortField !== field) {
      return <ArrowUpDown className="h-4 w-4 ml-1 opacity-50" />;
    }
    if (sortDirection === 'asc') {
      return <ArrowUp className="h-4 w-4 ml-1" />;
    }
    if (sortDirection === 'desc') {
      return <ArrowDown className="h-4 w-4 ml-1" />;
    }
    return <ArrowUpDown className="h-4 w-4 ml-1 opacity-50" />;
  }, [sortField, sortDirection]);

  const formatDate = useCallback((dateString: string) => {
    if (!dateString || dateString === '' || dateString === 'null' || dateString === 'undefined') {
      return '-';
    }

    try {
      let date: Date;
      const cleanString = String(dateString).trim();

      if (/^\d{13}$/.test(cleanString)) {
        date = new Date(parseInt(cleanString));
      } else if (/^\d{10}$/.test(cleanString)) {
        date = new Date(parseInt(cleanString) * 1000);
      } else if (/^\d{2}\/\d{2}\/\d{4}/.test(cleanString)) {
        const parts = cleanString.split(' ');
        const datePart = parts[0];
        const timePart = parts[1] || '00:00:00';
        const [day, month, year] = datePart.split('/');
        const [hour, minute, second] = timePart.split(':');

        date = new Date(
          parseInt(year),
          parseInt(month) - 1,
          parseInt(day),
          parseInt(hour || '0'),
          parseInt(minute || '0'),
          parseInt(second || '0')
        );
      } else {
        date = new Date(cleanString);
      }

      if (isNaN(date.getTime())) return cleanString;

      const year = date.getFullYear();
      if (year < 1900 || year > 2100) return cleanString;

      return date.toLocaleString('pt-BR', {
        day: '2-digit',
        month: '2-digit',
        year: 'numeric',
        hour: '2-digit',
        minute: '2-digit',
        second: '2-digit',
      });
    } catch (error) {
      return String(dateString);
    }
  }, []);

  const getSeverityColor = useCallback((severity: string) => {
    return severity.includes('4')
      ? 'bg-destructive text-destructive-foreground'
      : 'bg-yellow-500 text-yellow-950';
  }, []);

  const truncateText = useCallback((text: string, maxLength: number) => {
    return text.length > maxLength ? text.substring(0, maxLength) + '...' : text;
  }, []);

  const filteredData = useMemo(() => {
    if (!searchTerm.trim()) return alertData;

    const searchLower = searchTerm.toLowerCase().trim();
    return alertData.filter(alert =>
      Object.values(alert).some(value =>
        String(value).toLowerCase().includes(searchLower)
      )
    );
  }, [alertData, searchTerm]);

  const { sortedAndPaginatedData, totalPages } = useMemo(() => {
    let sortedData = [...filteredData];

    if (sortField && sortDirection) {
      sortedData.sort((a, b) => {
        let aValue: any = a[sortField];
        let bValue: any = b[sortField];

        if (sortField === 'chamado') {
          aValue = parseInt(a.chamado) || 0;
          bValue = parseInt(b.chamado) || 0;
        } else if (sortField === 'abertura_chamado') {
          aValue = new Date(a.abertura_chamado).getTime() || 0;
          bValue = new Date(b.abertura_chamado).getTime() || 0;
        } else {
          aValue = String(aValue).toLowerCase();
          bValue = String(bValue).toLowerCase();
        }

        if (aValue < bValue) return sortDirection === 'asc' ? -1 : 1;
        if (aValue > bValue) return sortDirection === 'asc' ? 1 : -1;
        return 0;
      });
    } else {
      sortedData.sort((a, b) => {
        const chamadoA = parseInt(a.chamado) || 0;
        const chamadoB = parseInt(b.chamado) || 0;
        return chamadoB - chamadoA;
      });
    }

    const startIndex = (currentPage - 1) * itemsPerPage;
    const endIndex = startIndex + itemsPerPage;
    const paginatedData = sortedData.slice(startIndex, endIndex);
    const totalPages = Math.ceil(sortedData.length / itemsPerPage);

    return { sortedAndPaginatedData: paginatedData, totalPages };
  }, [filteredData, currentPage, itemsPerPage, sortField, sortDirection]);

  // RENDER (mantive seu layout intacto; apenas alterei a exibição do cronômetro para usar getRemainingSeconds)
  return (
    <TooltipProvider>
      <Card className="bg-card border-border">
        <CardHeader>
          {/* Campo de Pesquisa */}
          <div className="relative mb-4">
            <Search className="absolute left-3 top-1/2 h-4 w-4 -translate-y-1/2 text-muted-foreground" />
            <Input
              placeholder="Pesquisar por chamado, tipo, grupo, status, título..."
              value={searchTerm}
              onChange={(e) => setSearchTerm(e.target.value)}
              className="pl-10"
            />
          </div>

          {searchTerm && (
            <div className="text-sm text-muted-foreground">
              {filteredData.length === 0 ? (
                <span>Nenhum resultado encontrado para "{searchTerm}"</span>
              ) : (
                <span>
                  {filteredData.length} resultado{filteredData.length !== 1 ? 's' : ''}
                  {filteredData.length !== alertData.length && ` de ${alertData.length} `}
                  para "{searchTerm}"
                </span>
              )}
            </div>
          )}
        </CardHeader>

        <CardContent>
          {/* Mobile Layout */}
          <div className="block lg:hidden space-y-4">
            {loading ? (
              <div className="text-center py-8">
                <div className="inline-block animate-spin rounded-full h-8 w-8 border-b-2 border-primary mb-4"></div>
                <p>Carregando dados...</p>
              </div>
            ) : sortedAndPaginatedData.length === 0 ? (
              <div className="text-center py-8 text-muted-foreground">
                {searchTerm ? 'Nenhum resultado encontrado' : 'Nenhum dado disponível'}
              </div>
            ) : (
              sortedAndPaginatedData.map((alert) => {
                const isChat = isAcionado(alert.chamado);
                const observacao = observacoesData.get(alert.chamado);
                const escalacao = escalacaoData.get(alert.chamado);

                // Pegar tempo restante vindo do WS (se houver)
                const remainingSec = getRemainingSeconds(alert.chamado);

                const displayTimer = () => {
                  if (remainingSec != null) return formatDuration(remainingSec);
                  if (escalacao && selectedChamadoEscalacao === alert.chamado && isTimerActive) return formatTime(currentTimer);
                  return '00:00';
                };

                return (
                  <Card key={alert.id} className="bg-secondary border-border">
                    <CardContent className="p-3 sm:p-4">
                      <div className="flex items-center justify-between mb-3 gap-2 flex-wrap">
                        <div className="flex items-center gap-1 sm:gap-2 flex-wrap">
                          <Badge variant="outline" className="text-xs">
                            <Button
                              variant="link"
                              size="sm"
                              className="text-xs p-0 hover:underline"
                              onClick={() => handleChamadoClick(alert)}
                            >
                              {alert.chamado}
                            </Button>
                          </Badge>
                          <Badge variant="outline" className="text-xs max-w-[100px] truncate">
                            {alert.tipo_chamado}
                          </Badge>
                          <Badge className={`${getSeverityColor(alert.severidade_chamado)} text-xs`}>
                            {alert.severidade_chamado}
                          </Badge>
                        </div>
                      </div>

                      <div className="space-y-2">
                        <p className="text-sm font-medium break-words">
                          {truncateText(alert.resumo_chamado, 60)}
                        </p>

                        <div className="flex items-center justify-between text-xs text-muted-foreground gap-2">
                          <span className="text-sm font-semibold text-foreground truncate flex-1">
                            {alert.grupo_chamado}
                          </span>
                          <span className="truncate">{alert.status_chamado}</span>
                        </div>

                        <div className="text-xs text-muted-foreground">
                          {formatDate(alert.abertura_chamado)}
                        </div>

                        {/* Seção Acionamento Mobile */}
                        <div className="border-t pt-3 mt-3">
                          <div className="flex items-center justify-between mb-2">
                            <span className="text-xs font-medium text-muted-foreground">Acionamento</span>
                            {escalacao && escalacao.isActive && (
                              <Badge variant="secondary" className="text-xs">
                                Etapa {escalacao.etapa}/4
                              </Badge>
                            )}
                          </div>
                          
                          {escalacao && escalacao.isActive ? (
                            <div className="space-y-2">
                              <div className="flex items-center gap-2">
                                <Timer className="h-4 w-4 text-orange-500" />
                                <span className="text-sm font-mono">
                                  {displayTimer()}
                                </span>
                                <Button
                                  variant="outline"
                                  size="sm"
                                  onClick={() => {
                                    setSelectedChamadoEscalacao(alert.chamado);
                                    setCurrentEtapa(escalacao.etapa);
                                    setEscalacaoDialogOpen(true);
                                  }}
                                  className="h-6 px-2 text-xs"
                                >
                                  Gerenciar
                                </Button>
                              </div>
                            </div>
                          ) : (
                            <Button
                              variant="outline"
                              size="sm"
                              onClick={() => handleIniciarEscalacao(alert.chamado)}
                              className="h-7 px-3 text-xs w-full"
                            >
                              <Play className="h-3 w-3 mr-1" />
                              Iniciar Escalação
                            </Button>
                          )}
                        </div>

                        <div className="flex items-center justify-between pt-3 gap-2">
                          <div className="flex gap-2">
                            <Button
                              variant={isChat ? 'default' : 'outline'}
                              size="sm"
                              onClick={() => !isChat && handleAcknowledgment(alert)}
                              disabled={isChat}
                              className={`h-7 px-2 sm:px-3 text-xs flex-shrink-0 ${isChat
                                ? 'bg-green-600 text-white hover:bg-green-700'
                                : 'border-border hover:bg-accent'
                                }`}
                            >
                              {isChat ? (
                                <>
                                  <Check className="h-3 w-3 mr-1" />
                                  <span className="hidden sm:inline">Acionado</span>
                                </>
                              ) : (
                                <>
                                  <AlertTriangle className="h-3 w-3 mr-1" />
                                  <span className="hidden sm:inline">Acionar</span>
                                </>
                              )}
                            </Button>

                            <Button
                              variant={observacao ? "default" : "outline"}
                              size="sm"
                              onClick={() => handleOpenObservacao(alert.chamado)}
                              className={`h-7 px-2 text-xs ${observacao
                                ? 'bg-green-600 text-white hover:bg-green-700'
                                : 'border-border hover:bg-accent'
                                }`}
                            >
                              {observacao ? (
                                <>
                                  <CheckCircle className="h-3 w-3 mr-1" />
                                  <span className="hidden sm:inline">Finalizado</span>
                                </>
                              ) : (
                                <>
                                  <Edit3 className="h-3 w-3 mr-1" />
                                  <span className="hidden sm:inline">Observação</span>
                                </>
                              )}
                            </Button>
                          </div>
                        </div>
                      </div>
                    </CardContent>
                  </Card>
                );
              })
            )}
          </div>

          {/* Desktop Layout */}
          <div className="hidden lg:block overflow-x-auto">
            <Table className="min-w-[1200px]">
              <TableHeader>
                <TableRow className="border-border hover:bg-accent">
                  {[  
                    { key: 'chamado' as SortField, label: 'Chamado', width: 'w-20' },
                    { key: 'tipo_chamado' as SortField, label: 'Classificação', width: 'w-24' },
                    { key: 'grupo_chamado' as SortField, label: 'Grupo', width: 'w-20' },
                    { key: 'status_chamado' as SortField, label: 'Status', width: 'w-20' },
                    { key: 'abertura_chamado' as SortField, label: 'Abertura', width: 'w-28' },
                    { key: 'resumo_chamado' as SortField, label: 'Título', width: 'flex-1 min-w-40' },
                    { key: 'severidade_chamado' as SortField, label: 'Severidade', width: 'w-20' }
                  ].map(({ key, label, width }) => (
                    <TableHead key={key} className={`text-muted-foreground ${width}`}>
                      <Button
                        variant="ghost"
                        className="h-auto p-0 font-medium text-muted-foreground hover:text-foreground text-xs"
                        onClick={() => handleSort(key)}
                      >
                        {label}
                        {getSortIcon(key)}
                      </Button>
                    </TableHead>
                  ))}
                  <TableHead className="text-muted-foreground w-40 text-center">
                    <span className="text-xs font-medium">Acionamento</span>
                  </TableHead>
                  <TableHead className="text-muted-foreground w-16 text-center">Chat</TableHead>
                  <TableHead className="text-muted-foreground w-32 text-center">Observação</TableHead>
                </TableRow>
              </TableHeader>
              <TableBody>
                {loading ? (
                  <TableRow>
                    <TableCell colSpan={11} className="text-center py-8">
                      Carregando dados...
                    </TableCell>
                  </TableRow>
                ) : sortedAndPaginatedData.length === 0 ? (
                  <TableRow>
                    <TableCell colSpan={11} className="text-center py-8 text-muted-foreground">
                      {searchTerm ? 'Nenhum resultado encontrado' : 'Nenhum dado disponível'}
                    </TableCell>
                  </TableRow>
                ) : (
                  sortedAndPaginatedData.map((alert) => {
                    const isChat = isAcionado(alert.chamado);
                    const observacao = observacoesData.get(alert.chamado);
                    const escalacao = escalacaoData.get(alert.chamado);

                    const remainingSec = getRemainingSeconds(alert.chamado);

                    const displayTimer = () => {
                      if (remainingSec != null) return formatDuration(remainingSec);
                      if (escalacao && selectedChamadoEscalacao === alert.chamado && isTimerActive) return formatTime(currentTimer);
                      return '00:00';
                    };

                    return (
                      <TableRow key={alert.id} className="border-border hover:bg-accent transition-colors">
                        <TableCell className="font-medium">
                          <Button
                            variant="link"
                            size="sm"
                            className="p-0 text-foreground hover:underline text-xs"
                            onClick={() => handleChamadoClick(alert)}
                          >
                            {alert.chamado}
                          </Button>
                        </TableCell>
                        <TableCell>
                          <Tooltip>
                            <TooltipTrigger asChild>
                              <span className="truncate block max-w-[80px] text-xs">
                                {alert.tipo_chamado}
                              </span>
                            </TooltipTrigger>
                            <TooltipContent>
                              <p className="max-w-xs">{alert.tipo_chamado}</p>
                            </TooltipContent>
                          </Tooltip>
                        </TableCell>
                        <TableCell className="text-xs">{alert.grupo_chamado}</TableCell>
                        <TableCell className="text-xs">{alert.status_chamado}</TableCell>
                        <TableCell className="text-xs">{formatDate(alert.abertura_chamado)}</TableCell>
                        <TableCell>
                          <Tooltip>
                            <TooltipTrigger asChild>
                              <span className="truncate block max-w-[120px] text-xs">
                                {alert.resumo_chamado}
                              </span>
                            </TooltipTrigger>
                            <TooltipContent>
                              <p className="max-w-md">{alert.resumo_chamado}</p>
                            </TooltipContent>
                          </Tooltip>
                        </TableCell>
                        <TableCell>
                          <Badge className={`${getSeverityColor(alert.severidade_chamado)} text-xs`}>
                            {alert.severidade_chamado}
                          </Badge>
                        </TableCell>
                        <TableCell>
                          <div className="flex flex-col items-center gap-2">
                            {escalacao && escalacao.isActive ? (
                              <div className="space-y-1 w-full">
                                <div className="flex items-center justify-between">
                                  <Badge variant="secondary" className="text-xs">
                                    Etapa {escalacao.etapa}/4
                                  </Badge>
                                  <div className="flex items-center gap-1">
                                    <Timer className="h-3 w-3 text-orange-500" />
                                    <span className="text-xs font-mono">
                                      {displayTimer()}
                                    </span>
                                  </div>
                                </div>
                                <Button
                                  variant="outline"
                                  size="sm"
                                  onClick={() => {
                                    setSelectedChamadoEscalacao(alert.chamado);
                                    setCurrentEtapa(escalacao.etapa);
                                    setEscalacaoDialogOpen(true);
                                  }}
                                  className="h-6 px-2 text-xs w-full"
                                >
                                  Gerenciar
                                </Button>
                              </div>
                            ) : (
                              <Button
                                variant="outline"
                                size="sm"
                                onClick={() => handleIniciarEscalacao(alert.chamado)}
                                className="h-7 px-2 text-xs"
                              >
                                <Play className="h-3 w-3 mr-1" />
                                Iniciar
                              </Button>
                            )}
                          </div>
                        </TableCell>
                        <TableCell>
                          <Button
                            variant={isChat ? "default" : "outline"}
                            size="sm"
                            onClick={() => !isChat && handleAcknowledgment(alert)}
                            disabled={isChat}
                            className={`${isChat
                              ? 'bg-green-600 text-white hover:bg-green-700'
                              : 'border-border hover:bg-accent'
                              } h-7 w-7 p-0`}
                          >
                            {isChat ? (
                              <Check className="h-3 w-3" />
                            ) : (
                              <AlertTriangle className="h-3 w-3" />
                            )}
                          </Button>
                        </TableCell>
                        <TableCell>
                          <Button
                            variant={observacao ? "default" : "outline"}
                            size="sm"
                            onClick={() => handleOpenObservacao(alert.chamado)}
                            className={`${observacao
                              ? 'bg-green-600 text-white hover:bg-green-700'
                              : 'border-border hover:bg-accent'
                              } h-7 w-7 p-0`}
                          >
                            {observacao ? (
                              <CheckCircle className="h-3 w-3" />
                            ) : (
                              <Edit3 className="h-3 w-3" />
                            )}
                          </Button>
                        </TableCell>
                      </TableRow>
                    );
                  })
                )}
              </TableBody>
            </Table>
          </div>

          {/* Paginação */}
          {!loading && sortedAndPaginatedData.length > 0 && totalPages > 1 && (
            <div className="flex items-center justify-between mt-4 pt-4 border-t border-border">
              <div className="text-sm text-muted-foreground">
                Mostrando {((currentPage - 1) * itemsPerPage) + 1} a {Math.min(currentPage * itemsPerPage, filteredData.length)} de {filteredData.length} registros
                {searchTerm && filteredData.length !== alertData.length && ` (filtrados de ${alertData.length})`}
              </div>
              
              <div className="flex items-center gap-2">
                <Label htmlFor="itemsPerPage" className="text-sm font-medium whitespace-nowrap">
                  Por Página:
                </Label>
                <Select value={itemsPerPage.toString()} onValueChange={(v: string) => {
                  const num = parseInt(v, 10);
                  setItemsPerPage(num);
                  setCurrentPage(1);
                  sessionStorage.setItem("itemsPerPage", num.toString());
                }}>
                  <SelectTrigger className="w-20">
                    <SelectValue />
                  </SelectTrigger>
                  <SelectContent>
                    <SelectItem value="5">5</SelectItem>
                    <SelectItem value="10">10</SelectItem>
                    <SelectItem value="15">15</SelectItem>
                    <SelectItem value="20">20</SelectItem>
                  </SelectContent>
                </Select>
              </div>

              <div className="flex items-center gap-2">
                <Button
                  variant="outline"
                  size="sm"
                  onClick={() => setCurrentPage(currentPage - 1)}
                  disabled={currentPage === 1}
                  className="h-8 px-3"
                >
                  <ChevronLeft className="h-4 w-4 mr-1" />
                  Anterior
                </Button>

                <div className="flex items-center gap-1">
                  {[...Array(Math.min(totalPages, 5))].map((_, index) => {
                    let page;
                    if (totalPages <= 5) {
                      page = index + 1;
                    } else if (currentPage <= 3) {
                      page = index + 1;
                    } else if (currentPage >= totalPages - 2) {
                      page = totalPages - 4 + index;
                    } else {
                      page = currentPage - 2 + index;
                    }

                    return (
                      <Button
                        key={page}
                        variant={currentPage === page ? "default" : "outline"}
                        size="sm"
                        onClick={() => setCurrentPage(page)}
                        className="h-8 w-8 p-0"
                      >
                        {page}
                      </Button>
                    );
                  })}
                </div>

                <Button
                  variant="outline"
                  size="sm"
                  onClick={() => setCurrentPage(currentPage + 1)}
                  disabled={currentPage === totalPages}
                  className="h-8 px-3"
                >
                  Próximo
                  <ChevronRight className="h-4 w-4 ml-1" />
                </Button>
              </div>
            </div>
          )}

          {/* Modals */}
          <EscalacaoDialog
            open={escalacaoDialogOpen}
            onOpenChange={setEscalacaoDialogOpen}
            selectedChamado={selectedChamadoEscalacao}
            currentEtapa={currentEtapa}
            currentTimer={currentTimer}
            formatTime={formatTime}
            escalacaoData={escalacaoData}
            onAvancarEtapa={(obs, op) => avancarEtapa(selectedChamadoEscalacao, obs, op)}
            onVoltarEtapa={(obs, op) => voltarEtapa(selectedChamadoEscalacao, obs, op)}
            onFinalizarEscalacao={(obs, op) => finalizarEscalacao(selectedChamadoEscalacao, obs, op)}
          />

          <ObservacaoDialog
            open={observacaoDialogOpen}
            onOpenChange={setObservacaoDialogOpen}
            selectedChamado={selectedChamadoForEdit}
            onSave={(obs, op) => saveObservacao(selectedChamadoForEdit, obs, op)}
            hasTimestamp={hasTimestamp}
            getTimestamp={getTimestampForChamado}
            alertData={alertData}
            initialOperador={observacoesData.get(selectedChamadoForEdit)?.operador || ''}
            initialObservacao={observacoesData.get(selectedChamadoForEdit)?.observacao || ''}
          />

          <ChamadoModal
            open={chamadoModalOpen}
            onOpenChange={setChamadoModalOpen}
            selectedIncident={selectedIncident}
            observacoesData={observacoesData}
            formatDate={formatDate}
          />
        </CardContent>
      </Card>
    </TooltipProvider>
  );
};

export default ActionTable;

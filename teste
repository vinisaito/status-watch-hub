import React, { useEffect, useState, useRef } from "react";

const WEBSOCKET_URL = "wss://xxxxxx.execute-api.REGION.amazonaws.com/dev"; // üîπ Coloque seu WebSocket da API Gateway

interface Chamado {
  chamado: number;
  startedAt?: string;
  durationMinutes?: number;
  timerActive?: boolean;
  timeRemaining?: number;
}

const Timer: React.FC = () => {
  const [chamados, setChamados] = useState<Chamado[]>([]);
  const wsRef = useRef<WebSocket | null>(null);

  // üîπ Conecta ao WebSocket
  const setupWebSocket = () => {
    wsRef.current = new WebSocket(WEBSOCKET_URL);

    wsRef.current.onopen = () => {
      console.log("üîó Conectado ao WebSocket");
      wsRef.current?.send(JSON.stringify({ action: "getAll" }));
    };

    wsRef.current.onmessage = (event) => {
      const message = JSON.parse(event.data);
      console.log("üì© Mensagem recebida:", message);

      if (message.type === "ALL_CHAMADOS") {
        setChamados(message.data);
      } else if (message.type === "TIMER_UPDATED") {
        setChamados((prev) =>
          prev.map((c) =>
            c.chamado === message.chamado
              ? { ...c, ...message, timeRemaining: message.timeRemaining }
              : c
          )
        );
      }
    };

    wsRef.current.onclose = () => {
      console.log("‚ö†Ô∏è WebSocket desconectado, tentando reconectar...");
      setTimeout(setupWebSocket, 2000);
    };
  };

  // üîπ Atualiza contagem regressiva no front
  const tickTimers = () => {
    setChamados((prev) =>
      prev.map((c) => {
        if (!c.timerActive || c.timeRemaining === undefined) return c;
        const newTime = c.timeRemaining - 1;
        return { ...c, timeRemaining: Math.max(0, newTime) };
      })
    );
  };

  // üîπ Inicia ou pausa timer
  const toggleTimer = (chamado: number, isActive: boolean) => {
    wsRef.current?.send(
      JSON.stringify({
        action: isActive ? "pauseTimer" : "startTimer",
        chamado,
      })
    );
  };

  useEffect(() => {
    setupWebSocket();
    const interval = setInterval(tickTimers, 1000);
    return () => clearInterval(interval);
  }, []);

  return (
    <div style={{ padding: 20, fontFamily: "Arial" }}>
      <h1>Painel de Alertas</h1>
      {chamados.map((c) => {
        const minutes = Math.floor((c.timeRemaining || 0) / 60);
        const seconds = (c.timeRemaining || 0) % 60;

        return (
          <div
            key={c.chamado}
            style={{
              border: "1px solid #ccc",
              padding: 10,
              marginBottom: 10,
              borderRadius: 8,
            }}
          >
            <h3>Chamado #{c.chamado}</h3>
            <p>
              ‚è≥ Tempo Restante: {minutes}:{seconds.toString().padStart(2, "0")}
            </p>
            <button
              onClick={() => toggleTimer(c.chamado, c.timerActive || false)}
              style={{
                background: c.timerActive ? "red" : "green",
                color: "white",
                padding: "5px 10px",
                borderRadius: 5,
                border: "none",
                cursor: "pointer",
              }}
            >
              {c.timerActive ? "Pausar" : "Iniciar"}
            </button>
          </div>
        );
      })}
    </div>
  );
};

export default Timer;

import os
import pyodbc
import json
import time
import boto3
from datetime import datetime
from botocore.exceptions import ClientError

dynamodb = boto3.resource("dynamodb")
connections_table = dynamodb.Table(os.environ["CONNECTIONS_TABLE"])  # tabela DynamoDB com os connectionIds

def lambda_handler(event, context):
    start_total = time.time()
    print("[INÍCIO] Execução da Lambda")

    try:
        # Variáveis de ambiente
        server = os.environ['DB_SERVER']
        username = os.environ['DB_USER']
        password = os.environ['DB_PASSWORD']
        port = os.environ.get('DB_PORT', '1433')
        database = 'mdb'
        api_endpoint = os.environ['WEBSOCKET_API_ENDPOINT']  # Ex: "https://xxxx.execute-api.us-east-1.amazonaws.com/prod"

        # String de conexão
        connection_string = (
            f'DRIVER={{ODBC Driver 18 for SQL Server}};'
            f'SERVER={server},{port};'
            f'DATABASE={database};'
            f'UID={username};'
            f'PWD={password};'
            f'Encrypt=no;TrustServerCertificate=yes;'
            f'CHARSET=UTF8;'
        )

        # Conexão com o banco
        conn = pyodbc.connect(connection_string, timeout=5)
        cursor = conn.cursor()

        query = """
            SELECT [chamado]
                  ,[tipo_chamado]
                  ,[status_chamado]
                  ,[abertura_chamado]
                  ,[resumo_chamado]
                  ,[grupo_chamado]
                  ,[severidade_chamado]
                  ,[acionado]
            FROM [mdb].[dbo].[view_ciops_acionamento]
            WHERE TRY_CONVERT(DATETIME, abertura_chamado, 103) >= DATEADD(HOUR, -10, GETDATE());
        """
        cursor.execute(query)
        rows = cursor.fetchall()

        # Processamento
        columns = [column[0] for column in cursor.description]
        results = []
        for row in rows:
            row_dict = dict(zip(columns, row))
            if isinstance(row_dict.get("abertura_chamado"), datetime):
                row_dict["abertura_chamado"] = row_dict["abertura_chamado"].strftime("%Y-%m-%dT%H:%M:%S")
            results.append(row_dict)

        cursor.close()
        conn.close()

        # Envia para todos os clientes WebSocket conectados
        apigw = boto3.client("apigatewaymanagementapi", endpoint_url=api_endpoint)

        connection_items = connections_table.scan().get("Items", [])
        print(f"[INFO] Enviando mensagem para {len(connection_items)} conexões")

        for item in connection_items:
            connection_id = item["connectionId"]
            try:
                apigw.post_to_connection(
                    ConnectionId=connection_id,
                    Data=json.dumps(results, ensure_ascii=False).encode("utf-8")
                )
            except ClientError as e:
                if e.response['Error']['Code'] == 'GoneException':
                    print(f"[WARN] Conexão {connection_id} expirada, removendo...")
                    connections_table.delete_item(Key={"connectionId": connection_id})
                else:
                    print(f"[ERRO] Falha ao enviar para {connection_id}: {e}")

        return {
            'statusCode': 200,
            'body': json.dumps({"message": "Dados enviados via WebSocket"}, ensure_ascii=False)
        }

    except Exception as e:
        print("[ERRO]", str(e))
        return {
            'statusCode': 500,
            'body': json.dumps({'error': str(e)}, ensure_ascii=False)
        }

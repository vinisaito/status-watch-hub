import { Card } from "@/components/ui/card";
import { CheckCircle2, Clock, AlertCircle, RotateCcw, XCircle, Wrench } from "lucide-react";

interface AreaReportProps {
  area: string;
  manager?: string;
  performance: number;
  revenue: string;
  status: "excellent" | "good" | "attention";
  rdmStats: {
    concluidas: number;
    emAndamento: number;
    abertas: number;
    rollback: number;
    emAprovacao?: number;
    cancelada?: number;
  };
  areaColor?: string;
  borderColor?: string;
  accentColor?: string;
}

export const AreaReport = ({ area, manager: _manager, performance: _performance, revenue, status: _status, rdmStats, areaColor = "blue-medium", borderColor, accentColor }: AreaReportProps) => {
  const total = rdmStats.concluidas + rdmStats.emAndamento + rdmStats.abertas + rdmStats.rollback;
  const completionPercentage = total > 0 ? Math.round((rdmStats.concluidas / total) * 100) : 0;

  return (
    <Card
      className="group relative overflow-hidden bg-card transition-all duration-300 hover:shadow-xl hover:-translate-y-2"
      style={{ borderColor: borderColor ?? "hsl(var(--border))", borderWidth: "2px" }}
    >
      {/* Gradient overlay on hover */}
      <div 
        className="absolute inset-0 opacity-0 group-hover:opacity-100 transition-opacity duration-500" 
        style={{ background: `linear-gradient(135deg, transparent 0%, ${accentColor ?? "hsl(var(--blue-soft))"} 100%)` }}
      />
      
      <div className="relative p-6 flex flex-col h-full">
        {/* Header with circular progress */}
        <div className="flex items-start justify-between mb-6">
          <div className="flex-1">
            <h3 className="text-sm font-semibold text-muted-foreground tracking-wide uppercase mb-1">
              {area}
            </h3>
            <p className="text-4xl font-bold text-foreground tracking-tight">{revenue}</p>
            <p className="text-xs text-muted-foreground mt-1">Total RDMs</p>
          </div>
          
          {/* Circular Progress Indicator */}
          <div className="relative w-16 h-16">
            <svg className="w-16 h-16 transform -rotate-90" viewBox="0 0 64 64">
              <circle
                cx="32"
                cy="32"
                r="28"
                fill="none"
                stroke="hsl(var(--neutral-100))"
                strokeWidth="6"
              />
              <circle
                cx="32"
                cy="32"
                r="28"
                fill="none"
                stroke="hsl(var(--success))"
                strokeWidth="6"
                strokeDasharray={`${(completionPercentage / 100) * 176} 176`}
                strokeLinecap="round"
                className="transition-all duration-1000"
              />
            </svg>
            <div className="absolute inset-0 flex items-center justify-center">
              <span className="text-xs font-bold text-foreground">{completionPercentage}%</span>
            </div>
          </div>
        </div>

        {/* Status Grid with enhanced visuals */}
        <div className="grid grid-cols-2 gap-3">
          {/* Concluídas */}
          <div className="bg-[hsl(var(--success-light))] rounded-lg p-3 border border-[hsl(var(--success))]/20 transition-transform duration-200 hover:scale-105">
            <div className="flex items-center gap-2 mb-1">
              <CheckCircle2 className="h-4 w-4 text-[hsl(var(--success))]" />
              <p className="text-lg font-bold text-foreground">{rdmStats.concluidas}</p>
            </div>
            <p className="text-xs text-muted-foreground font-medium">Concluídas</p>
          </div>

          {/* Em Andamento */}
          <div className="bg-[hsl(var(--warning-light))] rounded-lg p-3 border border-[hsl(var(--warning))]/20 transition-transform duration-200 hover:scale-105">
            <div className="flex items-center gap-2 mb-1">
              <Wrench className="h-4 w-4 text-[hsl(var(--warning))]" />
              <p className="text-lg font-bold text-foreground">{rdmStats.emAndamento}</p>
            </div>
            <p className="text-xs text-muted-foreground font-medium">Em Implantação</p>
          </div>

          {/* Abertas */}
          <div className="bg-[hsl(var(--blue-soft))] rounded-lg p-3 border border-[hsl(var(--blue-accent))]/20 transition-transform duration-200 hover:scale-105">
            <div className="flex items-center gap-2 mb-1">
              <AlertCircle className="h-4 w-4 text-[hsl(var(--blue-accent))]" />
              <p className="text-lg font-bold text-foreground">{rdmStats.abertas}</p>
            </div>
            <p className="text-xs text-muted-foreground font-medium">Abertas</p>
          </div>

          {/* Em Aprovação */}
          {typeof rdmStats.emAprovacao === "number" && (
            <div className="bg-[hsl(var(--blue-soft))] rounded-lg p-3 border border-[hsl(var(--blue-medium))]/20 transition-transform duration-200 hover:scale-105">
              <div className="flex items-center gap-2 mb-1">
                <Clock className="h-4 w-4 text-[hsl(var(--blue-medium))]" />
                <p className="text-lg font-bold text-foreground">{rdmStats.emAprovacao}</p>
              </div>
              <p className="text-xs text-muted-foreground font-medium">Em Aprovação</p>
            </div>
          )}

          {/* Rollback */}
          <div className="bg-red-50 rounded-lg p-3 border border-red-200 transition-transform duration-200 hover:scale-105">
            <div className="flex items-center gap-2 mb-1">
              <RotateCcw className="h-4 w-4 text-red-600" />
              <p className="text-lg font-bold text-foreground">{rdmStats.rollback}</p>
            </div>
            <p className="text-xs text-muted-foreground font-medium">Rollback</p>
          </div>

          {/* Cancelada */}
          {typeof rdmStats.cancelada === "number" && (
            <div className="bg-red-50 rounded-lg p-3 border border-red-200 transition-transform duration-200 hover:scale-105">
              <div className="flex items-center gap-2 mb-1">
                <XCircle className="h-4 w-4 text-red-500" />
                <p className="text-lg font-bold text-foreground">{rdmStats.cancelada}</p>
              </div>
              <p className="text-xs text-muted-foreground font-medium">Cancelada</p>
            </div>
          )}
        </div>
      </div>
    </Card>
  );
};
















import { Card } from "@/components/ui/card";
import { TrendingUp, Activity, CheckCircle2, AlertCircle } from "lucide-react";

interface HeroMetricsProps {
  totalRdms: number;
  concluidas: number;
  emAndamento: number;
  abertas: number;
  completionRate: number;
}

export const HeroMetrics = ({
  totalRdms,
  concluidas,
  emAndamento,
  abertas,
  completionRate,
}: HeroMetricsProps) => {
  return (
    <Card className="relative overflow-hidden border-0 shadow-xl">
      {/* Gradient Background */}
      <div
        className="absolute inset-0 opacity-100"
        style={{
          background: "var(--gradient-hero)",
        }}
      />

      {/* Decorative Elements */}
      <div className="absolute top-0 right-0 w-96 h-96 bg-white/10 rounded-full blur-3xl" />
      <div className="absolute bottom-0 left-0 w-80 h-80 bg-white/5 rounded-full blur-3xl" />

      <div className="relative p-8 md:p-12">
        {/* Header */}
        <div className="text-center mb-8">
          <h1 className="text-3xl md:text-5xl font-bold text-white mb-3 tracking-tight">
            Janela de RDMS
          </h1>
          <p className="text-lg md:text-xl text-white/90 font-medium">
            Visão Executiva - Acompanhamento em Tempo Real
          </p>
        </div>

        {/* Main Metric - Center Focus */}
        <div className="flex justify-center mb-8">
          <div className="text-center">
            <div className="inline-flex items-center justify-center w-32 h-32 md:w-40 md:h-40 rounded-full bg-white/20 backdrop-blur-sm border-4 border-white/30 mb-4">
              <div className="text-center">
                <p className="text-5xl md:text-6xl font-bold text-white">{totalRdms}</p>
                <p className="text-sm text-white/90 font-medium mt-1">RDMs</p>
              </div>
            </div>
            <div className="flex items-center justify-center gap-2 text-white/90">
              <TrendingUp className="h-5 w-5" />
              <span className="text-lg font-semibold">{completionRate}% Taxa de Conclusão</span>
            </div>
          </div>
        </div>

        {/* Secondary Metrics Grid */}
        <div className="grid grid-cols-1 md:grid-cols-3 gap-4 max-w-4xl mx-auto">
          {/* Concluídas */}
          <div className="bg-white/10 backdrop-blur-sm rounded-xl p-6 border border-white/20 hover:bg-white/15 transition-all duration-300">
            <div className="flex items-start justify-between mb-3">
              <CheckCircle2 className="h-8 w-8 text-white" />
              <div className="text-right">
                <p className="text-3xl font-bold text-white">{concluidas}</p>
                <p className="text-sm text-white/80 font-medium mt-1">Concluídas</p>
              </div>
            </div>
            <div className="h-2 bg-white/20 rounded-full overflow-hidden">
              <div
                className="h-full bg-white/90 rounded-full transition-all duration-1000"
                style={{ width: `${(concluidas / totalRdms) * 100}%` }}
              />
            </div>
          </div>

          {/* Em Andamento */}
          <div className="bg-white/10 backdrop-blur-sm rounded-xl p-6 border border-white/20 hover:bg-white/15 transition-all duration-300">
            <div className="flex items-start justify-between mb-3">
              <Activity className="h-8 w-8 text-white" />
              <div className="text-right">
                <p className="text-3xl font-bold text-white">{emAndamento}</p>
                <p className="text-sm text-white/80 font-medium mt-1">Em Implantação</p>
              </div>
            </div>
            <div className="h-2 bg-white/20 rounded-full overflow-hidden">
              <div
                className="h-full bg-white/90 rounded-full transition-all duration-1000"
                style={{ width: `${(emAndamento / totalRdms) * 100}%` }}
              />
            </div>
          </div>

          {/* Abertas */}
          <div className="bg-white/10 backdrop-blur-sm rounded-xl p-6 border border-white/20 hover:bg-white/15 transition-all duration-300">
            <div className="flex items-start justify-between mb-3">
              <AlertCircle className="h-8 w-8 text-white" />
              <div className="text-right">
                <p className="text-3xl font-bold text-white">{abertas}</p>
                <p className="text-sm text-white/80 font-medium mt-1">Abertas</p>
              </div>
            </div>
            <div className="h-2 bg-white/20 rounded-full overflow-hidden">
              <div
                className="h-full bg-white/90 rounded-full transition-all duration-1000"
                style={{ width: `${(abertas / totalRdms) * 100}%` }}
              />
            </div>
          </div>
        </div>
      </div>
    </Card>
  );
};

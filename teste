import React from 'react';
import { Clock, AlertTriangle } from 'lucide-react';
import { Badge } from '@/components/ui/badge';
import { cn } from '@/lib/utils';

interface TimerDisplayProps {
  remainingTime: number;
  formatTime: (seconds: number) => string;
  className?: string;
}

export const TimerDisplay: React.FC<TimerDisplayProps> = ({ 
  remainingTime, 
  formatTime,
  className 
}) => {
  const getTimeStatus = () => {
    if (remainingTime <= 300) return { 
      color: "text-red-500", 
      bg: "bg-red-500/10 border-red-200", 
      status: "CRÍTICO",
      variant: "destructive" as const,
      pulse: true
    };
    if (remainingTime <= 600) return { 
      color: "text-orange-500", 
      bg: "bg-orange-500/10 border-orange-200", 
      status: "ATENÇÃO",
      variant: "secondary" as const,
      pulse: false
    };
    return { 
      color: "text-green-500", 
      bg: "bg-green-500/10 border-green-200", 
      status: "NORMAL",
      variant: "secondary" as const,
      pulse: false
    };
  };

  const timeStatus = getTimeStatus();

  return (
    <div className={cn("space-y-3", className)}>
      <div className="text-sm font-medium text-foreground flex items-center gap-2">
        <Clock className={cn("h-4 w-4", timeStatus.color)} />
        Tempo Restante
      </div>
      
      <div className={cn(
        "flex items-center justify-between p-6 rounded-xl border-2 transition-all duration-300",
        timeStatus.bg,
        timeStatus.pulse && "animate-pulse"
      )}>
        <div className="flex items-center gap-4">
          <div className={cn(
            "p-3 rounded-full",
            timeStatus.color.replace('text-', 'bg-').replace('-500', '-500/20')
          )}>
            {remainingTime <= 300 ? (
              <AlertTriangle className={cn("h-8 w-8", timeStatus.color)} />
            ) : (
              <Clock className={cn("h-8 w-8", timeStatus.color)} />
            )}
          </div>
          
          <div>
            <div className={cn("text-4xl font-mono font-black tracking-wider leading-none", timeStatus.color)}>
              {formatTime(remainingTime)}
            </div>
            <div className="text-sm text-muted-foreground mt-1">
              {remainingTime <= 300 && remainingTime > 0 ? 
                "⚠️ Últimos minutos!" : 
                "Timer ativo"
              }
            </div>
          </div>
        </div>
        
        <Badge 
          variant={timeStatus.variant} 
          className={cn(
            "text-sm font-bold px-4 py-2",
            timeStatus.pulse && "animate-bounce"
          )}
        >
          {timeStatus.status}
        </Badge>
      </div>
    </div>
  );
};

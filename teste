INDEX:
import { Card } from "@/components/ui/card";
import { CheckCircle2, Clock, AlertCircle, RotateCcw, XCircle, Wrench } from "lucide-react";

interface AreaReportProps {
  area: string;
  manager?: string;
  performance: number;
  revenue: string;
  status: "excellent" | "good" | "attention";
  rdmStats: {
    concluidas: number;
    emAndamento: number;
    abertas: number;
    rollback: number;
    emAprovacao?: number;
    cancelada?: number;
  };
  areaColor?: string;
  borderColor?: string;
  accentColor?: string;
}

export const AreaReport = ({ area, manager: _manager, performance: _performance, revenue, status: _status, rdmStats, areaColor = "blue-medium", borderColor, accentColor }: AreaReportProps) => {
  const total = rdmStats.concluidas + rdmStats.emAndamento + rdmStats.abertas + rdmStats.rollback;
  const completionPercentage = total > 0 ? Math.round((rdmStats.concluidas / total) * 100) : 0;

  return (
    <Card
      className="group relative overflow-hidden bg-card transition-all duration-300 hover:shadow-xl hover:-translate-y-2"
      style={{ borderColor: borderColor ?? "hsl(var(--border))", borderWidth: "2px" }}
    >
      {/* Gradient overlay on hover */}
      <div 
        className="absolute inset-0 opacity-0 group-hover:opacity-100 transition-opacity duration-500" 
        style={{ background: `linear-gradient(135deg, transparent 0%, ${accentColor ?? "hsl(var(--blue-soft))"} 100%)` }}
      />
      
      <div className="relative p-6 flex flex-col h-full">
        {/* Header with circular progress */}
        <div className="flex items-start justify-between mb-6">
          <div className="flex-1">
            <h3 className="text-sm font-semibold text-muted-foreground tracking-wide uppercase mb-1">
              {area}
            </h3>
            <p className="text-4xl font-bold text-foreground tracking-tight">{revenue}</p>
            <p className="text-xs text-muted-foreground mt-1">Total RDMs</p>
          </div>
          
          {/* Circular Progress Indicator */}
          <div className="relative w-16 h-16">
            <svg className="w-16 h-16 transform -rotate-90" viewBox="0 0 64 64">
              <circle
                cx="32"
                cy="32"
                r="28"
                fill="none"
                stroke="hsl(var(--neutral-100))"
                strokeWidth="6"
              />
              <circle
                cx="32"
                cy="32"
                r="28"
                fill="none"
                stroke="hsl(var(--success))"
                strokeWidth="6"
                strokeDasharray={`${(completionPercentage / 100) * 176} 176`}
                strokeLinecap="round"
                className="transition-all duration-1000"
              />
            </svg>
            <div className="absolute inset-0 flex items-center justify-center">
              <span className="text-xs font-bold text-foreground">{completionPercentage}%</span>
            </div>
          </div>
        </div>

        {/* Status Grid with enhanced visuals */}
        <div className="grid grid-cols-2 gap-3">
          {/* Concluídas */}
          <div className="bg-[hsl(var(--success-light))] rounded-lg p-3 border border-[hsl(var(--success))]/20 transition-transform duration-200 hover:scale-105">
            <div className="flex items-center gap-2 mb-1">
              <CheckCircle2 className="h-4 w-4 text-[hsl(var(--success))]" />
              <p className="text-lg font-bold text-foreground">{rdmStats.concluidas}</p>
            </div>
            <p className="text-xs text-muted-foreground font-medium">Concluídas</p>
          </div>

          {/* Em Andamento */}
          <div className="bg-[hsl(var(--warning-light))] rounded-lg p-3 border border-[hsl(var(--warning))]/20 transition-transform duration-200 hover:scale-105">
            <div className="flex items-center gap-2 mb-1">
              <Wrench className="h-4 w-4 text-[hsl(var(--warning))]" />
              <p className="text-lg font-bold text-foreground">{rdmStats.emAndamento}</p>
            </div>
            <p className="text-xs text-muted-foreground font-medium">Em Implantação</p>
          </div>

          {/* Abertas */}
          <div className="bg-[hsl(var(--blue-soft))] rounded-lg p-3 border border-[hsl(var(--blue-accent))]/20 transition-transform duration-200 hover:scale-105">
            <div className="flex items-center gap-2 mb-1">
              <AlertCircle className="h-4 w-4 text-[hsl(var(--blue-accent))]" />
              <p className="text-lg font-bold text-foreground">{rdmStats.abertas}</p>
            </div>
            <p className="text-xs text-muted-foreground font-medium">Abertas</p>
          </div>

          {/* Em Aprovação */}
          {typeof rdmStats.emAprovacao === "number" && (
            <div className="bg-[hsl(var(--blue-soft))] rounded-lg p-3 border border-[hsl(var(--blue-medium))]/20 transition-transform duration-200 hover:scale-105">
              <div className="flex items-center gap-2 mb-1">
                <Clock className="h-4 w-4 text-[hsl(var(--blue-medium))]" />
                <p className="text-lg font-bold text-foreground">{rdmStats.emAprovacao}</p>
              </div>
              <p className="text-xs text-muted-foreground font-medium">Em Aprovação</p>
            </div>
          )}

          {/* Rollback */}
          <div className="bg-red-50 rounded-lg p-3 border border-red-200 transition-transform duration-200 hover:scale-105">
            <div className="flex items-center gap-2 mb-1">
              <RotateCcw className="h-4 w-4 text-red-600" />
              <p className="text-lg font-bold text-foreground">{rdmStats.rollback}</p>
            </div>
            <p className="text-xs text-muted-foreground font-medium">Rollback</p>
          </div>

          {/* Cancelada */}
          {typeof rdmStats.cancelada === "number" && (
            <div className="bg-red-50 rounded-lg p-3 border border-red-200 transition-transform duration-200 hover:scale-105">
              <div className="flex items-center gap-2 mb-1">
                <XCircle className="h-4 w-4 text-red-500" />
                <p className="text-lg font-bold text-foreground">{rdmStats.cancelada}</p>
              </div>
              <p className="text-xs text-muted-foreground font-medium">Cancelada</p>
            </div>
          )}
        </div>
      </div>
    </Card>
  );
};
















import { AreaReport } from "@/components/AreaReport";
import { useState, useEffect } from "react";
import RDMTimeline from "@/components/RDMTimeline";
import type { RDM } from "@/types/rdm";
import { fetchRdms, mapApiItemToRdm } from "@/lib/api";

const Index = () => {
  // Only the Visão Geral (Overview) section is displayed for executives
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState<string | null>(null);
  const [allRdms, setAllRdms] = useState<RDM[]>([]);
  const [search, setSearch] = useState("");
  const [searchResultRdmId, setSearchResultRdmId] = useState<string | null>(null);

  const totalReport = {
    area: "Visão Geral",
    performance: 85,
    revenue: String(allRdms.length),
    status: "excellent" as const,
    rdmStats: {
      concluidas: allRdms.filter((r) => r.category === "concluidas").length,
      emAndamento: allRdms.filter((r) => r.category === "em_andamento").length,
      abertas: allRdms.filter((r) => r.category === "aberta").length,
      rollback: allRdms.filter((r) => r.category === "rollback").length,
      emAprovacao: allRdms.filter((r) => r.category === "em_aprovacao").length,
      cancelada: allRdms.filter((r) => r.category === "cancelada").length,
    },
  };

  // Load data from API once
  useEffect(() => {
    const ctrl = new AbortController();
    (async () => {
      try {
        setLoading(true);
        setError(null);
  const items = await fetchRdms(ctrl.signal);
  setAllRdms(items.map((it, idx) => mapApiItemToRdm(it, idx)));
      } catch (e: any) {
        setError(e?.message ?? "Erro ao carregar dados");
      } finally {
        setLoading(false);
      }
    })();
    return () => ctrl.abort();
  }, []);

  // Handle search submit: find RDM by number (ignoring leading zeros)
  const onSearch = (e: React.FormEvent) => {
    e.preventDefault();
    const q = search.trim();
    if (!q) {
      setSearchResultRdmId(null);
      return;
    }
    // Normalize number without leading zeros for comparison
    const norm = q.replace(/^0+/, "");
    // Search only in the Visão Geral timeline (all RDMs)
    const rAll = allRdms.find((r) => r.number.replace(/^0+/, "") === norm);
    if (rAll) {
      setTimeout(() => setSearchResultRdmId(rAll.id), 0);
    } else {
      setSearchResultRdmId(null);
    }
  };

  return (
    <div className="min-h-screen bg-gradient-to-br from-[hsl(var(--background))] via-[hsl(var(--neutral-50))] to-[hsl(var(--blue-soft))]">
      {/* Header */}
      <header className="bg-white/80 backdrop-blur-sm py-2 px-6 shadow-sm sticky top-0 z-20 border-b border-[hsl(var(--border))]">
        <div className="max-w-7xl mx-auto">
          <div className="flex justify-center">
            <img src="/logo.png" alt="Logo" className="h-12 md:h-16 w-auto" />
          </div>
        </div>
      </header>

      <main className="max-w-7xl mx-auto px-6 py-8">
          {/* Título e busca */}
          <section className="mb-10">
            <div className="mb-6 text-center">
              <h2 className="text-2xl md:text-3xl font-bold text-foreground tracking-tight">
                Acompanhamento da Janela de RDMs
              </h2>
              <p className="text-sm md:text-base text-muted-foreground mt-1">
                Visão Geral executiva — status consolidado e linha do tempo
              </p>
            </div>

            <form onSubmit={onSearch} className="max-w-md mx-auto mb-6 flex gap-2">
              <input
                className="flex-1 px-3 py-2 rounded border border-[hsl(var(--border))] bg-white shadow-sm"
                placeholder="Pesquisar RDM (ex.: 123)"
                value={search}
                onChange={(e) => setSearch(e.target.value)}
              />
              <button
                type="submit"
                className="px-4 py-2 rounded bg-[hsl(var(--blue-medium))] text-white hover:opacity-90"
              >
                Buscar
              </button>
            </form>

            <div className="max-w-md mx-auto animate-fade-in">
              <AreaReport {...totalReport} />
            </div>
          </section>

          {/* Timeline da Visão Geral */}
          <section>
            {loading && (
              <div className="text-center text-sm text-muted-foreground py-8">Carregando dados…</div>
            )}
            {error && (
              <div className="text-center text-sm text-red-600 py-8">{error}</div>
            )}
            {!loading && !error && (
              <div className="rounded-lg border border-[hsl(var(--border))] bg-card p-6 shadow-lg font-sans antialiased">
                <RDMTimeline
                  productLine={{ id: "produto-overview", name: totalReport.area, color: "#0046c0", rdms: allRdms }}
                  autoOpenRdmId={searchResultRdmId ?? undefined}
                />
              </div>
            )}
          </section>
      </main>
    </div>
  );
};

export default Index;


TIMELINE:
interface TimelineItem {
  year: number;
  title: string;
}

interface TimelineProps {
  items: TimelineItem[];
}

const Timeline = ({ items }: TimelineProps) => {
  return (
    <div className="relative py-12">
      {/* Dual rails to echo a train track motif */}
      <div className="pointer-events-none absolute left-0 right-0 top-12 h-16">
        <div className="absolute inset-x-0 top-2 h-0.5 bg-gradient-to-r from-border via-border/40 to-border" />
        <div className="absolute inset-x-0 top-5 h-0.5 bg-gradient-to-r from-border via-border/40 to-border" />
        <div className="absolute inset-x-0 top-[26px] h-0.5 bg-[repeating-linear-gradient(90deg,theme(colors.border/60)_0px,theme(colors.border/60)_12px,transparent_12px,transparent_22px)]" />
      </div>

      {/* Grid that fits all items within the available width (no horizontal scroll) */}
      <div
        className="grid items-start gap-8 pb-6"
        style={{ gridTemplateColumns: `repeat(auto-fit, minmax(180px, 1fr))` }}
      >
        {items.map((item, index) => (
          <div key={index} className="group relative pt-14">
            {/* Connector from track to card */}
            <div className="absolute left-1/2 top-6 h-[calc(100%-3rem)] w-px -translate-x-1/2 bg-border/70" aria-hidden />

            {/* Dot */}
            <div className="absolute left-1/2 top-0 flex h-10 w-10 -translate-x-1/2 items-center justify-center rounded-full bg-background shadow-[0_8px_20px_-12px_rgba(15,23,42,0.45)] transition-transform group-hover:-translate-y-0.5">
              <div className="flex h-8 w-8 items-center justify-center rounded-full bg-primary text-xs uppercase tracking-wide text-primary-foreground">
                {index + 1}
              </div>
            </div>

            {/* Card */}
            <div className="relative rounded-2xl border border-border/60 bg-card/90 p-5 backdrop-blur-sm transition-all duration-200 group-hover:-translate-y-1 group-hover:border-primary/50 group-hover:shadow-lg">
              <div className="flex flex-col items-center gap-3 text-center">
                <span className="rounded-full bg-primary/10 px-3 py-1 text-sm font-semibold text-primary">{item.year}</span>
                <span className="text-sm md:text-base leading-relaxed text-muted-foreground">{item.title}</span>
              </div>
            </div>
          </div>
        ))}
      </div>
    </div>
  );
};

export default Timeline;


import React, { useEffect, useState } from "react";
import { ApolloClient, InMemoryCache, ApolloProvider, useMutation, useQuery, useSubscription, gql } from "@apollo/client";
import awsmobile from "./aws-exports";

// ------------------
// Apollo Client
// ------------------
const client = new ApolloClient({
  uri: awsmobile.aws_appsync_graphqlEndpoint,
  cache: new InMemoryCache(),
  headers: {
    "x-api-key": awsmobile.aws_appsync_apiKey
  }
});

// ------------------
// GraphQL Ops
// ------------------
const GET_CHAMADOS = gql`
  query GetChamados {
    getChamados {
      chamado
      status
      timerStart
    }
  }
`;

const START_TIMER = gql`
  mutation StartTimer($chamado: Int!) {
    startTimer(chamado: $chamado) {
      chamado
      status
      timerStart
    }
  }
`;

const UPDATE_STATUS = gql`
  mutation UpdateStatus($chamado: Int!, $status: String!) {
    updateStatus(chamado: $chamado, status: $status) {
      chamado
      status
      timerStart
    }
  }
`;

const ON_CHAMADO_UPDATED = gql`
  subscription OnChamadoUpdated {
    onChamadoUpdated {
      chamado
      status
      timerStart
    }
  }
`;

// ------------------
// Timer Component
// ------------------
const Timer: React.FC = () => {
  const { data: queryData } = useQuery(GET_CHAMADOS);
  const { data: subData } = useSubscription(ON_CHAMADO_UPDATED);
  const [startTimer] = useMutation(START_TIMER);
  const [updateStatus] = useMutation(UPDATE_STATUS);

  const [chamados, setChamados] = useState<any[]>([]);

  // Inicial
  useEffect(() => {
    if (queryData?.getChamados) {
      setChamados(queryData.getChamados);
    }
  }, [queryData]);

  // Atualizações em tempo real
  useEffect(() => {
    if (subData?.onChamadoUpdated) {
      setChamados((prev) => {
        const exists = prev.find((c) => c.chamado === subData.onChamadoUpdated.chamado);
        if (exists) {
          return prev.map((c) =>
            c.chamado === subData.onChamadoUpdated.chamado ? subData.onChamadoUpdated : c
          );
        } else {
          return [...prev, subData.onChamadoUpdated];
        }
      });
    }
  }, [subData]);

  return (
    <div className="p-4">
      <h2 className="text-xl font-bold mb-4">Chamados</h2>
      <ul>
        {chamados.map((c) => (
          <li key={c.chamado} className="mb-2 border-b pb-2">
            <strong>#{c.chamado}</strong> - {c.status}{" "}
            {c.timerStart && (
              <span className="text-sm text-gray-500">
                (desde {new Date(c.timerStart * 1000).toLocaleTimeString()})
              </span>
            )}
            <div className="mt-2">
              <button
                className="bg-green-500 text-white px-2 py-1 rounded mr-2"
                onClick={() => startTimer({ variables: { chamado: c.chamado } })}
              >
                Start Timer
              </button>
              <button
                className="bg-blue-500 text-white px-2 py-1 rounded"
                onClick={() => updateStatus({ variables: { chamado: c.chamado, status: "finalizado" } })}
              >
                Finalizar
              </button>
            </div>
          </li>
        ))}
      </ul>
    </div>
  );
};

// ------------------
// App Wrapper
// ------------------
const App: React.FC = () => (
  <ApolloProvider client={client}>
    <Timer />
  </ApolloProvider>
);

export default App;

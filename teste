import React, { forwardRef } from "react";
import { RDM } from "@/types/rdm";
import { CheckCircle2, XCircle, Clock } from "lucide-react";
import { cn } from "@/lib/utils";

interface RDMNodeProps {
  rdm: RDM;
  color: string;
  isFirst?: boolean;
  isLast?: boolean;
}

export const RDMNode = forwardRef<HTMLDivElement, RDMNodeProps>(
  ({ rdm, color, isFirst, isLast }: RDMNodeProps, ref) => {
  const getStatusIcon = () => {
    switch (rdm.status) {
      case 'executed':
        return <CheckCircle2 className="w-4 h-4" />;
      case 'failed':
        return <XCircle className="w-4 h-4" />;
      case 'pending':
        return <Clock className="w-4 h-4" />;
    }
  };

  const getStatusColor = () => {
    switch (rdm.status) {
      case 'executed':
        return 'bg-green-100 border-green-300 text-green-600';
      case 'failed':
        return 'bg-red-100 border-red-300 text-red-600';
      case 'pending':
        return 'bg-background border-muted-foreground text-muted-foreground';
    }
  };

  return (
    <div className="relative flex flex-col items-center gap-2 group">
      {/* First/Last indicators - acima do círculo */}
      {isFirst && (
        <div className="absolute -top-8 text-xs font-semibold px-2 py-1 rounded bg-card border border-border" style={{ color: color }}>
          Início
        </div>
      )}
      {isLast && (
        <div className="absolute -top-8 text-xs font-semibold px-2 py-1 rounded bg-card border border-border" style={{ color: color }}>
          Fim
        </div>
      )}

      {/* Node Circle - linha passa por dentro */}
      <div className="relative z-10" ref={ref}>
        <div 
          className={cn(
            "w-14 h-14 rounded-full border-4 flex items-center justify-center",
            "transition-all duration-300 cursor-pointer",
            "hover:scale-110 hover:shadow-lg",
            getStatusColor()
          )}
          style={{ 
            borderColor: rdm.status === 'pending' ? color : undefined,
            boxShadow: rdm.status === 'executed' ? `0 4px 12px rgba(34, 197, 94, 0.2)` : 
                       rdm.status === 'failed' ? `0 4px 12px rgba(239, 68, 68, 0.2)` : undefined
          }}
        >
          {getStatusIcon()}
        </div>
        
        {/* Pulse animation for pending */}
        {rdm.status === 'pending' && (
          <div 
            className="absolute inset-0 rounded-full animate-ping opacity-20"
            style={{ backgroundColor: color }}
          />
        )}
      </div>

      {/* Info Box - abaixo do círculo para não sobrepor linha */}
      <div className="flex flex-col items-center gap-1 mt-2">
        <div 
          className="font-bold text-xs px-2 py-1 rounded-full whitespace-nowrap shadow-sm"
          style={{ 
            backgroundColor: `${color}25`,
            color: color
          }}
        >
          {rdm.number}
        </div>
        <div className="text-xs font-medium text-muted-foreground bg-card px-2 py-0.5 rounded border border-border shadow-sm">
          {rdm.time}
        </div>
      </div>

      {/* Hover tooltip */}
      {rdm.description && (
        <div className="absolute top-full mt-20 opacity-0 group-hover:opacity-100 transition-opacity duration-200 z-20 pointer-events-none group-hover:pointer-events-auto">
          <div className="bg-card border border-border rounded-lg p-3 shadow-lg min-w-[180px] max-w-[250px]">
            <p className="text-xs text-foreground">{rdm.description}</p>
          </div>
        </div>
      )}
    </div>
  );
});

RDMNode.displayName = "RDMNode";

import React, { useMemo, useState } from 'react';
import { Input } from '@/components/ui/input';
import { Button } from '@/components/ui/button';
import { Badge } from '@/components/ui/badge';
import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';
import { Separator } from '@/components/ui/separator';
import { Trash2, Shield, Clock, AlertTriangle, CheckCircle2, Activity, Calendar, Plus } from 'lucide-react';

export type Outage = {
  // Formato antigo (UI local)
  id?: string;
  startAt?: number;
  endAt?: number;
  createdAt?: number;
  // Formato Lambda
  outage_id?: string;
  data_inicio?: number; // ms
  data_fim?: number;    // ms
  timestamp?: number;
  status?: string;
  // Comum
  title: string;
  numeroChamado?: string;
};

type SuppressedAlert = {
  id: string;
  resumo: string;
  chamado?: string;
  abertura?: string;
  link_chamado?: string;
};

interface OutageManagerProps {
  outages: Outage[];
  onAdd: (title: string, startAt: number, endAt: number, numeroChamado: string) => void;
  onRemove: (id: string) => void;
  suppressedAlerts?: SuppressedAlert[];
}

export const OutageManager: React.FC<OutageManagerProps> = ({ outages, onAdd, onRemove, suppressedAlerts = [] }) => {
  const [title, setTitle] = useState('');
  // Helpers para valores default de datetime-local
  const now = new Date();
  const pad = (n: number) => String(n).padStart(2, '0');
  const toLocalInputValue = (d: Date) => `${d.getFullYear()}-${pad(d.getMonth() + 1)}-${pad(d.getDate())}T${pad(d.getHours())}:${pad(d.getMinutes())}`;
  const defaultStart = toLocalInputValue(now);
  const defaultEnd = toLocalInputValue(new Date(now.getTime() + 60 * 60000));
  const [startLocal, setStartLocal] = useState<string>(defaultStart);
  const [endLocal, setEndLocal] = useState<string>(defaultEnd);

  const activeOutages = useMemo(() => {
    const now = Date.now();
    return outages.filter(o => {
      const start = (o.data_inicio ?? o.startAt) ?? 0;
      const end = (o.data_fim ?? o.endAt) ?? 0;
      return now >= start && now <= end;
    });
  }, [outages]);

  return (
    <Card className="border-panel-border shadow-card hover:shadow-hover transition-smooth overflow-hidden bg-gradient-to-br from-card via-card to-background">
      <CardHeader className="relative overflow-hidden border-b border-panel-border bg-gradient-to-r from-primary/5 via-accent/5 to-primary/5 backdrop-blur-sm">
        <div className="absolute inset-0 bg-gradient-to-r from-primary/10 via-transparent to-accent/10 opacity-50" />
        <CardTitle className="relative flex items-center justify-between gap-4">
          <div className="flex items-center gap-3">
            <div className="relative flex items-center justify-center w-10 h-10 rounded-xl bg-gradient-to-br from-alert-warning to-alert-warning/80 shadow-glow">
              <Shield className="h-5 w-5 text-white" />
              <div className="absolute inset-0 rounded-xl bg-alert-warning/30 animate-pulse-glow" />
            </div>
            <div>
              <h2 className="text-2xl font-bold bg-gradient-to-r from-primary to-accent bg-clip-text text-transparent">
                Outage de Alertas
              </h2>
              <p className="text-sm text-muted-foreground font-normal mt-0.5">
                Gerenciamento de alertas suprimidos
              </p>
            </div>
          </div>
          <Badge 
            variant="secondary" 
            className="text-sm px-4 py-2 bg-alert-warning-bg border border-alert-warning-border text-alert-warning font-semibold shadow-sm"
          >
            <Activity className="h-3.5 w-3.5 mr-1.5" />
            {activeOutages.length} ativo{activeOutages.length !== 1 ? 's' : ''}
          </Badge>
        </CardTitle>
      </CardHeader>

      <CardContent className="p-6 space-y-8">
        {/* Formulário */}
        <div className="relative border-2 border-panel-border rounded-2xl p-6 bg-gradient-to-br from-panel-bg to-background shadow-card hover:shadow-hover transition-smooth">
          <div className="absolute top-0 left-0 right-0 h-1 bg-gradient-to-r from-primary via-accent to-primary rounded-t-2xl" />
          <form
            className="space-y-5"
            onSubmit={(e) => {
              e.preventDefault();
              const t = title.trim();
              if (!t) return;
              const s = new Date(startLocal).getTime();
              const f = new Date(endLocal).getTime();
              if (!isFinite(s) || !isFinite(f)) return;
              if (f <= s) return;
              onAdd(t, s, f, '');
              setTitle('');
              setStartLocal(defaultStart);
              setEndLocal(defaultEnd);
            }}
          >
            <div className="space-y-2">
              <label className="flex items-center gap-2 text-sm font-medium text-foreground">
                <AlertTriangle className="h-4 w-4 text-alert-warning" />
                Título do Alerta
              </label>
              <Input
                placeholder="Cole aqui o título exato do alerta que deseja suprimir"
                value={title}
                onChange={(e) => setTitle(e.target.value)}
                className="h-11 bg-background border-2 focus:border-primary transition-smooth"
                required
              />
              <p className="text-xs text-muted-foreground flex items-center gap-1.5">
                <span className="w-1 h-1 rounded-full bg-muted-foreground" />
                Alertas com título idêntico serão suprimidos automaticamente
              </p>
            </div>

            <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
              <div className="space-y-2">
                <label className="flex items-center gap-2 text-sm font-medium text-foreground">
                  <Calendar className="h-4 w-4 text-primary" />
                  Início do Outage
                </label>
                <Input
                  type="datetime-local"
                  value={startLocal}
                  onChange={(e) => setStartLocal(e.target.value)}
                  className="h-11 bg-background border-2 focus:border-primary transition-smooth"
                />
              </div>
              <div className="space-y-2">
                <label className="flex items-center gap-2 text-sm font-medium text-foreground">
                  <Clock className="h-4 w-4 text-accent" />
                  Fim do Outage
                </label>
                <Input
                  type="datetime-local"
                  value={endLocal}
                  onChange={(e) => setEndLocal(e.target.value)}
                  className="h-11 bg-background border-2 focus:border-accent transition-smooth"
                />
              </div>
            </div>

            <Button 
              type="submit" 
              className="w-full h-11 bg-gradient-to-r from-primary to-accent hover:shadow-glow transition-smooth font-semibold"
            >
              <Plus className="h-4 w-4 mr-2" />
              Adicionar Outage
            </Button>
          </form>
        </div>

        <Separator className="my-8" />

        {/* Outages ativos */}
        <div className="space-y-4">
          <div className="flex items-center justify-between">
            <h3 className="text-lg font-bold flex items-center gap-2 text-foreground">
              <div className="w-1.5 h-6 bg-gradient-to-b from-alert-warning to-alert-warning/50 rounded-full" />
              Outages Ativos
            </h3>
            <Badge variant="outline" className="text-xs">
              {activeOutages.length} item{activeOutages.length !== 1 ? 's' : ''}
            </Badge>
          </div>
          
          {activeOutages.length === 0 ? (
            <div className="flex flex-col items-center justify-center py-12 px-4 border-2 border-dashed border-panel-border rounded-2xl bg-background/50">
              <div className="w-16 h-16 rounded-full bg-alert-success-bg flex items-center justify-center mb-4">
                <CheckCircle2 className="h-8 w-8 text-alert-success" />
              </div>
              <p className="text-sm font-medium text-foreground">Nenhum outage ativo</p>
              <p className="text-xs text-muted-foreground mt-1">Todos os alertas estão sendo processados normalmente</p>
            </div>
          ) : (
            <div className="space-y-3">
              {activeOutages.map((o, index) => {
                const start = (o.data_inicio ?? o.startAt) ?? Date.now();
                const end = (o.data_fim ?? o.endAt) ?? start;
                const remaining = Math.max(0, end - Date.now());
                const mins = Math.ceil(remaining / 60000);
                return (
                  <div
                    key={String(o.outage_id ?? o.id ?? `${o.title}-${index}`)}
                    className="group relative border-2 border-panel-border rounded-xl p-5 bg-gradient-to-br from-alert-warning-bg to-background hover:border-alert-warning-border hover:shadow-hover transition-smooth animate-fade-in"
                    style={{ animationDelay: `${index * 60}ms` }}
                  >
                    <div className="absolute top-0 left-0 right-0 h-1 bg-gradient-to-r from-alert-warning via-alert-warning/50 to-transparent rounded-t-xl" />
                    
                    <div className="flex items-start justify-between gap-4">
                      <div className="flex-1 space-y-3">
                        <div className="flex items-start gap-3">
                          <div className="mt-1 flex-shrink-0">
                            <div className="w-2 h-2 bg-alert-warning rounded-full animate-pulse-glow" />
                          </div>
                          <div className="flex-1 min-w-0">
                            <p className="text-sm font-semibold text-foreground mb-1 break-words">
                              {o.title}
                            </p>
                            {o.numeroChamado && (
                              <Badge variant="outline" className="text-xs">
                                Chamado: {o.numeroChamado}
                              </Badge>
                            )}
                          </div>
                        </div>
                        
                        <div className="flex flex-wrap items-center gap-x-4 gap-y-2 text-xs text-muted-foreground">
                          <span className="flex items-center gap-1.5">
                            <Calendar className="h-3 w-3" />
                            {new Date(start).toLocaleString('pt-BR', { 
                              day: '2-digit', 
                              month: '2-digit', 
                              hour: '2-digit', 
                              minute: '2-digit' 
                            })}
                          </span>
                          <span className="flex items-center gap-1.5">
                            <Clock className="h-3 w-3" />
                            {new Date(end).toLocaleString('pt-BR', { 
                              day: '2-digit', 
                              month: '2-digit', 
                              hour: '2-digit', 
                              minute: '2-digit' 
                            })}
                          </span>
                          <Badge className="bg-alert-warning/10 text-alert-warning border-alert-warning/20 text-xs">
                            Termina em ~{mins} min
                          </Badge>
                        </div>
                      </div>
                      
                      <Button 
                        variant="ghost" 
                        size="sm" 
                        onClick={() => onRemove(String(o.outage_id ?? o.id ?? ''))} 
                        className="hover:bg-destructive/10 hover:text-destructive transition-smooth flex-shrink-0"
                        title="Remover outage"
                      >
                        <Trash2 className="h-4 w-4" />
                      </Button>
                    </div>
                  </div>
                );
              })}
            </div>
          )}
        </div>

        {/* Chamados atualmente impactados pelo Outage */}
        <div className="space-y-4">
          <div className="flex items-center justify-between">
            <h3 className="text-lg font-bold flex items-center gap-2 text-foreground">
              <div className="w-1.5 h-6 bg-gradient-to-b from-accent to-accent/50 rounded-full" />
              Chamados em Outage
            </h3>
            <Badge variant="outline" className="text-xs">
              {suppressedAlerts.length} suprimido{suppressedAlerts.length !== 1 ? 's' : ''}
            </Badge>
          </div>
          
          {suppressedAlerts.length === 0 ? (
            <div className="flex flex-col items-center justify-center py-8 px-4 border-2 border-dashed border-panel-border rounded-2xl bg-background/50">
              <p className="text-sm text-muted-foreground">Nenhum chamado impactado neste momento</p>
            </div>
          ) : (
            <div className="space-y-3">
              {suppressedAlerts.map((a, index) => (
                <div 
                  key={a.id} 
                  className="group flex items-center justify-between gap-4 border border-panel-border rounded-xl p-4 bg-gradient-to-br from-card to-background hover:border-accent/50 hover:shadow-hover transition-smooth animate-fade-in"
                  style={{ animationDelay: `${index * 40}ms` }}
                >
                  <div className="flex-1 min-w-0 space-y-2">
                    <p className="text-sm font-medium text-foreground truncate">{a.resumo}</p>
                    <div className="flex flex-wrap items-center gap-x-3 gap-y-1 text-xs text-muted-foreground">
                      {a.chamado && (
                        <span className="flex items-center gap-1.5">
                          <span className="w-1 h-1 rounded-full bg-muted-foreground" />
                          Chamado: <span className="font-medium">{a.chamado}</span>
                        </span>
                      )}
                      {a.abertura && (
                        <span className="flex items-center gap-1.5">
                          <Calendar className="h-3 w-3" />
                          {new Date(a.abertura).toLocaleString('pt-BR')}
                        </span>
                      )}
                    </div>
                  </div>
                  {a.link_chamado && (
                    <Button 
                      asChild 
                      size="sm" 
                      variant="outline"
                      className="hover:bg-primary hover:text-primary-foreground transition-smooth flex-shrink-0"
                    >
                      <a href={a.link_chamado} target="_blank" rel="noreferrer">
                        Ver Chamado
                      </a>
                    </Button>
                  )}
                </div>
              ))}
            </div>
          )}
        </div>

        {/* Histórico */}
        <div className="space-y-4">
          <div className="flex items-center justify-between">
            <h3 className="text-lg font-bold flex items-center gap-2 text-foreground">
              <div className="w-1.5 h-6 bg-gradient-to-b from-primary to-primary/50 rounded-full" />
              Histórico Recente
            </h3>
            <Badge variant="outline" className="text-xs">
              Últimos {Math.min(outages.length, 10)}
            </Badge>
          </div>
          
          {outages.length === 0 ? (
            <div className="flex flex-col items-center justify-center py-8 px-4 border-2 border-dashed border-panel-border rounded-2xl bg-background/50">
              <p className="text-sm text-muted-foreground">Sem histórico de outages</p>
            </div>
          ) : (
            <div className="flex flex-wrap gap-2">
              {outages.slice(-10).reverse().map((o, idx) => {
                const key = String(o.outage_id ?? o.id ?? `${o.title}-${idx}`);
                return (
                  <Badge 
                    key={key} 
                    variant="secondary"
                    className="px-3 py-1.5 bg-gradient-to-r from-secondary to-secondary/80 hover:shadow-card transition-smooth text-xs"
                  >
                    {o.title}
                    {o.numeroChamado && (
                      <span className="ml-1.5 opacity-70">
                        • {o.numeroChamado}
                      </span>
                    )}
                  </Badge>
                );
              })}
            </div>
          )}
        </div>
      </CardContent>
    </Card>
  );
};

export default OutageManager;

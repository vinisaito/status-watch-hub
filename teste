import json
import boto3
import os
from botocore.exceptions import ClientError
from datetime import datetime

dynamodb = boto3.client("dynamodb")
TABLE_NAME = os.environ.get("TABLE_NAME", "painelmonitoracao_acompanhamento")

dynamodb_resource = boto3.resource("dynamodb")
conn_table = dynamodb_resource.Table(os.environ["CONNECTIONS_TABLE"])
WEBSOCKET_ENDPOINT = os.environ["WEBSOCKET_ENDPOINT"]


def lambda_handler(event, context):
    print("==== EVENTO RECEBIDO ====")
    print(json.dumps(event))

    route_key = event.get("requestContext", {}).get("routeKey")
    connection_id = event.get("requestContext", {}).get("connectionId")
    print(f"Rota recebida: {route_key} | ConnectionId: {connection_id}")

    if route_key == "$connect":
        conn_table.put_item(Item={"connectionId": connection_id})
        return {"statusCode": 200}

    if route_key == "$disconnect":
        conn_table.delete_item(Key={"connectionId": connection_id})
        return {"statusCode": 200}

    if route_key == "updateChat":
        return marcar_acionado(event)

    return {
        "statusCode": 400,
        "body": json.dumps({"message": f"Rota não suportada: {route_key}"})
    }


def marcar_acionado(event):
    try:
        body_raw = event.get("body", "{}")
        print(f"Body recebido: {body_raw}")
        body = json.loads(body_raw)

        numero_chamado = body.get("chamado")
        if numero_chamado is None:
            return {"statusCode": 400, "body": json.dumps({"message": "chamado é obrigatório"})}

        timestamp_chat = datetime.utcnow().isoformat()

        dynamodb.put_item(
            TableName=TABLE_NAME,
            Item={
                "chamado": {"N": str(numero_chamado)},
                "timestamp_chat": {"S": timestamp_chat}
            },
            ConditionExpression="attribute_not_exists(chamado)"
        )

        payload = {
            "action": "updateChat",
            "chamado": numero_chamado,
            "timestamp_chat": timestamp_chat
        }
        enviar_para_websocket(payload)

        return {"statusCode": 200, "body": json.dumps(payload)}

    except ClientError as e:
        if e.response["Error"]["Code"] == "ConditionalCheckFailedException":
            return {"statusCode": 409, "body": json.dumps({"message": "Incidente já foi acionado"})}
        return {"statusCode": 500, "body": json.dumps({"error": str(e)})}


def enviar_para_websocket(payload):
    client = boto3.client("apigatewaymanagementapi", endpoint_url=WEBSOCKET_ENDPOINT)
    connections = conn_table.scan().get("Items", [])

    for conn in connections:
        connection_id = conn["connectionId"]
        try:
            client.post_to_connection(
                Data=json.dumps(payload).encode("utf-8"),
                ConnectionId=connection_id
            )
        except ClientError as e:
            if e.response["Error"]["Code"] == "GoneException":
                conn_table.delete_item(Key={"connectionId": connection_id})

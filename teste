import { useState, useEffect, useMemo, useCallback } from 'react';
import { Check, AlertTriangle, ExternalLink, Zap, Group, Calendar, Info, XCircle, Flame, ChevronLeft, ChevronRight, ArrowUpDown, ArrowUp, ArrowDown, Clock, Play, CheckCircle, X, RotateCcw, FastForward, User } from 'lucide-react';
import { Card, CardContent, CardHeader } from '@/components/ui/card';
import { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from '@/components/ui/table';
import { Badge } from '@/components/ui/badge';
import { Button } from '@/components/ui/button';
import { toast } from '@/hooks/use-toast';
import { Tooltip, TooltipContent, TooltipProvider, TooltipTrigger } from '@/components/ui/tooltip';
import {
  Dialog,
  DialogContent,
  DialogHeader,
  DialogTitle,
} from '@/components/ui/dialog';
import {
  Select,
  SelectContent,
  SelectItem,
  SelectTrigger,
  SelectValue,
} from '@/components/ui/select';
import { Textarea } from '@/components/ui/textarea';
import { Label } from '@/components/ui/label';
import { Input } from '@/components/ui/input';

interface AlertData {
  id: string;
  chamado: string;
  tipo_chamado: string;
  grupo_chamado: string;
  status_chamado: string;
  abertura_chamado: string;
  resumo_chamado: string;
  severidade_chamado: string;
  acionado: string;
  chat: boolean;
}

interface EscalationState {
  status: 'pending' | 'confirmed' | 'escalating' | 'completed';
  currentLevel: 0 | 1 | 2 | 3 | 4; // 0 = confirmação, 1-4 = escalações
  timeRemaining: number;
  timerActive: boolean;
  isAttended: boolean;
  observations: string;
  pendingStatus?: string; // Status pendente de confirmação
  pendingObservations?: string; // Observações pendentes
  operator?: string; // Operador responsável
  startTimestamp?: string; // Timestamp de início do timer
  lastSyncTimestamp?: string; // Último timestamp de sincronização
}

interface ActionTableProps {
  alertData: AlertData[];
  onUpdateAcknowledgment: (alertId: string, acknowledged: boolean) => void;
  loading: boolean;
}

type SortField = 'chamado' | 'tipo_chamado' | 'grupo_chamado' | 'status_chamado' | 'abertura_chamado' | 'resumo_chamado' | 'severidade_chamado' | 'acionado';
type SortDirection = 'asc' | 'desc' | null;

// Lista de operadores disponíveis
const OPERATORS = [
  'João Silva',
  'Maria Santos',
  'Carlos Oliveira', 
  'Ana Costa',
  'Pedro Souza',
  'Lúcia Fernandes',
  'Roberto Lima',
  'Fernanda Alves'
];

export const ActionTable = ({ alertData, onUpdateAcknowledgment, loading }: ActionTableProps) => {
  const [selectedIncident, setSelectedIncident] = useState<AlertData | null>(null);
  const [crisisDialogOpen, setCrisisDialogOpen] = useState(false);
  const [expandedRows, setExpandedRows] = useState<Set<string>>(new Set());
  const [currentPage, setCurrentPage] = useState(1);
  const itemsPerPage = 5;

  // Estados para ordenação
  const [sortField, setSortField] = useState<SortField>('chamado');
  const [sortDirection, setSortDirection] = useState<SortDirection>('desc');

  // Estado que guarda os numeros chamados já acionados (string)
  const [acionadosSet, setAcionadosSet] = useState<Set<string>>(new Set());

  // Estado para controlar o status de escalação de cada chamado
  const [escalationStatus, setEscalationStatus] = useState<Record<string, string>>({});

  // Estados para escalação
  const [escalationStates, setEscalationStates] = useState<Record<string, EscalationState>>({});
  
  // Estado para armazenar observações de confirmação por chamado
  const [confirmationObservations, setConfirmationObservations] = useState<Record<string, string>>({});

  // Estados para controle de confirmação de mudança de status
  const [showStatusConfirmation, setShowStatusConfirmation] = useState<Record<string, boolean>>({});
  const [pendingStatusChange, setPendingStatusChange] = useState<Record<string, { status: string; observations: string }>>({});

  // Estados para seleção de operador
  const [selectedOperators, setSelectedOperators] = useState<Record<string, string>>({});
  const [showOperatorSelect, setShowOperatorSelect] = useState<Record<string, boolean>>({});

  // Função para calcular tempo restante baseado no timestamp
  const calculateTimeRemaining = useCallback((startTimestamp: string, durationMinutes: number) => {
    if (!startTimestamp) return 0;
    
    const startTime = new Date(startTimestamp).getTime();
    const currentTime = new Date().getTime();
    const elapsedSeconds = Math.floor((currentTime - startTime) / 1000);
    const totalSeconds = durationMinutes * 60;
    
    return Math.max(0, totalSeconds - elapsedSeconds);
  }, []);

  // Função para salvar dados na API Gateway com timestamps
  const saveToAPI = useCallback(async (alertId: string, data: any) => {
    try {
      const response = await fetch('https://f6ffk8e9fe.execute-api.us-east-1.amazonaws.com/prod/acompanhamento', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          chamado: parseInt(alertId),
          ...data,
          ttl: Math.floor(Date.now() / 1000) + (7 * 24 * 60 * 60), // 7 dias TTL
          alertOpenTime: new Date().toISOString(),
          lastUpdate: new Date().toISOString(),
        }),
      });

      if (!response.ok) {
        throw new Error(`Erro na API: ${response.status}`);
      }

      return await response.json();
    } catch (error) {
      console.error('Erro ao salvar na API:', error);
      toast({
        title: "Erro ao salvar dados",
        description: "Não foi possível salvar na API. Tente novamente.",
        variant: "destructive",
      });
      throw error;
    }
  }, []);

  // Função para carregar dados de confirmação salvos na API com sincronização melhorada
  const loadConfirmationData = useCallback(async () => {
    try {
      // Busca dados de acompanhamento para todos os chamados visíveis
      const chamadosVisveis = alertData.map(alert => alert.chamado);
      console.log('Carregando dados para chamados:', chamadosVisveis);
      
      const confirmationPromises = chamadosVisveis.map(async (chamado) => {
        try {
          const response = await fetch(
            `https://f6ffk8e9fe.execute-api.us-east-1.amazonaws.com/prod/acompanhamento?chamado=${chamado}`,
            { method: 'GET' }
          );
          
          if (response.ok) {
            const allData = await response.json();
            console.log(`Dados recebidos para chamado ${chamado}:`, allData);
            
            // Filtra pelo chamado específico, convertendo números para string para comparação
            const chamadoData = Array.isArray(allData) 
              ? allData.find(item => item.chamado?.toString() === chamado.toString())
              : (allData.chamado?.toString() === chamado.toString() ? allData : null);
            
            console.log(`Dados filtrados para chamado ${chamado}:`, chamadoData);
            return { chamado, data: chamadoData };
          }
          return { chamado, data: null };
        } catch (error) {
          console.error(`Erro ao buscar dados do chamado ${chamado}:`, error);
          return { chamado, data: null };
        }
      });

      const results = await Promise.all(confirmationPromises);
      console.log('Resultados processados:', results);
      
      // Processa os resultados e atualiza os estados
      const newEscalationStates: Record<string, EscalationState> = {};
      const newConfirmationObservations: Record<string, string> = {};
      const newSelectedOperators: Record<string, string> = {};
      
      results.forEach(({ chamado, data }) => {
        if (data) {
          console.log(`Processando chamado ${chamado}:`, data);
          
          // Determina o status baseado nos dados salvos
          let status: EscalationState['status'] = 'pending';
          let currentLevel: EscalationState['currentLevel'] = 0;
          let isAttended = false;
          let lastObservation = '';
          let operator = data.operator || '';
          let startTimestamp = data.startTimestamp || '';
          let timeRemaining = 0;
          let timerActive = false;
          
          // Verifica se foi confirmado
          if (data.confirmChat && data.confirmChat !== '') {
            status = 'confirmed';
            lastObservation = data.confirmChat;
            console.log(`Chamado ${chamado} tem confirmação:`, data.confirmChat);
          }
          
          // Verifica escalações e calcula timer baseado no timestamp
          if (data.escalations && Array.isArray(data.escalations)) {
            for (let i = 0; i < data.escalations.length; i++) {
              const escalation = data.escalations[i];
              if (escalation.status === 'em_andamento') {
                status = 'escalating';
                currentLevel = (escalation.level) as EscalationState['currentLevel'];
                lastObservation = escalation.observations || '';
                
                // Calcula tempo restante baseado no timestamp salvo
                if (escalation.eventTimestamp) {
                  const durationMinutes = currentLevel === 0 ? 20 : 10; // 20 min para confirmação, 10 min para escalações
                  timeRemaining = calculateTimeRemaining(escalation.eventTimestamp, durationMinutes);
                  timerActive = timeRemaining > 0;
                  startTimestamp = escalation.eventTimestamp;
                }
                
                console.log(`Chamado ${chamado} está em escalação nível ${escalation.level}, tempo restante: ${timeRemaining}`);
                break;
              } else if (escalation.status === 'atendido') {
                status = 'completed';
                currentLevel = (escalation.level) as EscalationState['currentLevel'];
                isAttended = true;
                lastObservation = escalation.observations || '';
                console.log(`Chamado ${chamado} foi atendido no nível ${escalation.level}`);
                break;
              } else if (escalation.status === 'finalizado' && i < 3) {
                // Se finalizou mas não foi o último nível, continua checando
                currentLevel = (escalation.level) as EscalationState['currentLevel'];
                lastObservation = escalation.observations || '';
                console.log(`Chamado ${chamado} finalizou nível ${escalation.level}`);
              }
            }
          }
          
          // Verifica se há timer de confirmação ativo baseado no timestamp
          if (status === 'pending' && data.startTimestamp) {
            timeRemaining = calculateTimeRemaining(data.startTimestamp, 20); // 20 minutos para confirmação
            timerActive = timeRemaining > 0;
            startTimestamp = data.startTimestamp;
          }
          
          // Verifica se há obsChat indicando atendimento
          if (data.obsChat && data.obsChat.includes('atendida com sucesso')) {
            status = 'completed';
            isAttended = true;
            console.log(`Chamado ${chamado} foi marcado como atendido via obsChat`);
          }
          
          newEscalationStates[chamado] = {
            status,
            currentLevel,
            timeRemaining,
            timerActive,
            isAttended,
            observations: lastObservation,
            operator,
            startTimestamp,
            lastSyncTimestamp: new Date().toISOString()
          };
          
          console.log(`Estado final para chamado ${chamado}:`, newEscalationStates[chamado]);
          
          // Salva observações de confirmação
          if (data.confirmChat) {
            newConfirmationObservations[chamado] = data.confirmChat;
          }
          
          // Salva operador selecionado
          if (operator) {
            newSelectedOperators[chamado] = operator;
          }
        }
      });
      
      console.log('Estados de escalação atualizados:', newEscalationStates);
      console.log('Observações de confirmação atualizadas:', newConfirmationObservations);
      
      // Atualiza os estados apenas se houver dados para atualizar
      if (Object.keys(newEscalationStates).length > 0) {
        setEscalationStates(prev => ({ ...prev, ...newEscalationStates }));
      }
      
      if (Object.keys(newConfirmationObservations).length > 0) {
        setConfirmationObservations(prev => ({ ...prev, ...newConfirmationObservations }));
      }
      
      if (Object.keys(newSelectedOperators).length > 0) {
        setSelectedOperators(prev => ({ ...prev, ...newSelectedOperators }));
      }
      
    } catch (error) {
      console.error('Erro ao carregar dados de confirmação:', error);
    }
  }, [alertData, calculateTimeRemaining]);

  // Handlers de observação otimizados para evitar re-renders
  const handleConfirmationObservationChange = useCallback((alertId: string, value: string) => {
    setConfirmationObservations(prev => ({
      ...prev,
      [alertId]: value
    }));
  }, []);

  const handleEscalationObservationChange = useCallback((alertId: string, value: string) => {
    setEscalationStates(prev => ({
      ...prev,
      [alertId]: {
        ...prev[alertId],
        observations: value
      }
    }));
  }, []);

  const handlePendingObservationChange = useCallback((alertId: string, value: string) => {
    setPendingStatusChange(prev => ({
      ...prev,
      [alertId]: {
        ...prev[alertId],
        observations: value
      }
    }));
  }, []);

  // Handler para seleção de operador
  const handleOperatorSelect = useCallback((alertId: string, operator: string) => {
    setSelectedOperators(prev => ({
      ...prev,
      [alertId]: operator
    }));
    setShowOperatorSelect(prev => ({
      ...prev,
      [alertId]: false
    }));
  }, []);

  // Timer para escalações com sincronização automática
  useEffect(() => {
    const interval = setInterval(() => {
      setEscalationStates(prev => {
        const newStates = { ...prev };
        let updated = false;

        Object.keys(newStates).forEach(alertId => {
          const state = newStates[alertId];
          if (state.timerActive && state.timeRemaining > 0) {
            // Recalcula baseado no timestamp para manter sincronização
            if (state.startTimestamp) {
              const durationMinutes = state.currentLevel === 0 ? 20 : 10;
              const recalculatedTime = calculateTimeRemaining(state.startTimestamp, durationMinutes);
              
              newStates[alertId] = {
                ...state,
                timeRemaining: recalculatedTime
              };
              updated = true;

              // Quando o timer zera
              if (recalculatedTime === 0) {
                newStates[alertId].timerActive = false;
                
                if (state.currentLevel === 0) {
                  // Acabou o tempo de confirmação, vai para escalação
                  newStates[alertId].status = 'escalating';
                  toast({
                    title: "Tempo de confirmação esgotado",
                    description: `Chamado ${alertId} pode iniciar escalação`,
                    variant: "destructive",
                  });
                } else if (state.currentLevel < 4) {
                  // Acabou o tempo da escalação atual, mantém no status de escalação para mostrar botão
                  toast({
                    title: "Tempo de escalação esgotado",
                    description: `Escalação ${state.currentLevel} do chamado ${alertId} finalizada`,
                    variant: "destructive",
                  });
                } else {
                  // Todas as escalações foram executadas
                  newStates[alertId].status = 'completed';
                  toast({
                    title: "Processo finalizado",
                    description: `Todas as escalações do chamado ${alertId} foram executadas`,
                  });
                }
              }
            }
          }
        });

        return updated ? newStates : prev;
      });
    }, 1000);

    return () => clearInterval(interval);
  }, [calculateTimeRemaining]);

  // Sincronização automática a cada 30 segundos
  useEffect(() => {
    const syncInterval = setInterval(() => {
      if (alertData.length > 0) {
        loadConfirmationData();
      }
    }, 30000); // Sincroniza a cada 30 segundos

    return () => clearInterval(syncInterval);
  }, [alertData, loadConfirmationData]);

  // Função para iniciar confirmação com operador
  const startConfirmation = useCallback((alertId: string) => {
    const operator = selectedOperators[alertId];
    
    if (!operator) {
      setShowOperatorSelect(prev => ({ ...prev, [alertId]: true }));
      toast({
        title: "Selecione um operador",
        description: "É necessário selecionar um operador antes de iniciar",
        variant: "destructive",
      });
      return;
    }

    const startTimestamp = new Date().toISOString();
    
    setEscalationStates(prev => ({
      ...prev,
      [alertId]: {
        status: 'pending',
        currentLevel: 0,
        timeRemaining: 20 * 60, // 20 minutos
        timerActive: true,
        isAttended: false,
        observations: '',
        operator,
        startTimestamp
      }
    }));
    
    // Inicializa o campo de observações de confirmação
    setConfirmationObservations(prev => ({
      ...prev,
      [alertId]: ''
    }));

    // Salva na API com timestamp
    saveToAPI(alertId, {
      startTimestamp,
      operator,
      status: 'pending',
      escalations: [
        { level: 1, status: "", observations: "", eventTimestamp: "" },
        { level: 2, status: "", observations: "", eventTimestamp: "" },
        { level: 3, status: "", observations: "", eventTimestamp: "" },
        { level: 4, status: "", observations: "", eventTimestamp: "" }
      ],
      obsChat: "",
      confirmChat: "",
      sendChat: startTimestamp,
    }).catch(() => {
      // Continua funcionando mesmo se a API falhar
    });
    
    toast({
      title: "Confirmação iniciada",
      description: `Aguardando confirmação por 20 minutos - Operador: ${operator}`,
    });
  }, [selectedOperators, saveToAPI]);

  // Função para confirmar recebimento - MODIFICADA para incluir operador
  const confirmReceived = useCallback(async (alertId: string) => {
    const observation = confirmationObservations[alertId] || '';
    const operator = selectedOperators[alertId] || '';
    
    try {
      // Prepara dados para a API
      const apiData = {
        escalations: [
          { level: 1, status: "", observations: "", eventTimestamp: "" },
          { level: 2, status: "", observations: "", eventTimestamp: "" },
          { level: 3, status: "", observations: "", eventTimestamp: "" },
          { level: 4, status: "", observations: "", eventTimestamp: "" }
        ],
        obsChat: "",
        confirmChat: observation,
        sendChat: new Date().toISOString(),
        operator,
      };

      // Salva na API
      await saveToAPI(alertId, apiData);

      setEscalationStates(prev => ({
        ...prev,
        [alertId]: {
          ...prev[alertId],
          status: 'confirmed',
          timerActive: false,
          timeRemaining: 0,
          observations: observation,
          operator
        }
      }));

      // Limpa o campo de observações após confirmação
      setConfirmationObservations(prev => ({
        ...prev,
        [alertId]: ''
      }));

      toast({
        title: "Confirmação recebida",
        description: `Processo finalizado por ${operator}`,
      });
    } catch (error) {
      // Em caso de erro na API, ainda atualiza o estado local para não travar a UI
      setEscalationStates(prev => ({
        ...prev,
        [alertId]: {
          ...prev[alertId],
          status: 'confirmed',
          timerActive: false,
          timeRemaining: 0,
          observations: observation,
          operator
        }
      }));

      setConfirmationObservations(prev => ({
        ...prev,
        [alertId]: ''
      }));
    }
  }, [confirmationObservations, selectedOperators, saveToAPI]);

  // Função para iniciar escalação - MODIFICADA para incluir operador e timestamp
  const startEscalation = useCallback(async (alertId: string, level: 1 | 2 | 3 | 4) => {
    const operator = selectedOperators[alertId];
    
    if (!operator) {
      setShowOperatorSelect(prev => ({ ...prev, [alertId]: true }));
      toast({
        title: "Selecione um operador",
        description: "É necessário selecionar um operador antes de iniciar escalação",
        variant: "destructive",
      });
      return;
    }

    const startTimestamp = new Date().toISOString();
    
    try {
      // Prepara dados para a API - mantém dados anteriores e atualiza o nível atual
      const escalations = [
        { level: 1, status: level === 1 ? "em_andamento" : "", observations: level === 1 ? "Escalação iniciada" : "", eventTimestamp: level === 1 ? startTimestamp : "" },
        { level: 2, status: level === 2 ? "em_andamento" : "", observations: level === 2 ? "Escalação iniciada" : "", eventTimestamp: level === 2 ? startTimestamp : "" },
        { level: 3, status: level === 3 ? "em_andamento" : "", observations: level === 3 ? "Escalação iniciada" : "", eventTimestamp: level === 3 ? startTimestamp : "" },
        { level: 4, status: level === 4 ? "em_andamento" : "", observations: level === 4 ? "Escalação iniciada" : "", eventTimestamp: level === 4 ? startTimestamp : "" }
      ];

      const apiData = {
        escalations,
        obsChat: "",
        confirmChat: level === 1 ? (confirmationObservations[alertId] || "") : "",
        sendChat: startTimestamp,
        operator,
        startTimestamp,
      };

      // Salva na API
      await saveToAPI(alertId, apiData);

      setEscalationStates(prev => ({
        ...prev,
        [alertId]: {
          ...prev[alertId],
          status: 'escalating',
          currentLevel: level,
          timeRemaining: 10 * 60, // 10 minutos
          timerActive: true,
          isAttended: false,
          observations: '',
          operator,
          startTimestamp
        }
      }));

      const levelNames = { 1: 'Primeira', 2: 'Segunda', 3: 'Terceira', 4: 'Quarta' };
      toast({
        title: `${levelNames[level]} escalação iniciada`,
        description: `Timer de 10 minutos ativado - Operador: ${operator}`,
      });
    } catch (error) {
      // Em caso de erro na API, ainda atualiza o estado local
      setEscalationStates(prev => ({
        ...prev,
        [alertId]: {
          ...prev[alertId],
          status: 'escalating',
          currentLevel: level,
          timeRemaining: 10 * 60,
          timerActive: true,
          isAttended: false,
          observations: '',
          operator,
          startTimestamp
        }
      }));

      const levelNames = { 1: 'Primeira', 2: 'Segunda', 3: 'Terceira', 4: 'Quarta' };
      toast({
        title: `${levelNames[level]} escalação iniciada`,
        description: `Timer de 10 minutos ativado - Operador: ${operator}`,
      });
    }
  }, [confirmationObservations, selectedOperators, saveToAPI]);

  // Função para voltar escalação
  const goBackEscalation = useCallback((alertId: string) => {
    setEscalationStates(prev => {
      const currentState = prev[alertId];
      if (currentState && currentState.currentLevel > 0) {
        const previousLevel = Math.max(0, currentState.currentLevel - 1);
        
        return {
          ...prev,
          [alertId]: {
            ...currentState,
            currentLevel: previousLevel as 0 | 1 | 2 | 3 | 4,
            status: previousLevel === 0 ? 'pending' : 'escalating',
            timerActive: true, // Reativa o timer
            timeRemaining: previousLevel === 0 ? 20 * 60 : 10 * 60, // Reinicia tempo apropriado
            isAttended: false,
            observations: ''
          }
        };
      }
      return prev;
    });

    // Limpa status e observações pendentes
    setShowStatusConfirmation(prev => ({ ...prev, [alertId]: false }));
    setPendingStatusChange(prev => {
      const newState = { ...prev };
      delete newState[alertId];
      return newState;
    });

    toast({
      title: "Escalação revertida",
      description: "Processo voltou ao nível anterior e timer reiniciado",
    });
  }, []);

  // Função para formatar tempo
  const formatTime = (seconds: number) => {
    const minutes = Math.floor(seconds / 60);
    const remainingSeconds = seconds % 60;
    return `${minutes.toString().padStart(2, '0')}:${remainingSeconds.toString().padStart(2, '0')}`;
  };

  // Função para formatar data
  const formatDate = (dateString: string) => {
    const date = new Date(dateString);
    return date.toLocaleDateString('pt-BR', {
      day: '2-digit',
      month: '2-digit',
      year: 'numeric',
      hour: '2-digit',
      minute: '2-digit',
    });
  };

  // Função para truncar texto
  const truncateText = (text: string, maxLength: number) => {
    if (text.length <= maxLength) return text;
    return text.slice(0, maxLength) + '...';
  };

  // Função para obter cor da severidade
  const getSeverityColor = (severity: string) => {
    switch (severity.toLowerCase()) {
      case 'alta':
        return 'bg-red-600 text-white';
      case 'média':
        return 'bg-yellow-500 text-black';
      case 'baixa':
        return 'bg-green-600 text-white';
      default:
        return 'bg-gray-400 text-black';
    }
  };

  // Função para obter ícone de status
  const getStatusIcon = (chat: boolean) => {
    return chat ? <CheckCircle className="h-4 w-4 text-green-600" /> : <XCircle className="h-4 w-4 text-red-600" />;
  };

  // Função para obter texto de status
  const getStatusText = (chat: boolean) => {
    return chat ? 'Chat Ativo' : 'Chat Inativo';
  };

  // Função para obter classe do badge de status
  const getStatusBadgeClass = (chat: boolean) => {
    return chat ? 'bg-green-600 text-white' : 'bg-red-600 text-white';
  };

  // Função para lidar com clique no chamado
  const handleChamadoClick = (alert: AlertData) => {
    setSelectedIncident(alert);
  };

  // Função para lidar com clique no incidente (crise)
  const handleIncidentClick = (alert: AlertData) => {
    setSelectedIncident(alert);
    setCrisisDialogOpen(true);
  };

  // Função para lidar com reconhecimento (acknowledgment)
  const handleAcknowledgment = (alert: AlertData) => {
    onUpdateAcknowledgment(alert.id, true);
    setAcionadosSet(prev => new Set(prev).add(alert.chamado.toString()));
  };

  // Função para lidar com ordenação
  const handleSort = (field: SortField) => {
    if (sortField === field) {
      setSortDirection(prev => (prev === 'asc' ? 'desc' : 'asc'));
    } else {
      setSortField(field);
      setSortDirection('asc');
    }
  };

  // Função para obter ícone de ordenação
  const getSortIcon = (field: SortField) => {
    if (sortField !== field) return <ArrowUpDown className="inline-block ml-1 h-3 w-3" />;
    if (sortDirection === 'asc') return <ArrowUp className="inline-block ml-1 h-3 w-3" />;
    if (sortDirection === 'desc') return <ArrowDown className="inline-block ml-1 h-3 w-3" />;
    return null;
  };

  // Dados ordenados e paginados
  const sortedAndPaginatedData = useMemo(() => {
    let sortedData = [...alertData];
    if (sortField && sortDirection) {
      sortedData.sort((a, b) => {
        const aValue = a[sortField];
        const bValue = b[sortField];
        if (aValue < bValue) return sortDirection === 'asc' ? -1 : 1;
        if (aValue > bValue) return sortDirection === 'asc' ? 1 : -1;
        return 0;
      });
    }
    const startIndex = (currentPage - 1) * itemsPerPage;
    return sortedData.slice(startIndex, startIndex + itemsPerPage);
  }, [alertData, sortField, sortDirection, currentPage]);

  // Função para mudar página
  const handlePageChange = (page: number) => {
    if (page < 1 || page > Math.ceil(alertData.length / itemsPerPage)) return;
    setCurrentPage(page);
  };

  // Renderiza seletor de operador
  const renderOperatorSelector = (alertId: string) => {
    return (
      <div className="space-y-2 p-2 border rounded bg-background">
        <Label className="text-xs font-medium flex items-center gap-1">
          <User className="h-3 w-3" />
          Selecionar Operador <span className="text-destructive">*</span>
        </Label>
        <Select
          value={selectedOperators[alertId] || ''}
          onValueChange={(value) => handleOperatorSelect(alertId, value)}
        >
          <SelectTrigger className="h-8 text-xs">
            <SelectValue placeholder="Escolha o operador" />
          </SelectTrigger>
          <SelectContent>
            {OPERATORS.map((operator) => (
              <SelectItem key={operator} value={operator} className="text-xs">
                {operator}
              </SelectItem>
            ))}
          </SelectContent>
        </Select>
        <div className="flex gap-1">
          <Button
            size="sm"
            variant="outline"
            onClick={() => setShowOperatorSelect(prev => ({ ...prev, [alertId]: false }))}
            className="h-6 px-2 text-xs flex-1"
          >
            Cancelar
          </Button>
        </div>
      </div>
    );
  };

  // Renderiza o componente de confirmação/escalação
  const renderConfirmationColumn = (alert: AlertData) => {
    const state = escalationStates[alert.chamado];
    const currentObservation = confirmationObservations[alert.chamado] || '';
    const showConfirmation = showStatusConfirmation[alert.chamado];
    const pendingChange = pendingStatusChange[alert.chamado];
    const showOperatorSelection = showOperatorSelect[alert.chamado];
    const selectedOperator = selectedOperators[alert.chamado];
    
    // Se deve mostrar seleção de operador
    if (showOperatorSelection) {
      return renderOperatorSelector(alert.chamado);
    }
    
    if (!state) {
      return (
        <div className="text-center space-y-2">
          {selectedOperator && (
            <div className="text-xs text-muted-foreground flex items-center gap-1 justify-center">
              <User className="h-3 w-3" />
              {selectedOperator}
            </div>
          )}
          <Button
            size="sm"
            variant="outline"
            onClick={() => startConfirmation(alert.chamado)}
            className="h-8 px-3 text-xs"
          >
            <Play className="h-3 w-3 mr-1" />
            Iniciar
          </Button>
        </div>
      );
    }

    // Mostra operador em todos os estados
    const operatorDisplay = state.operator && (
      <div className="text-xs text-muted-foreground flex items-center gap-1 justify-center mb-1">
        <User className="h-3 w-3" />
        {state.operator}
      </div>
    );

    switch (state.status) {
      case 'pending':
        return (
          <div className="text-center space-y-3">
            {operatorDisplay}
            <div className="flex items-center justify-center gap-2">
              <Clock className="h-4 w-4 text-warning" />
              <span className="text-sm font-mono">{formatTime(state.timeRemaining)}</span>
            </div>
            
            <div className="space-y-2">
               <div className="space-y-1">
                 <Label className="text-xs">
                   Observações <span className="text-destructive">*</span>
                 </Label>
                 <Textarea
                   key={`confirmation-textarea-${alert.chamado}`}
                   placeholder="Observações são obrigatórias para confirmação"
                   value={currentObservation}
                   onChange={(e) => handleConfirmationObservationChange(alert.chamado, e.target.value)}
                   className="text-xs min-h-[60px] resize-none"
                   required
                 />
                 {!currentObservation.trim() && (
                   <p className="text-xs text-destructive">
                     Observações são obrigatórias
                   </p>
                 )}
               </div>
              
              <div className="flex gap-1">
                <Button
                  size="sm"
                  variant="default"
                  onClick={() => confirmReceived(alert.chamado)}
                  disabled={!currentObservation.trim()}
                  className="h-8 px-3 text-xs flex-1 disabled:opacity-50 disabled:cursor-not-allowed"
                >
                  <Check className="h-3 w-3 mr-1" />
                  Confirmar
                </Button>
                <Button
                  size="sm"
                  variant="secondary"
                  onClick={() => startEscalation(alert.chamado, 1)}
                  disabled={!currentObservation.trim()}
                  className="h-8 px-3 text-xs flex-1 disabled:opacity-50 disabled:cursor-not-allowed"
                >
                  <FastForward className="h-3 w-3 mr-1" />
                  Próxima Etapa
                </Button>
              </div>
            </div>
          </div>
        );

      case 'confirmed':
        return (
          <div className="text-center space-y-2">
            {operatorDisplay}
            <div className="flex gap-1 justify-center">
              <Badge variant="default" className="bg-success text-success-foreground">
                <CheckCircle className="h-3 w-3 mr-1" />
                Confirmado
              </Badge>
              <Button
                size="sm"
                variant="outline"
                onClick={() => startEscalation(alert.chamado, 1)}
                className="h-6 px-2 text-xs"
              >
                <FastForward className="h-3 w-3 mr-1" />
                Próxima
              </Button>
            </div>
            {state.observations && (
              <div className="text-xs text-muted-foreground p-2 bg-muted rounded text-left">
                <strong>Observações:</strong><br />
                {state.observations}
              </div>
            )}
          </div>
        );

      case 'escalating':
        const levelNames = { 1: '1ª', 2: '2ª', 3: '3ª', 4: '4ª' };
        
        return (
          <div className="space-y-2">
            {operatorDisplay}
            {state.currentLevel > 0 && (
              <div className="text-center">
                <Badge variant="destructive" className="text-xs">
                  {levelNames[state.currentLevel as keyof typeof levelNames]} Escalação
                </Badge>
                {state.timerActive && (
                  <div className="flex items-center justify-center gap-1 mt-1">
                    <Clock className="h-3 w-3 text-warning" />
                    <span className="text-xs font-mono">{formatTime(state.timeRemaining)}</span>
                  </div>
                )}
              </div>
            )}

            {!state.isAttended && (
              <>
                {/* Campo de observações sempre visível quando em escalação */}
                {state.currentLevel === 0 || (!state.timerActive && state.currentLevel < 4) ? (
                  <div className="space-y-1">
                    <div className="flex gap-1">
                      {/* Botão Voltar - só aparece se não estiver no nível 0 */}
                      {state.currentLevel > 0 && (
                        <Button
                          size="sm"
                          variant="outline"
                          onClick={() => goBackEscalation(alert.chamado)}
                          className="h-6 px-2 text-xs flex-1"
                        >
                          <RotateCcw className="h-3 w-3 mr-1" />
                          Voltar
                        </Button>
                      )}
                      
                       {/* Próxima escalação */}
                       {state.currentLevel < 4 && (
                         <Button
                           size="sm"
                           variant="outline"
                           onClick={() => startEscalation(alert.chamado, (state.currentLevel + 1) as 1 | 2 | 3 | 4)}
                           className="h-6 px-2 text-xs flex-1"
                         >
                           Iniciar {levelNames[(state.currentLevel + 1) as keyof typeof levelNames]} Escalação
                         </Button>
                       )}
                    </div>
                  </div>
                ) : (
                  <div className="space-y-2">
                    {/* Mostrar confirmação de status quando pendente */}
                    {showConfirmation ? (
                      <div className="space-y-2 p-2 border rounded bg-background">
                        <div className="text-xs font-medium">
                          Confirmar: {pendingChange?.status === 'attended' ? 'Atendida' : 'Não Atendida'}
                        </div>
                        
                         <div className="space-y-1">
                           <Label className="text-xs">
                             Observações <span className="text-destructive">*</span>
                           </Label>
                           <Textarea
                             key={`pending-textarea-${alert.chamado}`}
                             placeholder="Observações obrigatórias..."
                             value={pendingChange?.observations || ''}
                             onChange={(e) => handlePendingObservationChange(alert.chamado, e.target.value)}
                             className="text-xs min-h-[60px] resize-none"
                             required
                           />
                           {!pendingChange?.observations?.trim() && (
                             <p className="text-xs text-destructive">
                               Observações são obrigatórias
                             </p>
                           )}
                         </div>
                        
                        <div className="flex gap-1">
                          <Button
                            size="sm"
                            variant="default"
                            onClick={() => confirmStatusChange(alert.chamado)}
                            disabled={!pendingChange?.observations?.trim()}
                            className="h-6 px-2 text-xs flex-1"
                          >
                            <Check className="h-3 w-3 mr-1" />
                            Confirmar
                          </Button>
                          <Button
                            size="sm"
                            variant="outline"
                            onClick={() => cancelStatusChange(alert.chamado)}
                            className="h-6 px-2 text-xs flex-1"
                          >
                            <X className="h-3 w-3 mr-1" />
                            Cancelar
                          </Button>
                        </div>
                      </div>
                    ) : (
                      <>
                        <div className="flex gap-1">
                          {/* Botão Voltar */}
                          <Button
                            size="sm"
                            variant="outline"
                            onClick={() => goBackEscalation(alert.chamado)}
                            className="h-6 px-2 text-xs flex-1"
                          >
                            <RotateCcw className="h-3 w-3 mr-1" />
                            Voltar
                          </Button>
                          
                          {/* Botão Avançar Escalação sempre visível quando há observações */}
                        </div>

                        <Select
                          value=""
                          onValueChange={(value) => prepareStatusChange(alert.chamado, value)}
                        >
                          <SelectTrigger className="h-6 text-xs">
                            <SelectValue placeholder="Selecionar Status" />
                          </SelectTrigger>
                          <SelectContent>
                            <SelectItem value="attended">Atendida</SelectItem>
                            <SelectItem value="not-attended">Não Atendida</SelectItem>
                          </SelectContent>
                        </Select>
                      </>
                    )}
                  </div>
                )}
              </>
            )}
          </div>
        );

      case 'completed':
        return (
          <div className="text-center space-y-2">
            {operatorDisplay}
            <div className="flex gap-1 justify-center">
              <Badge variant="default" className="bg-success text-success-foreground">
                <CheckCircle className="h-3 w-3 mr-1" />
                Finalizado
              </Badge>
            </div>
            {state.observations && (
              <div className="text-xs text-muted-foreground p-2 bg-muted rounded text-left">
                <strong>Observações:</strong><br />
                {state.observations}
              </div>
            )}
          </div>
        );

      default:
        return null;
    }
  };

  // Função para preparar mudança de status pendente
  const prepareStatusChange = (alertId: string, status: string) => {
    setShowStatusConfirmation(prev => ({ ...prev, [alertId]: true }));
    setPendingStatusChange(prev => ({
      ...prev,
      [alertId]: { status, observations: '' }
    }));
  };

  // Função para confirmar mudança de status
  const confirmStatusChange = async (alertId: string) => {
    const pending = pendingStatusChange[alertId];
    if (!pending || !pending.observations.trim()) {
      toast({
        title: "Observações obrigatórias",
        description: "Por favor, preencha as observações antes de confirmar.",
        variant: "destructive",
      });
      return;
    }

    try {
      // Atualiza o estado local
      setEscalationStates(prev => ({
        ...prev,
        [alertId]: {
          ...prev[alertId],
          status: 'completed',
          timerActive: false,
          timeRemaining: 0,
          isAttended: pending.status === 'attended',
          observations: pending.observations,
        }
      }));

      // Limpa os estados pendentes
      setShowStatusConfirmation(prev => ({ ...prev, [alertId]: false }));
      setPendingStatusChange(prev => {
        const newState = { ...prev };
        delete newState[alertId];
        return newState;
      });

      // Salva na API
      await saveToAPI(alertId, {
        escalations: [
          { level: 1, status: pending.status === 'attended' ? 'atendido' : 'nao_atendido', observations: pending.observations, eventTimestamp: new Date().toISOString() },
          { level: 2, status: '', observations: '', eventTimestamp: '' },
          { level: 3, status: '', observations: '', eventTimestamp: '' },
          { level: 4, status: '', observations: '', eventTimestamp: '' }
        ],
        obsChat: '',
        confirmChat: '',
        sendChat: new Date().toISOString(),
        operator: selectedOperators[alertId] || '',
        startTimestamp: new Date().toISOString(),
      });

      toast({
        title: "Status confirmado",
        description: `Status ${pending.status === 'attended' ? 'Atendida' : 'Não Atendida'} confirmado com sucesso.`,
      });
    } catch (error) {
      toast({
        title: "Erro ao confirmar status",
        description: "Não foi possível confirmar o status. Tente novamente.",
        variant: "destructive",
      });
    }
  };

  // Função para cancelar mudança de status pendente
  const cancelStatusChange = (alertId: string) => {
    setShowStatusConfirmation(prev => ({ ...prev, [alertId]: false }));
    setPendingStatusChange(prev => {
      const newState = { ...prev };
      delete newState[alertId];
      return newState;
    });
  };

  // Total de páginas para paginação
  const totalPages = Math.ceil(alertData.length / itemsPerPage);

  return (
    <TooltipProvider>
      <Card className="bg-card border-border">
        <CardHeader />
        <CardContent>
          {/* Layout para Mobile (oculto em desktop) */}
          <div className="block lg:hidden space-y-4">
            {loading ? (
              <div className="text-center py-8">
                <div className="inline-block animate-spin rounded-full h-8 w-8 border-b-2 border-primary mb-4"></div>
                <p>Carregando dados...</p>
              </div>
            ) : sortedAndPaginatedData.length === 0 ? (
              <div className="text-center py-8 text-muted-foreground">
                Nenhum dado disponível
              </div>
            ) : (
              sortedAndPaginatedData.map((alert) => {
                const isChat = acionadosSet.has(alert.chamado.toString());
                const isExpanded = expandedRows.has(alert.id);
                return (
                  <Card key={alert.id} className="bg-secondary border-border w-full">
                    <CardContent className="p-3 sm:p-4">
                      {/* Linha 1 - chamado, severidade_chamado e classificação */}
                      <div className="flex items-center justify-between mb-3 gap-2 flex-wrap">
                        <div className="flex items-center gap-1 sm:gap-2 flex-wrap">
                          <Badge variant="outline" className="text-xs">
                            <Button
                              variant="link"
                              size="sm"
                              className="text-xs p-0 hover:underline"
                              onClick={() => handleChamadoClick(alert)}
                            >
                              {alert.chamado}
                            </Button>
                          </Badge>
                          <Badge variant="outline" className="text-xs max-w-[100px] truncate">
                            {alert.tipo_chamado}
                          </Badge>
                          <Badge className={`${getSeverityColor(alert.severidade_chamado)} text-xs`}>
                            {alert.severidade_chamado}
                          </Badge>
                        </div>
                      </div>

                      <div className="space-y-2">
                        {/* Título */}
                        <div className="w-full">
                          <p className="text-sm font-medium break-words">
                            {truncateText(alert.resumo_chamado, isExpanded ? 200 : 60)}
                          </p>
                        </div>

                        {/* Linha 2 - grupo_chamado e status */}
                        <div className="flex items-center justify-between text-xs text-muted-foreground gap-2">
                          <span className="text-sm font-semibold text-foreground truncate flex-1">
                            {alert.grupo_chamado}
                          </span>
                          <span className="truncate">{alert.status_chamado}</span>
                        </div>

                        {/* Linha 3 - abertura_chamado */}
                        <div className="text-xs text-muted-foreground">
                          {formatDate(alert.abertura_chamado)}
                        </div>

                        {/* Status Acionado Mobile */}
                        <div className="flex items-center gap-2">
                          <span className="text-xs text-muted-foreground">Status:</span>
                        </div>

                        {/* Confirmação Mobile */}
                        <div className="border-t pt-2">
                          <div className="text-xs text-muted-foreground mb-1">Confirmação:</div>
                          {renderConfirmationColumn(alert)}
                        </div>

                        {/* Botões */}
                        <div className="flex items-center justify-between pt-3 gap-2">
                          <div className="flex items-center gap-2">
                            {alert.tipo_chamado.toLowerCase().includes('incidente') && (
                              <Button
                                variant="outline"
                                size="sm"
                                onClick={() => handleIncidentClick(alert)}
                                className="h-7 px-2 text-xs"
                              >
                                <ExternalLink className="h-3 w-3 mr-1" />
                                <span className="hidden sm:inline">Crise</span>
                              </Button>
                            )}
                          </div>

                          <Button
                            variant={isChat ? 'default' : 'outline'}
                            size="sm"
                            onClick={() => !isChat && handleAcknowledgment(alert)}
                            disabled={isChat}
                            className={`h-7 px-2 sm:px-3 text-xs flex-shrink-0 ${isChat
                              ? 'bg-success text-success-foreground hover:bg-success/90'
                              : 'border-border hover:bg-accent'
                              }`}
                          >
                            {isChat ? (
                              <>
                                <Check className="h-3 w-3 mr-1" />
                                <span className="hidden sm:inline">Acionado</span>
                              </>
                            ) : (
                              <>
                                <AlertTriangle className="h-3 w-3 mr-1" />
                                <span className="hidden sm:inline">Acionar</span>
                              </>
                            )}
                          </Button>
                        </div>
                      </div>
                    </CardContent>
                  </Card>
                );
              })
            )}

            {/* Paginação Mobile */}
            {!loading && sortedAndPaginatedData.length > 0 && totalPages > 1 && (
              <div className="flex items-center justify-between mt-4 px-2">
                <div className="text-sm text-muted-foreground">
                  Página {currentPage} de {totalPages}
                </div>
                <div className="flex items-center gap-1">
                  <Button
                    variant="outline"
                    size="sm"
                    onClick={() => handlePageChange(currentPage - 1)}
                    disabled={currentPage === 1}
                    className="h-8 w-8 p-0"
                  >
                    <ChevronLeft className="h-4 w-4" />
                  </Button>
                  <Button
                    variant="outline"
                    size="sm"
                    onClick={() => handlePageChange(currentPage + 1)}
                    disabled={currentPage === totalPages}
                    className="h-8 w-8 p-0"
                  >
                    <ChevronRight className="h-4 w-4" />
                  </Button>
                </div>
              </div>
            )}
          </div>

          {/* Layout para Desktop */}
          <div className="hidden lg:block">
            <div className="w-full overflow-x-auto">
              <div className="min-w-[1000px]">
                <Table>
                  <TableHeader>
                    <TableRow className="border-border hover:bg-accent">
                      <TableHead className="text-muted-foreground min-w-[80px]">
                        <Button
                          variant="ghost"
                          className="h-auto p-0 font-medium text-muted-foreground hover:text-foreground text-xs"
                          onClick={() => handleSort('chamado')}
                        >
                          Chamado
                          {getSortIcon('chamado')}
                        </Button>
                      </TableHead>
                      <TableHead className="text-muted-foreground min-w-[100px]">
                        <Button
                          variant="ghost"
                          className="h-auto p-0 font-medium text-muted-foreground hover:text-foreground text-xs"
                          onClick={() => handleSort('tipo_chamado')}
                        >
                          Classificação
                          {getSortIcon('tipo_chamado')}
                        </Button>
                      </TableHead>
                      <TableHead className="text-muted-foreground min-w-[90px]">
                        <Button
                          variant="ghost"
                          className="h-auto p-0 font-medium text-muted-foreground hover:text-foreground text-xs"
                          onClick={() => handleSort('grupo_chamado')}
                        >
                          Grupo
                          {getSortIcon('grupo_chamado')}
                        </Button>
                      </TableHead>
                      <TableHead className="text-muted-foreground min-w-[80px]">
                        <Button
                          variant="ghost"
                          className="h-auto p-0 font-medium text-muted-foreground hover:text-foreground text-xs"
                          onClick={() => handleSort('status_chamado')}
                        >
                          Status
                          {getSortIcon('status_chamado')}
                        </Button>
                      </TableHead>
                      <TableHead className="text-muted-foreground min-w-[100px]">
                        <Button
                          variant="ghost"
                          className="h-auto p-0 font-medium text-muted-foreground hover:text-foreground text-xs"
                          onClick={() => handleSort('abertura_chamado')}
                        >
                          Abertura
                          {getSortIcon('abertura_chamado')}
                        </Button>
                      </TableHead>
                      <TableHead className="text-muted-foreground min-w-[150px] max-w-[200px]">
                        <Button
                          variant="ghost"
                          className="h-auto p-0 font-medium text-muted-foreground hover:text-foreground text-xs"
                          onClick={() => handleSort('resumo_chamado')}
                        >
                          Título
                          {getSortIcon('resumo_chamado')}
                        </Button>
                      </TableHead>
                      <TableHead className="text-muted-foreground min-w-[90px]">
                        <Button
                          variant="ghost"
                          className="h-auto p-0 font-medium text-muted-foreground hover:text-foreground text-xs"
                          onClick={() => handleSort('severidade_chamado')}
                        >
                          Severidade
                          {getSortIcon('severidade_chamado')}
                        </Button>
                      </TableHead>

                      <TableHead className="text-muted-foreground min-w-[120px]">Confirmação</TableHead>
                      <TableHead className="text-muted-foreground min-w-[70px]">Chat</TableHead>
                    </TableRow>
                  </TableHeader>
                  <TableBody>
                    {loading ? (
                      <TableRow>
                        <TableCell colSpan={10} className="text-center py-8">
                          Carregando dados...
                        </TableCell>
                      </TableRow>
                    ) : sortedAndPaginatedData.length === 0 ? (
                      <TableRow>
                        <TableCell colSpan={10} className="text-center py-8 text-muted-foreground">
                          Nenhum dado disponível
                        </TableCell>
                      </TableRow>
                    ) : (
                      sortedAndPaginatedData.map((alert) => {
                        const isChat = acionadosSet.has(alert.chamado.toString());
                        return (
                          <TableRow
                            key={alert.id}
                            className="border-border hover:bg-accent transition-colors"
                          >
                            <TableCell className="font-medium">
                              <Button
                                variant="link"
                                size="sm"
                                className="p-0 text-foreground hover:underline text-xs"
                                onClick={() => handleChamadoClick(alert)}
                              >
                                {alert.chamado}
                              </Button>
                            </TableCell>
                            <TableCell>
                              <Tooltip>
                                <TooltipTrigger asChild>
                                  <span className="truncate block max-w-[80px] text-xs">
                                    {alert.tipo_chamado}
                                  </span>
                                </TooltipTrigger>
                                <TooltipContent>
                                  <p className="max-w-xs">{alert.tipo_chamado}</p>
                                </TooltipContent>
                              </Tooltip>
                            </TableCell>
                            <TableCell className="text-xs">{alert.grupo_chamado}</TableCell>
                            <TableCell className="text-xs">{alert.status_chamado}</TableCell>
                            <TableCell className="text-xs">
                              {formatDate(alert.abertura_chamado)}
                            </TableCell>
                            <TableCell>
                              <div className="flex items-center gap-2">
                                <Tooltip>
                                  <TooltipTrigger asChild>
                                    <span className="truncate block max-w-[120px] text-xs">
                                      {alert.resumo_chamado}
                                    </span>
                                  </TooltipTrigger>
                                  <TooltipContent>
                                    <p className="max-w-md">{alert.resumo_chamado}</p>
                                  </TooltipContent>
                                </Tooltip>
                                {alert.tipo_chamado.toLowerCase().includes('incidente') && (
                                  <Button
                                    variant="ghost"
                                    size="sm"
                                    onClick={() => handleIncidentClick(alert)}
                                    className="p-1 h-auto hover:bg-accent flex-shrink-0"
                                    title="Iniciar processo de crise"
                                  >
                                    <ExternalLink className="h-3 w-3" />
                                  </Button>
                                )}
                              </div>
                            </TableCell>
                            <TableCell>
                              <Badge className={`${getSeverityColor(alert.severidade_chamado)} text-xs`}>
                                {alert.severidade_chamado}
                              </Badge>
                            </TableCell>
                            <TableCell className="min-w-[120px]">
                              {renderConfirmationColumn(alert)}
                            </TableCell>
                            <TableCell>
                              <Button
                                variant={isChat ? "default" : "outline"}
                                size="sm"
                                onClick={() => !isChat && handleAcknowledgment(alert)}
                                disabled={isChat}
                                className={`${isChat
                                  ? 'bg-success text-success-foreground hover:bg-success/90'
                                  : 'border-border hover:bg-accent'
                                  } h-7 w-7 p-0`}
                              >
                                {isChat ? (
                                  <Check className="h-3 w-3" />
                                ) : (
                                  <AlertTriangle className="h-3 w-3" />
                                )}
                              </Button>
                            </TableCell>
                          </TableRow>
                        );
                      })
                    )}
                  </TableBody>
                </Table>
              </div>
            </div>

            {/* Paginação Desktop */}
            {!loading && sortedAndPaginatedData.length > 0 && totalPages > 1 && (
              <div className="flex items-center justify-between mt-4 pt-4 border-t border-border">
                <div className="text-sm text-muted-foreground">
                  Mostrando {((currentPage - 1) * itemsPerPage) + 1} a {Math.min(currentPage * itemsPerPage, alertData.length)} de {alertData.length} registros
                </div>
                <div className="flex items-center gap-2">
                  <Button
                    variant="outline"
                    size="sm"
                    onClick={() => handlePageChange(currentPage - 1)}
                    disabled={currentPage === 1}
                    className="h-8 px-3"
                  >
                    <ChevronLeft className="h-4 w-4 mr-1" />
                    Anterior
                  </Button>

                  <div className="flex items-center gap-1">
                    {[...Array(Math.min(totalPages, 5))].map((_, index) => {
                      let page;
                      if (totalPages <= 5) {
                        page = index + 1;
                      } else if (currentPage <= 3) {
                        page = index + 1;
                      } else if (currentPage >= totalPages - 2) {
                        page = totalPages - 4 + index;
                      } else {
                        page = currentPage - 2 + index;
                      }

                      return (
                        <Button
                          key={page}
                          variant={currentPage === page ? "default" : "outline"}
                          size="sm"
                          onClick={() => handlePageChange(page)}
                          className="h-8 w-8 p-0"
                        >
                          {page}
                        </Button>
                      );
                    })}
                  </div>

                  <Button
                    variant="outline"
                    size="sm"
                    onClick={() => handlePageChange(currentPage + 1)}
                    disabled={currentPage === totalPages}
                    className="h-8 px-3"
                  >
                    Próximo
                    <ChevronRight className="h-4 w-4 ml-1" />
                  </Button>
                </div>
              </div>
            )}
          </div>

          {/* Dialog do Modal de Chamado */}
          <Dialog open={!!selectedIncident} onOpenChange={() => setSelectedIncident(null)}>
            <DialogContent className="max-w-3xl max-h-[80vh] border-border shadow-2xl overflow-y-auto">
              <DialogHeader className="pb-6 border-b border-border">
                <DialogTitle className="text-left">
                  {/* Header com design melhorado */}
                  <div className="relative overflow-hidden rounded-2xl p-6 mb-4 bg-gradient-to-r from-primary to-primary/80">
                    {/* Número do chamado e título */}
                    <div className="relative z-10 flex items-start gap-4">
                      <div className="p-3 rounded-xl bg-white/20 backdrop-blur-sm border border-white/30 shadow-lg">
                        {selectedIncident?.tipo_chamado === "Solicitação" ? (
                          <Zap className="h-6 w-6 text-white drop-shadow-sm" />
                        ) : selectedIncident?.tipo_chamado === "Incidente" ? (
                          <AlertTriangle className="h-6 w-6 text-white drop-shadow-sm" />
                        ) : (
                          <Zap className="h-6 w-6 text-white drop-shadow-sm" />
                        )}
                      </div>

                      <div className="flex-1">
                        <div className="flex items-center gap-3 mb-2">
                          <span className="text-2xl font-bold text-white drop-shadow-sm">
                            {selectedIncident?.chamado}
                          </span>
                          <div className="h-1 flex-1 bg-white/20 rounded-full">
                            <div className="h-full w-3/4 bg-white/40 rounded-full"></div>
                          </div>
                        </div>

                        <h2 className="text-lg font-medium text-white/95 leading-relaxed drop-shadow-sm">
                          {selectedIncident?.resumo_chamado}
                        </h2>
                      </div>
                    </div>

                    {/* Status badges */}
                    {selectedIncident && (
                      <div className="relative z-10 flex flex-wrap items-center gap-3 mt-6">
                        <div className="animate-fade-in">
                          <div className={`${getStatusBadgeClass(selectedIncident.chat)} flex items-center gap-2 px-4 py-2 rounded-xl 
                              backdrop-blur-sm border border-white/20 shadow-lg`}>
                            {getStatusIcon(selectedIncident.chat)}
                            <span className="font-medium text-sm">
                              {getStatusText(selectedIncident.chat)}
                            </span>
                          </div>
                        </div>

                        <div className="animate-fade-in">
                          <div className="bg-white/20 text-white flex items-center gap-2 px-4 py-2 rounded-xl 
                              backdrop-blur-sm border border-white/30 shadow-lg">
                            <span className="font-medium text-sm">{selectedIncident.tipo_chamado}</span>
                          </div>
                        </div>
                      </div>
                    )}
                  </div>
                </DialogTitle>
              </DialogHeader>

              {/* Conteúdo principal */}
              {selectedIncident && (
                <div className="grid grid-cols-1 md:grid-cols-2 gap-6 mt-6">
                  <div className="space-y-4">
                    {/* Card Grupo */}
                    <div className="group relative overflow-hidden rounded-xl bg-card border border-border p-5 
                        shadow-lg hover:shadow-xl transition-all duration-300 hover:-translate-y-1">
                      <div className="absolute top-0 left-0 w-full h-1 bg-gradient-to-r from-primary to-blue-500"></div>
                      <div className="flex items-start gap-4">
                        <div className="p-2 rounded-lg bg-primary/10 group-hover:bg-primary/20 transition-colors duration-300">
                          <Group className="h-5 w-5 text-primary" />
                        </div>
                        <div className="flex-1">
                          <p className="text-sm text-muted-foreground font-medium mb-1">Grupo</p>
                          <p className="font-bold text-foreground text-lg">{selectedIncident.grupo_chamado}</p>
                        </div>
                      </div>
                    </div>

                    {/* Card Abertura */}
                    <div className="group relative overflow-hidden rounded-xl bg-card border border-border p-5 
                        shadow-lg hover:shadow-xl transition-all duration-300 hover:-translate-y-1">
                      <div className="absolute top-0 left-0 w-full h-1 bg-gradient-to-r from-green-500 to-emerald-500"></div>
                      <div className="flex items-start gap-4">
                        <div className="p-2 rounded-lg bg-green-500/10 group-hover:bg-green-500/20 transition-colors duration-300">
                          <Calendar className="h-5 w-5 text-green-600" />
                        </div>
                        <div className="flex-1">
                          <p className="text-sm text-muted-foreground font-medium mb-1">Data de Abertura</p>
                          <p className="font-bold text-foreground text-lg">{formatDate(selectedIncident.abertura_chamado)}</p>
                        </div>
                      </div>
                    </div>
                  </div>

                  <div className="space-y-4">
                    {/* Card Status */}
                    <div className="group relative overflow-hidden rounded-xl bg-card border border-border p-5 
                        shadow-lg hover:shadow-xl transition-all duration-300 hover:-translate-y-1">
                      <div className="absolute top-0 left-0 w-full h-1 bg-gradient-to-r from-blue-500 to-cyan-500"></div>
                      <div className="flex items-start gap-4">
                        <div className="p-2 rounded-lg bg-blue-500/10 group-hover:bg-blue-500/20 transition-colors duration-300">
                          <Info className="h-5 w-5 text-blue-600" />
                        </div>
                        <div className="flex-1">
                          <p className="text-sm text-muted-foreground font-medium mb-1">Status</p>
                          <p className="font-bold text-foreground text-lg">{selectedIncident.status_chamado}</p>
                        </div>
                      </div>
                    </div>

                    {/* Card Severidade */}
                    <div className="group relative overflow-hidden rounded-xl bg-card border border-border p-5 
                        shadow-lg hover:shadow-xl transition-all duration-300 hover:-translate-y-1">
                      <div className="absolute top-0 left-0 w-full h-1 bg-gradient-to-r from-red-500 to-orange-500"></div>
                      <div className="flex items-start gap-4">
                        <div className="p-2 rounded-lg bg-red-500/10 group-hover:bg-red-500/20 transition-colors duration-300">
                          <Flame className="h-5 w-5 text-red-600" />
                        </div>
                        <div className="flex-1">
                          <p className="text-sm text-muted-foreground font-medium mb-1">Severidade</p>
                          <p className="font-bold text-foreground text-lg">{selectedIncident.severidade_chamado}</p>
                        </div>
                      </div>
                    </div>
                  </div>
                </div>
              )}
            </DialogContent>
          </Dialog>
        </CardContent>
      </Card>
    </TooltipProvider>
  );
};

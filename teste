import { useState, useMemo, useCallback } from 'react';
import { 
  Check, 
  AlertTriangle, 
  Timer, 
  Play, 
  Search, 
  ChevronLeft, 
  ChevronRight, 
  ArrowUpDown, 
  ArrowUp, 
  ArrowDown, 
  Settings 
} from 'lucide-react';

// Componentes UI
import { Card, CardContent, CardHeader } from '@/components/ui/card';
import { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from '@/components/ui/table';
import { Badge } from '@/components/ui/badge';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { Label } from '@/components/ui/label';
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';
import { Tooltip, TooltipContent, TooltipProvider, TooltipTrigger } from '@/components/ui/tooltip';

// Hooks e utilit√°rios
import { toast } from '@/hooks/use-toast';

// =====================================================
// INTERFACES E TIPOS
// =====================================================

interface AlertData {
  id: string;
  chamado: string;
  tipo_chamado: string;
  grupo_chamado: string;
  status_chamado: string;
  abertura_chamado: string;
  resumo_chamado: string;
  severidade_chamado: string;
  acionado: string;
  chat: boolean;
}

interface ActionTableProps {
  alertData: AlertData[];
  onUpdateAcknowledgment: (alertId: string, acknowledged: boolean) => void;
  loading: boolean;
}

type SortField = keyof AlertData;
type SortDirection = 'asc' | 'desc' | null;

// =====================================================
// CONSTANTES
// =====================================================

// Nomes dos n√≠veis de escala√ß√£o
const LEVEL_NAMES = {
  1: "Primeiro Acionamento",
  2: "1¬™ Escala√ß√£o", 
  3: "2¬™ Escala√ß√£o",
  4: "3¬™ Escala√ß√£o",
  5: "4¬™ Escala√ß√£o"
};

// Dura√ß√£o padr√£o do timer (20 minutos em segundos)
const TIMER_DURATION = 1200;

// =====================================================
// COMPONENTE PRINCIPAL
// =====================================================

export const ActionTable = ({ alertData, onUpdateAcknowledgment, loading }: ActionTableProps) => {
  
  // =====================================================
  // ESTADOS DE CONTROLE
  // =====================================================
  
  // Estados de pagina√ß√£o e busca
  const [currentPage, setCurrentPage] = useState(1);
  const [searchTerm, setSearchTerm] = useState('');
  const [itemsPerPage, setItemsPerPage] = useState<number>(5);
  
  // Estados de ordena√ß√£o
  const [sortField, setSortField] = useState<SortField>('chamado');
  const [sortDirection, setSortDirection] = useState<SortDirection>('desc');
  
  // Estados simulados para timer (sem WebSocket)
  const [activeTimers, setActiveTimers] = useState<Set<string>>(new Set());

  // =====================================================
  // FUN√á√ïES UTILIT√ÅRIAS
  // =====================================================
  
  /**
   * Formata data/timestamp para exibi√ß√£o em formato brasileiro
   */
  const formatDate = useCallback((dateString: string) => {
    if (!dateString || dateString === '' || dateString === 'null' || dateString === 'undefined') {
      return '-';
    }

    try {
      let date: Date;
      const cleanString = String(dateString).trim();

      // Timestamp em milissegundos
      if (/^\d{13}$/.test(cleanString)) {
        date = new Date(parseInt(cleanString));
      } 
      // Timestamp em segundos
      else if (/^\d{10}$/.test(cleanString)) {
        date = new Date(parseInt(cleanString) * 1000);
      } 
      // Formato brasileiro DD/MM/YYYY
      else if (/^\d{2}\/\d{2}\/\d{4}/.test(cleanString)) {
        const parts = cleanString.split(' ');
        const datePart = parts[0];
        const timePart = parts[1] || '00:00:00';
        const [day, month, year] = datePart.split('/');
        const [hour, minute, second] = timePart.split(':');

        date = new Date(
          parseInt(year),
          parseInt(month) - 1,
          parseInt(day),
          parseInt(hour || '0'),
          parseInt(minute || '0'),
          parseInt(second || '0')
        );
      } 
      // Outros formatos
      else {
        date = new Date(cleanString);
      }

      // Valida√ß√µes
      if (isNaN(date.getTime())) return cleanString;
      
      const year = date.getFullYear();
      if (year < 1900 || year > 2100) return cleanString;

      // Retorna formatado em pt-BR
      return date.toLocaleString('pt-BR', {
        day: '2-digit',
        month: '2-digit',
        year: 'numeric',
        hour: '2-digit',
        minute: '2-digit',
        second: '2-digit',
      });
    } catch (error) {
      return String(dateString);
    }
  }, []);

  /**
   * Retorna a classe CSS para cor da severidade
   */
  const getSeverityColor = useCallback((severity: string) => {
    return severity.includes('4')
      ? 'bg-destructive text-destructive-foreground'
      : 'bg-yellow-500 text-yellow-950';
  }, []);

  // =====================================================
  // HANDLERS DE A√á√ïES
  // =====================================================

  /**
   * Processa acionamento de alerta
   */
  const handleAcknowledgment = useCallback(async (alert: AlertData) => {
    try {
      toast({
        title: "Alerta acionado",
        description: `Chamado ${alert.chamado} foi acionado com sucesso`,
      });

      onUpdateAcknowledgment(alert.id, true);
    } catch (error: any) {
      toast({
        title: "Erro ao acionar alerta",
        description: error.message || "N√£o foi poss√≠vel concluir o acionamento",
        variant: "destructive",
      });
    }
  }, [onUpdateAcknowledgment]);

  /**
   * Inicia o timer para um chamado (vers√£o simplificada)
   */
  const handleStartTimer = useCallback((chamado: string) => {
    console.log(`Iniciando timer para chamado ${chamado}`);
    
    setActiveTimers(prev => new Set(prev).add(chamado));
    
    toast({
      title: "üöÄ Timer Iniciado",
      description: `Timer de 20 minutos iniciado para chamado ${chamado}`,
    });
  }, []);

  /**
   * Para o timer de um chamado
   */
  const handleStopTimer = useCallback((chamado: string) => {
    setActiveTimers(prev => {
      const newSet = new Set(prev);
      newSet.delete(chamado);
      return newSet;
    });
    
    toast({
      title: "‚è∏Ô∏è Timer Parado",
      description: `Timer do chamado ${chamado} foi parado`,
    });
  }, []);

  // =====================================================
  // HANDLERS DE ORDENA√á√ÉO
  // =====================================================

  /**
   * Processa clique em cabe√ßalho da tabela para ordena√ß√£o
   */
  const handleSort = useCallback((field: SortField) => {
    if (sortField === field) {
      if (sortDirection === 'asc') {
        setSortDirection('desc');
      } else if (sortDirection === 'desc') {
        setSortDirection(null);
        setSortField('chamado');
      } else {
        setSortDirection('asc');
      }
    } else {
      setSortField(field);
      setSortDirection('asc');
    }
  }, [sortField, sortDirection]);

  /**
   * Retorna √≠cone de ordena√ß√£o apropriado
   */
  const getSortIcon = useCallback((field: SortField) => {
    if (sortField !== field) {
      return <ArrowUpDown className="h-4 w-4 ml-1 opacity-50" />;
    }
    if (sortDirection === 'asc') {
      return <ArrowUp className="h-4 w-4 ml-1" />;
    }
    if (sortDirection === 'desc') {
      return <ArrowDown className="h-4 w-4 ml-1" />;
    }
    return <ArrowUpDown className="h-4 w-4 ml-1 opacity-50" />;
  }, [sortField, sortDirection]);

  // =====================================================
  // HANDLERS DE PAGINA√á√ÉO
  // =====================================================

  /**
   * Atualiza quantidade de itens por p√°gina
   */
  const handleItemsPerPageChange = useCallback((value: string) => {
    const num = parseInt(value, 10);
    setItemsPerPage(num);
    setCurrentPage(1); // Volta para primeira p√°gina
  }, []);

  /**
   * Navega para p√°gina espec√≠fica
   */
  const handlePageChange = useCallback((page: number) => {
    setCurrentPage(page);
  }, []);

  // =====================================================
  // DADOS PROCESSADOS
  // =====================================================

  // Filtra dados baseado na busca
  const filteredData = useMemo(() => {
    if (!searchTerm.trim()) return alertData;

    const searchLower = searchTerm.toLowerCase().trim();
    return alertData.filter(alert =>
      Object.values(alert).some(value =>
        String(value).toLowerCase().includes(searchLower)
      )
    );
  }, [alertData, searchTerm]);

  // Ordena e pagina os dados filtrados
  const { sortedAndPaginatedData, totalPages } = useMemo(() => {
    let sortedData = [...filteredData];

    // Aplica ordena√ß√£o se configurada
    if (sortField && sortDirection) {
      sortedData.sort((a, b) => {
        let aValue: any = a[sortField];
        let bValue: any = b[sortField];

        // Tratamento especial por tipo de campo
        if (sortField === 'chamado') {
          aValue = parseInt(a.chamado) || 0;
          bValue = parseInt(b.chamado) || 0;
        } else if (sortField === 'abertura_chamado') {
          aValue = new Date(a.abertura_chamado).getTime() || 0;
          bValue = new Date(b.abertura_chamado).getTime() || 0;
        } else {
          aValue = String(aValue).toLowerCase();
          bValue = String(bValue).toLowerCase();
        }

        if (aValue < bValue) return sortDirection === 'asc' ? -1 : 1;
        if (aValue > bValue) return sortDirection === 'asc' ? 1 : -1;
        return 0;
      });
    } else {
      // Ordena√ß√£o padr√£o por chamado decrescente
      sortedData.sort((a, b) => {
        const chamadoA = parseInt(a.chamado) || 0;
        const chamadoB = parseInt(b.chamado) || 0;
        return chamadoB - chamadoA;
      });
    }

    // Aplica pagina√ß√£o
    const startIndex = (currentPage - 1) * itemsPerPage;
    const endIndex = startIndex + itemsPerPage;
    const paginatedData = sortedData.slice(startIndex, endIndex);
    const totalPages = Math.ceil(sortedData.length / itemsPerPage);

    return { sortedAndPaginatedData: paginatedData, totalPages };
  }, [filteredData, currentPage, itemsPerPage, sortField, sortDirection]);

  // =====================================================
  // RENDER
  // =====================================================

  return (
    <TooltipProvider>
      <Card className="bg-card border-border shadow-sm">
        <CardHeader>
          {/* Campo de Pesquisa */}
          <div className="relative mb-4">
            <Search className="absolute left-3 top-1/2 h-4 w-4 -translate-y-1/2 text-muted-foreground" />
            <Input
              placeholder="Pesquisar por chamado, tipo, grupo, status, t√≠tulo..."
              value={searchTerm}
              onChange={(e) => setSearchTerm(e.target.value)}
              className="pl-10"
            />
          </div>

          {/* Indicador de resultados da busca */}
          {searchTerm && (
            <div className="text-sm text-muted-foreground">
              {filteredData.length === 0 ? (
                <span>Nenhum resultado encontrado para "{searchTerm}"</span>
              ) : (
                <span>
                  {filteredData.length} resultado{filteredData.length !== 1 ? 's' : ''}
                  {filteredData.length !== alertData.length && ` de ${alertData.length} `}
                  para "{searchTerm}"
                </span>
              )}
            </div>
          )}
        </CardHeader>

        <CardContent>
          {/* Tabela de Dados */}
          <div className="w-full">
            <Table className="w-full">
              <TableHeader>
                <TableRow className="border-border hover:bg-accent">
                  {/* Cabe√ßalhos com ordena√ß√£o */}
                  <TableHead className="text-muted-foreground w-[80px]">
                    <Button
                      variant="ghost"
                      className="h-auto p-0 font-medium text-muted-foreground hover:text-foreground text-xs"
                      onClick={() => handleSort('chamado')}
                    >
                      Chamado
                      {getSortIcon('chamado')}
                    </Button>
                  </TableHead>
                  <TableHead className="text-muted-foreground hidden md:table-cell">
                    <Button
                      variant="ghost"
                      className="h-auto p-0 font-medium text-muted-foreground hover:text-foreground text-xs"
                      onClick={() => handleSort('tipo_chamado')}
                    >
                      Classifica√ß√£o
                      {getSortIcon('tipo_chamado')}
                    </Button>
                  </TableHead>
                  <TableHead className="text-muted-foreground hidden lg:table-cell">
                    <Button
                      variant="ghost"
                      className="h-auto p-0 font-medium text-muted-foreground hover:text-foreground text-xs"
                      onClick={() => handleSort('grupo_chamado')}
                    >
                      Grupo
                      {getSortIcon('grupo_chamado')}
                    </Button>
                  </TableHead>
                  <TableHead className="text-muted-foreground hidden lg:table-cell">
                    <Button
                      variant="ghost"
                      className="h-auto p-0 font-medium text-muted-foreground hover:text-foreground text-xs"
                      onClick={() => handleSort('status_chamado')}
                    >
                      Status
                      {getSortIcon('status_chamado')}
                    </Button>
                  </TableHead>
                  <TableHead className="text-muted-foreground hidden xl:table-cell">
                    <Button
                      variant="ghost"
                      className="h-auto p-0 font-medium text-muted-foreground hover:text-foreground text-xs"
                      onClick={() => handleSort('abertura_chamado')}
                    >
                      Abertura
                      {getSortIcon('abertura_chamado')}
                    </Button>
                  </TableHead>
                  <TableHead className="text-muted-foreground">
                    <Button
                      variant="ghost"
                      className="h-auto p-0 font-medium text-muted-foreground hover:text-foreground text-xs"
                      onClick={() => handleSort('resumo_chamado')}
                    >
                      T√≠tulo
                      {getSortIcon('resumo_chamado')}
                    </Button>
                  </TableHead>
                  <TableHead className="text-muted-foreground hidden sm:table-cell">
                    <Button
                      variant="ghost"
                      className="h-auto p-0 font-medium text-muted-foreground hover:text-foreground text-xs"
                      onClick={() => handleSort('severidade_chamado')}
                    >
                      Severidade
                      {getSortIcon('severidade_chamado')}
                    </Button>
                  </TableHead>
                  <TableHead className="text-muted-foreground w-[120px] text-center">
                    <span className="text-xs font-medium">Timer</span>
                  </TableHead>
                  <TableHead className="text-muted-foreground w-[60px] text-center">Chat</TableHead>
                </TableRow>
              </TableHeader>
              
              <TableBody>
                {/* Estados de carregamento e vazio */}
                {loading ? (
                  <TableRow>
                    <TableCell colSpan={9} className="text-center py-8">
                      <div className="inline-block animate-spin rounded-full h-8 w-8 border-b-2 border-primary mb-4"></div>
                      <p>Carregando dados...</p>
                    </TableCell>
                  </TableRow>
                ) : sortedAndPaginatedData.length === 0 ? (
                  <TableRow>
                    <TableCell colSpan={9} className="text-center py-8 text-muted-foreground">
                      {searchTerm ? 'Nenhum resultado encontrado' : 'Nenhum dado dispon√≠vel'}
                    </TableCell>
                  </TableRow>
                ) : (
                  // Linhas de dados
                  sortedAndPaginatedData.map((alert) => {
                    const isChat = alert.acionado === 'true' || alert.chat;
                    const hasActiveTimer = activeTimers.has(alert.chamado);

                    return (
                      <TableRow key={alert.id} className="border-border hover:bg-accent transition-colors">
                        {/* N√∫mero do Chamado */}
                        <TableCell className="font-medium">
                          <Button
                            variant="link"
                            size="sm"
                            className="p-0 text-foreground hover:underline text-xs"
                          >
                            {alert.chamado}
                          </Button>
                        </TableCell>
                        
                        {/* Classifica√ß√£o */}
                        <TableCell className="hidden md:table-cell">
                          <Tooltip>
                            <TooltipTrigger asChild>
                              <span className="truncate block max-w-[100px] text-xs">
                                {alert.tipo_chamado}
                              </span>
                            </TooltipTrigger>
                            <TooltipContent>
                              <p className="max-w-xs">{alert.tipo_chamado}</p>
                            </TooltipContent>
                          </Tooltip>
                        </TableCell>
                        
                        {/* Grupo */}
                        <TableCell className="text-xs hidden lg:table-cell">{alert.grupo_chamado}</TableCell>
                        
                        {/* Status */}
                        <TableCell className="text-xs hidden lg:table-cell">{alert.status_chamado}</TableCell>
                        
                        {/* Data de Abertura */}
                        <TableCell className="text-xs hidden xl:table-cell">{formatDate(alert.abertura_chamado)}</TableCell>
                        
                        {/* T√≠tulo/Resumo */}
                        <TableCell>
                          <Tooltip>
                            <TooltipTrigger asChild>
                              <span className="truncate block max-w-[150px] text-xs">
                                {alert.resumo_chamado}
                              </span>
                            </TooltipTrigger>
                            <TooltipContent>
                              <p className="max-w-md">{alert.resumo_chamado}</p>
                            </TooltipContent>
                          </Tooltip>
                        </TableCell>
                        
                        {/* Severidade */}
                        <TableCell className="hidden sm:table-cell">
                          <Badge className={`${getSeverityColor(alert.severidade_chamado)} text-xs`}>
                            {alert.severidade_chamado}
                          </Badge>
                        </TableCell>
                        
                        {/* Timer */}
                        <TableCell>
                          <div className="flex flex-col items-center gap-2">
                            {hasActiveTimer ? (
                              <div className="space-y-1 text-center">
                                <div className="flex items-center gap-1 justify-center">
                                  <Timer className="h-3 w-3 text-timer-active animate-pulse" />
                                  <Badge className="bg-timer-active text-white text-xs font-semibold px-2 py-1 whitespace-nowrap">
                                    Ativo
                                  </Badge>
                                </div>
                                <Button
                                  variant="outline"
                                  size="sm"
                                  onClick={() => handleStopTimer(alert.chamado)}
                                  className="h-6 px-2 text-xs"
                                >
                                  <Settings className="h-3 w-3 mr-1" />
                                  Parar
                                </Button>
                              </div>
                            ) : (
                              <Button
                                variant="outline"
                                size="sm"
                                onClick={() => handleStartTimer(alert.chamado)}
                                className="h-7 px-3 text-xs font-semibold whitespace-nowrap"
                              >
                                <Play className="h-3 w-3 mr-1" />
                                Iniciar (20min)
                              </Button>
                            )}
                          </div>
                        </TableCell>
                        
                        {/* Chat/Acionamento */}
                        <TableCell>
                          <Tooltip>
                            <TooltipTrigger asChild>
                              <Button
                                variant={isChat ? "default" : "outline"}
                                size="sm"
                                onClick={() => !isChat && handleAcknowledgment(alert)}
                                disabled={isChat}
                                className="h-8 w-8 p-0"
                              >
                                {isChat ? (
                                  <Check className="h-4 w-4" />
                                ) : (
                                  <AlertTriangle className="h-4 w-4" />
                                )}
                              </Button>
                            </TooltipTrigger>
                            <TooltipContent>
                              <p>{isChat ? 'J√° acionado' : 'Acionar grupo'}</p>
                            </TooltipContent>
                          </Tooltip>
                        </TableCell>
                      </TableRow>
                    );
                  })
                )}
              </TableBody>
            </Table>
          </div>

          {/* Pagina√ß√£o */}
          {!loading && sortedAndPaginatedData.length > 0 && totalPages > 1 && (
            <div className="flex flex-col sm:flex-row items-center justify-between mt-4 pt-4 border-t border-border gap-4">
              {/* Informa√ß√µes da pagina√ß√£o */}
              <div className="text-sm text-muted-foreground text-center sm:text-left">
                Mostrando {((currentPage - 1) * itemsPerPage) + 1} a {Math.min(currentPage * itemsPerPage, filteredData.length)} de {filteredData.length} registros
                {searchTerm && filteredData.length !== alertData.length && ` (filtrados de ${alertData.length})`}
              </div>

              {/* Seletor de itens por p√°gina */}
              <div className="flex items-center gap-2">
                <Label htmlFor="itemsPerPage" className="text-sm font-medium whitespace-nowrap">
                  Por P√°gina:
                </Label>
                <Select value={itemsPerPage.toString()} onValueChange={handleItemsPerPageChange}>
                  <SelectTrigger className="w-20">
                    <SelectValue />
                  </SelectTrigger>
                  <SelectContent>
                    <SelectItem value="5">5</SelectItem>
                    <SelectItem value="10">10</SelectItem>
                    <SelectItem value="15">15</SelectItem>
                    <SelectItem value="20">20</SelectItem>
                  </SelectContent>
                </Select>
              </div>

              {/* Controles de navega√ß√£o */}
              <div className="flex items-center gap-2">
                <Button
                  variant="outline"
                  size="sm"
                  onClick={() => handlePageChange(currentPage - 1)}
                  disabled={currentPage === 1}
                  className="h-8 px-3"
                >
                  <ChevronLeft className="h-4 w-4 mr-1" />
                  Anterior
                </Button>

                {/* N√∫meros das p√°ginas */}
                <div className="flex items-center gap-1">
                  {[...Array(Math.min(totalPages, 5))].map((_, index) => {
                    let page;
                    if (totalPages <= 5) {
                      page = index + 1;
                    } else if (currentPage <= 3) {
                      page = index + 1;
                    } else if (currentPage >= totalPages - 2) {
                      page = totalPages - 4 + index;
                    } else {
                      page = currentPage - 2 + index;
                    }

                    return (
                      <Button
                        key={page}
                        variant={currentPage === page ? "default" : "outline"}
                        size="sm"
                        onClick={() => handlePageChange(page)}
                        className="h-8 w-8 p-0"
                      >
                        {page}
                      </Button>
                    );
                  })}
                </div>

                <Button
                  variant="outline"
                  size="sm"
                  onClick={() => handlePageChange(currentPage + 1)}
                  disabled={currentPage === totalPages}
                  className="h-8 px-3"
                >
                  Pr√≥ximo
                  <ChevronRight className="h-4 w-4 ml-1" />
                </Button>
              </div>
            </div>
          )}
        </CardContent>
      </Card>
    </TooltipProvider>
  );
};

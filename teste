import { useEffect, useRef, useState } from "react";

interface TimerData {
  chamado: string;
  etapa: number;
  timerStart: number;   // timestamp em ms
  duration: number;     // duração total em segundos
  status: string;
}

export function useWebsocketTimers() {
  const [timers, setTimers] = useState<Map<string, TimerData>>(new Map());
  const wsRef = useRef<WebSocket | null>(null);

  useEffect(() => {
    const ws = new WebSocket("wss://rsgjd6wsza.execute-api.us-east-1.amazonaws.com/dev/");

    ws.onopen = () => {
      console.log("✅ Conectado ao WebSocket");
    };

    ws.onmessage = (event) => {
      try {
        const data = JSON.parse(event.data);

        if (data.action === "updateTimer") {
          setTimers((prev) => {
            const newMap = new Map(prev);
            newMap.set(data.chamado, {
              chamado: data.chamado,
              etapa: data.etapa,
              timerStart: data.timerStart,
              duration: data.duration,
              status: data.status,
            });
            return newMap;
          });
        }
      } catch (err) {
        console.error("Erro ao processar mensagem WebSocket:", err);
      }
    };

    ws.onclose = () => {
      console.warn("⚠️ WebSocket fechado, tentando reconectar...");
      setTimeout(() => {
        wsRef.current = null;
      }, 3000);
    };

    ws.onerror = (err) => {
      console.error("Erro WebSocket:", err);
    };

    wsRef.current = ws;
    return () => ws.close();
  }, []);

  const sendMessage = (msg: any) => {
    if (wsRef.current && wsRef.current.readyState === WebSocket.OPEN) {
      wsRef.current.send(JSON.stringify(msg));
    }
  };

  return { timers, sendMessage };
}
























export function getRemainingTime(timerStart: number, duration: number) {
  if (!timerStart || !duration) return "00:00";

  const now = Date.now();
  const elapsed = Math.floor((now - timerStart) / 1000); // segundos
  const remaining = Math.max(duration - elapsed, 0);

  const minutes = Math.floor(remaining / 60).toString().padStart(2, "0");
  const seconds = (remaining % 60).toString().padStart(2, "0");

  return `${minutes}:${seconds}`;
}














import { useWebsocketTimers } from "@/hooks/useWebsocketTimers";
import { getRemainingTime } from "@/utils/timeUtils"; 

const { timers, sendMessage } = useWebsocketTimers();


const timerData = timers.get(alert.chamado);

{timerData ? (
  <div className="flex items-center gap-2">
    <Timer className="h-4 w-4 text-orange-500" />
    <span className="text-sm font-mono">
      {getRemainingTime(timerData.timerStart, timerData.duration)}
    </span>
    <Badge variant="secondary" className="text-xs">
      Etapa {timerData.etapa}
    </Badge>
  </div>
) : (
  <Button
    variant="outline"
    size="sm"
    onClick={() =>
      sendMessage({
        action: "startTimer",
        chamado: alert.chamado,
        etapa: 1,
        duration: 300, // exemplo: 5 min
      })
    }
  >
    <Play className="h-3 w-3 mr-1" />
    Iniciar
  </Button>
)}

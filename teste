import { useState, useEffect, useCallback, useRef } from 'react';
import { toast } from '@/hooks/use-toast';

export interface TimerState {
  chamado: number;
  operador?: string;
  statusFinal?: string;
  level1_timerStart?: string;
  level1_duration?: number;
  level1_status?: 'running' | 'paused' | 'stopped';
  level1_observacao?: string;
  level2_timerStart?: string;
  level2_duration?: number;
  level2_status?: 'running' | 'paused' | 'stopped';
  level2_observacao?: string;
}

export interface WebSocketMessage {
  event: 'startTimer' | 'updateObservacao' | 'updateOperador' | 'updateStatusFinal' | 'getState';
  chamado: number;
  level?: number;
  state?: TimerState;
}

export interface SendMessage {
  action: 'startTimer' | 'updateObservacao' | 'updateOperador' | 'updateStatusFinal' | 'getState';
  chamado: number;
  level?: number;
  duration?: number;
  observacao?: string;
  operador?: string;
  statusFinal?: string;
}

export const useWebsocketTimers = () => {
  const [timers, setTimers] = useState<Map<number, TimerState>>(new Map());
  const [isConnected, setIsConnected] = useState(false);
  const ws = useRef<WebSocket | null>(null);
  const reconnectAttempts = useRef(0);
  const maxReconnectAttempts = 5;
  const reconnectTimeout = useRef<NodeJS.Timeout | null>(null);

  const connect = useCallback(() => {
    try {
      const wsUrl = 'wss://rsgjd6wsza.execute-api.us-east-1.amazonaws.com';
      ws.current = new WebSocket(wsUrl);

      ws.current.onopen = () => {
        console.log('WebSocket conectado');
        setIsConnected(true);
        reconnectAttempts.current = 0;
        
        toast({
          title: "Conectado",
          description: "WebSocket conectado com sucesso",
        });
      };

      ws.current.onmessage = (event) => {
        try {
          const message: WebSocketMessage = JSON.parse(event.data);
          console.log('Mensagem recebida:', message);
          
          if (message.state && message.chamado) {
            setTimers(prev => {
              const newTimers = new Map(prev);
              newTimers.set(message.chamado, message.state!);
              return newTimers;
            });
          }
        } catch (error) {
          console.error('Erro ao processar mensagem WebSocket:', error);
        }
      };

      ws.current.onclose = (event) => {
        console.log('WebSocket desconectado:', event.code, event.reason);
        setIsConnected(false);

        // Tentar reconectar apenas se não foi um fechamento intencional
        if (event.code !== 1000 && reconnectAttempts.current < maxReconnectAttempts) {
          reconnectAttempts.current++;
          const delay = Math.min(1000 * Math.pow(2, reconnectAttempts.current), 30000);
          
          console.log(`Tentando reconectar em ${delay}ms (tentativa ${reconnectAttempts.current})`);
          
          reconnectTimeout.current = setTimeout(() => {
            connect();
          }, delay);
        }
      };

      ws.current.onerror = (error) => {
        console.error('Erro WebSocket:', error);
        toast({
          title: "Erro de Conexão",
          description: "Erro na conexão WebSocket. Tentando reconectar...",
          variant: "destructive",
        });
      };

    } catch (error) {
      console.error('Erro ao conectar WebSocket:', error);
    }
  }, []);

  const disconnect = useCallback(() => {
    if (reconnectTimeout.current) {
      clearTimeout(reconnectTimeout.current);
      reconnectTimeout.current = null;
    }
    
    if (ws.current) {
      ws.current.close(1000, 'Desconexão intencional');
      ws.current = null;
    }
    
    setIsConnected(false);
  }, []);

  const sendMessage = useCallback((message: SendMessage) => {
    if (ws.current && ws.current.readyState === WebSocket.OPEN) {
      try {
        console.log('Enviando mensagem:', message);
        ws.current.send(JSON.stringify(message));
        return true;
      } catch (error) {
        console.error('Erro ao enviar mensagem:', error);
        toast({
          title: "Erro ao Enviar",
          description: "Não foi possível enviar a mensagem",
          variant: "destructive",
        });
        return false;
      }
    } else {
      console.warn('WebSocket não está conectado');
      toast({
        title: "Não Conectado",
        description: "WebSocket não está conectado. Tentando reconectar...",
        variant: "destructive",
      });
      connect();
      return false;
    }
  }, [connect]);

  // Funções específicas para cada ação
  const startTimer = useCallback((chamado: number, level: number, duration: number = 1200) => {
    return sendMessage({
      action: 'startTimer',
      chamado,
      level,
      duration
    });
  }, [sendMessage]);

  const updateObservacao = useCallback((chamado: number, level: number, observacao: string) => {
    return sendMessage({
      action: 'updateObservacao',
      chamado,
      level,
      observacao
    });
  }, [sendMessage]);

  const updateOperador = useCallback((chamado: number, operador: string) => {
    return sendMessage({
      action: 'updateOperador',
      chamado,
      operador
    });
  }, [sendMessage]);

  const updateStatusFinal = useCallback((chamado: number, statusFinal: string) => {
    return sendMessage({
      action: 'updateStatusFinal',
      chamado,
      statusFinal
    });
  }, [sendMessage]);

  const getState = useCallback((chamado: number) => {
    return sendMessage({
      action: 'getState',
      chamado
    });
  }, [sendMessage]);

  // Função para calcular tempo restante
  const getRemainingTime = useCallback((chamado: number, level: number): number => {
    const timerState = timers.get(chamado);
    if (!timerState) return 0;

    const levelPrefix = `level${level}` as 'level1' | 'level2';
    const timerStart = timerState[`${levelPrefix}_timerStart`];
    const duration = timerState[`${levelPrefix}_duration`];
    const status = timerState[`${levelPrefix}_status`];

    if (!timerStart || !duration || status !== 'running') return 0;

    try {
      const startTime = new Date(timerStart).getTime();
      const endTime = startTime + (duration * 1000);
      const now = Date.now();
      
      return Math.max(0, Math.floor((endTime - now) / 1000));
    } catch (error) {
      console.error('Erro ao calcular tempo restante:', error);
      return 0;
    }
  }, [timers]);

  // Formatar tempo para exibição
  const formatTime = useCallback((seconds: number): string => {
    const hours = Math.floor(seconds / 3600);
    const minutes = Math.floor((seconds % 3600) / 60);
    const secs = seconds % 60;
    
    if (hours > 0) {
      return `${hours.toString().padStart(2, '0')}:${minutes.toString().padStart(2, '0')}:${secs.toString().padStart(2, '0')}`;
    }
    return `${minutes.toString().padStart(2, '0')}:${secs.toString().padStart(2, '0')}`;
  }, []);

  // Verificar se um timer está ativo
  const isTimerActive = useCallback((chamado: number, level: number): boolean => {
    const timerState = timers.get(chamado);
    if (!timerState) return false;

    const levelPrefix = `level${level}` as 'level1' | 'level2';
    const status = timerState[`${levelPrefix}_status`];
    
    return status === 'running';
  }, [timers]);

  // Conectar automaticamente quando o hook é montado
  useEffect(() => {
    connect();
    
    return () => {
      disconnect();
    };
  }, [connect, disconnect]);

  // Timer para atualizar o display a cada segundo
  useEffect(() => {
    const interval = setInterval(() => {
      // Força re-render para atualizar os timers na tela
      setTimers(prev => new Map(prev));
    }, 1000);

    return () => clearInterval(interval);
  }, []);

  return {
    timers,
    isConnected,
    sendMessage,
    startTimer,
    updateObservacao,
    updateOperador,
    updateStatusFinal,
    getState,
    getRemainingTime,
    formatTime,
    isTimerActive,
    connect,
    disconnect
  };
};

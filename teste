// Renderiza o componente de confirmação/escalação
  const renderConfirmationColumn = (alert: AlertData) => {
    const state = escalationStates[alert.chamado];
    const currentObservation = confirmationObservations[alert.chamado] || '';
    const showConfirmation = showStatusConfirmation[alert.chamado];
    const pendingChange = pendingStatusChange[alert.chamado];
    
    // Debug: log do estado atual
    console.log(`Renderizando coluna confirmação para chamado ${alert.chamado}:`, {
      state,
      currentObservation,
      showConfirmation,
      pendingChange
    });
    
    if (!state) {
      return (
        <div className="text-center">
          <Button
            size="sm"
            variant="outline"
            onClick={() => startConfirmation(alert.chamado)}
            className="h-8 px-3 text-xs"
          >
            <Play className="h-3 w-3 mr-1" />
            Iniciar
          </Button>
        </div>
      );
    }

    switch (state.status) {
      case 'pending':
        return (
          <div className="text-center space-y-3">
            <div className="flex items-center justify-center gap-2">
              <Clock className="h-4 w-4 text-warning" />
              <span className="text-sm font-mono">{formatTime(state.timeRemaining)}</span>
            </div>
            
            <div className="space-y-2">
               <div className="space-y-1">
                 <Label className="text-xs">
                   Observações <span className="text-destructive">*</span>
                 </Label>
                 <Textarea
                   key={`confirmation-textarea-${alert.chamado}`}
                   placeholder="Observações são obrigatórias para confirmação"
                   value={currentObservation}
                   onChange={(e) => handleConfirmationObservationChange(alert.chamado, e.target.value)}
                   className="text-xs min-h-[60px] resize-none"
                   required
                 />
                 {!currentObservation.trim() && (
                   <p className="text-xs text-destructive">
                     Observações são obrigatórias
                   </p>
                 )}
               </div>
              
              <div className="flex gap-1">
                <Button
                  size="sm"
                  variant="default"
                  onClick={() => confirmReceived(alert.chamado)}
                  disabled={!currentObservation.trim()}
                  className="h-8 px-3 text-xs flex-1 disabled:opacity-50 disabled:cursor-not-allowed"
                >
                  <Check className="h-3 w-3 mr-1" />
                  Confirmar
                </Button>
                <Button
                  size="sm"
                  variant="secondary"
                  onClick={() => startEscalation(alert.chamado, 1)}
                  disabled={!currentObservation.trim()}
                  className="h-8 px-3 text-xs flex-1 disabled:opacity-50 disabled:cursor-not-allowed"
                >
                  <FastForward className="h-3 w-3 mr-1" />
                  Próxima Etapa
                </Button>
              </div>
            </div>
          </div>
        );

      case 'confirmed':
        return (
          <div className="text-center space-y-2">
            <div className="flex gap-1 justify-center">
              <Badge variant="default" className="bg-green-600 text-white">
                <CheckCircle className="h-3 w-3 mr-1" />
                Confirmado
              </Badge>
              <Button
                size="sm"
                variant="outline"
                onClick={() => startEscalation(alert.chamado, 1)}
                className="h-6 px-2 text-xs"
              >
                <FastForward className="h-3 w-3 mr-1" />
                Próxima
              </Button>
            </div>
            {state.observations && (
              <div className="text-xs text-muted-foreground p-2 bg-muted rounded text-left">
                <strong>Observações:</strong><br />
                {state.observations}
              </div>
            )}
          </div>
        );

      case 'escalating':
        const levelNames = { 1: '1ª', 2: '2ª', 3: '3ª', 4: '4ª' };
        
        return (
          <div className="space-y-2">
            {state.currentLevel > 0 && (
              <div className="text-center">
                <Badge variant="destructive" className="text-xs">
                  {levelNames[state.currentLevel as keyof typeof levelNames]} Escalação
                </Badge>
                {state.timerActive && (
                  <div className="flex items-center justify-center gap-1 mt-1">
                    <Clock className="h-3 w-3 text-warning" />
                    <span className="text-xs font-mono">{formatTime(state.timeRemaining)}</span>
                  </div>
                )}
              </div>
            )}

            {!state.isAttended && (
              <>
                {/* Campo de observações sempre visível quando em escalação */}
                {state.currentLevel === 0 || (!state.timerActive && state.currentLevel < 4) ? (
                  <div className="space-y-1">
                    <div className="flex gap-1">
                      {/* Botão Voltar - só aparece se não estiver no nível 0 */}
                      {state.currentLevel > 0 && (
                        <Button
                          size="sm"
                          variant="outline"
                          onClick={() => goBackEscalation(alert.chamado)}
                          className="h-6 px-2 text-xs flex-1"
                        >
                          <RotateCcw className="h-3 w-3 mr-1" />
                          Voltar
                        </Button>
                      )}
                      
                       {/* Próxima escalação */}
                       {state.currentLevel < 4 && (
                         <Button
                           size="sm"
                           variant="outline"
                           onClick={() => startEscalation(alert.chamado, (state.currentLevel + 1) as 1 | 2 | 3 | 4)}
                           className="h-6 px-2 text-xs flex-1"
                         >
                           Iniciar {levelNames[(state.currentLevel + 1) as keyof typeof levelNames]} Escalação
                         </Button>
                       )}
                    </div>
                  </div>
                ) : (
                  <div className="space-y-2">
                    {/* Mostrar confirmação de status quando pendente */}
                    {showConfirmation ? (
                      <div className="space-y-2 p-2 border rounded bg-background">
                        <div className="text-xs font-medium">
                          Confirmar: {pendingChange?.status === 'attended' ? 'Atendida' : 'Não Atendida'}
                        </div>
                        
                         <div className="space-y-1">
                           <Label className="text-xs">
                             Observações <span className="text-destructive">*</span>
                           </Label>
                           <Textarea
                             key={`pending-textarea-${alert.chamado}`}
                             placeholder="Observações obrigatórias..."
                             value={pendingChange?.observations || ''}
                             onChange={(e) => handlePendingObservationChange(alert.chamado, e.target.value)}
                             className="text-xs min-h-[60px] resize-none"
                             required
                           />
                           {!pendingChange?.observations?.trim() && (
                             <p className="text-xs text-destructive">
                               Observações são obrigatórias
                             </p>
                           )}
                         </div>
                        
                        <div className="flex gap-1">
                          <Button
                            size="sm"
                            variant="default"
                            onClick={() => confirmStatusChange(alert.chamado)}
                            disabled={!pendingChange?.observations?.trim()}
                            className="h-6 px-2 text-xs flex-1"
                          >
                            <Check className="h-3 w-3 mr-1" />
                            Confirmar
                          </Button>
                          <Button
                            size="sm"
                            variant="outline"
                            onClick={() => cancelStatusChange(alert.chamado)}
                            className="h-6 px-2 text-xs flex-1"
                          >
                            <X className="h-3 w-3 mr-1" />
                            Cancelar
                          </Button>
                        </div>
                      </div>
                    ) : (
                      <>
                        <div className="flex gap-1">
                          {/* Botão Voltar */}
                          <Button
                            size="sm"
                            variant="outline"
                            onClick={() => goBackEscalation(alert.chamado)}
                            className="h-6 px-2 text-xs flex-1"
                          >
                            <RotateCcw className="h-3 w-3 mr-1" />
                            Voltar
                          </Button>
                          
                          {/* Botão Avançar Escalação sempre visível quando há observações */}
                        </div>

                        <Select
                          value=""
                          onValueChange={(value) => prepareStatusChange(alert.chamado, value)}
                        >
                          <SelectTrigger className="h-6 text-xs">
                            <SelectValue placeholder="Selecionar Status" />
                          </SelectTrigger>
                          <SelectContent>
                            <SelectItem value="attended">Atendida</SelectItem>
                            <SelectItem value="not-attended">Não Atendida</SelectItem>
                          </SelectContent>
                        </Select>
                      </>
                    )}
                  </div>
                )}
              </>
            )}
          </div>
        );

      case 'completed':
        return (
          <div className="text-center space-y-2">
            <div className="flex gap-1 justify-center">
              <Badge variant="default" className="bg-green-600 text-white">
                <CheckCircle className="h-3 w-3 mr-1" />
                Finalizado
              </Badge>
            </div>
            {state.observations && (
              <div className="text-xs text-muted-foreground p-2 bg-muted rounded text-left">
                <strong>Observações:</strong><br />
                {state.observations}
              </div>
            )}
          </div>
        );

      default:
        return null;
    }
  };


  return (
    <TooltipProvider>
      <Card className="bg-card border-border">
        <CardHeader />
        <CardContent>
          {/* Layout para Mobile (oculto em desktop) */}
          <div className="block lg:hidden space-y-4">
            {loading ? (
              <div className="text-center py-8">
                <div className="inline-block animate-spin rounded-full h-8 w-8 border-b-2 border-primary mb-4"></div>
                <p>Carregando dados...</p>
              </div>
            ) : sortedAndPaginatedData.length === 0 ? (
              <div className="text-center py-8 text-muted-foreground">
                Nenhum dado disponível
              </div>
            ) : (
              sortedAndPaginatedData.map((alert) => {
                const isChat = acionadosSet.has(alert.chamado.toString());
                const isExpanded = expandedRows.has(alert.id);
                return (
                  <Card key={alert.id} className="bg-secondary border-border w-full">
                    <CardContent className="p-3 sm:p-4">
                      {/* Linha 1 - chamado, severidade_chamado e classificação */}
                      <div className="flex items-center justify-between mb-3 gap-2 flex-wrap">
                        <div className="flex items-center gap-1 sm:gap-2 flex-wrap">
                          <Badge variant="outline" className="text-xs">
                            <Button
                              variant="link"
                              size="sm"
                              className="text-xs p-0 hover:underline"
                              onClick={() => handleChamadoClick(alert)}
                            >
                              {alert.chamado}
                            </Button>
                          </Badge>
                          <Badge variant="outline" className="text-xs max-w-[100px] truncate">
                            {alert.tipo_chamado}
                          </Badge>
                          <Badge className={`${getSeverityColor(alert.severidade_chamado)} text-xs`}>
                            {alert.severidade_chamado}
                          </Badge>
                        </div>
                      </div>

                      <div className="space-y-2">
                        {/* Título */}
                        <div className="w-full">
                          <p className="text-sm font-medium break-words">
                            {truncateText(alert.resumo_chamado, isExpanded ? 200 : 60)}
                          </p>
                        </div>

                        {/* Linha 2 - grupo_chamado e status */}
                        <div className="flex items-center justify-between text-xs text-muted-foreground gap-2">
                          <span className="text-sm font-semibold text-foreground truncate flex-1">
                            {alert.grupo_chamado}
                          </span>
                          <span className="truncate">{alert.status_chamado}</span>
                        </div>

                        {/* Linha 3 - abertura_chamado */}
                        <div className="text-xs text-muted-foreground">
                          {formatDate(alert.abertura_chamado)}
                        </div>

                        {/* Status Acionado Mobile */}
                        <div className="flex items-center gap-2">
                          <span className="text-xs text-muted-foreground">Status:</span>
                        </div>

                        {/* Confirmação Mobile */}
                        <div className="border-t pt-2">
                          <div className="text-xs text-muted-foreground mb-1">Confirmação:</div>
                          {renderConfirmationColumn(alert)}
                        </div>

                        {/* Botões */}
                        <div className="flex items-center justify-between pt-3 gap-2">
                          <div className="flex items-center gap-2">
                            {alert.tipo_chamado.toLowerCase().includes('incidente') && (
                              <Button
                                variant="outline"
                                size="sm"
                                onClick={() => handleIncidentClick(alert)}
                                className="h-7 px-2 text-xs"
                              >
                                <ExternalLink className="h-3 w-3 mr-1" />
                                <span className="hidden sm:inline">Crise</span>
                              </Button>
                            )}
                          </div>

                          <Button
                            variant={isChat ? 'default' : 'outline'}
                            size="sm"
                            onClick={() => !isChat && handleAcknowledgment(alert)}
                            disabled={isChat}
                            className={`h-7 px-2 sm:px-3 text-xs flex-shrink-0 ${isChat
                              ? 'bg-success text-success-foreground hover:bg-success/90'
                              : 'border-border hover:bg-accent'
                              }`}
                          >
                            {isChat ? (
                              <>
                                <Check className="h-3 w-3 mr-1" />
                                <span className="hidden sm:inline">Acionado</span>
                              </>
                            ) : (
                              <>
                                <AlertTriangle className="h-3 w-3 mr-1" />
                                <span className="hidden sm:inline">Acionar</span>
                              </>
                            )}
                          </Button>
                        </div>
                      </div>
                    </CardContent>
                  </Card>
                );
              })
            )}

            {/* Paginação Mobile */}
            {!loading && sortedAndPaginatedData.length > 0 && totalPages > 1 && (
              <div className="flex items-center justify-between mt-4 px-2">
                <div className="text-sm text-muted-foreground">
                  Página {currentPage} de {totalPages}
                </div>
                <div className="flex items-center gap-1">
                  <Button
                    variant="outline"
                    size="sm"
                    onClick={() => handlePageChange(currentPage - 1)}
                    disabled={currentPage === 1}
                    className="h-8 w-8 p-0"
                  >
                    <ChevronLeft className="h-4 w-4" />
                  </Button>
                  <Button
                    variant="outline"
                    size="sm"
                    onClick={() => handlePageChange(currentPage + 1)}
                    disabled={currentPage === totalPages}
                    className="h-8 w-8 p-0"
                  >
                    <ChevronRight className="h-4 w-4" />
                  </Button>
                </div>
              </div>
            )}
          </div>

          {/* Layout para Desktop */}
          <div className="hidden lg:block">
            <div className="w-full overflow-x-auto">
              <div className="min-w-[1000px]">
                <Table>
                  <TableHeader>
                    <TableRow className="border-border hover:bg-accent">
                      <TableHead className="text-muted-foreground min-w-[80px]">
                        <Button
                          variant="ghost"
                          className="h-auto p-0 font-medium text-muted-foreground hover:text-foreground text-xs"
                          onClick={() => handleSort('chamado')}
                        >
                          Chamado
                          {getSortIcon('chamado')}
                        </Button>
                      </TableHead>
                      <TableHead className="text-muted-foreground min-w-[100px]">
                        <Button
                          variant="ghost"
                          className="h-auto p-0 font-medium text-muted-foreground hover:text-foreground text-xs"
                          onClick={() => handleSort('tipo_chamado')}
                        >
                          Classificação
                          {getSortIcon('tipo_chamado')}
                        </Button>
                      </TableHead>
                      <TableHead className="text-muted-foreground min-w-[90px]">
                        <Button
                          variant="ghost"
                          className="h-auto p-0 font-medium text-muted-foreground hover:text-foreground text-xs"
                          onClick={() => handleSort('grupo_chamado')}
                        >
                          Grupo
                          {getSortIcon('grupo_chamado')}
                        </Button>
                      </TableHead>
                      <TableHead className="text-muted-foreground min-w-[80px]">
                        <Button
                          variant="ghost"
                          className="h-auto p-0 font-medium text-muted-foreground hover:text-foreground text-xs"
                          onClick={() => handleSort('status_chamado')}
                        >
                          Status
                          {getSortIcon('status_chamado')}
                        </Button>
                      </TableHead>
                      <TableHead className="text-muted-foreground min-w-[100px]">
                        <Button
                          variant="ghost"
                          className="h-auto p-0 font-medium text-muted-foreground hover:text-foreground text-xs"
                          onClick={() => handleSort('abertura_chamado')}
                        >
                          Abertura
                          {getSortIcon('abertura_chamado')}
                        </Button>
                      </TableHead>
                      <TableHead className="text-muted-foreground min-w-[150px] max-w-[200px]">
                        <Button
                          variant="ghost"
                          className="h-auto p-0 font-medium text-muted-foreground hover:text-foreground text-xs"
                          onClick={() => handleSort('resumo_chamado')}
                        >
                          Título
                          {getSortIcon('resumo_chamado')}
                        </Button>
                      </TableHead>
                      <TableHead className="text-muted-foreground min-w-[90px]">
                        <Button
                          variant="ghost"
                          className="h-auto p-0 font-medium text-muted-foreground hover:text-foreground text-xs"
                          onClick={() => handleSort('severidade_chamado')}
                        >
                          Severidade
                          {getSortIcon('severidade_chamado')}
                        </Button>
                      </TableHead>

                      <TableHead className="text-muted-foreground min-w-[120px]">Confirmação</TableHead>
                      <TableHead className="text-muted-foreground min-w-[70px]">Chat</TableHead>
                    </TableRow>
                  </TableHeader>
                  <TableBody>
                    {loading ? (
                      <TableRow>
                        <TableCell colSpan={10} className="text-center py-8">
                          Carregando dados...
                        </TableCell>
                      </TableRow>
                    ) : sortedAndPaginatedData.length === 0 ? (
                      <TableRow>
                        <TableCell colSpan={10} className="text-center py-8 text-muted-foreground">
                          Nenhum dado disponível
                        </TableCell>
                      </TableRow>
                    ) : (
                      sortedAndPaginatedData.map((alert) => {
                        const isChat = acionadosSet.has(alert.chamado.toString());
                        return (
                          <TableRow
                            key={alert.id}
                            className="border-border hover:bg-accent transition-colors"
                          >
                            <TableCell className="font-medium">
                              <Button
                                variant="link"
                                size="sm"
                                className="p-0 text-foreground hover:underline text-xs"
                                onClick={() => handleChamadoClick(alert)}
                              >
                                {alert.chamado}
                              </Button>
                            </TableCell>
                            <TableCell>
                              <Tooltip>
                                <TooltipTrigger asChild>
                                  <span className="truncate block max-w-[80px] text-xs">
                                    {alert.tipo_chamado}
                                  </span>
                                </TooltipTrigger>
                                <TooltipContent>
                                  <p className="max-w-xs">{alert.tipo_chamado}</p>
                                </TooltipContent>
                              </Tooltip>
                            </TableCell>
                            <TableCell className="text-xs">{alert.grupo_chamado}</TableCell>
                            <TableCell className="text-xs">{alert.status_chamado}</TableCell>
                            <TableCell className="text-xs">
                              {formatDate(alert.abertura_chamado)}
                            </TableCell>
                            <TableCell>
                              <div className="flex items-center gap-2">
                                <Tooltip>
                                  <TooltipTrigger asChild>
                                    <span className="truncate block max-w-[120px] text-xs">
                                      {alert.resumo_chamado}
                                    </span>
                                  </TooltipTrigger>
                                  <TooltipContent>
                                    <p className="max-w-md">{alert.resumo_chamado}</p>
                                  </TooltipContent>
                                </Tooltip>
                                {alert.tipo_chamado.toLowerCase().includes('incidente') && (
                                  <Button
                                    variant="ghost"
                                    size="sm"
                                    onClick={() => handleIncidentClick(alert)}
                                    className="p-1 h-auto hover:bg-accent flex-shrink-0"
                                    title="Iniciar processo de crise"
                                  >
                                    <ExternalLink className="h-3 w-3" />
                                  </Button>
                                )}
                              </div>
                            </TableCell>
                            <TableCell>
                              <Badge className={`${getSeverityColor(alert.severidade_chamado)} text-xs`}>
                                {alert.severidade_chamado}
                              </Badge>
                            </TableCell>
                            <TableCell className="min-w-[120px]">
                              {renderConfirmationColumn(alert)}
                            </TableCell>
                            <TableCell>
                              <Button
                                variant={isChat ? "default" : "outline"}
                                size="sm"
                                onClick={() => !isChat && handleAcknowledgment(alert)}
                                disabled={isChat}
                                className={`${isChat
                                  ? 'bg-success text-success-foreground hover:bg-success/90'
                                  : 'border-border hover:bg-accent'
                                  } h-7 w-7 p-0`}
                              >
                                {isChat ? (
                                  <Check className="h-3 w-3" />
                                ) : (
                                  <AlertTriangle className="h-3 w-3" />
                                )}
                              </Button>
                            </TableCell>
                          </TableRow>
                        );
                      })
                    )}
                  </TableBody>
                </Table>
              </div>
            </div>

            {/* Paginação Desktop */}
            {!loading && sortedAndPaginatedData.length > 0 && totalPages > 1 && (
              <div className="flex items-center justify-between mt-4 pt-4 border-t border-border">
                <div className="text-sm text-muted-foreground">
                  Mostrando {((currentPage - 1) * itemsPerPage) + 1} a {Math.min(currentPage * itemsPerPage, alertData.length)} de {alertData.length} registros
                </div>
                <div className="flex items-center gap-2">
                  <Button
                    variant="outline"
                    size="sm"
                    onClick={() => handlePageChange(currentPage - 1)}
                    disabled={currentPage === 1}
                    className="h-8 px-3"
                  >
                    <ChevronLeft className="h-4 w-4 mr-1" />
                    Anterior
                  </Button>

                  <div className="flex items-center gap-1">
                    {[...Array(Math.min(totalPages, 5))].map((_, index) => {
                      let page;
                      if (totalPages <= 5) {
                        page = index + 1;
                      } else if (currentPage <= 3) {
                        page = index + 1;
                      } else if (currentPage >= totalPages - 2) {
                        page = totalPages - 4 + index;
                      } else {
                        page = currentPage - 2 + index;
                      }

                      return (
                        <Button
                          key={page}
                          variant={currentPage === page ? "default" : "outline"}
                          size="sm"
                          onClick={() => handlePageChange(page)}
                          className="h-8 w-8 p-0"
                        >
                          {page}
                        </Button>
                      );
                    })}
                  </div>

                  <Button
                    variant="outline"
                    size="sm"
                    onClick={() => handlePageChange(currentPage + 1)}
                    disabled={currentPage === totalPages}
                    className="h-8 px-3"
                  >
                    Próximo
                    <ChevronRight className="h-4 w-4 ml-1" />
                  </Button>
                </div>
              </div>
            )}
          </div>

          {/* Dialog do Modal de Chamado */}
          <Dialog open={chamadoModalOpen} onOpenChange={setChamadoModalOpen}>
            <DialogContent className="max-w-3xl max-h-[80vh] border-border shadow-2xl overflow-y-auto">
              <DialogHeader className="pb-6 border-b border-border">
                <DialogTitle className="text-left">
                  {/* Header com design melhorado */}
                  <div className="relative overflow-hidden rounded-2xl p-6 mb-4 bg-gradient-to-r from-primary to-primary/80">
                    {/* Número do chamado e título */}
                    <div className="relative z-10 flex items-start gap-4">
                      <div className="p-3 rounded-xl bg-white/20 backdrop-blur-sm border border-white/30 shadow-lg">
                        {selectedIncident?.tipo_chamado === "Solicitação" ? (
                          <Zap className="h-6 w-6 text-white drop-shadow-sm" />
                        ) : selectedIncident?.tipo_chamado === "Incidente" ? (
                          <AlertTriangle className="h-6 w-6 text-white drop-shadow-sm" />
                        ) : (
                          <Zap className="h-6 w-6 text-white drop-shadow-sm" />
                        )}
                      </div>

                      <div className="flex-1">
                        <div className="flex items-center gap-3 mb-2">
                          <span className="text-2xl font-bold text-white drop-shadow-sm">
                            {selectedIncident?.chamado}
                          </span>
                          <div className="h-1 flex-1 bg-white/20 rounded-full">
                            <div className="h-full w-3/4 bg-white/40 rounded-full"></div>
                          </div>
                        </div>

                        <h2 className="text-lg font-medium text-white/95 leading-relaxed drop-shadow-sm">
                          {selectedIncident?.resumo_chamado}
                        </h2>
                      </div>
                    </div>

                    {/* Status badges */}
                    {selectedIncident && (
                      <div className="relative z-10 flex flex-wrap items-center gap-3 mt-6">
                        <div className="animate-fade-in">
                          <div className={`${getStatusBadgeClass(selectedIncident.chat)} flex items-center gap-2 px-4 py-2 rounded-xl 
                              backdrop-blur-sm border border-white/20 shadow-lg`}>
                            {getStatusIcon(selectedIncident.chat)}
                            <span className="font-medium text-sm">
                              {getStatusText(selectedIncident.chat)}
                            </span>
                          </div>
                        </div>

                        <div className="animate-fade-in">
                          <div className="bg-white/20 text-white flex items-center gap-2 px-4 py-2 rounded-xl 
                              backdrop-blur-sm border border-white/30 shadow-lg">
                            <span className="font-medium text-sm">{selectedIncident.tipo_chamado}</span>
                          </div>
                        </div>
                      </div>
                    )}
                  </div>
                </DialogTitle>
              </DialogHeader>

              {/* Conteúdo principal */}
              {selectedIncident && (
                <div className="grid grid-cols-1 md:grid-cols-2 gap-6 mt-6">
                  <div className="space-y-4">
                    {/* Card Grupo */}
                    <div className="group relative overflow-hidden rounded-xl bg-card border border-border p-5 
                        shadow-lg hover:shadow-xl transition-all duration-300 hover:-translate-y-1">
                      <div className="absolute top-0 left-0 w-full h-1 bg-gradient-to-r from-primary to-blue-500"></div>
                      <div className="flex items-start gap-4">
                        <div className="p-2 rounded-lg bg-primary/10 group-hover:bg-primary/20 transition-colors duration-300">
                          <Group className="h-5 w-5 text-primary" />
                        </div>
                        <div className="flex-1">
                          <p className="text-sm text-muted-foreground font-medium mb-1">Grupo</p>
                          <p className="font-bold text-foreground text-lg">{selectedIncident.grupo_chamado}</p>
                        </div>
                      </div>
                    </div>

                    {/* Card Abertura */}
                    <div className="group relative overflow-hidden rounded-xl bg-card border border-border p-5 
                        shadow-lg hover:shadow-xl transition-all duration-300 hover:-translate-y-1">
                      <div className="absolute top-0 left-0 w-full h-1 bg-gradient-to-r from-green-500 to-emerald-500"></div>
                      <div className="flex items-start gap-4">
                        <div className="p-2 rounded-lg bg-green-500/10 group-hover:bg-green-500/20 transition-colors duration-300">
                          <Calendar className="h-5 w-5 text-green-600" />
                        </div>
                        <div className="flex-1">
                          <p className="text-sm text-muted-foreground font-medium mb-1">Data de Abertura</p>
                          <p className="font-bold text-foreground text-lg">{formatDate(selectedIncident.abertura_chamado)}</p>
                        </div>
                      </div>
                    </div>
                  </div>

                  <div className="space-y-4">
                    {/* Card Status */}
                    <div className="group relative overflow-hidden rounded-xl bg-card border border-border p-5 
                        shadow-lg hover:shadow-xl transition-all duration-300 hover:-translate-y-1">
                      <div className="absolute top-0 left-0 w-full h-1 bg-gradient-to-r from-blue-500 to-cyan-500"></div>
                      <div className="flex items-start gap-4">
                        <div className="p-2 rounded-lg bg-blue-500/10 group-hover:bg-blue-500/20 transition-colors duration-300">
                          <Info className="h-5 w-5 text-blue-600" />
                        </div>
                        <div className="flex-1">
                          <p className="text-sm text-muted-foreground font-medium mb-1">Status</p>
                          <p className="font-bold text-foreground text-lg">{selectedIncident.status_chamado}</p>
                        </div>
                      </div>
                    </div>

                    {/* Card Severidade */}
                    <div className="group relative overflow-hidden rounded-xl bg-card border border-border p-5 
                        shadow-lg hover:shadow-xl transition-all duration-300 hover:-translate-y-1">
                      <div className="absolute top-0 left-0 w-full h-1 bg-gradient-to-r from-red-500 to-orange-500"></div>
                      <div className="flex items-start gap-4">
                        <div className="p-2 rounded-lg bg-red-500/10 group-hover:bg-red-500/20 transition-colors duration-300">
                          <Flame className="h-5 w-5 text-red-600" />
                        </div>
                        <div className="flex-1">
                          <p className="text-sm text-muted-foreground font-medium mb-1">Severidade</p>
                          <p className="font-bold text-foreground text-lg">{selectedIncident.severidade_chamado}</p>
                        </div>
                      </div>
                    </div>
                  </div>
                </div>
              )}
            </DialogContent>
          </Dialog>
        </CardContent>
      </Card>
    </TooltipProvider>
  );
};

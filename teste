import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';
import { useState } from 'react';
import { useChatAcionados } from '@/hooks/use-chat-acionados';
import { AlertTriangle, AlertCircle, Clock, Timer, UserCheck, BarChart3, MessageCircle, CheckCircle2 } from 'lucide-react';
import { cn } from '@/lib/utils';

interface AlertData {
  id: string;
  chamado: string;
  tipo_chamado: string;
  grupo_chamado: string;
  status_chamado: string;
  abertura_chamado: string;
  resumo_chamado: string;
  severidade_chamado: string;
  acionado: string;
  chat: boolean;
}

interface MonitoringCardsProps {
  alertData: AlertData[];
  onFilterSelect: (filter: string | null) => void;
}

export const MonitoringCards = ({ alertData, onFilterSelect }: MonitoringCardsProps) => {
  const [activeFilter, setActiveFilter] = useState<string | null>(null);
  
  // Usando o hook para obter os chamados acionados
  const { isAcionado } = useChatAcionados();

  // Função toggle do filtro
  const handleCardClick = (filterKey: string) => {
    if (activeFilter === filterKey) {
      setActiveFilter(null);
      onFilterSelect(null);
    } else {
      setActiveFilter(filterKey);
      onFilterSelect(filterKey);
    }
  };

  // Função para calcular tempo restante em minutos
  const getTimeRemaining = (openingTime: string) => {
    const now = new Date();
    const opening = new Date(openingTime);
    const diffMs = now.getTime() - opening.getTime();
    const diffMinutes = Math.floor(diffMs / (1000 * 60));
    
    // Assumindo SLA de 60 minutos para alertas críticos
    const slaMinutes = 60;
    return slaMinutes - diffMinutes;
  };

  // Métricas básicas
  const total = alertData.length;
  
  const pendenteEnvioChat = alertData.filter(alert => 
    !alert.chat && !isAcionado(alert.chamado)
  ).length;

  const confirmados = alertData.filter(alert => 
    alert.chat || isAcionado(alert.chamado)
  ).length;

  // Métricas baseadas em tempo
  const tempoExpirado = alertData.filter(alert => {
    const timeRemaining = getTimeRemaining(alert.abertura_chamado);
    return timeRemaining <= 0 && !isAcionado(alert.chamado);
  }).length;

  const dezMinutosRestantes = alertData.filter(alert => {
    const timeRemaining = getTimeRemaining(alert.abertura_chamado);
    return timeRemaining > 0 && timeRemaining <= 10 && !isAcionado(alert.chamado);
  }).length;

  const cincoMinutosRestantes = alertData.filter(alert => {
    const timeRemaining = getTimeRemaining(alert.abertura_chamado);
    return timeRemaining > 0 && timeRemaining <= 5 && !isAcionado(alert.chamado);
  }).length;

  const comOperador = alertData.filter(alert => 
    alert.acionado === 'OK' || isAcionado(alert.chamado)
  ).length;

  const cenariosCrise = alertData.filter(alert =>
    alert.severidade_chamado.includes('5') && !isAcionado(alert.chamado)
  ).length;

  return (
    <div className="grid grid-cols-1 md:grid-cols-4 lg:grid-cols-8 gap-4 w-full max-w-none">
      {/* Total */}
      <CompactCard
        title="Total"
        count={total}
        totalCount={alertData.length}
        icon={BarChart3}
        type="total"
        filterKey="TOTAL"
        isActive={activeFilter === 'TOTAL'}
        onClick={() => handleCardClick('TOTAL')}
      />

      {/* Pendente Envio Chat */}
      <CompactCard
        title="Pendente Envio Chat"
        count={pendenteEnvioChat}
        totalCount={alertData.length}
        icon={MessageCircle}
        type="pendente-chat"
        filterKey="PENDENTE_ENVIO_CHAT"
        isActive={activeFilter === 'PENDENTE_ENVIO_CHAT'}
        onClick={() => handleCardClick('PENDENTE_ENVIO_CHAT')}
      />

      {/* Confirmados */}
      <CompactCard
        title="Confirmados"
        count={confirmados}
        totalCount={alertData.length}
        icon={CheckCircle2}
        type="confirmados"
        filterKey="CONFIRMADOS"
        isActive={activeFilter === 'CONFIRMADOS'}
        onClick={() => handleCardClick('CONFIRMADOS')}
      />

      {/* Tempo Expirado */}
      <CompactCard
        title="Tempo Expirado"
        count={tempoExpirado}
        totalCount={alertData.length}
        icon={AlertTriangle}
        type="tempo-expirado"
        filterKey="TEMPO_EXPIRADO"
        isActive={activeFilter === 'TEMPO_EXPIRADO'}
        onClick={() => handleCardClick('TEMPO_EXPIRADO')}
      />

      {/* 10 Minutos Restantes */}
      <CompactCard
        title="10min Restantes"
        count={dezMinutosRestantes}
        totalCount={alertData.length}
        icon={Clock}
        type="dez-minutos"
        filterKey="DEZ_MINUTOS"
        isActive={activeFilter === 'DEZ_MINUTOS'}
        onClick={() => handleCardClick('DEZ_MINUTOS')}
      />

      {/* 5 Minutos Restantes */}
      <CompactCard
        title="5min Restantes"
        count={cincoMinutosRestantes}
        totalCount={alertData.length}
        icon={Timer}
        type="cinco-minutos"
        filterKey="CINCO_MINUTOS"
        isActive={activeFilter === 'CINCO_MINUTOS'}
        onClick={() => handleCardClick('CINCO_MINUTOS')}
      />

      {/* Com Operador */}
      <CompactCard
        title="Com Operador"
        count={comOperador}
        totalCount={alertData.length}
        icon={UserCheck}
        type="com-operador"
        filterKey="COM_OPERADOR"
        isActive={activeFilter === 'COM_OPERADOR'}
        onClick={() => handleCardClick('COM_OPERADOR')}
      />

      {/* Cenários de Crise */}
      <CompactCard
        title="Cenários de Crise"
        count={cenariosCrise}
        totalCount={alertData.length}
        icon={AlertCircle}
        type="cenarios-crise"
        filterKey="CENARIOS_CRISE"
        isActive={activeFilter === 'CENARIOS_CRISE'}
        onClick={() => handleCardClick('CENARIOS_CRISE')}
      />
    </div>
  );
};

interface CompactCardProps {
  title: string;
  count: number;
  totalCount: number;
  icon: React.ComponentType<any>;
  type: string;
  filterKey: string;
  isActive: boolean;
  onClick: () => void;
}

function CompactCard({ title, count, totalCount, icon: Icon, type, isActive, onClick }: CompactCardProps) {
  const typeStyles = {
    'total': {
      bg: 'bg-blue-500/10',
      border: 'border-blue-500/30',
      text: 'text-blue-600',
      hover: 'hover:bg-blue-500/20 hover:border-blue-500/50',
      animation: '',
    },
    'pendente-chat': {
      bg: 'bg-orange-500/10',
      border: 'border-orange-500/30',
      text: 'text-orange-600',
      hover: 'hover:bg-orange-500/20 hover:border-orange-500/50',
      animation: '',
    },
    'confirmados': {
      bg: 'bg-green-500/10',
      border: 'border-green-500/30',
      text: 'text-green-600',
      hover: 'hover:bg-green-500/20 hover:border-green-500/50',
      animation: '',
    },
    'tempo-expirado': {
      bg: 'bg-red-500/10',
      border: 'border-red-500/30',
      text: 'text-red-600',
      hover: 'hover:bg-red-500/20 hover:border-red-500/50',
      animation: count > 0 ? 'animate-pulse-critical' : '',
    },
    'dez-minutos': {
      bg: 'bg-yellow-500/10',
      border: 'border-yellow-500/30', 
      text: 'text-yellow-600',
      hover: 'hover:bg-yellow-500/20 hover:border-yellow-500/50',
      animation: count > 0 ? 'animate-pulse' : '',
    },
    'cinco-minutos': {
      bg: 'bg-amber-500/10',
      border: 'border-amber-500/30',
      text: 'text-amber-600',
      hover: 'hover:bg-amber-500/20 hover:border-amber-500/50',
      animation: count > 0 ? 'animate-pulse' : '',
    },
    'com-operador': {
      bg: 'bg-emerald-500/10',
      border: 'border-emerald-500/30',
      text: 'text-emerald-600',
      hover: 'hover:bg-emerald-500/20 hover:border-emerald-500/50',
      animation: '',
    },
    'cenarios-crise': {
      bg: 'bg-purple-500/10',
      border: 'border-purple-500/30',
      text: 'text-purple-600',
      hover: 'hover:bg-purple-500/20 hover:border-purple-500/50',
      animation: count > 0 ? 'animate-glow-crisis' : '',
    },
  };

  const style = typeStyles[type as keyof typeof typeStyles];

  return (
    <div
      onClick={onClick}
      className={cn(
        "p-6 rounded-lg border-2 cursor-pointer transition-all duration-300 hover:scale-105",
        style.bg,
        style.border,
        style.hover,
        style.animation,
        isActive && "ring-2 ring-primary/50 ring-offset-2 ring-offset-background"
      )}
    >
      <div className="flex flex-col items-center text-center space-y-3">
        <div className={cn("p-2 rounded-lg bg-black/20", style.text)}>
          <Icon size={20} />
        </div>
        
        <div className={cn("text-3xl font-bold", style.text)}>
          {count}
        </div>
        
        <div className="space-y-1">
          <div className={cn("text-xs font-medium uppercase tracking-wide", style.text)}>
            {title}
          </div>
          <div className="text-xs text-muted-foreground">
            {count === 0 ? "Nenhum pendente" : `${count} de ${totalCount}`}
          </div>
        </div>
      </div>
      
      {/* Active indicator */}
      {isActive && (
        <div className="absolute top-2 right-2 w-2 h-2 bg-primary rounded-full animate-pulse" />
      )}
    </div>
  );
}

interface CompactSubCardProps {
  label: string;
  count: number;
  type: string;
  filterKey: string;
  isActive: boolean;
  onClick: () => void;
}

function CompactSubCard({ label, count, type, isActive, onClick }: CompactSubCardProps) {
  const typeStyles = {
    'total': 'text-blue-600 border-blue-500/20 hover:border-blue-500/40',
    'pendente-chat': 'text-orange-600 border-orange-500/20 hover:border-orange-500/40',
    'confirmados': 'text-green-600 border-green-500/20 hover:border-green-500/40',
    'tempo-expirado': 'text-red-600 border-red-500/20 hover:border-red-500/40',
    'dez-minutos': 'text-yellow-600 border-yellow-500/20 hover:border-yellow-500/40',
    'cinco-minutos': 'text-amber-600 border-amber-500/20 hover:border-amber-500/40',
    'com-operador': 'text-emerald-600 border-emerald-500/20 hover:border-emerald-500/40',
    'cenarios-crise': 'text-purple-600 border-purple-500/20 hover:border-purple-500/40',
  };

  return (
    <div
      onClick={onClick}
      className={cn(
        "p-3 rounded-lg bg-panel-bg/50 border cursor-pointer transition-all duration-200 hover:scale-105",
        typeStyles[type as keyof typeof typeStyles],
        isActive && "ring-2 ring-primary/50 ring-offset-1 ring-offset-background"
      )}
    >
      <div className="flex items-center justify-between">
        <span className="text-sm text-muted-foreground">{label}</span>
        <span className={cn("text-lg font-semibold", typeStyles[type as keyof typeof typeStyles].split(' ')[0])}>
          {count}
        </span>
      </div>
    </div>
  );
}

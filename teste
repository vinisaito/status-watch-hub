import { AlertData } from '../types/escalation';
import { useEscalation } from '../hooks/useEscalation';
import { EscalationTimer } from './EscalationTimer';
import { Button } from './ui/button';
import { Badge } from './ui/badge';
import { Textarea } from './ui/textarea';
import { Label } from './ui/label';
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from './ui/select';
import { 
  Play, 
  Clock, 
  Check, 
  FastForward, 
  CheckCircle, 
  RotateCcw, 
  X 
} from 'lucide-react';

interface EscalationColumnProps {
  alert: AlertData;
}

export const EscalationColumn = ({ alert }: EscalationColumnProps) => {
  const {
    escalationStates,
    confirmationObservations,
    showStatusConfirmation,
    pendingStatusChange,
    startConfirmation,
    confirmReceived,
    startEscalation,
    handleConfirmationObservationChange,
    prepareStatusChange,
    handlePendingObservationChange,
    confirmStatusChange,
    cancelStatusChange,
    goBackEscalation,
  } = useEscalation();

  const state = escalationStates[alert.chamado];
  const currentObservation = confirmationObservations[alert.chamado] || '';
  const showConfirmation = showStatusConfirmation[alert.chamado];
  const pendingChange = pendingStatusChange[alert.chamado];

  if (!state) {
    return (
      <div className="text-center">
        <div className="space-y-2 mb-3">
          <Label className="text-xs">
            Observações <span className="text-destructive">*</span>
          </Label>
          <Textarea
            placeholder="Observações são obrigatórias para iniciar"
            value={currentObservation}
            onChange={(e) => handleConfirmationObservationChange(alert.chamado, e.target.value)}
            className="text-xs min-h-[60px] resize-none"
            required
          />
          {!currentObservation.trim() && (
            <p className="text-xs text-destructive">
              Observações são obrigatórias
            </p>
          )}
        </div>
        <Button
          size="sm"
          variant="outline"
          onClick={() => startConfirmation(alert.chamado)}
          disabled={!currentObservation.trim()}
          className="h-8 px-3 text-xs disabled:opacity-50"
        >
          <Play className="h-3 w-3 mr-1" />
          Iniciar Confirmação
        </Button>
      </div>
    );
  }

  switch (state.status) {
    case 'pending':
      return (
        <div className="text-center space-y-3">
          <div className="flex items-center justify-center gap-2">
            <EscalationTimer
              startTime={new Date(Date.now() - ((10 * 60 - state.timeRemaining) * 1000)).toISOString()}
              duration={10}
              className="justify-center"
            />
          </div>
          
          <div className="space-y-2">
             <div className="space-y-1">
               <Label className="text-xs">
                 Observações <span className="text-destructive">*</span>
               </Label>
               <Textarea
                 key={`confirmation-textarea-${alert.chamado}`}
                 placeholder="Observações são obrigatórias para confirmação"
                 value={currentObservation}
                 onChange={(e) => handleConfirmationObservationChange(alert.chamado, e.target.value)}
                 className="text-xs min-h-[60px] resize-none"
                 required
               />
               {!currentObservation.trim() && (
                 <p className="text-xs text-destructive">
                   Observações são obrigatórias
                 </p>
               )}
             </div>
            
            <div className="flex gap-1">
              <Button
                size="sm"
                variant="default"
                onClick={() => confirmReceived(alert.chamado)}
                disabled={!currentObservation.trim()}
                className="h-8 px-3 text-xs flex-1 disabled:opacity-50 disabled:cursor-not-allowed"
              >
                <Check className="h-3 w-3 mr-1" />
                Confirmar
              </Button>
              <Button
                size="sm"
                variant="secondary"
                onClick={() => startEscalation(alert.chamado, 1)}
                disabled={!currentObservation.trim()}
                className="h-8 px-3 text-xs flex-1 disabled:opacity-50 disabled:cursor-not-allowed"
              >
                <FastForward className="h-3 w-3 mr-1" />
                Próxima Etapa
              </Button>
            </div>
          </div>
        </div>
      );

    case 'confirmed':
      return (
        <div className="text-center space-y-2">
          <div className="flex gap-1 justify-center">
            <Badge className="bg-success text-success-foreground">
              <CheckCircle className="h-3 w-3 mr-1" />
              Confirmado
            </Badge>
            <Button
              size="sm"
              variant="outline"
              onClick={() => startEscalation(alert.chamado, 1)}
              className="h-6 px-2 text-xs"
            >
              <FastForward className="h-3 w-3 mr-1" />
              Próxima
            </Button>
          </div>
          {state.observations && (
            <div className="text-xs text-muted-foreground p-2 bg-muted rounded text-left">
              <strong>Observações:</strong><br />
              {state.observations}
            </div>
          )}
        </div>
      );

    case 'escalating':
      const levelNames = { 1: '1ª', 2: '2ª', 3: '3ª', 4: '4ª' };
      
      return (
        <div className="space-y-2">
          {state.currentLevel > 0 && (
            <div className="text-center">
              <Badge className="bg-escalation text-escalation-foreground text-xs">
                {levelNames[state.currentLevel as keyof typeof levelNames]} Escalação
              </Badge>
              {state.timerActive && (
                <div className="mt-1">
                  <EscalationTimer
                    startTime={new Date(Date.now() - ((15 * 60 - state.timeRemaining) * 1000)).toISOString()}
                    duration={15}
                    className="justify-center"
                  />
                </div>
              )}
            </div>
          )}

          {!state.isAttended && (
            <>
              {state.currentLevel === 0 || (!state.timerActive && state.currentLevel < 4) ? (
                <div className="space-y-1">
                  <div className="flex gap-1">
                    {state.currentLevel > 0 && (
                      <Button
                        size="sm"
                        variant="outline"
                        onClick={() => goBackEscalation(alert.chamado)}
                        className="h-6 px-2 text-xs flex-1"
                      >
                        <RotateCcw className="h-3 w-3 mr-1" />
                        Voltar
                      </Button>
                    )}
                    
                     {state.currentLevel < 4 && (
                       <Button
                         size="sm"
                         variant="outline"
                         onClick={() => startEscalation(alert.chamado, (state.currentLevel + 1) as 1 | 2 | 3 | 4)}
                         className="h-6 px-2 text-xs flex-1"
                       >
                         Iniciar {levelNames[(state.currentLevel + 1) as keyof typeof levelNames]} Escalação
                       </Button>
                     )}
                  </div>
                </div>
              ) : (
                <div className="space-y-2">
                  {showConfirmation ? (
                    <div className="space-y-2 p-2 border rounded bg-background">
                      <div className="text-xs font-medium">
                        Confirmar: {pendingChange?.status === 'attended' ? 'Atendida' : 'Não Atendida'}
                      </div>
                      
                       <div className="space-y-1">
                         <Label className="text-xs">
                           Observações <span className="text-destructive">*</span>
                         </Label>
                         <Textarea
                           key={`pending-textarea-${alert.chamado}`}
                           placeholder="Observações obrigatórias..."
                           value={pendingChange?.observations || ''}
                           onChange={(e) => handlePendingObservationChange(alert.chamado, e.target.value)}
                           className="text-xs min-h-[60px] resize-none"
                           required
                         />
                         {!pendingChange?.observations?.trim() && (
                           <p className="text-xs text-destructive">
                             Observações são obrigatórias
                           </p>
                         )}
                       </div>
                      
                      <div className="flex gap-1">
                        <Button
                          size="sm"
                          variant="default"
                          onClick={() => confirmStatusChange(alert.chamado)}
                          disabled={!pendingChange?.observations?.trim()}
                          className="h-6 px-2 text-xs flex-1"
                        >
                          <Check className="h-3 w-3 mr-1" />
                          Confirmar
                        </Button>
                        <Button
                          size="sm"
                          variant="outline"
                          onClick={() => cancelStatusChange(alert.chamado)}
                          className="h-6 px-2 text-xs flex-1"
                        >
                          <X className="h-3 w-3 mr-1" />
                          Cancelar
                        </Button>
                      </div>
                    </div>
                  ) : (
                    <>
                      <div className="flex gap-1">
                        <Button
                          size="sm"
                          variant="outline"
                          onClick={() => goBackEscalation(alert.chamado)}
                          className="h-6 px-2 text-xs flex-1"
                        >
                          <RotateCcw className="h-3 w-3 mr-1" />
                          Voltar
                        </Button>
                      </div>

                      <Select
                        value=""
                        onValueChange={(value) => prepareStatusChange(alert.chamado, value)}
                      >
                        <SelectTrigger className="h-6 text-xs">
                          <SelectValue placeholder="Selecionar Status" />
                        </SelectTrigger>
                        <SelectContent>
                          <SelectItem value="attended">Atendida</SelectItem>
                          <SelectItem value="not-attended">Não Atendida</SelectItem>
                        </SelectContent>
                      </Select>
                    </>
                  )}
                </div>
              )}
            </>
          )}
        </div>
      );

    case 'completed':
      return (
        <div className="text-center space-y-2">
          <div className="flex gap-1 justify-center">
            <Badge className="bg-success text-success-foreground">
              <CheckCircle className="h-3 w-3 mr-1" />
              Finalizado
            </Badge>
          </div>
          {state.observations && (
            <div className="text-xs text-muted-foreground p-2 bg-muted rounded text-left">
              <strong>Observações:</strong><br />
              {state.observations}
            </div>
          )}
        </div>
      );

    default:
      return null;
  }
};

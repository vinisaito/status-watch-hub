import { useState, useEffect, useMemo } from 'react';
import { Check, AlertTriangle, ExternalLink, Zap, Group, Calendar, Info, XCircle, Flame, ChevronLeft, ChevronRight } from 'lucide-react';
import { Card, CardContent, CardHeader } from '@/components/ui/card';
import { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from '@/components/ui/table';
import { Badge } from '@/components/ui/badge';
import { Button } from '@/components/ui/button';
import { toast } from '@/hooks/use-toast';
import { Tooltip, TooltipContent, TooltipProvider, TooltipTrigger } from '@/components/ui/tooltip';
import {
  Dialog,
  DialogContent,
  DialogHeader,
  DialogTitle,
} from '@/components/ui/dialog';
import {
  Pagination,
  PaginationContent,
  PaginationItem,
  PaginationLink,
  PaginationNext,
  PaginationPrevious,
} from '@/components/ui/pagination';

interface AlertData {
  id: string;
  chamado: string;
  tipo_chamado: string;
  grupo_chamado: string;
  status_chamado: string;
  abertura_chamado: string;
  resumo_chamado: string;
  severidade_chamado: string;
  acionado: boolean;
}

interface ActionTableProps {
  alertData: AlertData[];
  onUpdateAcknowledgment: (alertId: string, acknowledged: boolean) => void;
  loading: boolean;
}

export const ActionTable = ({ alertData, onUpdateAcknowledgment, loading }: ActionTableProps) => {
  const [selectedIncident, setSelectedIncident] = useState<AlertData | null>(null);
  const [crisisDialogOpen, setCrisisDialogOpen] = useState(false);
  const [expandedRows, setExpandedRows] = useState<Set<string>>(new Set());
  const [currentPage, setCurrentPage] = useState(1);
  const itemsPerPage = 5;

  // Estado que guarda os numeros chamados j√° acionados (string)
  const [acionadosSet, setAcionadosSet] = useState<Set<string>>(new Set());

  // Fun√ß√£o para formatar data de forma segura
  const formatDate = (dateString: string) => {
    if (!dateString) return '-';
    
    try {
      // Tenta diferentes formatos de data
      let date;
      
      // Se for timestamp (n√∫mero)
      if (!isNaN(Number(dateString))) {
        date = new Date(Number(dateString));
      } 
      // Se for string de data
      else {
        // Remove caracteres extras e tenta parsear
        const cleanDateString = dateString.trim();
        date = new Date(cleanDateString);
        
        // Se ainda for inv√°lida, tenta formato brasileiro (dd/mm/yyyy)
        if (isNaN(date.getTime()) && cleanDateString.includes('/')) {
          const [day, month, year, ...timeParts] = cleanDateString.split(/[/\s:]/);
          if (day && month && year) {
            const timeString = timeParts.length > 0 ? ` ${timeParts.join(':')}` : '';
            date = new Date(`${year}-${month.padStart(2, '0')}-${day.padStart(2, '0')}${timeString}`);
          }
        }
      }
      
      // Verifica se a data √© v√°lida
      if (isNaN(date.getTime())) {
        return dateString; // Retorna o valor original se n√£o conseguir formatar
      }
      
      return date.toLocaleString('pt-BR', {
        day: '2-digit',
        month: '2-digit',
        year: 'numeric',
        hour: '2-digit',
        minute: '2-digit',
        second: '2-digit',
      });
    } catch (error) {
      console.error('Erro ao formatar data:', error, 'Valor original:', dateString);
      return dateString; // Retorna o valor original em caso de erro
    }
  };

  // Dados ordenados e paginados
  const { sortedAndPaginatedData, totalPages } = useMemo(() => {
    // Ordena por chamado em ordem decrescente
    const sortedData = [...alertData].sort((a, b) => {
      const chamadoA = parseInt(a.chamado) || 0;
      const chamadoB = parseInt(b.chamado) || 0;
      return chamadoB - chamadoA; // Ordem decrescente
    });

    // Calcula pagina√ß√£o
    const startIndex = (currentPage - 1) * itemsPerPage;
    const endIndex = startIndex + itemsPerPage;
    const paginatedData = sortedData.slice(startIndex, endIndex);
    const totalPages = Math.ceil(sortedData.length / itemsPerPage);

    return {
      sortedAndPaginatedData: paginatedData,
      totalPages
    };
  }, [alertData, currentPage, itemsPerPage]);

  // Reset p√°gina quando dados mudam
  useEffect(() => {
    setCurrentPage(1);
  }, [alertData]);

  // Busca os incidentes acionados no DynamoDB via API
  useEffect(() => {
    const fetchAcionados = async () => {
      try {
        const res = await fetch('https://f6ffk8e9fe.execute-api.us-east-1.amazonaws.com/prod/chatacionados');
        if (!res.ok) throw new Error(`Erro ao buscar acionados: ${res.status}`);
        const data: { chamado: string }[] = await res.json();
        setAcionadosSet(new Set(data.map(item => item.chamado.toString())));
      } catch (error) {
        console.error(error);
        toast({
          title: 'Erro ao buscar acionados',
          description: 'N√£o foi poss√≠vel carregar os incidentes acionados',
          variant: 'destructive',
        });
      }
    };
    fetchAcionados();
  }, []);

  const handleAcknowledgment = async (alert: AlertData) => {
    try {
      const response = await fetch("https://f6ffk8e9fe.execute-api.us-east-1.amazonaws.com/prod/webhook");
      const webhooks = await response.json();
      const teamWebhook = webhooks[alert.grupo_chamado];

      if (!teamWebhook) {
        toast({
          title: "Webhook n√£o configurado",
          description: `Configure o webhook para a grupo_chamado ${alert.grupo_chamado}`,
          variant: "destructive",
        });
        return;
      }

      // Enviar mensagem para Google Chat
      const message = {
        cards: [
          {
            header: {
              title: "üö® Acionamento de Alerta",
            },
            sections: [
              {
                widgets: [
                  { keyValue: { topLabel: "<b>Classifica√ß√£o</b>", content: alert.tipo_chamado } },
                  { keyValue: { topLabel: "N¬∫ Chamado", content: alert.chamado } },
                  { keyValue: { topLabel: "Grupo", content: alert.grupo_chamado } },
                  { keyValue: { topLabel: "severidade", content: alert.severidade_chamado } },
                  { keyValue: { topLabel: "T√≠tulo", content: alert.resumo_chamado } },
                  { keyValue: { topLabel: "Abertura", content: alert.abertura_chamado } },
                ],
              },
            ],
          },
        ],
      };

      await fetch(teamWebhook, {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify(message),
      });

      // Chamada para marcar como acionado no DynamoDB
      const res = await fetch('https://f6ffk8e9fe.execute-api.us-east-1.amazonaws.com/prod/chatacionados', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({ chamado: alert.chamado.toString() }),
      });

      if (!res.ok) {
        const errorData = await res.json();
        throw new Error(errorData.message || 'Erro ao marcar como acionado');
      }

      // Atualiza localmente o estado dos acionados com novo Set (usando string)
      setAcionadosSet(prev => new Set([...prev, alert.chamado.toString()]));

      // Atualiza estado do alerta para UI
      onUpdateAcknowledgment(alert.id, true);

      toast({
        title: "Alerta acionado com sucesso",
        description: `Mensagem enviada para a grupo_chamado ${alert.grupo_chamado}`,
      });
    } catch (error: any) {
      console.error('Erro ao acionar:', error);
      toast({
        title: "Erro ao acionar alerta",
        description: error.message || "N√£o foi poss√≠vel concluir o acionamento",
        variant: "destructive",
      });
    }
  };

  const truncateText = (text: string, maxLength: number) => {
    return text.length > maxLength ? text.substring(0, maxLength) + '...' : text;
  };

  const handleIncidentClick = (alert: AlertData) => {
    if (alert.tipo_chamado.toLowerCase().includes('incidente')) {
      setSelectedIncident(alert);
      setCrisisDialogOpen(true);
    }
  };

  const getSeverityColor = (severity: string) => {
    return severity.includes('4')
      ? 'bg-sev4-incident text-white'
      : 'bg-sev3-incident text-white';
  };

  const [chamadoModalOpen, setChamadoModalOpen] = useState(false);
  const handleChamadoClick = (alert: AlertData) => {
    setSelectedIncident(alert);
    setChamadoModalOpen(true);
  };

  const getStatusBadgeClass = (acionado: boolean) =>
    acionado
      ? 'bg-green-500/90 text-white border-green-400/50 shadow-md'
      : 'bg-red-500/90 text-white border-red-400/50 shadow-md';

  const getStatusIcon = (acionado: boolean) =>
    acionado ? <Check className="h-4 w-4" /> : <XCircle className="h-4 w-4" />;

  const getStatusText = (acionado: boolean) => {
    return acionado ? 'Acionado' : 'N√£o Acionado';
  };

  const handlePageChange = (page: number) => {
    setCurrentPage(page);
  };

  return (
    <TooltipProvider>
      <Card className="bg-panel-bg border-border">
        <CardHeader />
        <CardContent>
          {/* Layout para Mobile (oculto em desktop) */}
          <div className="block lg:hidden space-y-4">
            {loading ? (
              <div className="text-center py-8">
                <div className="inline-block animate-spin rounded-full h-8 w-8 border-b-2 border-primary mb-4"></div>
                <p>Carregando dados...</p>
              </div>
            ) : sortedAndPaginatedData.length === 0 ? (
              <div className="text-center py-8 text-muted-foreground">
                Nenhum dado dispon√≠vel
              </div>
            ) : (
              sortedAndPaginatedData.map((alert) => {
                const isAcionado = acionadosSet.has(alert.chamado.toString());
                const isExpanded = expandedRows.has(alert.id);

                return (
                  <Card key={alert.id} className="bg-secondary border-border">
                    <CardContent className="p-4">
                      {/* Linha 1 - chamado, severidade_chamado e classifica√ß√£o */}
                      <div className="flex items-center justify-between mb-3">
                        <div className="flex items-center gap-2">
                          <Badge variant="outline" className="text-xs">
                            <Button
                              variant="link"
                              size="sm"
                              className="text-xs p-0 hover:underline"
                              onClick={() => handleChamadoClick(alert)}
                            >
                              {alert.chamado}
                            </Button>
                          </Badge>
                          <Badge variant="outline" className="text-xs">
                            {alert.tipo_chamado}
                          </Badge>
                          <Badge className={getSeverityColor(alert.severidade_chamado)}>
                            {alert.severidade_chamado}
                          </Badge>
                        </div>
                      </div>

                      <div className="space-y-2">
                        {/* T√≠tulo */}
                        <div>
                          <p className="text-sm font-medium">
                            {truncateText(alert.resumo_chamado, isExpanded ? 200 : 60)}
                          </p>
                        </div>

                        {/* Linha 2 - grupo_chamado e status */}
                        <div className="flex items-center justify-between text-xs text-muted-foreground">
                          <span className="text-sm font-semibold text-foreground">
                            {alert.grupo_chamado}
                          </span>
                          <span>{alert.status_chamado}</span>
                        </div>

                        {/* Linha 3 - abertura_chamado */}
                        <div className="text-xs text-muted-foreground">
                          {formatDate(alert.abertura_chamado)}
                        </div>

                        {/* Bot√µes */}
                        <div className="flex items-center justify-between pt-3">
                          <div className="flex items-center gap-2">
                            {alert.tipo_chamado.toLowerCase().includes('incidente') && (
                              <Button
                                variant="outline"
                                size="sm"
                                onClick={() => handleIncidentClick(alert)}
                                className="h-7 px-2 text-xs"
                              >
                                <ExternalLink className="h-3 w-3 mr-1" />
                                Crise
                              </Button>
                            )}
                          </div>

                          <Button
                            variant={isAcionado ? 'default' : 'outline'}
                            size="sm"
                            onClick={() => !isAcionado && handleAcknowledgment(alert)}
                            disabled={isAcionado}
                            className={`h-7 px-3 text-xs ${isAcionado
                              ? 'bg-success text-white hover:bg-success/90'
                              : 'border-border hover:bg-hover-bg'
                              }`}
                          >
                            {isAcionado ? (
                              <>
                                <Check className="h-3 w-3 mr-1" />
                                Acionado
                              </>
                            ) : (
                              <>
                                <AlertTriangle className="h-3 w-3 mr-1" />
                                Acionar
                              </>
                            )}
                          </Button>
                        </div>
                      </div>
                    </CardContent>
                  </Card>
                );
              })
            )}

            {/* Pagina√ß√£o Mobile */}
            {!loading && sortedAndPaginatedData.length > 0 && totalPages > 1 && (
              <div className="flex justify-center mt-6">
                <Pagination>
                  <PaginationContent>
                    <PaginationItem>
                      <Button
                        variant="outline"
                        size="sm"
                        onClick={() => handlePageChange(currentPage - 1)}
                        disabled={currentPage === 1}
                      >
                        <ChevronLeft className="h-4 w-4" />
                      </Button>
                    </PaginationItem>
                    
                    {[...Array(totalPages)].map((_, index) => {
                      const page = index + 1;
                      return (
                        <PaginationItem key={page}>
                          <PaginationLink
                            onClick={() => handlePageChange(page)}
                            isActive={currentPage === page}
                            className="cursor-pointer"
                          >
                            {page}
                          </PaginationLink>
                        </PaginationItem>
                      );
                    })}
                    
                    <PaginationItem>
                      <Button
                        variant="outline"
                        size="sm"
                        onClick={() => handlePageChange(currentPage + 1)}
                        disabled={currentPage === totalPages}
                      >
                        <ChevronRight className="h-4 w-4" />
                      </Button>
                    </PaginationItem>
                  </PaginationContent>
                </Pagination>
              </div>
            )}
          </div>

          {/* Layout para Desktop (oculto em mobile) */}
          <div className="hidden lg:block">
            <div className="overflow-hidden rounded-lg border border-border">
              <Table>
                <TableHeader>
                  <TableRow className="border-border hover:bg-hover-bg">
                    <TableHead className="text-muted-foreground w-[100px]">Chamado</TableHead>
                    <TableHead className="text-muted-foreground w-[150px]">Classifica√ß√£o</TableHead>
                    <TableHead className="text-muted-foreground w-[120px]">Grupo</TableHead>
                    <TableHead className="text-muted-foreground w-[100px]">Status</TableHead>
                    <TableHead className="text-muted-foreground w-[120px]">Abertura</TableHead>
                    <TableHead className="text-muted-foreground min-w-[200px]">T√≠tulo</TableHead>
                    <TableHead className="text-muted-foreground w-[120px]">Severidade</TableHead>
                    <TableHead className="text-muted-foreground w-[100px]">Acionado</TableHead>
                  </TableRow>
                </TableHeader>
                <TableBody>
                  {loading ? (
                    <TableRow>
                      <TableCell colSpan={8} className="text-center py-8">
                        Carregando dados...
                      </TableCell>
                    </TableRow>
                  ) : sortedAndPaginatedData.length === 0 ? (
                    <TableRow>
                      <TableCell colSpan={8} className="text-center py-8 text-muted-foreground">
                        Nenhum dado dispon√≠vel
                      </TableCell>
                    </TableRow>
                  ) : (
                    sortedAndPaginatedData.map((alert) => {
                      const isAcionado = acionadosSet.has(alert.chamado.toString());
                      return (
                        <TableRow
                          key={alert.id}
                          className="border-border hover:bg-hover-bg transition-colors"
                        >
                          <TableCell className="font-medium">
                            <Button
                              variant="link"
                              size="sm"
                              className="p-0 text-foreground hover:underline"
                              onClick={() => handleChamadoClick(alert)}
                            >
                              {alert.chamado}
                            </Button>
                          </TableCell>
                          <TableCell>
                            <Tooltip>
                              <TooltipTrigger asChild>
                                <span className="truncate block max-w-[140px]">
                                  {alert.tipo_chamado}
                                </span>
                              </TooltipTrigger>
                              <TooltipContent>
                                <p className="max-w-xs">{alert.tipo_chamado}</p>
                              </TooltipContent>
                            </Tooltip>
                          </TableCell>
                          <TableCell>{alert.grupo_chamado}</TableCell>
                          <TableCell>{alert.status_chamado}</TableCell>
                          <TableCell className="text-sm">
                            {formatDate(alert.abertura_chamado)}
                          </TableCell>
                          <TableCell>
                            <div className="flex items-center gap-2">
                              <Tooltip>
                                <TooltipTrigger asChild>
                                  <span className="truncate block max-w-[180px]">
                                    {alert.resumo_chamado}
                                  </span>
                                </TooltipTrigger>
                                <TooltipContent>
                                  <p className="max-w-md">{alert.resumo_chamado}</p>
                                </TooltipContent>
                              </Tooltip>
                              {alert.tipo_chamado.toLowerCase().includes('incidente') && (
                                <Button
                                  variant="ghost"
                                  size="sm"
                                  onClick={() => handleIncidentClick(alert)}
                                  className="p-1 h-auto hover:bg-hover-bg flex-shrink-0"
                                  title="Iniciar processo de crise"
                                >
                                  <ExternalLink className="h-3 w-3" />
                                </Button>
                              )}
                            </div>
                          </TableCell>
                          <TableCell>
                            <Badge className={getSeverityColor(alert.severidade_chamado)}>
                              {alert.severidade_chamado}
                            </Badge>
                          </TableCell>
                          <TableCell>
                            <Button
                              variant={isAcionado ? "default" : "outline"}
                              size="sm"
                              onClick={() => !isAcionado && handleAcknowledgment(alert)}
                              disabled={isAcionado}
                              className={`${isAcionado
                                ? 'bg-success text-white hover:bg-success/90'
                                : 'border-border hover:bg-hover-bg'
                                }`}
                            >
                              {isAcionado ? (
                                <Check className="h-4 w-4" />
                              ) : (
                                <AlertTriangle className="h-4 w-4" />
                              )}
                            </Button>
                          </TableCell>
                        </TableRow>
                      );
                    })
                  )}
                </TableBody>
              </Table>
            </div>

            {/* Pagina√ß√£o Desktop */}
            {!loading && sortedAndPaginatedData.length > 0 && totalPages > 1 && (
              <div className="flex justify-center mt-6">
                <Pagination>
                  <PaginationContent>
                    <PaginationItem>
                      <PaginationPrevious
                        onClick={() => handlePageChange(currentPage - 1)}
                        className={currentPage === 1 ? 'pointer-events-none opacity-50' : 'cursor-pointer'}
                      />
                    </PaginationItem>
                    
                    {[...Array(totalPages)].map((_, index) => {
                      const page = index + 1;
                      return (
                        <PaginationItem key={page}>
                          <PaginationLink
                            onClick={() => handlePageChange(page)}
                            isActive={currentPage === page}
                            className="cursor-pointer"
                          >
                            {page}
                          </PaginationLink>
                        </PaginationItem>
                      );
                    })}
                    
                    <PaginationItem>
                      <PaginationNext
                        onClick={() => handlePageChange(currentPage + 1)}
                        className={currentPage === totalPages ? 'pointer-events-none opacity-50' : 'cursor-pointer'}
                      />
                    </PaginationItem>
                  </PaginationContent>
                </Pagination>
              </div>
            )}
          </div>

          {/* CrisisProcessDialog ser√° adicionado conforme necess√°rio */}
          
          <Dialog open={chamadoModalOpen} onOpenChange={setChamadoModalOpen}>
            <DialogContent className="max-w-2xl gradient-card">
              <DialogHeader>
                <DialogTitle className="flex flex-col gap-2">
                  {/* N√∫mero do chamado e t√≠tulo */}
                  <div className="flex items-center gap-3">
                    <div className="p-2 rounded-lg bg-primary/10">
                      {selectedIncident?.tipo_chamado === "Solicita√ß√£o" ? (
                        <Zap className="h-5 w-5 text-primary" />
                      ) : selectedIncident?.tipo_chamado === "Incidente" ? (
                        <AlertTriangle className="h-5 w-5 text-primary" />
                      ) : (
                        <Zap className="h-5 w-5 text-primary" />
                      )}
                    </div>
                    <span className="flex items-center">
                      <span className="text-lg font-semibold">
                        {selectedIncident?.chamado}
                      </span>
                      <span className="mx-1">-</span>
                      <span className="text-sm font-normal">
                        {selectedIncident?.resumo_chamado}
                      </span>
                    </span>
                  </div>

                  {/* Status logo abaixo do n√∫mero do chamado */}
                  {selectedIncident && (
                    <div className="flex items-center gap-2 mt-2">
                      <Badge
                        className={`${getStatusBadgeClass(selectedIncident.acionado)} flex items-center gap-2 px-3 py-2`}
                      >
                        {getStatusIcon(selectedIncident.acionado)}
                        {getStatusText(selectedIncident.acionado)}
                      </Badge>
                      <Badge
                        className="flex items-center gap-2 px-3 py-2">
                        {selectedIncident.tipo_chamado}
                      </Badge>
                    </div>
                  )}
                </DialogTitle>
              </DialogHeader>

              {selectedIncident && (
                <div className="grid grid-cols-1 md:grid-cols-2 gap-6 mt-4">
                  {/* Grid com grupo_chamado, Classifica√ß√£o, Status e severidade_chamado */}
                  <div className="space-y-4">
                    <div className="flex items-center gap-3 p-3 bg-accent/10 rounded-lg border border-accent/20">
                      <Group className="h-5 w-5 text-primary" />
                      <div>
                        <p className="text-sm text-muted-foreground">grupo_chamado</p>
                        <p className="font-semibold text-foreground">{selectedIncident.grupo_chamado}</p>
                      </div>
                    </div>
                    <div className="flex items-center gap-3 p-3 bg-accent/10 rounded-lg border border-accent/20">
                      <Calendar className="h-5 w-5 text-primary" />
                      <div>
                        <p className="text-sm text-muted-foreground">abertura_chamado</p>
                        <p className="font-semibold text-foreground">{formatDate(selectedIncident.abertura_chamado)}</p>
                      </div>
                    </div>
                  </div>

                  <div className="space-y-4">
                    <div className="flex items-center gap-3 p-3 bg-accent/10 rounded-lg border border-accent/20">
                      <Info className="h-5 w-5 text-primary" />
                      <div>
                        <p className="text-sm text-muted-foreground">Status</p>
                        <p className="font-semibold text-foreground">{selectedIncident.status_chamado}</p>
                      </div>
                    </div>

                    <div className="flex items-center gap-3 p-3 bg-accent/10 rounded-lg border border-accent/20">
                      <Flame className="h-5 w-5 text-primary" />
                      <div>
                        <p className="text-sm text-muted-foreground">severidade_chamado</p>
                        <p className="font-semibold text-foreground">{selectedIncident.severidade_chamado}</p>
                      </div>
                    </div>
                  </div>
                </div>
              )}
            </DialogContent>
          </Dialog>
        </CardContent>
      </Card>
    </TooltipProvider>
  );
};

import { Badge } from '@/components/ui/badge';
import { Button } from '@/components/ui/button';
import { Card } from '@/components/ui/card';
import { Tooltip, TooltipContent, TooltipTrigger } from '@/components/ui/tooltip';
import { Timer, Settings, User, Send, Clock, AlertTriangle } from 'lucide-react';
import type { AlertData } from './types';

interface ActionTableMobileCardProps {
  alert: AlertData;
  chatStatus: { timestamp_chat: string; sending_chat: boolean } | undefined;
  timerState: any;
  chatSentLocal: Set<string>;
  getCurrentActiveLevel: (chamado: number) => number | null;
  getRemainingTime: (chamado: number, level: number) => number;
  getTimerColor: (remainingTime: number) => string;
  getSeverityColor: (severity: string) => string;
  formatDate: (dateString: string) => string;
  isConnected: boolean;
  isChatConnected: boolean;
  handleOpenChamadoDetails: (alert: AlertData) => void;
  handleOpenAssumeOperator: (chamado: string) => void;
  handleStartTimer: (chamado: string, alert: AlertData) => void;
  handleOpenTimerManagement: (chamado: string) => void;
  handleAcknowledgment: (alert: AlertData) => void;
  LEVEL_NAMES: Record<number, string>;
}

export const ActionTableMobileCard = ({
  alert,
  chatStatus,
  timerState,
  chatSentLocal,
  getCurrentActiveLevel,
  getRemainingTime,
  getTimerColor,
  getSeverityColor,
  formatDate,
  isConnected,
  isChatConnected,
  handleOpenChamadoDetails,
  handleOpenAssumeOperator,
  handleStartTimer,
  handleOpenTimerManagement,
  handleAcknowledgment,
  LEVEL_NAMES,
}: ActionTableMobileCardProps) => {
  const chamadoNum = parseInt(alert.chamado);
  const currentLevel = getCurrentActiveLevel(chamadoNum);
  const remainingTime = currentLevel ? getRemainingTime(chamadoNum, currentLevel) : 0;

  const wsChatRaw: any = timerState?.sending_chat ?? timerState?.sending;
  const sentFlagRaw: any =
    typeof wsChatRaw !== 'undefined'
      ? wsChatRaw
      : typeof chatStatus?.sending_chat !== 'undefined'
        ? chatStatus?.sending_chat
        : (alert as any).sending_chat;

  const sentNormalized =
    typeof sentFlagRaw === 'boolean'
      ? sentFlagRaw
      : typeof sentFlagRaw === 'string'
        ? sentFlagRaw.trim().toLowerCase() === 'true'
        : typeof sentFlagRaw === 'number'
          ? sentFlagRaw === 1
          : false;

  const isChatSent = sentNormalized || chatSentLocal.has(alert.chamado) || alert.acionado === 'true' || alert.chat;
  const responsavelAtual = timerState?.ResponsavelAcompanhamento || '';

  return (
    <Card 
      className="p-4 mb-3 bg-card border-border hover:bg-accent/50 transition-colors cursor-pointer"
      onClick={() => handleOpenChamadoDetails(alert)}
    >
      {/* Header: Chamado + Severidade */}
      <div className="flex items-center justify-between mb-3">
        <div className="flex items-center gap-2">
          <span className="text-lg font-bold text-foreground">#{alert.chamado}</span>
          <Badge className={getSeverityColor(alert.severidade_chamado)}>
            {alert.severidade_chamado}
          </Badge>
        </div>
        
        {/* Status do Chat */}
        <div onClick={(e) => e.stopPropagation()}>
          {isChatSent ? (
            <Tooltip>
              <TooltipTrigger asChild>
                <div className="flex items-center gap-1 text-green-600 text-xs">
                  <Send className="h-4 w-4" />
                  <span>Enviado</span>
                </div>
              </TooltipTrigger>
              <TooltipContent>Chat já acionado</TooltipContent>
            </Tooltip>
          ) : (
            <Button
              variant="outline"
              size="sm"
              onClick={() => handleAcknowledgment(alert)}
              disabled={!isChatConnected}
              className="h-8"
            >
              <Send className="h-4 w-4 mr-1" />
              Chat
            </Button>
          )}
        </div>
      </div>

      {/* Título do Chamado */}
      <div className="mb-3">
        <p className="text-sm font-medium text-foreground line-clamp-2">
          {alert.resumo_chamado}
        </p>
      </div>

      {/* Informações do Chamado */}
      <div className="space-y-2 mb-3 text-xs">
        <div className="flex items-center gap-2">
          <span className="text-muted-foreground">Tipo:</span>
          <span className="text-foreground font-medium">{alert.tipo_chamado}</span>
        </div>
        <div className="flex items-center gap-2">
          <span className="text-muted-foreground">Grupo:</span>
          <span className="text-foreground font-medium">{alert.grupo_chamado}</span>
        </div>
        <div className="flex items-center gap-2">
          <Clock className="h-3 w-3 text-muted-foreground" />
          <span className="text-muted-foreground">{formatDate(alert.abertura_chamado)}</span>
        </div>
      </div>

      {/* Timer e Responsável */}
      <div className="flex items-center justify-between pt-3 border-t border-border" onClick={(e) => e.stopPropagation()}>
        {/* Responsável */}
        <div className="flex items-center gap-2">
          <Tooltip>
            <TooltipTrigger asChild>
              <Button
                variant="ghost"
                size="sm"
                onClick={() => handleOpenAssumeOperator(alert.chamado)}
                className="h-8 px-2"
              >
                <User className="h-4 w-4 mr-1" />
                <span className="text-xs">
                  {responsavelAtual || 'Assumir'}
                </span>
              </Button>
            </TooltipTrigger>
            <TooltipContent>
              {responsavelAtual ? 'Alterar responsável' : 'Assumir chamado'}
            </TooltipContent>
          </Tooltip>
        </div>

        {/* Timer */}
        <div className="flex items-center gap-2">
          {currentLevel ? (
            <>
              <div className="text-right">
                <div className={`text-sm font-bold ${getTimerColor(remainingTime)}`}>
                  <Timer className="h-3 w-3 inline mr-1" />
                  {Math.floor(remainingTime / 60)}:{String(remainingTime % 60).padStart(2, '0')}
                </div>
                <div className="text-xs text-muted-foreground">
                  {LEVEL_NAMES[currentLevel as keyof typeof LEVEL_NAMES]}
                </div>
              </div>
              <Button
                variant="outline"
                size="sm"
                onClick={() => handleOpenTimerManagement(alert.chamado)}
                className="h-8 w-8 p-0"
              >
                <Settings className="h-4 w-4" />
              </Button>
            </>
          ) : (
            <Button
              variant="outline"
              size="sm"
              onClick={() => handleStartTimer(alert.chamado, alert)}
              disabled={!isConnected}
              className="h-8"
            >
              <Timer className="h-4 w-4 mr-1" />
              Iniciar
            </Button>
          )}
        </div>
      </div>
    </Card>
  );
};

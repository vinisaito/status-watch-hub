import React, { useEffect, useState, useRef } from "react";

interface TimerData {
  chamado: number;
  timerActive: boolean;
  startedAt?: string;
  durationMinutes: number;
  timeRemaining: number;
}

const Timer: React.FC = () => {
  const CHAMADO = 10418007;
  const WS_URL = "wss://SEU_ENDPOINT_AQUI";

  const [timeRemaining, setTimeRemaining] = useState<number>(0);
  const [timerActive, setTimerActive] = useState<boolean>(false);
  const [wsConnected, setWsConnected] = useState<boolean>(false);

  const wsRef = useRef<WebSocket | null>(null);
  const intervalRef = useRef<number | null>(null);

  useEffect(() => {
    const ws = new WebSocket(WS_URL);
    wsRef.current = ws;

    ws.onopen = () => {
      console.log("WebSocket conectado");
      setWsConnected(true);
      ws.send(JSON.stringify({ action: "getState", chamado: CHAMADO }));
    };

    ws.onmessage = (event) => {
      try {
        const data: TimerData = JSON.parse(event.data);
        if (data.chamado === CHAMADO) {
          setTimeRemaining(Number(data.timeRemaining) || 0);
          setTimerActive(data.timerActive);
        }
      } catch (err) {
        console.error("Erro ao processar mensagem WS:", err);
      }
    };

    ws.onclose = () => {
      console.log("WebSocket desconectado");
      setWsConnected(false);
    };

    return () => {
      ws.close();
    };
  }, []);

  useEffect(() => {
    if (intervalRef.current) {
      clearInterval(intervalRef.current);
      intervalRef.current = null;
    }

    if (timerActive) {
      intervalRef.current = window.setInterval(() => {
        setTimeRemaining((prev) => (prev > 0 ? prev - 1 : 0));
      }, 1000);
    }

    return () => {
      if (intervalRef.current) clearInterval(intervalRef.current);
    };
  }, [timerActive]);

  const handleStart = () => {
    if (wsRef.current && wsRef.current.readyState === WebSocket.OPEN) {
      wsRef.current.send(JSON.stringify({ action: "startTimer", chamado: CHAMADO }));
    } else {
      console.warn("WebSocket ainda não conectado!");
    }
  };

  const handlePause = () => {
    if (wsRef.current && wsRef.current.readyState === WebSocket.OPEN) {
      wsRef.current.send(JSON.stringify({ action: "pauseTimer", chamado: CHAMADO }));
    } else {
      console.warn("WebSocket ainda não conectado!");
    }
  };

  const remaining = typeof timeRemaining === "number" ? timeRemaining : 0;
  const minutes = Math.floor(remaining / 60);
  const seconds = Math.floor(remaining % 60);

  return (
    <div className="timer-card">
      <h3>Chamado: {CHAMADO}</h3>
      <p>
        Tempo restante: {minutes.toString().padStart(2, "0")}:
        {seconds.toString().padStart(2, "0")}
      </p>
      <p>Status: {timerActive ? "Ativo" : "Pausado"}</p>
      <button onClick={handleStart} disabled={!wsConnected}>
        Iniciar
      </button>
      <button onClick={handlePause} disabled={!wsConnected}>
        Pausar
      </button>
      {!wsConnected && <p>Conectando ao WebSocket...</p>}
    </div>
  );
};

export default Timer;

import { useState, useMemo, useCallback, useEffect } from 'react';
import { Check, AlertTriangle, Timer, Play, Pause, CheckCircle, Edit3, Search, ChevronLeft, ChevronRight, ArrowUpDown, ArrowUp, ArrowDown, SkipForward, ChevronUp, ChevronDown, XCircle } from 'lucide-react';
import { Card, CardContent, CardHeader } from '@/components/ui/card';
import { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from '@/components/ui/table';
import { Badge } from '@/components/ui/badge';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { Label } from '@/components/ui/label';
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';
import { toast } from '@/hooks/use-toast';
import { Tooltip, TooltipContent, TooltipProvider, TooltipTrigger } from '@/components/ui/tooltip';
import { Dialog, DialogContent, DialogHeader, DialogTitle, DialogDescription } from '@/components/ui/dialog';
import { Textarea } from '@/components/ui/textarea';
import { useWebsocketTimers } from "@/hooks/useWebsocketTimers";

interface AlertData {
  id: string;
  chamado: string;
  tipo_chamado: string;
  grupo_chamado: string;
  status_chamado: string;
  abertura_chamado: string;
  resumo_chamado: string;
  severidade_chamado: string;
  acionado: string;
  chat: boolean;
}

interface ActionTableProps {
  alertData: AlertData[];
  onUpdateAcknowledgment: (alertId: string, acknowledged: boolean) => void;
  loading: boolean;
}

// Component for Timer Control with Escalation Levels
const TimerControl = ({ 
  alert, 
  timerActive, 
  timerState, 
  remainingTime, 
  formatTime, 
  isConnected, 
  onStartTimer, 
  onFinishTimer, 
  onAdvanceLevel, 
  onBackLevel,
  hasObservacao 
}: any) => {
  const currentLevel = timerState?.current_level || 0;
  
  const getLevelName = (level: number) => {
    if (level === 0) return "Primeira Escala√ß√£o";
    if (level >= 1 && level <= 4) return `${level}¬∫ Escalonamento`;
    return "Finalizado";
  };

  const getLevelBadgeClass = (level: number) => {
    if (level === 0) return "bg-blue-500 text-white";
    if (level === 1) return "bg-yellow-500 text-white";
    if (level === 2) return "bg-orange-500 text-white";
    if (level === 3) return "bg-red-500 text-white";
    if (level === 4) return "bg-red-700 text-white";
    return "bg-gray-500 text-white";
  };

  if (!timerActive) {
    return (
      <div className="flex flex-col items-center gap-2">
        <Button
          variant="outline"
          size="sm"
          onClick={() => onStartTimer(alert.chamado, 0)}
          className="h-8 px-4 text-xs font-semibold bg-gradient-to-r from-blue-500 to-blue-600 text-white border-none hover:opacity-90 transition-all duration-300"
          disabled={!isConnected}
        >
          <Play className="h-4 w-4 mr-2" />
          Iniciar Timer (20min)
        </Button>
        {!isConnected && (
          <span className="text-xs text-destructive">WebSocket desconectado</span>
        )}
      </div>
    );
  }

  return (
    <div className="space-y-2 text-center">
      {/* Level Badge */}
      <div className="flex items-center gap-2 justify-center">
        <Timer className="h-4 w-4 text-timer-active animate-pulse" />
        <Badge className={`${getLevelBadgeClass(currentLevel)} text-xs font-semibold px-3 py-1`}>
          {getLevelName(currentLevel)}
        </Badge>
      </div>

      {/* Timer Display */}
      <div className="text-2xl font-mono font-black text-timer-active tracking-wide">
        {formatTime(remainingTime)}
      </div>

      {/* Operador Info */}
      {timerState?.operador && (
        <div className="text-xs text-muted-foreground bg-muted rounded px-2 py-1">
          üë§ {timerState.operador}
        </div>
      )}

      {/* Observa√ß√£o Info */}
      {timerState?.level_observacao?.[currentLevel] && (
        <div className="text-xs text-muted-foreground max-w-[200px] truncate">
          üìù {timerState.level_observacao[currentLevel]}
        </div>
      )}

      {/* Warning for last 5 minutes */}
      {remainingTime <= 300 && remainingTime > 0 && (
        <Badge variant="destructive" className="text-xs animate-pulse">
          ‚ö†Ô∏è √öltimos 5 min
        </Badge>
      )}

      {/* Control Buttons */}
      <div className="flex flex-col gap-1">
        <div className="flex gap-1 justify-center">
          {/* Back Button - only show if not on first level */}
          {currentLevel > 0 && (
            <Tooltip>
              <TooltipTrigger asChild>
                <Button
                  variant="outline"
                  size="sm"
                  onClick={() => onBackLevel(alert.chamado)}
                  disabled={!hasObservacao}
                  className="h-7 w-7 p-0 border-orange-500 text-orange-500 hover:bg-orange-50"
                >
                  <ChevronDown className="h-3 w-3" />
                </Button>
              </TooltipTrigger>
              <TooltipContent>
                <p>{!hasObservacao ? "Preencha as informa√ß√µes primeiro" : "Retroceder etapa"}</p>
              </TooltipContent>
            </Tooltip>
          )}

          {/* Finish Button */}
          <Tooltip>
            <TooltipTrigger asChild>
              <Button
                variant="outline"
                size="sm"
                onClick={() => onFinishTimer(alert.chamado)}
                disabled={!hasObservacao}
                className="h-7 px-2 text-xs border-red-500 text-red-500 hover:bg-red-50"
              >
                <XCircle className="h-3 w-3 mr-1" />
                Finalizar
              </Button>
            </TooltipTrigger>
            <TooltipContent>
              <p>{!hasObservacao ? "Preencha as informa√ß√µes primeiro" : "Finalizar acionamento"}</p>
            </TooltipContent>
          </Tooltip>

          {/* Advance Button - only show if not on last level */}
          {currentLevel < 4 && (
            <Tooltip>
              <TooltipTrigger asChild>
                <Button
                  variant="outline"
                  size="sm"
                  onClick={() => onAdvanceLevel(alert.chamado)}
                  disabled={!hasObservacao}
                  className="h-7 px-2 text-xs border-green-500 text-green-500 hover:bg-green-50"
                >
                  <SkipForward className="h-3 w-3 mr-1" />
                  {currentLevel === 0 ? "Pr√≥xima" : "Avan√ßar"}
                </Button>
              </TooltipTrigger>
              <TooltipContent>
                <p>{!hasObservacao ? "Preencha as informa√ß√µes primeiro" : `Avan√ßar para ${getLevelName(currentLevel + 1)}`}</p>
              </TooltipContent>
            </Tooltip>
          )}
        </div>

        {/* Info message about required fields */}
        {!hasObservacao && (
          <span className="text-[10px] text-amber-600 font-medium">
            ‚ö†Ô∏è Registre as informa√ß√µes antes de continuar
          </span>
        )}
      </div>
    </div>
  );
};

type SortField = keyof AlertData;
type SortDirection = 'asc' | 'desc' | null;

export const ActionTable = ({ alertData, onUpdateAcknowledgment, loading }: ActionTableProps) => {
  // Estados principais
  const [currentPage, setCurrentPage] = useState(1);
  const [searchTerm, setSearchTerm] = useState('');
  const [itemsPerPage, setItemsPerPage] = useState<number>(5);
  const [sortField, setSortField] = useState<SortField>('chamado');
  const [sortDirection, setSortDirection] = useState<SortDirection>('desc');

  // Estados dos modais
  const [observacaoDialogOpen, setObservacaoDialogOpen] = useState(false);
  const [selectedChamadoForEdit, setSelectedChamadoForEdit] = useState<string>('');
  const [observacaoText, setObservacaoText] = useState('');
  const [operadorText, setOperadorText] = useState('');

  // WebSocket
  const {
    timers,
    isConnected,
    startTimer,
    stopTimer,
    updateObservacao,
    updateOperador,
    getRemainingTime,
    formatTime,
    isTimerActive,
    getState,
    setWatchedChamados,
    advanceLevel,
    backLevel
  } = useWebsocketTimers();

  // Primeiro registrar os chamados que queremos monitorar
  useEffect(() => {
    if (!alertData || alertData.length === 0) return;

    const chamadosNum = alertData.map(a => parseInt(a.chamado));
    setWatchedChamados(chamadosNum);

    // For√ßar getState imediatamente
    chamadosNum.forEach(chamado => getState(chamado));
  }, [alertData, setWatchedChamados, getState]);

  // Estados locais para observa√ß√µes
  const [localObservacoes, setLocalObservacoes] = useState<Map<string, { observacao: string; operador: string }>>(new Map());

  // Auto-advance when timer reaches 0
  useEffect(() => {
    const interval = setInterval(() => {
      timers.forEach((timerState, chamadoNum) => {
        const currentLevel = timerState.current_level || 0;
        const remainingTime = getRemainingTime(chamadoNum, currentLevel);
        
        if (remainingTime === 0 && timerState.is_active && currentLevel < 4) {
          // Auto-advance to next level
          handleAdvanceLevel(chamadoNum.toString());
        }
      });
    }, 1000);

    return () => clearInterval(interval);
  }, [timers, getRemainingTime]);

  // Fun√ß√µes utilit√°rias
  const formatDate = useCallback((dateString: string) => {
    if (!dateString || dateString === '' || dateString === 'null' || dateString === 'undefined') {
      return '-';
    }

    try {
      let date: Date;
      const cleanString = String(dateString).trim();

      if (/^\d{13}$/.test(cleanString)) {
        date = new Date(parseInt(cleanString));
      } else if (/^\d{10}$/.test(cleanString)) {
        date = new Date(parseInt(cleanString) * 1000);
      } else if (/^\d{2}\/\d{2}\/\d{4}/.test(cleanString)) {
        const parts = cleanString.split(' ');
        const datePart = parts[0];
        const timePart = parts[1] || '00:00:00';
        const [day, month, year] = datePart.split('/');
        const [hour, minute, second] = timePart.split(':');

        date = new Date(
          parseInt(year),
          parseInt(month) - 1,
          parseInt(day),
          parseInt(hour || '0'),
          parseInt(minute || '0'),
          parseInt(second || '0')
        );
      } else {
        date = new Date(cleanString);
      }

      if (isNaN(date.getTime())) return cleanString;

      const year = date.getFullYear();
      if (year < 1900 || year > 2100) return cleanString;

      return date.toLocaleString('pt-BR', {
        day: '2-digit',
        month: '2-digit',
        year: 'numeric',
        hour: '2-digit',
        minute: '2-digit',
        second: '2-digit',
      });
    } catch (error) {
      return String(dateString);
    }
  }, []);

  const getSeverityColor = useCallback((severity: string) => {
    return severity.includes('4')
      ? 'bg-destructive text-destructive-foreground'
      : 'bg-yellow-500 text-yellow-950';
  }, []);

  // Handlers para acionamento
  const handleAcknowledgment = useCallback(async (alert: AlertData) => {
    try {
      toast({
        title: "Alerta acionado",
        description: `Chamado ${alert.chamado} foi acionado com sucesso`,
      });

      onUpdateAcknowledgment(alert.id, true);
    } catch (error: any) {
      toast({
        title: "Erro ao acionar alerta",
        description: error.message || "N√£o foi poss√≠vel concluir o acionamento",
        variant: "destructive",
      });
    }
  }, [onUpdateAcknowledgment]);

  // Handlers para timer
  const handleStartTimer = useCallback((chamado: string, level: number = 0) => {
    const chamadoNum = parseInt(chamado);
    const duration = 1200; // 20 minutos em segundos

    console.log(`Iniciando timer para chamado ${chamado}, level ${level}, duration ${duration}`);

    const success = startTimer(chamadoNum, level, duration);

    if (success) {
      toast({
        title: "Timer Iniciado",
        description: `Primeira escala√ß√£o iniciada para chamado ${chamado} (20 minutos)`,
      });

      // Solicitar o estado ap√≥s iniciar para garantir sincroniza√ß√£o
      setTimeout(() => {
        console.log(`Solicitando estado ap√≥s iniciar timer para chamado ${chamado}`);
        getState(chamadoNum);
      }, 1000);
    }
  }, [startTimer, getState]);

  const handleFinishTimer = useCallback((chamado: string) => {
    const chamadoNum = parseInt(chamado);
    const success = stopTimer(chamadoNum);

    if (success) {
      toast({
        title: "Timer Finalizado",
        description: `Acionamento do chamado ${chamado} foi finalizado`,
      });
    }
  }, [stopTimer]);

  const handleAdvanceLevel = useCallback((chamado: string) => {
    const chamadoNum = parseInt(chamado);
    const timerState = timers.get(chamadoNum);
    const currentLevel = timerState?.current_level || 0;
    const nextLevel = currentLevel + 1;

    // Start new timer for next level
    const duration = 1200; // 20 minutes for each level
    const success = advanceLevel(chamadoNum, nextLevel, duration);

    if (success) {
      const levelName = nextLevel === 1 ? "1¬∫ Escalonamento" : 
                       nextLevel === 2 ? "2¬∫ Escalonamento" :
                       nextLevel === 3 ? "3¬∫ Escalonamento" :
                       nextLevel === 4 ? "4¬∫ Escalonamento" : "";
      
      toast({
        title: "N√≠vel Avan√ßado",
        description: `Avan√ßado para ${levelName} - Chamado ${chamado}`,
      });

      // Clear local observacao when advancing
      setLocalObservacoes(prev => {
        const newMap = new Map(prev);
        newMap.delete(chamado);
        return newMap;
      });
    }
  }, [timers, advanceLevel]);

  const handleBackLevel = useCallback((chamado: string) => {
    const chamadoNum = parseInt(chamado);
    const timerState = timers.get(chamadoNum);
    const currentLevel = timerState?.current_level || 0;
    const prevLevel = Math.max(0, currentLevel - 1);

    // Start new timer for previous level
    const duration = 1200; // 20 minutes
    const success = backLevel(chamadoNum, prevLevel, duration);

    if (success) {
      const levelName = prevLevel === 0 ? "Primeira Escala√ß√£o" :
                       prevLevel === 1 ? "1¬∫ Escalonamento" :
                       prevLevel === 2 ? "2¬∫ Escalonamento" :
                       prevLevel === 3 ? "3¬∫ Escalonamento" : "";
      
      toast({
        title: "N√≠vel Retrocedido",
        description: `Retornado para ${levelName} - Chamado ${chamado}`,
      });

      // Clear local observacao when going back
      setLocalObservacoes(prev => {
        const newMap = new Map(prev);
        newMap.delete(chamado);
        return newMap;
      });
    }
  }, [timers, backLevel]);

  // Handlers para observa√ß√£o
  const handleOpenObservacao = useCallback((chamado: string) => {
    setSelectedChamadoForEdit(chamado);
    const existing = localObservacoes.get(chamado);
    setObservacaoText(existing?.observacao || '');
    setOperadorText(existing?.operador || '');
    setObservacaoDialogOpen(true);
  }, [localObservacoes]);

  const handleSaveObservacao = useCallback(() => {
    if (!selectedChamadoForEdit) return;

    const chamadoNum = parseInt(selectedChamadoForEdit);
    const timerState = timers.get(chamadoNum);
    const currentLevel = timerState?.current_level || 0;

    // Atualizar no WebSocket
    if (observacaoText.trim()) {
      updateObservacao(chamadoNum, currentLevel, observacaoText.trim());
    }

    if (operadorText.trim()) {
      updateOperador(chamadoNum, operadorText.trim());
    }

    // Salvar localmente
    setLocalObservacoes(prev => {
      const newMap = new Map(prev);
      newMap.set(selectedChamadoForEdit, {
        observacao: observacaoText.trim(),
        operador: operadorText.trim()
      });
      return newMap;
    });

    setObservacaoDialogOpen(false);
    setObservacaoText('');
    setOperadorText('');

    toast({
      title: "Informa√ß√µes Salvas",
      description: `Informa√ß√µes do chamado ${selectedChamadoForEdit} foram registradas`,
    });
  }, [selectedChamadoForEdit, observacaoText, operadorText, updateObservacao, updateOperador, timers]);

  // Handlers para ordena√ß√£o
  const handleSort = useCallback((field: SortField) => {
    if (sortField === field) {
      if (sortDirection === 'asc') {
        setSortDirection('desc');
      } else if (sortDirection === 'desc') {
        setSortDirection(null);
        setSortField('chamado');
      } else {
        setSortDirection('asc');
      }
    } else {
      setSortField(field);
      setSortDirection('asc');
    }
  }, [sortField, sortDirection]);

  const getSortIcon = useCallback((field: SortField) => {
    if (sortField !== field) {
      return <ArrowUpDown className="h-4 w-4 ml-1 opacity-50" />;
    }
    if (sortDirection === 'asc') {
      return <ArrowUp className="h-4 w-4 ml-1" />;
    }
    if (sortDirection === 'desc') {
      return <ArrowDown className="h-4 w-4 ml-1" />;
    }
    return <ArrowUpDown className="h-4 w-4 ml-1 opacity-50" />;
  }, [sortField, sortDirection]);

  // Dados filtrados e paginados
  const filteredData = useMemo(() => {
    if (!searchTerm.trim()) return alertData;

    const searchLower = searchTerm.toLowerCase().trim();
    return alertData.filter(alert =>
      Object.values(alert).some(value =>
        String(value).toLowerCase().includes(searchLower)
      )
    );
  }, [alertData, searchTerm]);

  const { sortedAndPaginatedData, totalPages } = useMemo(() => {
    let sortedData = [...filteredData];

    if (sortField && sortDirection) {
      sortedData.sort((a, b) => {
        let aValue: any = a[sortField];
        let bValue: any = b[sortField];

        if (sortField === 'chamado') {
          aValue = parseInt(a.chamado) || 0;
          bValue = parseInt(b.chamado) || 0;
        } else if (sortField === 'abertura_chamado') {
          aValue = new Date(a.abertura_chamado).getTime() || 0;
          bValue = new Date(b.abertura_chamado).getTime() || 0;
        } else {
          aValue = String(aValue).toLowerCase();
          bValue = String(bValue).toLowerCase();
        }

        if (aValue < bValue) return sortDirection === 'asc' ? -1 : 1;
        if (aValue > bValue) return sortDirection === 'asc' ? 1 : -1;
        return 0;
      });
    } else {
      sortedData.sort((a, b) => {
        const chamadoA = parseInt(a.chamado) || 0;
        const chamadoB = parseInt(b.chamado) || 0;
        return chamadoB - chamadoA;
      });
    }

    const startIndex = (currentPage - 1) * itemsPerPage;
    const endIndex = startIndex + itemsPerPage;
    const paginatedData = sortedData.slice(startIndex, endIndex);
    const totalPages = Math.ceil(sortedData.length / itemsPerPage);

    return { sortedAndPaginatedData: paginatedData, totalPages };
  }, [filteredData, currentPage, itemsPerPage, sortField, sortDirection]);

  // Handlers para pagina√ß√£o
  const handleItemsPerPageChange = useCallback((value: string) => {
    const num = parseInt(value, 10);
    setItemsPerPage(num);
    setCurrentPage(1);
  }, []);

  const handlePageChange = useCallback((page: number) => {
    setCurrentPage(page);
  }, []);

  return (
    <TooltipProvider>
      <Card className="bg-card border-border">
        <CardHeader>
          {/* Status da Conex√£o WebSocket */}
          <div className="flex items-center justify-between mb-4">
            <div className="flex items-center gap-3 px-4 py-2 rounded-lg border bg-card">
              <div className={`relative h-4 w-4 rounded-full ${isConnected ? 'bg-websocket-connected animate-pulse-slow' : 'bg-websocket-disconnected'}`}>
                {isConnected && (
                  <div className="absolute inset-0 rounded-full bg-websocket-connected animate-ping opacity-30" />
                )}
              </div>
              <span className={`text-sm font-medium ${isConnected ? 'text-websocket-connected' : 'text-websocket-disconnected'}`}>
                WebSocket: {isConnected ? 'Conectado e Sincronizado' : 'Desconectado - Tentando Reconectar...'}
              </span>
              {!isConnected && (
                <div className="h-3 w-3 border-2 border-websocket-disconnected border-t-transparent rounded-full animate-spin" />
              )}
            </div>
            <div className="text-xs text-muted-foreground">
              URL: wss://rsgjd6wsza.execute-api.us-east-1.amazonaws.com
            </div>
          </div>

          {/* Campo de Pesquisa */}
          <div className="relative mb-4">
            <Search className="absolute left-3 top-1/2 h-4 w-4 -translate-y-1/2 text-muted-foreground" />
            <Input
              placeholder="Pesquisar por chamado, tipo, grupo, status, t√≠tulo..."
              value={searchTerm}
              onChange={(e) => setSearchTerm(e.target.value)}
              className="pl-10"
            />
          </div>

          {searchTerm && (
            <div className="text-sm text-muted-foreground">
              {filteredData.length === 0 ? (
                <span>Nenhum resultado encontrado para "{searchTerm}"</span>
              ) : (
                <span>
                  {filteredData.length} resultado{filteredData.length !== 1 ? 's' : ''}
                  {filteredData.length !== alertData.length && ` de ${alertData.length} `}
                  para "{searchTerm}"
                </span>
              )}
            </div>
          )}
        </CardHeader>

        <CardContent>
          {/* Desktop Layout */}
          <div className="overflow-x-auto">
            <Table className="min-w-[1200px]">
              <TableHeader>
                <TableRow className="border-border hover:bg-accent">
                  {[
                    { key: 'chamado' as SortField, label: 'Chamado', width: 'w-20' },
                    { key: 'tipo_chamado' as SortField, label: 'Classifica√ß√£o', width: 'w-24' },
                    { key: 'grupo_chamado' as SortField, label: 'Grupo', width: 'w-20' },
                    { key: 'status_chamado' as SortField, label: 'Status', width: 'w-20' },
                    { key: 'abertura_chamado' as SortField, label: 'Abertura', width: 'w-28' },
                    { key: 'resumo_chamado' as SortField, label: 'T√≠tulo', width: 'flex-1 min-w-40' },
                    { key: 'severidade_chamado' as SortField, label: 'Severidade', width: 'w-20' }
                  ].map(({ key, label, width }) => (
                    <TableHead key={key} className={`text-muted-foreground ${width}`}>
                      <Button
                        variant="ghost"
                        className="h-auto p-0 font-medium text-muted-foreground hover:text-foreground text-xs"
                        onClick={() => handleSort(key)}
                      >
                        {label}
                        {getSortIcon(key)}
                      </Button>
                    </TableHead>
                  ))}
                  <TableHead className="text-muted-foreground w-56 text-center">
                    <span className="text-xs font-medium">Controle de Escalonamento</span>
                  </TableHead>
                  <TableHead className="text-muted-foreground w-16 text-center">Chat</TableHead>
                  <TableHead className="text-muted-foreground w-32 text-center">Informa√ß√µes</TableHead>
                </TableRow>
              </TableHeader>
              <TableBody>
                {loading ? (
                  <TableRow>
                    <TableCell colSpan={10} className="text-center py-8">
                      <div className="inline-block animate-spin rounded-full h-8 w-8 border-b-2 border-primary mb-4"></div>
                      <p>Carregando dados...</p>
                    </TableCell>
                  </TableRow>
                ) : sortedAndPaginatedData.length === 0 ? (
                  <TableRow>
                    <TableCell colSpan={10} className="text-center py-8 text-muted-foreground">
                      {searchTerm ? 'Nenhum resultado encontrado' : 'Nenhum dado dispon√≠vel'}
                    </TableCell>
                  </TableRow>
                ) : (
                  sortedAndPaginatedData.map((alert) => {
                    const isChat = alert.acionado === 'true' || alert.chat;
                    const observacao = localObservacoes.get(alert.chamado);
                    const chamadoNum = parseInt(alert.chamado);
                    const timerState = timers.get(chamadoNum);
                    const currentLevel = timerState?.current_level || 0;
                    const timerActive = isTimerActive(chamadoNum, currentLevel);
                    const remainingTime = getRemainingTime(chamadoNum, currentLevel);

                    return (
                      <TableRow key={alert.id} className="border-border hover:bg-accent transition-colors">
                        <TableCell className="font-medium">
                          <Button
                            variant="link"
                            size="sm"
                            className="p-0 text-foreground hover:underline text-xs"
                          >
                            {alert.chamado}
                          </Button>
                        </TableCell>
                        <TableCell>
                          <Tooltip>
                            <TooltipTrigger asChild>
                              <span className="truncate block max-w-[80px] text-xs">
                                {alert.tipo_chamado}
                              </span>
                            </TooltipTrigger>
                            <TooltipContent>
                              <p className="max-w-xs">{alert.tipo_chamado}</p>
                            </TooltipContent>
                          </Tooltip>
                        </TableCell>
                        <TableCell className="text-xs">{alert.grupo_chamado}</TableCell>
                        <TableCell className="text-xs">{alert.status_chamado}</TableCell>
                        <TableCell className="text-xs">{formatDate(alert.abertura_chamado)}</TableCell>
                        <TableCell>
                          <Tooltip>
                            <TooltipTrigger asChild>
                              <span className="truncate block max-w-[120px] text-xs">
                                {alert.resumo_chamado}
                              </span>
                            </TooltipTrigger>
                            <TooltipContent>
                              <p className="max-w-md">{alert.resumo_chamado}</p>
                            </TooltipContent>
                          </Tooltip>
                        </TableCell>
                        <TableCell>
                          <Badge className={`${getSeverityColor(alert.severidade_chamado)} text-xs`}>
                            {alert.severidade_chamado}
                          </Badge>
                        </TableCell>
                        <TableCell>
                          <TimerControl
                            alert={alert}
                            timerActive={timerActive}
                            timerState={timerState}
                            remainingTime={remainingTime}
                            formatTime={formatTime}
                            isConnected={isConnected}
                            onStartTimer={handleStartTimer}
                            onFinishTimer={handleFinishTimer}
                            onAdvanceLevel={handleAdvanceLevel}
                            onBackLevel={handleBackLevel}
                            hasObservacao={!!observacao}
                          />
                        </TableCell>
                        <TableCell>
                          <Tooltip>
                            <TooltipTrigger asChild>
                              <Button
                                variant={isChat ? "default" : "outline"}
                                size="sm"
                                onClick={() => !isChat && handleAcknowledgment(alert)}
                                disabled={isChat}
                                className={`${isChat
                                  ? 'bg-websocket-connected text-white hover:bg-websocket-connected/90 shadow-lg'
                                  : 'border-border hover:bg-accent hover:border-timer-active transition-all duration-300'
                                  } h-8 w-8 p-0`}
                              >
                                {isChat ? (
                                  <Check className="h-4 w-4" />
                                ) : (
                                  <AlertTriangle className="h-4 w-4" />
                                )}
                              </Button>
                            </TooltipTrigger>
                            <TooltipContent>
                              <p>{isChat ? 'J√° acionado' : 'Acionar grupo'}</p>
                            </TooltipContent>
                          </Tooltip>
                        </TableCell>
                        <TableCell>
                          <Tooltip>
                            <TooltipTrigger asChild>
                              <Button
                                variant={observacao ? "default" : "outline"}
                                size="sm"
                                onClick={() => handleOpenObservacao(alert.chamado)}
                                className={`${observacao
                                  ? 'bg-websocket-connected text-white hover:bg-websocket-connected/90 shadow-lg'
                                  : 'border-border hover:bg-accent hover:border-timer-active transition-all duration-300'
                                  } h-8 px-2 text-xs`}
                              >
                                {observacao ? (
                                  <>
                                    <CheckCircle className="h-4 w-4 mr-1" />
                                    Registrado
                                  </>
                                ) : (
                                  <>
                                    <Edit3 className="h-4 w-4 mr-1" />
                                    Registrar
                                  </>
                                )}
                              </Button>
                            </TooltipTrigger>
                            <TooltipContent>
                              <p>{observacao ? 'Informa√ß√µes registradas' : 'Registrar informa√ß√µes'}</p>
                            </TooltipContent>
                          </Tooltip>
                        </TableCell>
                      </TableRow>
                    );
                  })
                )}
              </TableBody>
            </Table>
          </div>

          {/* Pagina√ß√£o */}
          {!loading && sortedAndPaginatedData.length > 0 && totalPages > 1 && (
            <div className="flex items-center justify-between mt-4 pt-4 border-t border-border">
              <div className="text-sm text-muted-foreground">
                Mostrando {((currentPage - 1) * itemsPerPage) + 1} a {Math.min(currentPage * itemsPerPage, filteredData.length)} de {filteredData.length} registros
                {searchTerm && filteredData.length !== alertData.length && ` (filtrados de ${alertData.length})`}
              </div>

              <div className="flex items-center gap-2">
                <Label htmlFor="itemsPerPage" className="text-sm font-medium whitespace-nowrap">
                  Por P√°gina:
                </Label>
                <Select value={itemsPerPage.toString()} onValueChange={handleItemsPerPageChange}>
                  <SelectTrigger className="w-20">
                    <SelectValue />
                  </SelectTrigger>
                  <SelectContent>
                    <SelectItem value="5">5</SelectItem>
                    <SelectItem value="10">10</SelectItem>
                    <SelectItem value="15">15</SelectItem>
                    <SelectItem value="20">20</SelectItem>
                  </SelectContent>
                </Select>
              </div>

              <div className="flex items-center gap-2">
                <Button
                  variant="outline"
                  size="sm"
                  onClick={() => handlePageChange(currentPage - 1)}
                  disabled={currentPage === 1}
                  className="h-8 px-3"
                >
                  <ChevronLeft className="h-4 w-4 mr-1" />
                  Anterior
                </Button>

                <div className="flex items-center gap-1">
                  {[...Array(Math.min(totalPages, 5))].map((_, index) => {
                    let page;
                    if (totalPages <= 5) {
                      page = index + 1;
                    } else if (currentPage <= 3) {
                      page = index + 1;
                    } else if (currentPage >= totalPages - 2) {
                      page = totalPages - 4 + index;
                    } else {
                      page = currentPage - 2 + index;
                    }

                    return (
                      <Button
                        key={page}
                        variant={currentPage === page ? "default" : "outline"}
                        size="sm"
                        onClick={() => handlePageChange(page)}
                        className="h-8 w-8 p-0"
                      >
                        {page}
                      </Button>
                    );
                  })}
                </div>

                <Button
                  variant="outline"
                  size="sm"
                  onClick={() => handlePageChange(currentPage + 1)}
                  disabled={currentPage === totalPages}
                  className="h-8 px-3"
                >
                  Pr√≥ximo
                  <ChevronRight className="h-4 w-4 ml-1" />
                </Button>
              </div>
            </div>
          )}

          {/* Modal de Observa√ß√£o */}
          <Dialog open={observacaoDialogOpen} onOpenChange={setObservacaoDialogOpen}>
            <DialogContent className="sm:max-w-lg border-border bg-card">
              <DialogHeader className="text-left">
                <DialogTitle className="text-xl bg-gradient-to-r from-blue-500 to-blue-600 bg-clip-text text-transparent">
                  üìù Registrar Informa√ß√µes - Chamado {selectedChamadoForEdit}
                </DialogTitle>
                <DialogDescription className="text-muted-foreground">
                  Registre as informa√ß√µes do acionamento. √â obrigat√≥rio preencher antes de avan√ßar ou finalizar.
                </DialogDescription>
              </DialogHeader>
              <div className="space-y-6 pt-2">
                <div className="space-y-2">
                  <Label htmlFor="operador" className="text-sm font-semibold text-foreground">
                    üë§ Operador Respons√°vel <span className="text-red-500">*</span>
                  </Label>
                  <Input
                    id="operador"
                    value={operadorText}
                    onChange={(e) => setOperadorText(e.target.value)}
                    placeholder="Ex: Jo√£o Silva"
                    className="border-border focus:border-timer-active transition-colors"
                  />
                </div>
                <div className="space-y-2">
                  <Label htmlFor="observacao" className="text-sm font-semibold text-foreground">
                    üìÑ Observa√ß√µes do Acionamento <span className="text-red-500">*</span>
                  </Label>
                  <Textarea
                    id="observacao"
                    value={observacaoText}
                    onChange={(e) => setObservacaoText(e.target.value)}
                    placeholder="Descreva o que foi identificado, a√ß√µes tomadas, respons√°veis contatados..."
                    rows={5}
                    className="border-border focus:border-timer-active transition-colors resize-none"
                  />
                  <div className="text-xs text-muted-foreground">
                    {observacaoText.length}/500 caracteres
                  </div>
                </div>
                <div className="bg-amber-50 dark:bg-amber-950/20 border border-amber-200 dark:border-amber-800 rounded-lg p-3">
                  <div className="flex items-start gap-2">
                    <AlertTriangle className="h-4 w-4 text-amber-600 mt-0.5" />
                    <div className="text-xs text-amber-700 dark:text-amber-400">
                      <p className="font-semibold mb-1">Importante:</p>
                      <p>O preenchimento destas informa√ß√µes √© obrigat√≥rio para poder avan√ßar, retroceder ou finalizar o escalonamento.</p>
                    </div>
                  </div>
                </div>
                <div className="flex justify-end gap-3 pt-4 border-t border-border">
                  <Button
                    variant="outline"
                    onClick={() => setObservacaoDialogOpen(false)}
                    className="px-6"
                  >
                    Cancelar
                  </Button>
                  <Button
                    onClick={handleSaveObservacao}
                    className="px-6 bg-gradient-to-r from-blue-500 to-blue-600 text-white border-none hover:opacity-90 transition-all duration-300"
                    disabled={!operadorText.trim() || !observacaoText.trim()}
                  >
                    üíæ Salvar Informa√ß√µes
                  </Button>
                </div>
              </div>
            </DialogContent>
          </Dialog>
        </CardContent>
      </Card>
    </TooltipProvider>
  );
};

// websocket.ts
export interface WSMessage {
  action: string;
  chamadoId?: number;
  observation?: string;
  level?: number;
}

class WebSocketService {
  private ws: WebSocket | null = null;
  private url: string;
  private isConnected = false;
  private listeners: ((msg: any) => void)[] = [];
  private queue: WSMessage[] = []; // fila para mensagens enviadas antes da conexão abrir

  constructor(url: string) {
    this.url = url;
    this.connect();
  }

  private connect() {
    this.ws = new WebSocket(this.url);

    this.ws.onopen = () => {
      this.isConnected = true;
      console.log("[WS] Conectado!");

      // drena a fila
      while (this.queue.length > 0) {
        const msg = this.queue.shift();
        if (msg) this.send(msg);
      }
    };

    this.ws.onclose = () => {
      this.isConnected = false;
      console.warn("[WS] Desconectado. Tentando reconectar em 2s...");
      setTimeout(() => this.connect(), 2000);
    };

    this.ws.onmessage = (event) => {
      try {
        const msg = JSON.parse(event.data);
        this.listeners.forEach((cb) => cb(msg));
      } catch (err) {
        console.error("[WS] Erro parseando mensagem:", err);
      }
    };
  }

  send(msg: WSMessage) {
    if (this.isConnected && this.ws?.readyState === WebSocket.OPEN) {
      this.ws.send(JSON.stringify(msg));
    } else {
      console.log("[WS] Não conectado. Enfileirando mensagem:", msg);
      this.queue.push(msg);
    }
  }

  subscribe(cb: (msg: any) => void) {
    this.listeners.push(cb);
  }
}

export const WS = new WebSocketService("wss://SEU-ENDPOINT.execute-api.us-east-1.amazonaws.com/dev");

















// useChamadoStore.ts
import { create } from "zustand";
import { WS } from "./websocket";

interface ChamadoState {
  chamados: Record<number, any>;
  startChamado: (chamadoId: number) => void;
  confirmChamado: (chamadoId: number, observation: string) => void;
  escalateChamado: (chamadoId: number, level: number) => void;
}

export const useChamadoStore = create<ChamadoState>((set, get) => {
  // assina o WS só uma vez
  WS.subscribe((msg) => {
    console.log("[WS] Mensagem recebida:", msg);
    if (msg.type === "stateUpdate") {
      set((state) => ({
        chamados: {
          ...state.chamados,
          [msg.chamadoId]: msg.state,
        },
      }));
    }
  });

  return {
    chamados: {},

    startChamado: (chamadoId) => {
      WS.send({ action: "startTimer", chamadoId });
    },

    confirmChamado: (chamadoId, observation) => {
      WS.send({ action: "confirmTimer", chamadoId, observation });
    },

    escalateChamado: (chamadoId, level) => {
      WS.send({ action: "escalateTimer", chamadoId, level });
    },
  };
});

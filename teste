import { Card } from '@/components/ui/card';
import { useState } from 'react';
import { AlertTriangle, Clock, Timer, TrendingUp } from 'lucide-react';
import { cn } from '@/lib/utils';

interface AlertData {
  id: string;
  chamado: string;
  tipo_chamado: string;
  grupo_chamado: string;
  status_chamado: string;
  abertura_chamado: string;
  resumo_chamado: string;
  severidade_chamado: string;
  acionado: string;
  chat: boolean;
}

interface MonitoringCardsProps {
  alertData: AlertData[];
  onFilterSelect: (filter: string | null) => void;
}

export const MonitoringCards = ({ alertData, onFilterSelect }: MonitoringCardsProps) => {
  const [activeFilter, setActiveFilter] = useState<string | null>(null);

  const handleCardClick = (filterKey: string) => {
    if (activeFilter === filterKey) {
      setActiveFilter(null);
      onFilterSelect(null);
    } else {
      setActiveFilter(filterKey);
      onFilterSelect(filterKey);
    }
  };

  const getTimeRemaining = (openingTime: string) => {
    const now = new Date();
    const opening = new Date(openingTime);
    const diffMs = now.getTime() - opening.getTime();
    const diffMinutes = Math.floor(diffMs / (1000 * 60));
    const slaMinutes = 60;
    return slaMinutes - diffMinutes;
  };

  const tempoExpirado = alertData.filter(alert => getTimeRemaining(alert.abertura_chamado) <= 0).length;
  const cincoMinRest = alertData.filter(alert => getTimeRemaining(alert.abertura_chamado) > 0 && getTimeRemaining(alert.abertura_chamado) <= 5).length;
  const dezMinRest = alertData.filter(alert => getTimeRemaining(alert.abertura_chamado) > 5 && getTimeRemaining(alert.abertura_chamado) <= 10).length;
  
  const sev4Incidents = alertData.filter(alert => 
    alert.tipo_chamado.toLowerCase().includes('incidente') && 
    alert.severidade_chamado.includes('4')
  ).length;
  
  const sev4Alerts = alertData.filter(alert => 
    alert.tipo_chamado.toLowerCase().includes('alerta') && 
    alert.severidade_chamado.includes('4') &&
    alert.acionado !== 'OK'
  ).length;
  
  const sev3Incidents = alertData.filter(alert => 
    alert.tipo_chamado.toLowerCase().includes('incidente') && 
    alert.severidade_chamado.includes('3')
  ).length;

  const pendenteChat = alertData.filter(alert => !alert.chat && alert.acionado !== 'OK').length;
  const semOperador = alertData.filter(alert => alert.acionado === 'N/A' || !alert.acionado).length;

  return (
    <div className="flex flex-col gap-4 h-full">
      {/* Grupo: Cenários de Crise */}
      <CardGroup title="CENÁRIO DE CRISE">
        <MetricCard
          label="Incidentes SEV4"
          value={sev4Incidents}
          icon={AlertTriangle}
          variant="danger"
          filterKey="SEV4_INCIDENT"
          isActive={activeFilter === 'SEV4_INCIDENT'}
          onClick={() => handleCardClick('SEV4_INCIDENT')}
        />
      </CardGroup>

      {/* Grupo: Tempo */}
      <CardGroup title="TEMPO">
        <MetricCard
          label="5 min restantes"
          value={cincoMinRest}
          icon={Clock}
          variant="warning"
          size="small"
          filterKey="CINCO_MINUTOS"
          isActive={activeFilter === 'CINCO_MINUTOS'}
          onClick={() => handleCardClick('CINCO_MINUTOS')}
        />
        <MetricCard
          label="Tempo Expirado"
          value={tempoExpirado}
          icon={Timer}
          variant="danger"
          size="medium"
          filterKey="TEMPO_EXPIRADO"
          isActive={activeFilter === 'TEMPO_EXPIRADO'}
          onClick={() => handleCardClick('TEMPO_EXPIRADO')}
        />
        <MetricCard
          label="10 min restantes"
          value={dezMinRest}
          icon={Clock}
          variant="warning"
          size="small"
          filterKey="DEZ_MINUTOS"
          isActive={activeFilter === 'DEZ_MINUTOS'}
          onClick={() => handleCardClick('DEZ_MINUTOS')}
        />
      </CardGroup>

      {/* Grupo: Alertas SEV4 */}
      <CardGroup title="ALERTAS SEV4">
        <MetricCard
          label="Alertas SEV4"
          value={sev4Alerts}
          icon={AlertTriangle}
          variant="primary"
          filterKey="SEV4_ALERT"
          isActive={activeFilter === 'SEV4_ALERT'}
          onClick={() => handleCardClick('SEV4_ALERT')}
        />
      </CardGroup>

      {/* Grupo: Pendente Envio */}
      <CardGroup title="PENDENTE ENVIO">
        <MetricCard
          label="Pendente Chat"
          value={pendenteChat}
          icon={TrendingUp}
          variant="accent"
          filterKey="PENDENTE_CHAT"
          isActive={activeFilter === 'PENDENTE_CHAT'}
          onClick={() => handleCardClick('PENDENTE_CHAT')}
        />
      </CardGroup>

      {/* Grupo: Incidentes SEV3 */}
      <CardGroup title="INCIDENTES SEV3">
        <MetricCard
          label="Incidentes SEV3"
          value={sev3Incidents}
          icon={AlertTriangle}
          variant="secondary"
          filterKey="SEV3_INCIDENT"
          isActive={activeFilter === 'SEV3_INCIDENT'}
          onClick={() => handleCardClick('SEV3_INCIDENT')}
        />
      </CardGroup>

      {/* Grupo: Sem Operador */}
      <CardGroup title="SEM OPERADOR">
        <MetricCard
          label="Sem Operador"
          value={semOperador}
          icon={AlertTriangle}
          variant="muted"
          filterKey="SEM_OPERADOR"
          isActive={activeFilter === 'SEM_OPERADOR'}
          onClick={() => handleCardClick('SEM_OPERADOR')}
        />
      </CardGroup>
    </div>
  );
};

interface CardGroupProps {
  title: string;
  children: React.ReactNode;
}

function CardGroup({ title, children }: CardGroupProps) {
  return (
    <div className="flex flex-col gap-2">
      <div className="text-xs font-semibold text-muted-foreground uppercase tracking-wider px-2">
        {title}
      </div>
      <div className="flex flex-col gap-2">
        {children}
      </div>
    </div>
  );
}

interface MetricCardProps {
  label: string;
  value: number;
  icon: React.ComponentType<any>;
  variant: 'primary' | 'secondary' | 'danger' | 'warning' | 'accent' | 'muted';
  size?: 'small' | 'medium' | 'large';
  filterKey: string;
  isActive: boolean;
  onClick: () => void;
}

function MetricCard({ 
  label, 
  value, 
  icon: Icon, 
  variant, 
  size = 'large',
  isActive, 
  onClick 
}: MetricCardProps) {
  const variantStyles = {
    primary: 'bg-primary/10 border-primary/30 hover:bg-primary/20 hover:border-primary/50 text-primary',
    secondary: 'bg-secondary/10 border-secondary/30 hover:bg-secondary/20 hover:border-secondary/50 text-secondary',
    danger: 'bg-destructive/10 border-destructive/30 hover:bg-destructive/20 hover:border-destructive/50 text-destructive',
    warning: 'bg-warning/10 border-warning/30 hover:bg-warning/20 hover:border-warning/50 text-warning',
    accent: 'bg-accent/10 border-accent/30 hover:bg-accent/20 hover:border-accent/50 text-accent',
    muted: 'bg-muted border-border hover:bg-card-hover text-muted-foreground',
  };

  const sizeStyles = {
    small: 'py-2 px-3',
    medium: 'py-4 px-4',
    large: 'py-5 px-4',
  };

  const textSizeStyles = {
    small: 'text-xs',
    medium: 'text-sm',
    large: 'text-base',
  };

  const valueSizeStyles = {
    small: 'text-lg',
    medium: 'text-2xl',
    large: 'text-3xl',
  };

  return (
    <Card
      onClick={onClick}
      className={cn(
        'cursor-pointer transition-all duration-300 border-2',
        variantStyles[variant],
        sizeStyles[size],
        isActive && 'ring-2 ring-primary ring-offset-2 ring-offset-background scale-[1.02]',
        'hover:scale-[1.02] hover:shadow-lg'
      )}
    >
      <div className="flex items-center justify-between gap-3">
        <div className="flex-1 flex flex-col gap-1">
          <span className={cn('font-medium uppercase tracking-wide', textSizeStyles[size])}>
            {label}
          </span>
          <span className={cn('font-bold', valueSizeStyles[size])}>
            {value}
          </span>
        </div>
        <div className={cn(
          'rounded-lg p-2 bg-card/50',
          size === 'small' && 'p-1.5'
        )}>
          <Icon className={cn(
            size === 'small' ? 'h-4 w-4' : size === 'medium' ? 'h-5 w-5' : 'h-6 w-6'
          )} />
        </div>
      </div>
    </Card>
  );
}

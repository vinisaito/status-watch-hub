import { useState, useEffect, useMemo, useCallback } from 'react';
import { Check, AlertTriangle, ExternalLink, Zap, Group, Calendar, Info, XCircle, Flame, ChevronLeft, ChevronRight, ArrowUpDown, ArrowUp, ArrowDown, Clock, Play, CheckCircle, X, RotateCcw, FastForward, Timer, StopCircle } from 'lucide-react';
import { Card, CardContent, CardHeader } from '@/components/ui/card';
import { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from '@/components/ui/table';
import { Badge } from '@/components/ui/badge';
import { Button } from '@/components/ui/button';
import { toast } from '@/hooks/use-toast';
import { Tooltip, TooltipContent, TooltipProvider, TooltipTrigger } from '@/components/ui/tooltip';
import { Dialog, DialogContent, DialogHeader, DialogTitle } from '@/components/ui/dialog';
import {Select, SelectContent, SelectItem, SelectTrigger, SelectValue} from '@/components/ui/select';
import { Textarea } from '@/components/ui/textarea';
import { Label } from '@/components/ui/label';

interface AlertData {
  id: string;
  chamado: string;
  tipo_chamado: string;
  grupo_chamado: string;
  status_chamado: string;
  abertura_chamado: string;
  resumo_chamado: string;
  severidade_chamado: string;
  chat: boolean;
}

interface EscalationState {
  status: 'pending' | 'confirmed' | 'escalating' | 'completed';
  currentLevel: 0 | 1 | 2 | 3 | 4;
  timeRemaining: number;
  timerActive: boolean;
  isAttended: boolean;
  observations: string;
  pendingStatus?: string;
  pendingObservations?: string;
}

interface ActivityTimer {
  startTime: string;
  isActive: boolean;
  elapsedTime: number;
  lastUpdate: string;
}

interface ActionTableProps {
  alertData: AlertData[];
  onUpdateAcknowledgment: (alertId: string, acknowledged: boolean) => void;
  loading: boolean;
}

type SortField = 'chamado' | 'tipo_chamado' | 'grupo_chamado' | 'status_chamado' | 'abertura_chamado' | 'resumo_chamado' | 'severidade_chamado' | 'acionado';
type SortDirection = 'asc' | 'desc' | null;

export const ActionTable = ({ alertData, onUpdateAcknowledgment, loading }: ActionTableProps) => {
  const [selectedIncident, setSelectedIncident] = useState<AlertData | null>(null);
  const [expandedRows, setExpandedRows] = useState<Set<string>>(new Set());
  const [currentPage, setCurrentPage] = useState(1);
  const itemsPerPage = 5;

  const [sortField, setSortField] = useState<SortField>('chamado');
  const [sortDirection, setSortDirection] = useState<SortDirection>('desc');

  const [acionadosSet, setAcionadosSet] = useState<Set<string>>(new Set());

  const [escalationStatus, setEscalationStatus] = useState<Record<string, string>>({});

  const [escalationStates, setEscalationStates] = useState<Record<string, EscalationState>>({});

  const [confirmationObservations, setConfirmationObservations] = useState<Record<string, string>>({});

  const [showStatusConfirmation, setShowStatusConfirmation] = useState<Record<string, boolean>>({});
  const [pendingStatusChange, setPendingStatusChange] = useState<Record<string, { status: string; observations: string }>>({});

  // Estados para cronômetro de atividade
  const [activityTimers, setActivityTimers] = useState<Record<string, ActivityTimer>>({});

  const saveToAPI = useCallback(async (alertId: string, data: any) => {
    try {
      const response = await fetch('https://f6ffk8e9fe.execute-api.us-east-1.amazonaws.com/prod/acompanhamento', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          chamado: parseInt(alertId),
          ...data,
          ttl: Math.floor(Date.now() / 1000) + (7 * 24 * 60 * 60), // 7 dias TTL
          alertOpenTime: new Date().toISOString(),
        }),
      });

      if (!response.ok) {
        throw new Error(`Erro na API: ${response.status}`);
      }

      return await response.json();
    } catch (error) {
      console.error('Erro ao salvar na API:', error);
      toast({
        title: "Erro ao salvar dados",
        description: "Não foi possível salvar na API. Tente novamente.",
        variant: "destructive",
      });
      throw error;
    }
  }, []);

  // Função para salvar cronômetro na API
  const saveActivityTimer = useCallback(async (alertId: string, timerData: ActivityTimer) => {
    try {
      await saveToAPI(alertId, {
        activityTimer: {
          startTime: timerData.startTime,
          isActive: timerData.isActive,
          lastUpdate: timerData.lastUpdate
        }
      });
    } catch (error) {
      console.error('Erro ao salvar cronômetro:', error);
    }
  }, [saveToAPI]);

  // Função para iniciar cronômetro de atividade
  const startActivityTimer = useCallback(async (alertId: string) => {
    const now = new Date().toISOString();
    const timerData: ActivityTimer = {
      startTime: now,
      isActive: true,
      elapsedTime: 0,
      lastUpdate: now
    };

    setActivityTimers(prev => ({
      ...prev,
      [alertId]: timerData
    }));

    await saveActivityTimer(alertId, timerData);

    toast({
      title: "Cronômetro iniciado",
      description: `Acompanhamento do chamado ${alertId} iniciado`,
    });
  }, [saveActivityTimer]);

  // Função para parar cronômetro de atividade
  const stopActivityTimer = useCallback(async (alertId: string) => {
    const currentTimer = activityTimers[alertId];
    if (!currentTimer) return;

    const now = new Date().toISOString();
    const updatedTimer: ActivityTimer = {
      ...currentTimer,
      isActive: false,
      lastUpdate: now
    };

    setActivityTimers(prev => ({
      ...prev,
      [alertId]: updatedTimer
    }));

    await saveActivityTimer(alertId, updatedTimer);

    toast({
      title: "Cronômetro parado",
      description: `Acompanhamento do chamado ${alertId} finalizado`,
    });
  }, [activityTimers, saveActivityTimer]);

  // Função para calcular tempo decorrido
  const calculateElapsedTime = useCallback((timer: ActivityTimer): number => {
    if (!timer.isActive) {
      return timer.elapsedTime;
    }

    const startTime = new Date(timer.startTime).getTime();
    const currentTime = new Date().getTime();
    return Math.floor((currentTime - startTime) / 1000);
  }, []);

  // Função para formatar tempo decorrido
  const formatElapsedTime = useCallback((seconds: number): string => {
    const hours = Math.floor(seconds / 3600);
    const minutes = Math.floor((seconds % 3600) / 60);
    const secs = seconds % 60;

    if (hours > 0) {
      return `${hours.toString().padStart(2, '0')}:${minutes.toString().padStart(2, '0')}:${secs.toString().padStart(2, '0')}`;
    }
    return `${minutes.toString().padStart(2, '0')}:${secs.toString().padStart(2, '0')}`;
  }, []);

  // Timer para atualizar cronômetros a cada segundo
  useEffect(() => {
    const interval = setInterval(() => {
      setActivityTimers(prev => {
        const updated = { ...prev };
        let hasActiveTimers = false;

        Object.keys(updated).forEach(alertId => {
          const timer = updated[alertId];
          if (timer.isActive) {
            hasActiveTimers = true;
            updated[alertId] = {
              ...timer,
              elapsedTime: calculateElapsedTime(timer)
            };
          }
        });

        return hasActiveTimers ? updated : prev;
      });
    }, 1000);

    return () => clearInterval(interval);
  }, [calculateElapsedTime]);

  // Função para carregar dados de confirmação salvos na API
  const loadConfirmationData = useCallback(async () => {
    try {
      const chamadosVisveis = alertData.map(alert => alert.chamado);
      console.log('Carregando dados para chamados:', chamadosVisveis);
      
      const confirmationPromises = chamadosVisveis.map(async (chamado) => {
        try {
          const response = await fetch(
            `https://f6ffk8e9fe.execute-api.us-east-1.amazonaws.com/prod/acompanhamento?chamado=${chamado}`,
            { method: 'GET' }
          );
          
          if (response.ok) {
            const allData = await response.json();
            console.log(`Dados recebidos para chamado ${chamado}:`, allData);
            
            // Filtra pelo chamado específico, convertendo números para string para comparação
            const chamadoData = Array.isArray(allData) 
              ? allData.find(item => item.chamado?.toString() === chamado.toString())
              : (allData.chamado?.toString() === chamado.toString() ? allData : null);
            
            console.log(`Dados filtrados para chamado ${chamado}:`, chamadoData);
            return { chamado, data: chamadoData };
          }
          return { chamado, data: null };
        } catch (error) {
          console.error(`Erro ao buscar dados do chamado ${chamado}:`, error);
          return { chamado, data: null };
        }
      });

      const results = await Promise.all(confirmationPromises);
      console.log('Resultados processados:', results);
      
      const newEscalationStates: Record<string, EscalationState> = {};
      const newConfirmationObservations: Record<string, string> = {};
      const newActivityTimers: Record<string, ActivityTimer> = {};
      
      results.forEach(({ chamado, data }) => {
        if (data) {
          console.log(`Processando chamado ${chamado}:`, data);
          
          // Processa cronômetro de atividade
          if (data.activityTimer) {
            const timerData = data.activityTimer;
            const now = new Date().getTime();
            const startTime = new Date(timerData.startTime).getTime();
            const elapsedTime = timerData.isActive ? Math.floor((now - startTime) / 1000) : 0;

            newActivityTimers[chamado] = {
              startTime: timerData.startTime,
              isActive: timerData.isActive,
              elapsedTime,
              lastUpdate: timerData.lastUpdate || timerData.startTime
            };
          }
          
          let status: EscalationState['status'] = 'pending';
          let currentLevel: EscalationState['currentLevel'] = 0;
          let isAttended = false;
          let lastObservation = '';
          
          if (data.confirmChat && data.confirmChat !== '') {
            status = 'confirmed';
            lastObservation = data.confirmChat;
            console.log(`Chamado ${chamado} tem confirmação:`, data.confirmChat);
          }
          
          if (data.escalations && Array.isArray(data.escalations)) {
            for (let i = 0; i < data.escalations.length; i++) {
              const escalation = data.escalations[i];
              if (escalation.status === 'em_andamento') {
                status = 'escalating';
                currentLevel = (escalation.level) as EscalationState['currentLevel'];
                lastObservation = escalation.observations || '';
                console.log(`Chamado ${chamado} está em escalação nível ${escalation.level}`);
                break;
              } else if (escalation.status === 'atendido') {
                status = 'completed';
                currentLevel = (escalation.level) as EscalationState['currentLevel'];
                isAttended = true;
                lastObservation = escalation.observations || '';
                console.log(`Chamado ${chamado} foi atendido no nível ${escalation.level}`);
                break;
              } else if (escalation.status === 'finalizado' && i < 3) {
                currentLevel = (escalation.level) as EscalationState['currentLevel'];
                lastObservation = escalation.observations || '';
                console.log(`Chamado ${chamado} finalizou nível ${escalation.level}`);
              }
            }
          }
          
          if (data.obsChat && data.obsChat.includes('atendida com sucesso')) {
            status = 'completed';
            isAttended = true;
            console.log(`Chamado ${chamado} foi marcado como atendido via obsChat`);
          }
          
          newEscalationStates[chamado] = {
            status,
            currentLevel,
            timeRemaining: 0, 
            timerActive: false,
            isAttended,
            observations: lastObservation
          };
          
          console.log(`Estado final para chamado ${chamado}:`, newEscalationStates[chamado]);
          
          if (data.confirmChat) {
            newConfirmationObservations[chamado] = data.confirmChat;
          }
        }
      });
      
      console.log('Estados de escalação atualizados:', newEscalationStates);
      console.log('Observações de confirmação atualizadas:', newConfirmationObservations);
      console.log('Cronômetros de atividade carregados:', newActivityTimers);
      
      if (Object.keys(newEscalationStates).length > 0) {
        setEscalationStates(prev => ({ ...prev, ...newEscalationStates }));
      }
      
      if (Object.keys(newConfirmationObservations).length > 0) {
        setConfirmationObservations(prev => ({ ...prev, ...newConfirmationObservations }));
      }

      if (Object.keys(newActivityTimers).length > 0) {
        setActivityTimers(prev => ({ ...prev, ...newActivityTimers }));
      }
      
    } catch (error) {
      console.error('Erro ao carregar dados de confirmação:', error);
    }
  }, [alertData]);

  const handleConfirmationObservationChange = useCallback((alertId: string, value: string) => {
    setConfirmationObservations(prev => ({
      ...prev,
      [alertId]: value
    }));
  }, []);

  const handleEscalationObservationChange = useCallback((alertId: string, value: string) => {
    setEscalationStates(prev => ({
      ...prev,
      [alertId]: {
        ...prev[alertId],
        observations: value
      }
    }));
  }, []);

  const handlePendingObservationChange = useCallback((alertId: string, value: string) => {
    setPendingStatusChange(prev => ({
      ...prev,
      [alertId]: {
        ...prev[alertId],
        observations: value
      }
    }));
  }, []);

  // Timer para escalações
  useEffect(() => {
    const interval = setInterval(() => {
      setEscalationStates(prev => {
        const newStates = { ...prev };
        let updated = false;

        Object.keys(newStates).forEach(alertId => {
          const state = newStates[alertId];
          if (state.timerActive && state.timeRemaining > 0) {
            newStates[alertId] = {
              ...state,
              timeRemaining: state.timeRemaining - 1
            };
            updated = true;

            // Quando o timer zera
            if (newStates[alertId].timeRemaining === 0) {
              newStates[alertId].timerActive = false;
              
              if (state.currentLevel === 0) {
                // Acabou o tempo de confirmação, vai para escalação
                newStates[alertId].status = 'escalating';
                toast({
                  title: "Tempo de confirmação esgotado",
                  description: `Chamado ${alertId} pode iniciar escalação`,
                  variant: "destructive",
                });
              } else if (state.currentLevel < 4) {
                // Acabou o tempo da escalação atual, mantém no status de escalação para mostrar botão
                toast({
                  title: "Tempo de escalação esgotado",
                  description: `Escalação ${state.currentLevel} do chamado ${alertId} finalizada`,
                  variant: "destructive",
                });
              } else {
                // Todas as escalações foram executadas
                newStates[alertId].status = 'completed';
                toast({
                  title: "Processo finalizado",
                  description: `Todas as escalações do chamado ${alertId} foram executadas`,
                });
              }
            }
          }
        });

        return updated ? newStates : prev;
      });
    }, 1000);

    return () => clearInterval(interval);
  }, []);

  // Função para iniciar confirmação
  const startConfirmation = useCallback((alertId: string) => {
    setEscalationStates(prev => ({
      ...prev,
      [alertId]: {
        status: 'pending',
        currentLevel: 0,
        timeRemaining: 1 * 10, // 10 segundos para teste, ajustar para 20*60 para 20 minutos
        timerActive: true,
        isAttended: false,
        observations: ''
      }
    }));
    
    // Inicializa o campo de observações de confirmação
    setConfirmationObservations(prev => ({
      ...prev,
      [alertId]: ''
    }));
    
    toast({
      title: "Confirmação iniciada",
      description: "Aguardando confirmação por 20 minutos",
    });
  }, []);

  // Função para confirmar recebimento - MODIFICADA para integrar com API
  const confirmReceived = useCallback(async (alertId: string) => {
    const observation = confirmationObservations[alertId] || '';
    
    try {
      // Prepara dados para a API
      const apiData = {
        escalations: [
          { level: 1, status: "", observations: "", eventTimestamp: "" },
          { level: 2, status: "", observations: "", eventTimestamp: "" },
          { level: 3, status: "", observations: "", eventTimestamp: "" },
          { level: 4, status: "", observations: "", eventTimestamp: "" }
        ],
        obsChat: "",
        confirmChat: observation,
        sendChat: new Date().toISOString(),
      };

      // Salva na API
      await saveToAPI(alertId, apiData);

      setEscalationStates(prev => ({
        ...prev,
        [alertId]: {
          ...prev[alertId],
          status: 'confirmed',
          timerActive: false,
          timeRemaining: 0,
          observations: observation
        }
      }));

      // Limpa o campo de observações após confirmação
      setConfirmationObservations(prev => ({
        ...prev,
        [alertId]: ''
      }));

      toast({
        title: "Confirmação recebida",
        description: "Processo de confirmação finalizado com sucesso",
      });
    } catch (error) {
      // Em caso de erro na API, ainda atualiza o estado local para não travar a UI
      setEscalationStates(prev => ({
        ...prev,
        [alertId]: {
          ...prev[alertId],
          status: 'confirmed',
          timerActive: false,
          timeRemaining: 0,
          observations: observation
        }
      }));

      setConfirmationObservations(prev => ({
        ...prev,
        [alertId]: ''
      }));
    }
  }, [confirmationObservations, saveToAPI]);

  // Função para iniciar escalação - MODIFICADA para integrar com API
  const startEscalation = useCallback(async (alertId: string, level: 1 | 2 | 3 | 4) => {
    try {
      // Prepara dados para a API - mantém dados anteriores e atualiza o nível atual
      const escalations = [
        { level: 1, status: level === 1 ? "em_andamento" : "", observations: level === 1 ? "Escalação iniciada" : "", eventTimestamp: level === 1 ? new Date().toISOString() : "" },
        { level: 2, status: level === 2 ? "em_andamento" : "", observations: level === 2 ? "Escalação iniciada" : "", eventTimestamp: level === 2 ? new Date().toISOString() : "" },
        { level: 3, status: level === 3 ? "em_andamento" : "", observations: level === 3 ? "Escalação iniciada" : "", eventTimestamp: level === 3 ? new Date().toISOString() : "" },
        { level: 4, status: level === 4 ? "em_andamento" : "", observations: level === 4 ? "Escalação iniciada" : "", eventTimestamp: level === 4 ? new Date().toISOString() : "" }
      ];

      const apiData = {
        escalations,
        obsChat: "",
        confirmChat: level === 1 ? (confirmationObservations[alertId] || "") : "",
        sendChat: new Date().toISOString(),
      };

      // Salva na API
      await saveToAPI(alertId, apiData);

      setEscalationStates(prev => ({
        ...prev,
        [alertId]: {
          ...prev[alertId],
          status: 'escalating',
          currentLevel: level,
          timeRemaining: 1 * 40, // 40 segundos para teste, ajustar para 10*60 para 10 minutos
          timerActive: true,
          isAttended: false,
          observations: ''
        }
      }));

      const levelNames = { 1: 'Primeira', 2: 'Segunda', 3: 'Terceira', 4: 'Quarta' };
      toast({
        title: `${levelNames[level]} escalação iniciada`,
        description: `Timer de 10 minutos ativado`,
      });
    } catch (error) {
      // Em caso de erro na API, ainda atualiza o estado local
      setEscalationStates(prev => ({
        ...prev,
        [alertId]: {
          ...prev[alertId],
          status: 'escalating',
          currentLevel: level,
          timeRemaining: 1 * 40,
          timerActive: true,
          isAttended: false,
          observations: ''
        }
      }));

      const levelNames = { 1: 'Primeira', 2: 'Segunda', 3: 'Terceira', 4: 'Quarta' };
      toast({
        title: `${levelNames[level]} escalação iniciada`,
        description: `Timer de 10 minutos ativado`,
      });
    }
  }, [confirmationObservations, saveToAPI]);

  // Função para voltar escalação
  const goBackEscalation = useCallback((alertId: string) => {
    setEscalationStates(prev => {
      const currentState = prev[alertId];
      if (currentState && currentState.currentLevel > 0) {
        const previousLevel = Math.max(0, currentState.currentLevel - 1);
        
        return {
          ...prev,
          [alertId]: {
            ...currentState,
            currentLevel: previousLevel as 0 | 1 | 2 | 3 | 4,
            status: previousLevel === 0 ? 'pending' : 'escalating',
            timerActive: true, // Reativa o timer
            timeRemaining: previousLevel === 0 ? 1 * 10 : 1 * 40, // Reinicia tempo apropriado
            isAttended: false,
            observations: ''
          }
        };
      }
      return prev;
    });

    // Limpa status e observações pendentes
    setShowStatusConfirmation(prev => ({ ...prev, [alertId]: false }));
    setPendingStatusChange(prev => {
      const newState = { ...prev };
      delete newState[alertId];
      return newState;
    });

    toast({
      title: "Escalação revertida",
      description: "Processo voltou ao nível anterior e timer reiniciado",
    });
  }, []);

  // Função para avançar escalação manualmente - MODIFICADA para integrar com API
  const advanceEscalationManually = useCallback(async (alertId: string) => {
    const observation = escalationStates[alertId]?.observations || '';
    
    if (!observation.trim()) {
      toast({
        title: "Observações obrigatórias",
        description: "Por favor, preencha as observações antes de avançar",
        variant: "destructive",
      });
      return;
    }

    const currentState = escalationStates[alertId];
    if (currentState && currentState.currentLevel < 4) {
      const nextLevel = (currentState.currentLevel + 1) as 1 | 2 | 3 | 4;
      
      try {
        // Atualiza na API o nível atual como finalizado e inicia o próximo
        const escalations = [
          { 
            level: 1, 
            status: currentState.currentLevel === 1 ? "finalizado" : currentState.currentLevel > 1 ? "finalizado" : "", 
            observations: currentState.currentLevel === 1 ? observation : "", 
            eventTimestamp: currentState.currentLevel === 1 ? new Date().toISOString() : "" 
          },
          { 
            level: 2, 
            status: nextLevel === 2 ? "em_andamento" : (currentState.currentLevel === 2 ? "finalizado" : currentState.currentLevel > 2 ? "finalizado" : ""), 
            observations: nextLevel === 2 ? "Escalação iniciada" : (currentState.currentLevel === 2 ? observation : ""), 
            eventTimestamp: nextLevel === 2 ? new Date().toISOString() : (currentState.currentLevel === 2 ? new Date().toISOString() : "") 
          },
          { 
            level: 3, 
            status: nextLevel === 3 ? "em_andamento" : (currentState.currentLevel === 3 ? "finalizado" : currentState.currentLevel > 3 ? "finalizado" : ""), 
            observations: nextLevel === 3 ? "Escalação iniciada" : (currentState.currentLevel === 3 ? observation : ""), 
            eventTimestamp: nextLevel === 3 ? new Date().toISOString() : (currentState.currentLevel === 3 ? new Date().toISOString() : "") 
          },
          { 
            level: 4, 
            status: nextLevel === 4 ? "em_andamento" : (currentState.currentLevel === 4 ? "finalizado" : ""), 
            observations: nextLevel === 4 ? "Escalação iniciada" : (currentState.currentLevel === 4 ? observation : ""), 
            eventTimestamp: nextLevel === 4 ? new Date().toISOString() : (currentState.currentLevel === 4 ? new Date().toISOString() : "") 
          }
        ];

        const apiData = {
          escalations,
          obsChat: "",
          confirmChat: confirmationObservations[alertId] || "",
          sendChat: new Date().toISOString(),
        };

        // Salva na API
        await saveToAPI(alertId, apiData);
      } catch (error) {
        // Continua o processo mesmo se falhar na API
      }

      const levelNames = { 1: 'Primeira', 2: 'Segunda', 3: 'Terceira', 4: 'Quarta' };
      
      toast({
        title: `${levelNames[nextLevel]} escalação iniciada`,
        description: `Timer de 10 minutos ativado`,
      });

      setEscalationStates(prev => ({
        ...prev,
        [alertId]: {
          ...currentState,
          currentLevel: nextLevel,
          timeRemaining: 1 * 40, // 10 minutos
          timerActive: true,
          isAttended: false,
          observations: ''
        }
      }));
    }
  }, [escalationStates, confirmationObservations, saveToAPI]);

  // Função para preparar mudança de status com confirmação
  const prepareStatusChange = useCallback((alertId: string, status: string) => {
    setPendingStatusChange(prev => ({
      ...prev,
      [alertId]: { status, observations: '' }
    }));
    setShowStatusConfirmation(prev => ({ ...prev, [alertId]: true }));
  }, []);

  // Função para confirmar mudança de status - MODIFICADA para integrar com API
  const confirmStatusChange = useCallback(async (alertId: string) => {
    const pending = pendingStatusChange[alertId];
    if (!pending || !pending.observations.trim()) {
      toast({
        title: "Observações obrigatórias",
        description: "Por favor, preencha as observações antes de confirmar",
        variant: "destructive",
      });
      return;
    }

    const attended = pending.status === 'attended';
    
    try {
      const currentState = escalationStates[alertId];
      
      // Prepara dados para a API
      const escalations = [
        { 
          level: 1, 
          status: currentState.currentLevel === 1 ? (attended ? "atendido" : "nao_atendido") : (currentState.currentLevel > 1 ? "finalizado" : ""), 
          observations: currentState.currentLevel === 1 ? pending.observations : "", 
          eventTimestamp: currentState.currentLevel === 1 ? new Date().toISOString() : "" 
        },
        { 
          level: 2, 
          status: currentState.currentLevel === 2 ? (attended ? "atendido" : "nao_atendido") : (currentState.currentLevel > 2 ? "finalizado" : ""), 
          observations: currentState.currentLevel === 2 ? pending.observations : "", 
          eventTimestamp: currentState.currentLevel === 2 ? new Date().toISOString() : "" 
        },
        { 
          level: 3, 
          status: currentState.currentLevel === 3 ? (attended ? "atendido" : "nao_atendido") : (currentState.currentLevel > 3 ? "finalizado" : ""), 
          observations: currentState.currentLevel === 3 ? pending.observations : "", 
          eventTimestamp: currentState.currentLevel === 3 ? new Date().toISOString() : "" 
        },
        { 
          level: 4, 
          status: currentState.currentLevel === 4 ? (attended ? "atendido" : "nao_atendido") : "", 
          observations: currentState.currentLevel === 4 ? pending.observations : "", 
          eventTimestamp: currentState.currentLevel === 4 ? new Date().toISOString() : "" 
        }
      ];

      const apiData = {
        escalations,
        obsChat: attended ? "Escalação atendida com sucesso" : "Escalação não atendida - prosseguindo",
        confirmChat: confirmationObservations[alertId] || "",
        sendChat: new Date().toISOString(),
      };

      // Salva na API
      await saveToAPI(alertId, apiData);
    } catch (error) {
      // Continua o processo mesmo se falhar na API
    }

    markAsAttended(alertId, attended, pending.observations);

    // Limpa estados de confirmação
    setShowStatusConfirmation(prev => ({ ...prev, [alertId]: false }));
    setPendingStatusChange(prev => {
      const newState = { ...prev };
      delete newState[alertId];
      return newState;
    });

    // Se não foi atendida e não é a última escalação, prepara para próxima
    if (!attended) {
      const state = escalationStates[alertId];
      if (state && state.currentLevel < 4) {
        setTimeout(() => {
          advanceToNextEscalation(alertId);
        }, 100);
      }
    }
  }, [pendingStatusChange, escalationStates, confirmationObservations, saveToAPI]);

  // Função para cancelar mudança de status
  const cancelStatusChange = useCallback((alertId: string) => {
    setShowStatusConfirmation(prev => ({ ...prev, [alertId]: false }));
    setPendingStatusChange(prev => {
      const newState = { ...prev };
      delete newState[alertId];
      return newState;
    });
    setEscalationStatus(prev => ({ ...prev, [alertId]: '' }));
  }, []);

  // Função para marcar como atendido
  const markAsAttended = useCallback((alertId: string, attended: boolean, observations: string) => {
    setEscalationStates(prev => ({
      ...prev,
      [alertId]: {
        ...prev[alertId],
        isAttended: attended,
        observations,
        status: attended ? 'completed' : prev[alertId].status,
        timerActive: attended ? false : prev[alertId].timerActive
      }
    }));

    if (attended) {
      toast({
        title: "Escalação atendida",
        description: "Processo finalizado com sucesso",
      });
    }
  }, []);

  // Função para avançar para próxima escalação quando "Não Atendida"
  const advanceToNextEscalation = useCallback((alertId: string) => {
    setEscalationStates(prev => {
      const currentState = prev[alertId];
      if (currentState && currentState.currentLevel < 4) {
        const nextLevel = (currentState.currentLevel + 1) as 1 | 2 | 3 | 4;
        const levelNames = { 1: 'Primeira', 2: 'Segunda', 3: 'Terceira', 4: 'Quarta' };
        
        toast({
          title: `${levelNames[nextLevel]} escalação iniciada`,
          description: `Timer de 10 minutos ativado`,
        });

        return {
          ...prev,
          [alertId]: {
            ...currentState,
            currentLevel: nextLevel,
            timeRemaining: 10 * 60, // 10 minutos
            timerActive: true,
            isAttended: false,
            observations: ''
          }
        };
      }
      return prev;
    });
  }, []);

  // Função para formatar tempo
  const formatTime = (seconds: number) => {
    const minutes = Math.floor(seconds / 60);
    const remainingSeconds = seconds % 60;
    return `${minutes.toString().padStart(2, '0')}:${remainingSeconds.toString().padStart(2, '0')}`;
  };

  // Função para lidar com clique no cabeçalho da coluna
  const handleSort = (field: SortField) => {
    if (sortField === field) {
      // Se já está ordenando por este campo, alterna a direção
      if (sortDirection === 'asc') {
        setSortDirection('desc');
      } else if (sortDirection === 'desc') {
        setSortDirection(null);
        setSortField('chamado'); // volta para o padrão
      } else {
        setSortDirection('asc');
      }
    } else {
      // Se é um campo diferente, começa com ascendente
      setSortField(field);
      setSortDirection('asc');
    }
  };

  // Função para obter o ícone de ordenação
  const getSortIcon = (field: SortField) => {
    if (sortField !== field) {
      return <ArrowUpDown className="h-4 w-4 ml-1 opacity-50" />;
    }
    if (sortDirection === 'asc') {
      return <ArrowUp className="h-4 w-4 ml-1" />;
    }
    if (sortDirection === 'desc') {
      return <ArrowDown className="h-4 w-4 ml-1" />;
    }
    return <ArrowUpDown className="h-4 w-4 ml-1 opacity-50" />;
  };

  // Função para formatar data de forma segura
  const formatDate = (dateString: string) => {
    if (!dateString || dateString === '' || dateString === 'null' || dateString === 'undefined') {
      return '-';
    }

    try {
      let date: Date;
      const cleanString = String(dateString).trim();

      // Caso 1: Timestamp em milissegundos
      if (/^\d{13}$/.test(cleanString)) {
        date = new Date(parseInt(cleanString));
      }
      // Caso 2: Timestamp em segundos  
      else if (/^\d{10}$/.test(cleanString)) {
        date = new Date(parseInt(cleanString) * 1000);
      }
      // Caso 3: Formato brasileiro dd/mm/yyyy ou dd/mm/yyyy hh:mm:ss
      else if (/^\d{2}\/\d{2}\/\d{4}/.test(cleanString)) {
        const parts = cleanString.split(' ');
        const datePart = parts[0];
        const timePart = parts[1] || '00:00:00';

        const [day, month, year] = datePart.split('/');
        const [hour, minute, second] = timePart.split(':');

        date = new Date(
          parseInt(year),
          parseInt(month) - 1, // mês é 0-indexed
          parseInt(day),
          parseInt(hour || '0'),
          parseInt(minute || '0'),
          parseInt(second || '0')
        );
      }
      // Caso 4: ISO string ou outros formatos padrão
      else {
        date = new Date(cleanString);
      }

      // Verifica se a data é válida
      if (isNaN(date.getTime())) {
        return cleanString; // Retorna o valor original
      }

      // Verifica se a data é muito antiga ou muito futura (validação básica)
      const year = date.getFullYear();
      if (year < 1900 || year > 2100) {
        return cleanString;
      }

      return date.toLocaleString('pt-BR', {
        day: '2-digit',
        month: '2-digit',
        year: 'numeric',
        hour: '2-digit',
        minute: '2-digit',
        second: '2-digit',
      });
    } catch (error) {
      return String(dateString); // Garante que retorna string
    }
  };

  // Função para formatar o status "Acionado"
  const formatAcionadoStatus = (acionado: string) => {
    if (!acionado) return { text: '-', isOk: false };

    const upperAcionado = acionado.toUpperCase();
    if (upperAcionado === 'OK') {
      return { text: 'ACIONADO', isOk: true };
    } else if (upperAcionado === 'NOK') {
      return { text: 'NÃO ACIONADO', isOk: false };
    }

    return { text: acionado, isOk: false };
  };

  // Dados ordenados e paginados
  const { sortedAndPaginatedData, totalPages } = useMemo(() => {
    let sortedData = [...alertData];

    // Aplica ordenação se houver campo e direção definidos
    if (sortField && sortDirection) {
      sortedData.sort((a, b) => {
        let aValue: any = a[sortField];
        let bValue: any = b[sortField];

        // Tratamento especial para diferentes tipos de dados
        if (sortField === 'chamado') {
          aValue = parseInt(a.chamado) || 0;
          bValue = parseInt(b.chamado) || 0;
        } else if (sortField === 'abertura_chamado') {
          aValue = new Date(a.abertura_chamado).getTime() || 0;
          bValue = new Date(b.abertura_chamado).getTime() || 0;
        } else {
          // Para strings, converte para minúsculo para ordenação case-insensitive
          aValue = String(aValue).toLowerCase();
          bValue = String(bValue).toLowerCase();
        }

        if (aValue < bValue) {
          return sortDirection === 'asc' ? -1 : 1;
        }
        if (aValue > bValue) {
          return sortDirection === 'asc' ? 1 : -1;
        }
        return 0;
      });
    } else {
      // Ordenação padrão por chamado decrescente
      sortedData.sort((a, b) => {
        const chamadoA = parseInt(a.chamado) || 0;
        const chamadoB = parseInt(b.chamado) || 0;
        return chamadoB - chamadoA;
      });
    }

    // Calcula paginação
    const startIndex = (currentPage - 1) * itemsPerPage;
    const endIndex = startIndex + itemsPerPage;
    const paginatedData = sortedData.slice(startIndex, endIndex);
    const totalPages = Math.ceil(sortedData.length / itemsPerPage);

    return {
      sortedAndPaginatedData: paginatedData,
      totalPages
    };
  }, [alertData, currentPage, itemsPerPage, sortField, sortDirection]);

  // Reset página quando dados mudam
  useEffect(() => {
    setCurrentPage(1);
  }, [alertData]);

  // Busca os incidentes acionados no DynamoDB via API
  useEffect(() => {
    const fetchAcionados = async () => {
      try {
        const res = await fetch('https://f6ffk8e9fe.execute-api.us-east-1.amazonaws.com/prod/chatacionados');
        if (!res.ok) throw new Error(`Erro ao buscar acionados: ${res.status}`);
        const data: { chamado: string }[] = await res.json();
        setAcionadosSet(new Set(data.map(item => item.chamado.toString())));
      } catch (error) {
        toast({
          title: 'Erro ao buscar acionados',
          description: 'Não foi possível carregar os incidentes acionados',
          variant: 'destructive',
        });
      }
    };
    fetchAcionados();
  }, []);

  // Carrega dados de confirmação quando os alertas mudam
  useEffect(() => {
    if (alertData.length > 0) {
      loadConfirmationData();
    }
  }, [alertData, loadConfirmationData]);
  

  const handleAcknowledgment = async (alert: AlertData) => {
    try {
      const response = await fetch(
        "https://f6ffk8e9fe.execute-api.us-east-1.amazonaws.com/prod/webhook"
      );
      const data = await response.json();

      // Procura o grupo correspondente
      const grupoEntry = data.grupos.find(
        (g: any) => g.grupo_chamado === alert.grupo_chamado
      );

      if (!grupoEntry || !grupoEntry.webhooks.length) {
        toast({
          title: "Webhook não configurado",
          description: `Configure o webhook para o Grupo: ${alert.grupo_chamado}`,
          variant: "destructive",
        });
        return;
      }

      // Pega o primeiro webhook ativo
      const activeWebhook = grupoEntry.webhooks.find((w: any) => w.ativo);
      if (!activeWebhook) {
        toast({
          title: "Nenhum webhook ativo",
          description: `O grupo ${alert.grupo_chamado} não possui webhooks ativos`,
          variant: "destructive",
        });
        return;
      }
      const res = await fetch(
        "https://f6ffk8e9fe.execute-api.us-east-1.amazonaws.com/prod/chatacionados",
        {
          method: "POST",
          headers: { "Content-Type": "application/json" },
          body: JSON.stringify({ chamado: alert.chamado.toString() }),
        }
      );

      if (!res.ok) {
        const errorData = await res.json();
        throw new Error(errorData.message || "Erro ao marcar como acionado");
      }

      setAcionadosSet(prev => new Set([...prev, alert.chamado.toString()]));
      onUpdateAcknowledgment(alert.id, true);

      startConfirmation(alert.chamado);
      startActivityTimer(alert.chamado); // Inicia cronômetro de atividade

      toast({
        title: "Alerta acionado com sucesso",
        description: `Mensagem enviada para o Grupo: ${alert.grupo_chamado}`,
      });

    } catch (error: any) {
      toast({
        title: "Erro ao acionar alerta",
        description: error.message || "Não foi possível concluir o acionamento",
        variant: "destructive",
      });
    }
  };

  const truncateText = (text: string, maxLength: number) => {
    return text.length > maxLength ? text.substring(0, maxLength) + '...' : text;
  };

  const handleIncidentClick = (alert: AlertData) => {
    if (alert.tipo_chamado.toLowerCase().includes('incidente')) {
      setSelectedIncident(alert);
    }
  };

  const getSeverityColor = (severity: string) => {
    return severity.includes('4')
      ? 'bg-destructive text-destructive-foreground'
      : 'bg-warning text-warning-foreground';
  };

  const [chamadoModalOpen, setChamadoModalOpen] = useState(false);
  const handleChamadoClick = (alert: AlertData) => {
    setSelectedIncident(alert);
    setChamadoModalOpen(true);
  };

  // Renderiza a coluna de cronômetro de confirmação
  const renderActivityTimerColumn = (alert: AlertData) => {
    const timer = activityTimers[alert.chamado];
    
    if (!timer) {
      return (
        <div className="text-center p-3 border-2 border-dashed border-muted rounded-lg animate-slide-in">
          <Timer className="h-5 w-5 mx-auto mb-2 text-timer-inactive" />
          <span className="text-xs text-muted-foreground block">Não iniciado</span>
          <Button
            size="sm"
            variant="outline"
            onClick={() => startActivityTimer(alert.chamado)}
            className="mt-2 h-6 px-3 text-xs bg-gradient-to-r from-primary/10 to-primary/5 hover:from-primary/20 hover:to-primary/10 border-primary/20"
          >
            <Play className="h-3 w-3 mr-1" />
            Iniciar
          </Button>
        </div>
      );
    }

    const elapsedTime = calculateElapsedTime(timer);
    const formattedTime = formatElapsedTime(elapsedTime);

    return (
      <div className={`text-center p-3 rounded-lg border-2 transition-all duration-300 ${
        timer.isActive 
          ? 'bg-gradient-to-br from-success/10 to-success/5 border-success/30 animate-status-glow' 
          : 'bg-gradient-to-br from-muted/50 to-muted/20 border-muted'
      }`}>
        <div className={`flex items-center justify-center gap-2 mb-2 ${
          timer.isActive ? 'text-success' : 'text-timer-inactive'
        }`}>
          <Timer className={`h-5 w-5 ${timer.isActive ? 'animate-timer-pulse' : ''}`} />
          <span className={`font-mono text-lg font-bold ${
            timer.isActive ? 'text-success' : 'text-timer-inactive'
          }`}>
            {formattedTime}
          </span>
        </div>
        
        <div className="flex gap-1 justify-center mb-2">
          {timer.isActive ? (
            <Button
              size="sm"
              variant="outline"
              onClick={() => stopActivityTimer(alert.chamado)}
              className="h-7 px-3 text-xs border-destructive/30 text-destructive hover:bg-destructive/10"
            >
              <StopCircle className="h-3 w-3 mr-1" />
              Parar
            </Button>
          ) : (
            <Button
              size="sm"
              variant="outline"
              onClick={() => startActivityTimer(alert.chamado)}
              className="h-7 px-3 text-xs border-success/30 text-success hover:bg-success/10"
            >
              <Play className="h-3 w-3 mr-1" />
              Retomar
            </Button>
          )}
        </div>
        
        <div className={`text-xs px-2 py-1 rounded-full transition-all ${
          timer.isActive 
            ? 'bg-success/20 text-success font-medium' 
            : 'bg-muted text-muted-foreground'
        }`}>
          {timer.isActive ? '🟢 Ativo' : '⏸️ Parado'}
        </div>
      </div>
    );
  };

  // Renderiza o componente de confirmação/escalação
  const renderConfirmationColumn = (alert: AlertData) => {
    const state = escalationStates[alert.chamado];
    const currentObservation = confirmationObservations[alert.chamado] || '';
    const showConfirmation = showStatusConfirmation[alert.chamado];
    const pendingChange = pendingStatusChange[alert.chamado];
    
    console.log(`Renderizando coluna confirmação para chamado ${alert.chamado}:`, {
      state,
      currentObservation,
      showConfirmation,
      pendingChange
    });
    
    if (!state) {
      return (
        <div className="text-center">
          <Button
            size="sm"
            variant="outline"
            onClick={() => startConfirmation(alert.chamado)}
            className="h-8 px-3 text-xs"
          >
            <Play className="h-3 w-3 mr-1" />
            Iniciar
          </Button>
        </div>
      );
    }

    switch (state.status) {
      case 'pending':
        return (
          <div className="text-center space-y-3">
            <div className="flex items-center justify-center gap-2">
              <Clock className="h-4 w-4 text-warning" />
              <span className="text-sm font-mono">{formatTime(state.timeRemaining)}</span>
            </div>
            
            <div className="space-y-2">
              <div className="space-y-1">
                <Label className="text-xs">
                  Observações <span className="text-destructive">*</span>
                </Label>
                <Textarea
                  key={`confirmation-textarea-${alert.chamado}`}
                  placeholder="Observações são obrigatórias para confirmação"
                  value={currentObservation}
                  onChange={(e) => handleConfirmationObservationChange(alert.chamado, e.target.value)}
                  className="text-xs min-h-[60px] resize-none"
                  required
                />
                {!currentObservation.trim() && (
                  <p className="text-xs text-destructive">
                    Observações são obrigatórias
                  </p>
                )}
              </div>
              
              <div className="flex gap-1">
                <Button
                  size="sm"
                  variant="default"
                  onClick={() => confirmReceived(alert.chamado)}
                  disabled={!currentObservation.trim()}
                  className="h-8 px-3 text-xs flex-1 disabled:opacity-50 disabled:cursor-not-allowed"
                >
                  <Check className="h-3 w-3 mr-1" />
                  Confirmar
                </Button>
                <Button
                  size="sm"
                  variant="secondary"
                  onClick={() => startEscalation(alert.chamado, 1)}
                  disabled={!currentObservation.trim()}
                  className="h-8 px-3 text-xs flex-1 disabled:opacity-50 disabled:cursor-not-allowed"
                >
                  <FastForward className="h-3 w-3 mr-1" />
                  Próxima Etapa
                </Button>
              </div>
            </div>
          </div>
        );

      case 'confirmed':
        return (
          <div className="text-center space-y-3 p-3 bg-gradient-to-br from-success/10 to-success/5 border border-success/30 rounded-lg animate-slide-in">
            <div className="flex gap-2 justify-center items-center">
              <Badge className="bg-success text-success-foreground hover:bg-success/90 animate-status-glow">
                <CheckCircle className="h-3 w-3 mr-1" />
                Confirmado
              </Badge>
              <Button
                size="sm"
                variant="outline"
                onClick={() => startEscalation(alert.chamado, 1)}
                className="h-7 px-3 text-xs border-primary/30 text-primary hover:bg-primary/10 transition-all duration-200"
              >
                <FastForward className="h-3 w-3 mr-1" />
                Próxima
              </Button>
            </div>
            {state.observations && (
              <div className="text-xs p-3 bg-card/80 border border-success/20 rounded-md text-left shadow-soft">
                <strong className="text-success">Observações:</strong><br />
                <span className="text-foreground/80">{state.observations}</span>
              </div>
            )}
          </div>
        );

      case 'escalating':
        const levelNames = { 1: '1ª', 2: '2ª', 3: '3ª', 4: '4ª' };
        
        return (
          <div className="space-y-2">
            {state.currentLevel > 0 && (
              <div className="text-center">
                <Badge variant="destructive" className="text-xs">
                  {levelNames[state.currentLevel as keyof typeof levelNames]} Escalação
                </Badge>
                {state.timerActive && (
                  <div className="flex items-center justify-center gap-1 mt-1">
                    <Clock className="h-3 w-3 text-warning" />
                    <span className="text-xs font-mono">{formatTime(state.timeRemaining)}</span>
                  </div>
                )}
              </div>
            )}

            {!state.isAttended && (
              <>
                {/* Campo de observações sempre visível quando em escalação */}
                {state.currentLevel === 0 || (!state.timerActive && state.currentLevel < 4) ? (
                  <div className="space-y-1">
                    <div className="flex gap-1">
                      {/* Botão Voltar - só aparece se não estiver no nível 0 */}
                      {state.currentLevel > 0 && (
                        <Button
                          size="sm"
                          variant="outline"
                          onClick={() => goBackEscalation(alert.chamado)}
                          className="h-6 px-2 text-xs flex-1"
                        >
                          <RotateCcw className="h-3 w-3 mr-1" />
                          Voltar
                        </Button>
                      )}
                      
                      {/* Próxima escalação */}
                      {state.currentLevel < 4 && (
                        <Button
                          size="sm"
                          variant="outline"
                          onClick={() => startEscalation(alert.chamado, (state.currentLevel + 1) as 1 | 2 | 3 | 4)}
                          className="h-6 px-2 text-xs flex-1"
                        >
                          Iniciar {levelNames[(state.currentLevel + 1) as keyof typeof levelNames]} Escalação
                        </Button>
                      )}
                    </div>
                  </div>
                ) : (
                  <div className="space-y-2">
                    {/* Mostrar confirmação de status quando pendente */}
                    {showConfirmation ? (
                      <div className="space-y-2 p-2 border rounded bg-background">
                        <div className="text-xs font-medium">
                          Confirmar: {pendingChange?.status === 'attended' ? 'Atendida' : 'Não Atendida'}
                        </div>
                        
                        <div className="space-y-1">
                          <Label className="text-xs">
                            Observações <span className="text-destructive">*</span>
                          </Label>
                          <Textarea
                            key={`pending-textarea-${alert.chamado}`}
                            placeholder="Observações obrigatórias..."
                            value={pendingChange?.observations || ''}
                            onChange={(e) => handlePendingObservationChange(alert.chamado, e.target.value)}
                            className="text-xs min-h-[60px] resize-none"
                            required
                          />
                          {!pendingChange?.observations?.trim() && (
                            <p className="text-xs text-destructive">
                              Observações são obrigatórias
                            </p>
                          )}
                        </div>
                        
                        <div className="flex gap-1">
                          <Button
                            size="sm"
                            variant="default"
                            onClick={() => confirmStatusChange(alert.chamado)}
                            disabled={!pendingChange?.observations?.trim()}
                            className="h-6 px-2 text-xs flex-1"
                          >
                            <Check className="h-3 w-3 mr-1" />
                            Confirmar
                          </Button>
                          <Button
                            size="sm"
                            variant="outline"
                            onClick={() => cancelStatusChange(alert.chamado)}
                            className="h-6 px-2 text-xs flex-1"
                          >
                            <X className="h-3 w-3 mr-1" />
                            Cancelar
                          </Button>
                        </div>
                      </div>
                    ) : (
                      <>
                        <div className="flex gap-1">
                          {/* Botão Voltar */}
                          <Button
                            size="sm"
                            variant="outline"
                            onClick={() => goBackEscalation(alert.chamado)}
                            className="h-6 px-2 text-xs flex-1"
                          >
                            <RotateCcw className="h-3 w-3 mr-1" />
                            Voltar
                          </Button>
                          
                          {/* Botão Avançar Escalação sempre visível quando há observações */}
                        </div>

                        <Select
                          value=""
                          onValueChange={(value) => prepareStatusChange(alert.chamado, value)}
                        >
                          <SelectTrigger className="h-6 text-xs">
                            <SelectValue placeholder="Selecionar Status" />
                          </SelectTrigger>
                          <SelectContent>
                            <SelectItem value="attended">Atendida</SelectItem>
                            <SelectItem value="not-attended">Não Atendida</SelectItem>
                          </SelectContent>
                        </Select>
                      </>
                    )}
                  </div>
                )}
              </>
            )}
          </div>
        );

      case 'completed':
        return (
          <div className="text-center space-y-2">
            <div className="flex gap-1 justify-center">
              <Badge variant="default" className="bg-green-600 text-white">
                <CheckCircle className="h-3 w-3 mr-1" />
                Finalizado
              </Badge>
            </div>
            {state.observations && (
              <div className="text-xs text-muted-foreground p-2 bg-muted rounded text-left">
                <strong>Observações:</strong><br />
                {state.observations}
              </div>
            )}
          </div>
        );

      default:
        return null;
    }
  };

  if (loading) {
    return (
      <Card>
        <CardContent className="p-6">
          <div className="text-center">Carregando...</div>
        </CardContent>
      </Card>
    );
  }

  return (
    <TooltipProvider>
      <Card className="w-full">
        <CardHeader className="pb-3">
          <div className="flex items-center justify-between">
            <h2 className="text-xl font-semibold">Acompanhamento de Alertas</h2>
            <div className="text-sm text-muted-foreground">
              {alertData.length} alertas encontrados
            </div>
          </div>
        </CardHeader>
        
        <CardContent className="p-0">
          <div className="overflow-x-auto">
            <Table>
              <TableHeader>
                <TableRow>
                  <TableHead className="cursor-pointer select-none" onClick={() => handleSort('chamado')}>
                    <div className="flex items-center">
                      Chamado
                      {getSortIcon('chamado')}
                    </div>
                  </TableHead>
                  <TableHead className="cursor-pointer select-none" onClick={() => handleSort('tipo_chamado')}>
                    <div className="flex items-center">
                      Tipo
                      {getSortIcon('tipo_chamado')}
                    </div>
                  </TableHead>
                  <TableHead className="cursor-pointer select-none" onClick={() => handleSort('grupo_chamado')}>
                    <div className="flex items-center">
                      Grupo
                      {getSortIcon('grupo_chamado')}
                    </div>
                  </TableHead>
                  <TableHead className="cursor-pointer select-none" onClick={() => handleSort('status_chamado')}>
                    <div className="flex items-center">
                      Status
                      {getSortIcon('status_chamado')}
                    </div>
                  </TableHead>
                  <TableHead className="cursor-pointer select-none" onClick={() => handleSort('abertura_chamado')}>
                    <div className="flex items-center">
                      Abertura
                      {getSortIcon('abertura_chamado')}
                    </div>
                  </TableHead>
                  <TableHead className="cursor-pointer select-none" onClick={() => handleSort('severidade_chamado')}>
                    <div className="flex items-center">
                      Severidade
                      {getSortIcon('severidade_chamado')}
                    </div>
                  </TableHead>
                  <TableHead>Acionado</TableHead>
                  <TableHead>Confirmação</TableHead>
                  <TableHead>Cronômetro</TableHead>
                  <TableHead>Ações</TableHead>
                </TableRow>
              </TableHeader>
              <TableBody>
                {sortedAndPaginatedData.map((alert) => {
                  const isAcionado = acionadosSet.has(alert.chamado);
                  return (
                    <TableRow key={alert.id} className="hover:bg-muted/50">
                      <TableCell className="font-medium">
                        <Button
                          variant="link"
                          className="p-0 h-auto text-blue-600 hover:text-blue-800"
                          onClick={() => handleChamadoClick(alert)}
                        >
                          {alert.chamado}
                        </Button>
                      </TableCell>
                      <TableCell>
                        <div className="flex items-center gap-2">
                          {alert.tipo_chamado.toLowerCase().includes('incidente') ? (
                            <AlertTriangle className="h-4 w-4 text-destructive" />
                          ) : (
                            <Info className="h-4 w-4 text-blue-500" />
                          )}
                          <span className="text-sm">{truncateText(alert.tipo_chamado, 15)}</span>
                        </div>
                      </TableCell>
                      <TableCell>
                        <Badge variant="outline" className="text-xs">
                          <Group className="h-3 w-3 mr-1" />
                          {alert.grupo_chamado}
                        </Badge>
                      </TableCell>
                      <TableCell>
                        <Badge 
                          variant={alert.status_chamado?.toLowerCase().includes('aberto') ? 'destructive' : 'default'}
                          className="text-xs"
                        >
                          {alert.status_chamado}
                        </Badge>
                      </TableCell>
                      <TableCell className="text-sm">
                        <div className="flex items-center gap-1">
                          <Calendar className="h-3 w-3 text-muted-foreground" />
                          {formatDate(alert.abertura_chamado)}
                        </div>
                      </TableCell>
                      <TableCell>
                        <Badge className={`text-xs ${getSeverityColor(alert.severidade_chamado)}`}>
                          <Flame className="h-3 w-3 mr-1" />
                          {alert.severidade_chamado}
                        </Badge>
                      </TableCell>
                      <TableCell>
                        <Badge
                          className={`text-xs transition-all duration-300 ${
                            isAcionado 
                              ? 'bg-success text-success-foreground hover:bg-success/90 animate-status-glow shadow-soft' 
                              : 'bg-destructive text-destructive-foreground hover:bg-destructive/90'
                          }`}
                        >
                          {isAcionado ? (
                            <>
                              <Check className="h-3 w-3 mr-1" />
                              ACIONADO
                            </>
                          ) : (
                            <>
                              <XCircle className="h-3 w-3 mr-1" />
                              NÃO ACIONADO
                            </>
                          )}
                        </Badge>
                      </TableCell>
                      <TableCell className="min-w-[300px]">
                        {renderConfirmationColumn(alert)}
                      </TableCell>
                      <TableCell className="min-w-[200px]">
                        {renderActivityTimerColumn(alert)}
                      </TableCell>
                      <TableCell>
                        <div className="flex gap-1">
                          {!isAcionado && (
                            <Tooltip>
                              <TooltipTrigger asChild>
                                <Button
                                  size="sm"
                                  variant="outline"
                                  onClick={() => handleAcknowledgment(alert)}
                                  className="h-8 w-8 p-0"
                                >
                                  <Zap className="h-4 w-4" />
                                </Button>
                              </TooltipTrigger>
                              <TooltipContent>
                                <p>Acionar alerta</p>
                              </TooltipContent>
                            </Tooltip>
                          )}
                          <Tooltip>
                            <TooltipTrigger asChild>
                              <Button
                                size="sm"
                                variant="outline"
                                onClick={() => window.open(`#`, '_blank')}
                                className="h-8 w-8 p-0"
                              >
                                <ExternalLink className="h-4 w-4" />
                              </Button>
                            </TooltipTrigger>
                            <TooltipContent>
                              <p>Abrir chamado</p>
                            </TooltipContent>
                          </Tooltip>
                        </div>
                      </TableCell>
                    </TableRow>
                  );
                })}
              </TableBody>
            </Table>
          </div>

          {/* Paginação */}
          <div className="flex items-center justify-between px-6 py-4 border-t">
            <div className="text-sm text-muted-foreground">
              Página {currentPage} de {totalPages} ({alertData.length} total)
            </div>
            <div className="flex gap-2">
              <Button
                variant="outline"
                size="sm"
                onClick={() => setCurrentPage(prev => Math.max(1, prev - 1))}
                disabled={currentPage === 1}
              >
                <ChevronLeft className="h-4 w-4" />
                Anterior
              </Button>
              <Button
                variant="outline"
                size="sm"
                onClick={() => setCurrentPage(prev => Math.min(totalPages, prev + 1))}
                disabled={currentPage === totalPages}
              >
                Próxima
                <ChevronRight className="h-4 w-4" />
              </Button>
            </div>
          </div>
        </CardContent>
      </Card>

      {/* Modal de detalhes do chamado */}
      <Dialog open={chamadoModalOpen} onOpenChange={setChamadoModalOpen}>
        <DialogContent className="max-w-4xl max-h-[80vh] overflow-y-auto">
          <DialogHeader>
            <DialogTitle>Detalhes do Chamado {selectedIncident?.chamado}</DialogTitle>
          </DialogHeader>
          {selectedIncident && (
            <div className="space-y-4">
              <div className="grid grid-cols-2 gap-4">
                <div>
                  <Label className="text-sm font-medium">Tipo:</Label>
                  <p className="text-sm">{selectedIncident.tipo_chamado}</p>
                </div>
                <div>
                  <Label className="text-sm font-medium">Grupo:</Label>
                  <p className="text-sm">{selectedIncident.grupo_chamado}</p>
                </div>
                <div>
                  <Label className="text-sm font-medium">Status:</Label>
                  <p className="text-sm">{selectedIncident.status_chamado}</p>
                </div>
                <div>
                  <Label className="text-sm font-medium">Severidade:</Label>
                  <p className="text-sm">{selectedIncident.severidade_chamado}</p>
                </div>
                <div>
                  <Label className="text-sm font-medium">Abertura:</Label>
                  <p className="text-sm">{formatDate(selectedIncident.abertura_chamado)}</p>
                </div>
              </div>
              <div>
                <Label className="text-sm font-medium">Resumo:</Label>
                <p className="text-sm mt-1 p-3 bg-muted rounded-md">
                  {selectedIncident.resumo_chamado}
                </p>
              </div>
            </div>
          )}
        </DialogContent>
      </Dialog>
    </TooltipProvider>
  );
};

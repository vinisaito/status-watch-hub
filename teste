import json
import boto3
import os
from datetime import datetime, timezone

# ---------- Config ----------
dynamodb = boto3.resource("dynamodb")
table = dynamodb.Table(os.environ["RDM_TABLE"])  # Nome da tabela vindo da variável de ambiente


def lambda_handler(event, context):
    """
    Lambda REST API para registrar RDMs no DynamoDB.
    Método: POST
    Campos esperados: number (string), status (string), timestamp (string opcional)
    """

    try:
        # --- Parse do corpo da requisição ---
        body = json.loads(event.get("body", "{}"))

        number = body.get("number")
        status = body.get("status")
        timestamp = body.get("timestamp")

        # --- Validação básica ---
        if not number or not status:
            return {
                "statusCode": 400,
                "body": json.dumps({"error": "Campos obrigatórios: number e status"})
            }

        # Se não vier timestamp, gera o atual em formato ISO 8601 (UTC)
        if not timestamp:
            timestamp = datetime.now(timezone.utc).isoformat()

        # --- Inserção no DynamoDB ---
        table.put_item(
            Item={
                "number": str(number),
                "status": str(status),
                "timestamp": str(timestamp),
            }
        )

        # --- Retorno sucesso ---
        return {
            "statusCode": 200,
            "headers": {"Content-Type": "application/json"},
            "body": json.dumps({
                "message": "RDM registrado com sucesso!",
                "item": {
                    "number": number,
                    "status": status,
                    "timestamp": timestamp
                }
            }),
        }

    except Exception as e:
        print("Erro ao processar:", e)
        return {
            "statusCode": 500,
            "headers": {"Content-Type": "application/json"},
            "body": json.dumps({"error": str(e)}),
        }

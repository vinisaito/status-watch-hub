import { useState, useCallback } from 'react';
import { Dialog, DialogContent, DialogHeader, DialogTitle, DialogDescription } from '@/components/ui/dialog';
import { Button } from '@/components/ui/button';
import { Textarea } from '@/components/ui/textarea';
import { Label } from '@/components/ui/label';
import { Badge } from '@/components/ui/badge';
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';
import { AlertTriangle, CheckCircle, ArrowRight, ArrowLeft, Clock, Users, Shield, User } from 'lucide-react';
import { toast } from '@/hooks/use-toast';

interface TimerManagementModalProps {
  isOpen: boolean;
  onClose: () => void;
  chamado: string;
  currentLevel: number;
  remainingTime: number;
  formatTime: (seconds: number) => string;
  onNextLevel: (chamado: string, level: number, observacao: string, operador: string) => void;
  onPreviousLevel: (chamado: string, level: number, observacao: string, operador: string) => void;
  onFinalize: (chamado: string, observacao: string, operador: string) => void;
}

const LEVEL_INFO = {
  1: {
    title: "Primeiro Acionamento",
    description: "Verifica√ß√£o inicial e primeiros procedimentos",
    icon: Clock,
    color: "bg-blue-500",
    nextLevel: "1¬™ Escala√ß√£o"
  },
  2: {
    title: "1¬™ Escala√ß√£o",
    description: "Primeiro n√≠vel de escala√ß√£o t√©cnica",
    icon: Users,
    color: "bg-orange-500",
    nextLevel: "2¬™ Escala√ß√£o"
  },
  3: {
    title: "2¬™ Escala√ß√£o", 
    description: "Segundo n√≠vel de escala√ß√£o t√©cnica",
    icon: Shield,
    color: "bg-red-500",
    nextLevel: "3¬™ Escala√ß√£o"
  },
  4: {
    title: "3¬™ Escala√ß√£o",
    description: "Terceiro n√≠vel de escala√ß√£o t√©cnica",
    icon: AlertTriangle,
    color: "bg-purple-500",
    nextLevel: "4¬™ Escala√ß√£o"
  },
  5: {
    title: "4¬™ Escala√ß√£o",
    description: "Quarto n√≠vel de escala√ß√£o t√©cnica",
    icon: AlertTriangle,
    color: "bg-red-700",
    nextLevel: "Finaliza√ß√£o"
  }
};

const OPERADORES_DISPONIVEIS = [
  "Jo√£o Silva",
  "Maria Santos", 
  "Pedro Oliveira",
  "Ana Costa",
  "Carlos Ferreira",
  "Lucia Pereira",
  "Roberto Lima",
  "Fernanda Rodrigues"
];

export const TimerManagementModal = ({
  isOpen,
  onClose,
  chamado,
  currentLevel,
  remainingTime,
  formatTime,
  onNextLevel,
  onPreviousLevel,
  onFinalize
}: TimerManagementModalProps) => {
  const [observacao, setObservacao] = useState('');
  const [operador, setOperador] = useState('');
  const [isProcessing, setIsProcessing] = useState(false);

  const levelInfo = LEVEL_INFO[currentLevel as keyof typeof LEVEL_INFO];
  const IconComponent = levelInfo?.icon || Clock;

  const handleAction = useCallback(async (action: 'next' | 'previous' | 'finish') => {
    if (!observacao.trim()) {
      toast({
        title: "Observa√ß√£o Obrigat√≥ria",
        description: "√â obrigat√≥rio preencher o campo de observa√ß√µes para continuar",
        variant: "destructive",
      });
      return;
    }

    if (observacao.trim().length < 10) {
      toast({
        title: "Observa√ß√£o Muito Curta",
        description: "A observa√ß√£o deve ter pelo menos 10 caracteres",
        variant: "destructive",
      });
      return;
    }

    if (!operador.trim()) {
      toast({
        title: "Operador Obrigat√≥rio",
        description: "√â obrigat√≥rio selecionar um operador respons√°vel",
        variant: "destructive",
      });
      return;
    }

    setIsProcessing(true);

    try {
      switch (action) {
        case 'next':
          if (currentLevel >= 5) {
            onFinalize(chamado, observacao.trim(), operador.trim());
          } else {
            onNextLevel(chamado, currentLevel + 1, observacao.trim(), operador.trim());
          }
          break;
        case 'previous':
          if (currentLevel > 1) {
            onPreviousLevel(chamado, currentLevel - 1, observacao.trim(), operador.trim());
          }
          break;
        case 'finish':
          onFinalize(chamado, observacao.trim(), operador.trim());
          break;
      }
      
      setObservacao('');
      setOperador('');
      onClose();
    } finally {
      setIsProcessing(false);
    }
  }, [observacao, operador, currentLevel, chamado, onNextLevel, onPreviousLevel, onFinalize, onClose]);

  const getTimeStatusColor = () => {
    if (remainingTime <= 300) return "text-red-500"; // √öltimos 5 minutos
    if (remainingTime <= 600) return "text-orange-500"; // √öltimos 10 minutos
    return "text-green-500";
  };

  const getTimeStatusBadge = () => {
    if (remainingTime <= 300) return { text: "CR√çTICO", variant: "destructive" as const };
    if (remainingTime <= 600) return { text: "ATEN√á√ÉO", variant: "default" as const };
    return { text: "NORMAL", variant: "secondary" as const };
  };

  const timeStatus = getTimeStatusBadge();

  return (
    <Dialog open={isOpen} onOpenChange={onClose}>
      <DialogContent className="sm:max-w-2xl border-border bg-card max-h-[90vh] overflow-y-auto">
        <DialogHeader className="text-left">
          <div className="flex items-center gap-3 mb-2">
            <div className={`p-3 rounded-lg ${levelInfo?.color || 'bg-gray-500'} text-white`}>
              <IconComponent className="h-6 w-6" />
            </div>
            <div>
              <DialogTitle className="text-2xl font-bold gradient-primary bg-clip-text text-transparent">
                {levelInfo?.title || `N√≠vel ${currentLevel}`}
              </DialogTitle>
              <DialogDescription className="text-muted-foreground text-base">
                Chamado {chamado} ‚Ä¢ {levelInfo?.description || 'Gerenciamento de escala√ß√£o'}
              </DialogDescription>
            </div>
          </div>

          {/* Status do Timer */}
          <div className="flex items-center justify-between p-4 rounded-lg bg-accent/50 border border-border">
            <div className="flex items-center gap-3">
              <Clock className={`h-5 w-5 ${getTimeStatusColor()}`} />
              <div>
                <div className="text-sm font-medium text-foreground">Tempo Restante</div>
                <div className={`text-2xl font-mono font-bold ${getTimeStatusColor()}`}>
                  {formatTime(remainingTime)}
                </div>
              </div>
            </div>
            <Badge variant={timeStatus.variant} className="text-sm font-semibold">
              {timeStatus.text}
            </Badge>
          </div>

          {/* Progress Indicator */}
          <div className="space-y-3">
            <div className="text-sm font-medium text-foreground">Progresso da Escala√ß√£o</div>
            <div className="flex items-center gap-2">
              {[1, 2, 3, 4, 5].map((level) => (
                <div key={level} className="flex items-center">
                  <div className={`
                    w-8 h-8 rounded-full flex items-center justify-center text-sm font-bold
                    ${level === currentLevel 
                      ? 'bg-primary text-primary-foreground ring-2 ring-primary ring-offset-2' 
                      : level < currentLevel
                        ? 'bg-green-500 text-white'
                        : 'bg-muted text-muted-foreground'
                    }
                  `}>
                    {level < currentLevel ? <CheckCircle className="h-4 w-4" /> : level}
                  </div>
                  {level < 5 && (
                    <div className={`w-6 h-0.5 mx-1 ${level < currentLevel ? 'bg-green-500' : 'bg-border'}`} />
                  )}
                </div>
              ))}
            </div>
            <div className="text-xs text-muted-foreground">
              N√≠vel {currentLevel} de 5 ‚Ä¢ {levelInfo?.title}
            </div>
          </div>
        </DialogHeader>

        <div className="space-y-6 pt-4">
          {/* Campo de Operador */}
          <div className="space-y-3">
            <Label htmlFor="operador" className="text-sm font-semibold text-foreground flex items-center gap-2">
              üë§ Operador Respons√°vel
              <Badge variant="destructive" className="text-xs">OBRIGAT√ìRIO</Badge>
            </Label>
            <Select value={operador} onValueChange={setOperador} disabled={isProcessing}>
              <SelectTrigger className="w-full border-border focus:border-primary transition-colors">
                <SelectValue placeholder="Selecione o operador respons√°vel..." />
              </SelectTrigger>
              <SelectContent className="max-h-60">
                {OPERADORES_DISPONIVEIS.map((op) => (
                  <SelectItem key={op} value={op} className="flex items-center gap-2">
                    <User className="h-4 w-4" />
                    {op}
                  </SelectItem>
                ))}
              </SelectContent>
            </Select>
            {operador && (
              <div className="text-xs text-green-600 font-medium flex items-center gap-1">
                ‚úì Operador selecionado: {operador}
              </div>
            )}
          </div>

          {/* Campo de Observa√ß√£o */}
          <div className="space-y-3">
            <Label htmlFor="observacao" className="text-sm font-semibold text-foreground flex items-center gap-2">
              üìù Observa√ß√µes Obrigat√≥rias
              <Badge variant="destructive" className="text-xs">OBRIGAT√ìRIO</Badge>
            </Label>
            <Textarea
              id="observacao"
              value={observacao}
              onChange={(e) => setObservacao(e.target.value)}
              placeholder={`Descreva as a√ß√µes realizadas no ${levelInfo?.title.toLowerCase()}, status atual, pr√≥ximos passos...`}
              rows={6}
              className="border-border focus:border-primary transition-colors resize-none"
              disabled={isProcessing}
            />
            <div className="flex justify-between items-center text-xs">
              <span className={`${observacao.length < 10 ? 'text-red-500' : 'text-muted-foreground'}`}>
                {observacao.length}/500 caracteres {observacao.length < 10 && '(m√≠nimo 10 caracteres)'}
              </span>
              {observacao.trim() && (
                <span className="text-green-600 font-medium">‚úì Observa√ß√£o preenchida</span>
              )}
            </div>
          </div>

          {/* Actions */}
          <div className="flex flex-col gap-4 pt-4 border-t border-border">
            <div className="grid grid-cols-1 sm:grid-cols-3 gap-3 items-center justify-items-center">
              {/* Voltar Etapa */}
              {currentLevel > 1 && (
                <Button
                  variant="outline"
                  onClick={() => handleAction('previous')}
                  disabled={!observacao.trim() || observacao.length < 10 || !operador.trim() || isProcessing}
                  className="flex items-center gap-2 h-12 w-full sm:w-auto"
                >
                  <ArrowLeft className="h-4 w-4" />
                  Voltar Etapa
                </Button>
              )}

              {/* Finalizar */}
              <Button
                variant="destructive"
                onClick={() => handleAction('finish')}
                disabled={!observacao.trim() || observacao.length < 10 || !operador.trim() || isProcessing}
                className="flex items-center gap-2 h-12 w-full sm:w-auto"
              >
                <CheckCircle className="h-4 w-4" />
                Finalizar Chamado
              </Button>

              {/* Pr√≥xima Etapa */}
              {currentLevel < 5 && (
                <Button
                  onClick={() => handleAction('next')}
                  disabled={!observacao.trim() || observacao.length < 10 || !operador.trim() || isProcessing}
                  className="flex items-center gap-2 h-12 w-full sm:w-auto gradient-primary text-primary-foreground border-none hover:opacity-90"
                >
                  {levelInfo?.nextLevel || 'Pr√≥xima Etapa'}
                  <ArrowRight className="h-4 w-4" />
                </Button>
              )}

              {/* Se est√° no √∫ltimo n√≠vel, bot√£o especial para finalizar */}
              {currentLevel >= 5 && (
                <Button
                  onClick={() => handleAction('next')}
                  disabled={!observacao.trim() || observacao.length < 10 || !operador.trim() || isProcessing}
                  className="flex items-center gap-2 h-12 bg-green-600 hover:bg-green-700 text-white sm:col-span-2"
                >
                  <CheckCircle className="h-4 w-4" />
                  Concluir Escala√ß√£o Final
                </Button>
              )}
            </div>

            {/* Bot√£o Cancelar */}
            <Button
              variant="ghost"
              onClick={onClose}
              disabled={isProcessing}
              className="w-full"
            >
              Cancelar
            </Button>
          </div>

          {/* Dicas */}
          <div className="bg-muted/50 p-4 rounded-lg border border-border">
            <div className="text-sm space-y-2">
              <div className="font-medium text-foreground mb-2">üí° Dicas Importantes:</div>
              <ul className="text-muted-foreground space-y-1 list-disc list-inside">
                <li>Operador e observa√ß√µes s√£o obrigat√≥rios para qualquer a√ß√£o</li>
                <li>Descreva claramente as a√ß√µes realizadas e pr√≥ximos passos</li>
                <li>Use "Finalizar" apenas quando o chamado estiver resolvido</li>
                <li>Cada escala√ß√£o reinicia o timer de 20 minutos</li>
                <li>Timer expirando automaticamente escala para pr√≥ximo n√≠vel</li>
              </ul>
            </div>
          </div>
        </div>
      </DialogContent>
    </Dialog>
  );
};

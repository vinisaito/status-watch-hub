import boto3
import json
from datetime import datetime, timezone

DDB = boto3.resource("dynamodb", region_name="us-east-1")
ACOMP_TABLE = DDB.Table("painelmonitoracao_acompanhamento")
CONN_TABLE = DDB.Table("painelmonitoracao_connections")

APIGW_ENDPOINT = "https://SEU_ENDPOINT.execute-api.us-east-1.amazonaws.com/dev"
apigw = boto3.client("apigatewaymanagementapi", endpoint_url=APIGW_ENDPOINT)

def lambda_handler(event, context):
    route = event.get("requestContext", {}).get("routeKey")
    connection_id = event.get("requestContext", {}).get("connectionId")

    if route == "$connect":
        CONN_TABLE.put_item(Item={"connectionId": connection_id})
        return {"statusCode": 200}

    elif route == "$disconnect":
        CONN_TABLE.delete_item(Key={"connectionId": connection_id})
        return {"statusCode": 200}

    elif route == "sendMessage":
        body = json.loads(event.get("body", "{}"))
        action = body.get("action")
        chamado = str(body.get("chamado"))

        if not action or not chamado:
            return {"statusCode": 400, "body": "Chamado ou ação ausente"}

        try:
            if action == "startTimer":
                startedAt = datetime.utcnow().replace(tzinfo=timezone.utc).isoformat()
                ACOMP_TABLE.update_item(
                    Key={"chamado": chamado},
                    UpdateExpression="SET timerActive=:t, startedAt=:s",
                    ExpressionAttributeValues={":t": True, ":s": startedAt}
                )
            elif action == "pauseTimer":
                item = ACOMP_TABLE.get_item(Key={"chamado": chamado}).get("Item", {})
                startedAt = item.get("startedAt")
                ACOMP_TABLE.update_item(
                    Key={"chamado": chamado},
                    UpdateExpression="SET timerActive=:t",
                    ExpressionAttributeValues={":t": False}
                )
            else:
                return {"statusCode": 400, "body": "Ação inválida"}

            # Broadcast
            connections = CONN_TABLE.scan().get("Items", [])
            for conn in connections:
                try:
                    apigw.post_to_connection(
                        ConnectionId=conn["connectionId"],
                        Data=json.dumps({
                            "type": "TIMER_UPDATED",
                            "chamado": chamado,
                            "timerActive": action == "startTimer",
                            "startedAt": startedAt,
                            "durationMinutes": 15
                        })
                    )
                except apigw.exceptions.GoneException:
                    CONN_TABLE.delete_item(Key={"connectionId": conn["connectionId"]})

            return {"statusCode": 200, "body": "ok"}

        except Exception as e:
            return {"statusCode": 500, "body": str(e)}

    else:
        return {"statusCode": 400, "body": "Rota não suportada"}

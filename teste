import React, { useEffect, useState, useRef } from "react";

const API_BASE = "https://f6ffk8e9fe.execute-api.us-east-1.amazonaws.com/prod";
const WS_ENDPOINT = "wss://SEU_ENDPOINT_WEBSOCKET"; // substitua pelo seu endpoint

export default function Timer() {
  const [alerts, setAlerts] = useState([]);
  const ws = useRef<WebSocket | null>(null);

  // Conecta WebSocket
  useEffect(() => {
    ws.current = new WebSocket(WS_ENDPOINT);

    ws.current.onopen = () => console.log("✅ WebSocket conectado");
    ws.current.onmessage = (msg) => {
      const data = JSON.parse(msg.data);
      if (data.type === "update") {
        fetchAlerts(); // sincroniza todos os clientes
      }
    };
    ws.current.onclose = () => console.log("❌ WebSocket desconectado");

    return () => ws.current?.close();
  }, []);

  // Busca alertas da API
  const fetchAlerts = () => {
    fetch(`${API_BASE}/dados`)
      .then((res) => res.json())
      .then((data) => {
        if (!Array.isArray(data)) {
          console.error("❌ API não retornou lista de alertas:", data);
          return;
        }
        const updated = data.map((alert) => ({
          ...alert,
          localTimeRemaining: alert.timeRemaining ?? 0,
        }));
        setAlerts(updated);
      })
      .catch((err) => console.error("Erro ao buscar alertas:", err));
  };

  useEffect(() => {
    fetchAlerts();
  }, []);

  // Atualiza o cronômetro local a cada segundo
  useEffect(() => {
    const interval = setInterval(() => {
      setAlerts((prev) =>
        prev.map((alert) => {
          if (alert.timerActive && alert.startedAt) {
            const startedAt = new Date(alert.startedAt).getTime();
            const durationMs = (alert.durationMinutes ?? 15) * 60 * 1000;
            const elapsed = Date.now() - startedAt;
            const remaining = Math.max(0, durationMs - elapsed);
            return { ...alert, localTimeRemaining: Math.floor(remaining / 1000) };
          }
          return alert;
        })
      );
    }, 1000);
    return () => clearInterval(interval);
  }, [alerts]);

  // Iniciar cronômetro
  const startTimer = async (chamado: string | number) => {
    try {
      const res = await fetch(`${API_BASE}/dados/${chamado}`, {
        method: "PATCH",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify({
          timerActive: true,
          startedAt: new Date().toISOString(),
        }),
      });
      const data = await res.json();
      console.log("✅ PATCH iniciado:", data);
      fetchAlerts();

      if (ws.current && ws.current.readyState === WebSocket.OPEN) {
        ws.current.send(JSON.stringify({ action: "startTimer", chamado }));
      }
    } catch (err) {
      console.error("❌ Erro ao iniciar cronômetro:", err);
    }
  };

  // Pausar cronômetro
  const pauseTimer = async (chamado: string | number) => {
    try {
      const res = await fetch(`${API_BASE}/dados/${chamado}`, {
        method: "PATCH",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify({ timerActive: false }),
      });
      const data = await res.json();
      console.log("⏸ PATCH pausado:", data);
      fetchAlerts();

      if (ws.current && ws.current.readyState === WebSocket.OPEN) {
        ws.current.send(JSON.stringify({ action: "pauseTimer", chamado }));
      }
    } catch (err) {
      console.error("❌ Erro ao pausar cronômetro:", err);
    }
  };

  // Render
  return (
    <div style={{ padding: "20px" }}>
      <h1>Painel de Alertas</h1>
      {alerts.map((alert) => (
        <div
          key={alert.chamado}
          style={{
            border: "1px solid #ccc",
            padding: "10px",
            marginBottom: "10px",
          }}

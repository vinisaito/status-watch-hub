def json_response(status:int, body_obj:dict=None):
    """Resposta padrão sem mandar body pro client, a não ser que precise."""
    if body_obj is None:
        return {"statusCode": status}
    return {
        "statusCode": status,
        "headers": {"Content-Type": "application/json"},
        "body": to_json(body_obj)
    }

# ---------- Rotas ----------
def on_connect(event):
    connection_id = event["requestContext"]["connectionId"]
    resp = connections_table.put_item(Item={"connectionId": connection_id, "connectedAt": now_ts()})
    log("on_connect OK", connectionId=connection_id, resp=resp)
    return json_response(200)  # sem body

def on_disconnect(event):
    connection_id = event["requestContext"]["connectionId"]
    try:
        resp = connections_table.delete_item(Key={"connectionId": connection_id})
        log("on_disconnect OK", connectionId=connection_id, resp=resp)
    except Exception as e:
        log("on_disconnect ERROR", connectionId=connection_id, error=str(e))
    return json_response(200)  # sem body

def broadcast(event, message):
    if DISABLE_APIGW_POST:
        log("broadcast SKIPPED (DISABLE_APIGW_POST=1)",
            action=message.get("action"), chamado=message.get("chamado"), message=message)
        return json_response(200)

    apigw = get_apigw_client(event)
    try:
        scan = connections_table.scan()
        connections = scan.get("Items", [])
        log("broadcast scan OK", total=len(connections))
    except Exception as e:
        log("broadcast scan ERROR", error=str(e))
        return json_response(500)

    log("broadcast begin", total=len(connections),
        action=message.get("action"), chamado=message.get("chamado"))
    sent = 0
    for conn in connections:
        if send_to_connection(apigw, conn["connectionId"], message):
            sent += 1
    log("broadcast end", sent=sent, total=len(connections))
    return json_response(200)  # não devolve nada pro cliente

def get_state(event):
    body = parse_body_safe(event)
    chamado = int(body["chamado"])
    connection_id = event["requestContext"]["connectionId"]

    resp = chamados_table.get_item(Key={"chamado": chamado})
    item = resp.get("Item", {})
    log("get_state DB get OK", item=item)

    message = {"action": "currentState", "chamado": chamado, "serverTime": now_ts(), **item}

    if DISABLE_APIGW_POST:
        log("get_state SKIPPED send_to_connection (DISABLE_APIGW_POST=1)",
            connectionId=connection_id, message=message)
        return json_response(200)

    apigw = get_apigw_client(event)
    log("get_state -> enviando", chamado=chamado, connectionId=connection_id)
    send_to_connection(apigw, connection_id, message)
    return json_response(200)  # sem body

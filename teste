import React, { useEffect, useState, useRef } from "react";

interface TimerProps {
  chamado: number;
}

// Defina a URL do WebSocket diretamente aqui
const WS_URL = "wss://YOUR_API_ID.execute-api.us-east-1.amazonaws.com/prod";

const Timer: React.FC<TimerProps> = ({ chamado }) => {
  const [timeRemaining, setTimeRemaining] = useState<number>(0);
  const [timerActive, setTimerActive] = useState<boolean>(false);
  const [durationMinutes, setDurationMinutes] = useState<number>(15);
  const [startedAt, setStartedAt] = useState<string | null>(null);

  const ws = useRef<WebSocket | null>(null);
  const intervalRef = useRef<NodeJS.Timeout | null>(null);

  // Conectar ao WebSocket
  useEffect(() => {
    console.log("🌐 Conectando ao WebSocket...");
    ws.current = new WebSocket(WS_URL);

    ws.current.onopen = () => {
      console.log("✅ WebSocket conectado");
      // Solicita o estado atual
      ws.current?.send(
        JSON.stringify({ action: "getState", chamado })
      );
    };

    ws.current.onmessage = (event) => {
      console.log("📩 Mensagem recebida:", event.data);
      try {
        const data = JSON.parse(event.data);
        if (data.type === "TIMER_UPDATED" || data.timeRemaining !== undefined) {
          setTimeRemaining(data.timeRemaining);
          setTimerActive(data.timerActive);
          setDurationMinutes(data.durationMinutes);
          setStartedAt(data.startedAt);
        }
      } catch (e) {
        console.error("❌ Erro ao processar mensagem WS:", e);
      }
    };

    ws.current.onerror = (err) => {
      console.error("❌ WebSocket erro:", err);
    };

    ws.current.onclose = () => {
      console.log("⚠️ WebSocket desconectado");
    };

    return () => {
      if (ws.current) {
        ws.current.close();
      }
    };
  }, [chamado]);

  // Intervalo local para exibir contagem regressiva
  useEffect(() => {
    if (intervalRef.current) clearInterval(intervalRef.current);

    intervalRef.current = setInterval(() => {
      setTimeRemaining(prev => (timerActive && prev > 0 ? prev - 1 : prev));
    }, 1000);

    return () => {
      if (intervalRef.current) clearInterval(intervalRef.current);
    };
  }, [timerActive]);

  const handleStart = () => {
    if (ws.current?.readyState === WebSocket.OPEN) {
      console.log("▶️ Enviando startTimer");
      ws.current.send(JSON.stringify({ action: "startTimer", chamado }));
    } else {
      console.warn("⚠️ WebSocket não conectado ainda");
    }
  };

  const handlePause = () => {
    if (ws.current?.readyState === WebSocket.OPEN) {
      console.log("⏸ Enviando pauseTimer");
      ws.current.send(JSON.stringify({ action: "pauseTimer", chamado }));
    } else {
      console.warn("⚠️ WebSocket não conectado ainda");
    }
  };

  const formatTime = (seconds: number) => {
    const m = Math.floor(seconds / 60)
      .toString()
      .padStart(2, "0");
    const s = (seconds % 60).toString().padStart(2, "0");
    return `${m}:${s}`;
  };

  return (
    <div style={{ padding: "1rem", border: "1px solid #ccc", width: 200 }}>
      <h3>Chamado: {chamado}</h3>
      <p>Tempo restante: {formatTime(timeRemaining)}</p>
      <p>Timer ativo: {timerActive ? "Sim" : "Não"}</p>
      <button onClick={handleStart} disabled={timerActive}>
        Iniciar
      </button>
      <button onClick={handlePause} disabled={!timerActive}>
        Pausar
      </button>
    </div>
  );
};

export default Timer;

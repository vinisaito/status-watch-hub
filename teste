import React, { useLayoutEffect, useRef, useState, forwardRef } from "react";
import type { ProductLine, RDM } from "@/types/rdm";
import { CheckCircle2, XCircle, Clock } from "lucide-react";
import { cn } from "@/lib/utils";
import { ProductSummary } from "./ProductSummary";

interface RDMTimelineProps {
  productLine: ProductLine;
}

// Local RDMNode component (inlined from ./RDMNode)
interface RDMNodeProps {
  rdm: RDM;
  color: string;
  isFirst?: boolean;
  isLast?: boolean;
  productLineId?: string;
}

const RDMNode = forwardRef<HTMLDivElement, RDMNodeProps>(
  ({ rdm, color, isFirst, isLast, productLineId }: RDMNodeProps, ref) => {
    const isEpsilon = productLineId === "produto-5";
    const showSideInfo =
      rdm.number === "008" ||
      rdm.number === "016" ||
      (isEpsilon && rdm.number === "024");
    const sideIsLeft = rdm.number === "016";
    const sideIsRight = rdm.number === "008" || (isEpsilon && rdm.number === "024");

    const getStatusIcon = () => {
      switch (rdm.status) {
        case "executed":
          return <CheckCircle2 className="w-4 h-4" />;
        case "failed":
          return <XCircle className="w-4 h-4" />;
        case "pending":
          return <Clock className="w-4 h-4" />;
      }
    };

    const getStatusColor = () => {
      switch (rdm.status) {
        case "executed":
          return "bg-green-100 border-green-300 text-green-600";
        case "failed":
          return "bg-red-100 border-red-300 text-red-600";
        case "pending":
          return "bg-background border-muted-foreground text-muted-foreground";
      }
    };

    return (
      <div className="relative flex flex-col items-center gap-2 group">
        <div className="relative z-10" ref={ref}>
          <div
            className={cn(
              "w-10 h-10 rounded-full border-[3px] flex items-center justify-center",
              "transition-all duration-300 cursor-pointer",
              "hover:scale-110 hover:shadow-lg",
              getStatusColor()
            )}
            style={{
              borderColor: rdm.status === "pending" ? color : undefined,
              boxShadow:
                rdm.status === "executed"
                  ? `0 4px 12px rgba(34, 197, 94, 0.2)`
                  : rdm.status === "failed"
                  ? `0 4px 12px rgba(239, 68, 68, 0.2)`
                  : undefined,
            }}
          >
            {getStatusIcon()}
          </div>
        </div>

        <div
          className={cn(
            "flex flex-col items-center gap-1 mt-2",
            showSideInfo && "absolute top-1/2 -translate-y-1/2 z-10 mt-0",
            showSideInfo && sideIsRight && "left-full ml-3 items-start",
            showSideInfo && sideIsLeft && "right-full mr-3 items-end"
          )}
        >
          <div
            className="font-bold text-xs px-2 py-1 rounded-full whitespace-nowrap shadow-sm"
            style={{
              backgroundColor: `${color}25`,
              color: color,
            }}
          >
            {rdm.number}
          </div>
          <div className="text-xs font-medium text-muted-foreground bg-card px-2 py-0.5 rounded border border-border shadow-sm">
            {rdm.time}
          </div>
        </div>

        {rdm.description && (
          <div className="absolute top-full mt-20 opacity-0 group-hover:opacity-100 transition-opacity duration-200 z-20 pointer-events-none group-hover:pointer-events-auto">
            <div className="bg-card border border-border rounded-lg p-3 shadow-lg min-w-[180px] max-w-[250px]">
              <p className="text-xs text-foreground">{rdm.description}</p>
            </div>
          </div>
        )}
      </div>
    );
  }
);

RDMNode.displayName = "RDMNode";

export const RDMTimeline: React.FC<RDMTimelineProps> = ({ productLine }) => {
  const nodesPerRow = 8;
  const rows = Math.ceil(productLine.rdms.length / nodesPerRow);
  const containerRef = useRef<HTMLDivElement | null>(null);
  const nodeRefs = useRef<Array<HTMLDivElement | null>>([]);
  const [linePositions, setLinePositions] = useState<
    Array<{ x1: number; y1: number; x2: number; y2: number }>
  >([]);

  if (nodeRefs.current.length !== productLine.rdms.length) {
    nodeRefs.current = Array(productLine.rdms.length).fill(null);
  }

  const recalcPositions = () => {
    if (!containerRef.current) return;
    const containerRect = containerRef.current.getBoundingClientRect();
    const positions: Array<{ x: number; y: number; ok: boolean }> = nodeRefs.current.map((el) => {
      if (!el) return { x: 0, y: 0, ok: false };
      const rect = el.getBoundingClientRect();
      return {
        x: rect.left - containerRect.left + rect.width / 2,
        y: rect.top - containerRect.top + rect.height / 2,
        ok: rect.width > 0 && rect.height > 0,
      };
    });

    const lines: Array<{ x1: number; y1: number; x2: number; y2: number }> = [];
    for (let i = 0; i < positions.length - 1; i++) {
      const p1 = positions[i];
      const p2 = positions[i + 1];
      if (p1.ok && p2.ok) {
        lines.push({ x1: p1.x, y1: p1.y, x2: p2.x, y2: p2.y });
      }
    }
    setLinePositions(lines);
  };

  useLayoutEffect(() => {
    recalcPositions();
    const onResize = () => recalcPositions();
    window.addEventListener("resize", onResize);
    return () => window.removeEventListener("resize", onResize);
  }, [productLine.rdms.length, nodesPerRow]);

  return (
    <div className="mb-12 last:mb-0">
      <div className="mb-6">
        <h3 className="text-lg font-semibold text-foreground">{productLine.name}</h3>
      </div>

      <div className="relative w-full mb-4" ref={containerRef}>
        <svg className="absolute inset-0 w-full h-full pointer-events-none" style={{ zIndex: 0 }}>
          {linePositions.map((pos, index) => (
            <line
              key={`line-${index}`}
              x1={pos.x1}
              y1={pos.y1}
              x2={pos.x2}
              y2={pos.y2}
              stroke={productLine.color}
              strokeWidth={2}
              strokeLinecap="round"
            />
          ))}
        </svg>

        <div
          className="relative grid gap-x-4 gap-y-8 py-8"
          style={{
            gridTemplateColumns: `repeat(${nodesPerRow}, 1fr)`,
            minHeight: `${rows * 140}px`,
            zIndex: 1,
          }}
        >
          {productLine.rdms.map((rdm, index) => {
            const row = Math.floor(index / nodesPerRow);
            const col = index % nodesPerRow;
            const isRightToLeft = row % 2 === 1;
            const gridCol = isRightToLeft ? nodesPerRow - col : col + 1;

            return (
              <div
                key={rdm.id}
                style={{ gridColumn: gridCol, gridRow: row + 1 }}
                className="flex justify-center"
              >
                <RDMNode
                  ref={(el) => (nodeRefs.current[index] = el)}
                  rdm={rdm}
                  color={productLine.color}
                  isFirst={index === 0}
                  isLast={index === productLine.rdms.length - 1}
                  productLineId={productLine.id}
                />
              </div>
            );
          })}
        </div>
      </div>

      <ProductSummary productLine={productLine} />
    </div>
  );
};

export default RDMTimeline;

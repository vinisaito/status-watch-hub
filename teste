import { useEffect, useState } from "react";
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from "@/components/ui/card";
import { Button } from "@/components/ui/button";
import { ConfirmColumn } from "@/components/ConfirmColumn";
import useChamadoStore from "@/store/useChamadoStore";
import { AlertData, PendingStatusChange } from "@/types/ActionTable";

const Index = () => {
  const store = useChamadoStore();
  const [observations, setObservations] = useState<Record<string, string>>({});
  const [confirmations, setConfirmations] = useState<Record<string, boolean>>({});
  const [pendingChanges, setPendingChanges] = useState<Record<string, PendingStatusChange>>({});

  // Dados de exemplo para testar o componente
  const sampleAlerts: AlertData[] = [
    { 
      id: "1", 
      chamado: "101", 
      tipo_chamado: "Cr√≠tico", 
      grupo_chamado: "TI", 
      status_chamado: "Aberto", 
      abertura_chamado: "2025-09-08T10:00:00Z", 
      resumo_chamado: "Teste de chamado 101", 
      severidade_chamado: "Alta", 
      chat: false 
    },
    { 
      id: "2", 
      chamado: "102", 
      tipo_chamado: "Normal", 
      grupo_chamado: "TI", 
      status_chamado: "Aberto", 
      abertura_chamado: "2025-09-08T11:00:00Z", 
      resumo_chamado: "Teste de chamado 102", 
      severidade_chamado: "M√©dia", 
      chat: false 
    },
    { 
      id: "3", 
      chamado: "103", 
      tipo_chamado: "Urgente", 
      grupo_chamado: "TI", 
      status_chamado: "Aberto", 
      abertura_chamado: "2025-09-08T12:00:00Z", 
      resumo_chamado: "Teste de chamado 103", 
      severidade_chamado: "Alta", 
      chat: false 
    },
  ];

  // Inicializar WebSocket ao montar o componente
  useEffect(() => {
    if (!store.isConnected) {
      console.log('üîå Inicializando conex√£o WebSocket...');
      store.initWebSocket();
    }
  }, [store]);

  // Handlers para os callbacks do ConfirmColumn
  const handleStartConfirmation = (alertId: string) => {
    console.log(`üìù Iniciando confirma√ß√£o para chamado: ${alertId}`);
    setConfirmations(prev => ({ ...prev, [alertId]: false }));
  };

  const handleConfirmReceived = (alertId: string) => {
    console.log(`‚úÖ Confirma√ß√£o recebida para chamado: ${alertId}`);
    setConfirmations(prev => ({ ...prev, [alertId]: true }));
  };

  const handleStartEscalation = (alertId: string, level: 1 | 2 | 3 | 4) => {
    console.log(`üìà Escalando chamado ${alertId} para n√≠vel: ${level}`);
  };

  const handleObservationChange = (alertId: string, value: string) => {
    setObservations(prev => ({ ...prev, [alertId]: value }));
  };

  const handlePendingObservationChange = (alertId: string, value: string) => {
    setPendingChanges(prev => ({
      ...prev,
      [alertId]: { ...prev[alertId], observations: value }
    }));
  };

  const handlePrepareStatusChange = (alertId: string, status: string) => {
    setPendingChanges(prev => ({
      ...prev,
      [alertId]: { status: status as 'attended' | 'not-attended', observations: '' }
    }));
  };

  const handleConfirmStatusChange = (alertId: string) => {
    console.log(`üèÅ Status final confirmado para chamado: ${alertId}`);
    setPendingChanges(prev => {
      const updated = { ...prev };
      delete updated[alertId];
      return updated;
    });
  };

  const handleCancelStatusChange = (alertId: string) => {
    setPendingChanges(prev => {
      const updated = { ...prev };
      delete updated[alertId];
      return updated;
    });
  };

  const handleGoBack = (alertId: string) => {
    console.log(`‚¨ÖÔ∏è Voltando etapa para chamado: ${alertId}`);
  };

  return (
    <div className="min-h-screen bg-background p-6">
      <div className="max-w-6xl mx-auto space-y-6">
        {/* Header */}
        <div className="space-y-2">
          <h1 className="text-3xl font-bold">Sistema de Confirma√ß√£o de Chamados</h1>
          <p className="text-muted-foreground">
            Demonstra√ß√£o do componente ConfirmColumn com integra√ß√£o WebSocket
          </p>
        </div>

        {/* Status da Conex√£o WebSocket */}
        <Card>
          <CardHeader>
            <CardTitle className="flex items-center gap-2">
              Status da Conex√£o
              <div 
                className={`w-3 h-3 rounded-full ${
                  store.isConnected ? 'bg-green-500 animate-pulse' : 'bg-red-500'
                }`}
              />
            </CardTitle>
            <CardDescription>
              {store.isConnected 
                ? '‚úÖ Conectado ao WebSocket' 
                : '‚ùå Desconectado - tentando reconectar...'
              }
            </CardDescription>
          </CardHeader>
          <CardContent>
            <div className="flex gap-2">
              <Button 
                onClick={() => store.initWebSocket()} 
                disabled={store.isConnected}
                variant="outline"
                size="sm"
              >
                Reconectar
              </Button>
              <Button 
                onClick={() => console.log('üìä Mensagens recebidas:', store.messages)} 
                variant="outline"
                size="sm"
              >
                Ver Log de Mensagens
              </Button>
            </div>
          </CardContent>
        </Card>

        {/* Tabela de Chamados */}
        <Card>
          <CardHeader>
            <CardTitle>Chamados de Teste</CardTitle>
            <CardDescription>
              Use os controles abaixo para testar as funcionalidades do sistema
            </CardDescription>
          </CardHeader>
          <CardContent>
            <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4">
              {sampleAlerts.map((alert) => (
                <Card key={alert.id} className="border-2">
                  <CardHeader className="pb-3">
                    <CardTitle className="text-lg">Chamado #{alert.chamado}</CardTitle>
                    <CardDescription>{alert.resumo_chamado} - Severidade: {alert.severidade_chamado}</CardDescription>
                  </CardHeader>
                  <CardContent>
                    <ConfirmColumn
                      alert={alert}
                      currentObservation={observations[alert.id] || ''}
                      showConfirmation={!!pendingChanges[alert.id]?.status}
                      pendingChange={pendingChanges[alert.id]}
                      onStartConfirmation={handleStartConfirmation}
                      onConfirmReceived={handleConfirmReceived}
                      onStartEscalation={handleStartEscalation}
                      onObservationChange={handleObservationChange}
                      onPendingObservationChange={handlePendingObservationChange}
                      onPrepareStatusChange={handlePrepareStatusChange}
                      onConfirmStatusChange={handleConfirmStatusChange}
                      onCancelStatusChange={handleCancelStatusChange}
                      onGoBack={handleGoBack}
                    />
                  </CardContent>
                </Card>
              ))}
            </div>
          </CardContent>
        </Card>

        {/* Debug Info */}
        <Card>
          <CardHeader>
            <CardTitle>Informa√ß√µes de Debug</CardTitle>
          </CardHeader>
          <CardContent>
            <div className="space-y-2 text-sm">
              <p><strong>Estados dos Chamados:</strong></p>
              <pre className="bg-muted p-3 rounded text-xs overflow-auto">
                {JSON.stringify(store.chamados, null, 2)}
              </pre>
              <p><strong>Observa√ß√µes Locais:</strong></p>
              <pre className="bg-muted p-3 rounded text-xs overflow-auto">
                {JSON.stringify(observations, null, 2)}
              </pre>
              <p><strong>√öltimas Mensagens WebSocket ({store.messages.length}):</strong></p>
              <pre className="bg-muted p-3 rounded text-xs overflow-auto max-h-32">
                {JSON.stringify(store.messages.slice(-3), null, 2)}
              </pre>
            </div>
          </CardContent>
        </Card>
      </div>
    </div>
  );
};

export default Index;

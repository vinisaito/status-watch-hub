import { useState } from 'react';
import { Timer, User, FileText, X, RotateCcw, CheckCircle, SkipForward } from 'lucide-react';
import { Dialog, DialogContent, DialogHeader, DialogTitle } from '@/components/ui/dialog';
import { Button } from '@/components/ui/button';
import { Textarea } from '@/components/ui/textarea';
import { Label } from '@/components/ui/label';
import { Progress } from '@/components/ui/progress';
import { Badge } from '@/components/ui/badge';
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';

const operadores = [
  'ALBERTO LAGES',
  'ALEXANDRE LIMA SILVA',
  'ANSELMO ALVES PESSOA',
  'BRUNO MAZZO FEITOSA',
  'CAIO CESAR ALVES DA LUZ',
  'CLAUDIA ZORZAN DE CAMARGO',
  'JEFFERSON DA SILVA SOUZA',
  'JULIANA BEATRIZ DE ANGELO',
  'MARIA LUIZA DOS SANTOS COIADO',
  'RAFAEL NUNES PACHECO',
  'SERGIO ANTONIO DA SILVA',
  'VICTOR HUGO ALMEIDA FERNANDES',
  'VINICIUS RHYU VITURINO SAITO'
];

interface EscalacaoDialogProps {
  open: boolean;
  onOpenChange: (open: boolean) => void;
  selectedChamado: string;
  currentEtapa: number;
  currentTimer: number;
  formatTime: (seconds: number) => string;
  escalacaoData: Map<string, any>;
  onAvancarEtapa: (observacao: string, operador: string) => boolean;
  onVoltarEtapa: (observacao: string, operador: string) => boolean;
  onFinalizarEscalacao: (observacao: string, operador: string) => boolean;
}

export const EscalacaoDialog = ({
  open,
  onOpenChange,
  selectedChamado,
  currentEtapa,
  currentTimer,
  formatTime,
  escalacaoData,
  onAvancarEtapa,
  onVoltarEtapa,
  onFinalizarEscalacao
}: EscalacaoDialogProps) => {
  const [tempOperador, setTempOperador] = useState('');
  const [tempObservacao, setTempObservacao] = useState('');

  const handleAction = (action: 'avancar' | 'voltar' | 'finalizar') => {
    let success = false;
    
    switch (action) {
      case 'avancar':
        success = onAvancarEtapa(tempObservacao, tempOperador);
        break;
      case 'voltar':
        success = onVoltarEtapa(tempObservacao, tempOperador);
        break;
      case 'finalizar':
        success = onFinalizarEscalacao(tempObservacao, tempOperador);
        break;
    }

    if (success) {
      setTempObservacao('');
      setTempOperador('');
      if (action === 'finalizar') {
        onOpenChange(false);
      }
    }
  };

  const observacoes = escalacaoData.get(selectedChamado)?.observacoes || [];

  return (
    <Dialog open={open} onOpenChange={onOpenChange}>
      <DialogContent className="max-w-2xl max-h-[90vh] overflow-y-auto">
        <DialogHeader className="pb-4 border-b">
          <DialogTitle className="flex items-center gap-3">
            <div className="p-3 rounded-xl bg-gradient-to-r from-orange-500 to-red-500">
              <Timer className="h-6 w-6 text-white" />
            </div>
            <div>
              <h3 className="text-xl font-bold">Processo de Escalação</h3>
              <p className="text-sm text-muted-foreground">
                Chamado: {selectedChamado} - Etapa {currentEtapa}/4
              </p>
            </div>
          </DialogTitle>
        </DialogHeader>

        <div className="space-y-6 pt-4">
          {/* Timer */}
          <div className="bg-gradient-to-r from-orange-50 to-red-50 dark:from-orange-950/20 dark:to-red-950/20 p-4 rounded-lg border border-orange-200 dark:border-orange-800">
            <div className="flex items-center justify-between mb-3">
              <div className="flex items-center gap-2">
                <Timer className="h-5 w-5 text-orange-600" />
                <span className="font-medium">Timer da Etapa</span>
              </div>
              <div className="text-2xl font-mono font-bold text-orange-600">
                {formatTime(currentTimer)}
              </div>
            </div>
            
            <Progress 
              value={((20 * 60 - currentTimer) / (20 * 60)) * 100} 
              className="h-2 mb-2"
            />
            
            <div className="flex items-center justify-between text-xs text-muted-foreground">
              <span>Tempo restante para ação</span>
              <span>{currentTimer > 0 ? 'Em andamento' : 'Tempo esgotado'}</span>
            </div>
          </div>

          {/* Histórico */}
          {observacoes.length > 0 && (
            <div className="space-y-2">
              <h4 className="font-medium text-sm">Histórico de Observações</h4>
              <div className="max-h-32 overflow-y-auto space-y-2">
                {observacoes.map((obs: any, index: number) => (
                  <div key={index} className="bg-secondary p-2 rounded text-xs">
                    <div className="flex justify-between items-start mb-1">
                      <Badge variant="outline" className="text-xs">
                        Etapa {obs.etapa}
                      </Badge>
                      <span className="text-muted-foreground">{obs.timestamp}</span>
                    </div>
                    <p className="text-foreground mb-1">{obs.observacao}</p>
                    <p className="text-muted-foreground">Por: {obs.operador}</p>
                  </div>
                ))}
              </div>
            </div>
          )}

          {/* Formulário */}
          <div className="space-y-4">
            <div className="space-y-2">
              <Label className="text-sm font-medium flex items-center gap-2">
                <User className="h-4 w-4" />
                Operador *
              </Label>
              <Select value={tempOperador} onValueChange={setTempOperador}>
                <SelectTrigger>
                  <SelectValue placeholder="Selecione um operador" />
                </SelectTrigger>
                <SelectContent>
                  {operadores.map((operador) => (
                    <SelectItem key={operador} value={operador}>
                      {operador}
                    </SelectItem>
                  ))}
                </SelectContent>
              </Select>
            </div>

            <div className="space-y-2">
              <Label className="text-sm font-medium flex items-center gap-2">
                <FileText className="h-4 w-4" />
                Observação *
              </Label>
              <Textarea
                placeholder="Digite a observação para esta etapa..."
                value={tempObservacao}
                onChange={(e) => setTempObservacao(e.target.value)}
                className="min-h-[100px] resize-none"
                rows={4}
              />
            </div>
          </div>

          {/* Botões */}
          <div className="flex flex-col sm:flex-row gap-2 pt-4 border-t">
            <Button
              variant="outline"
              onClick={() => onOpenChange(false)}
              className="flex-1"
            >
              <X className="h-4 w-4 mr-2" />
              Cancelar
            </Button>
            
            {currentEtapa > 1 && (
              <Button
                variant="secondary"
                onClick={() => handleAction('voltar')}
                disabled={!tempOperador || !tempObservacao.trim()}
                className="flex-1"
              >
                <RotateCcw className="h-4 w-4 mr-2" />
                Voltar Etapa
              </Button>
            )}
            
            <Button
              variant="destructive"
              onClick={() => handleAction('finalizar')}
              disabled={!tempOperador || !tempObservacao.trim()}
              className="flex-1"
            >
              <CheckCircle className="h-4 w-4 mr-2" />
              Finalizar
            </Button>
            
            {currentEtapa < 4 && (
              <Button
                onClick={() => handleAction('avancar')}
                disabled={!tempOperador || !tempObservacao.trim()}
                className="flex-1"
              >
                <SkipForward className="h-4 w-4 mr-2" />
                Próxima Etapa
              </Button>
            )}
          </div>
        </div>
      </DialogContent>
    </Dialog>
  );
};

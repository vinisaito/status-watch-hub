import React, { useState, useCallback } from 'react';
import { Dialog, DialogContent, DialogHeader, DialogTitle } from '@/components/ui/dialog';
import { Button } from '@/components/ui/button';
import { Textarea } from '@/components/ui/textarea';
import { Label } from '@/components/ui/label';
import { Badge } from '@/components/ui/badge';
import { Separator } from '@/components/ui/separator';
import { ProgressIndicator } from '@/components/ui/progress-indicator';
import { TimerDisplay } from '@/components/ui/timer-display';
import {
  ArrowRight,
  ArrowLeft,
  CheckCircle,
  X,
  AlertTriangle,
  Lightbulb,
  MessageSquare,
  Timer
} from 'lucide-react';
import { toast } from '@/hooks/use-toast';
import { cn } from '@/lib/utils';

interface ModernTimerModalProps {
  isOpen: boolean;
  onClose: () => void;
  chamado: number;
  currentLevel: number;
  remainingTime: number;
  chamadoData?: any; // Incluindo atributos do DynamoDB
  formatTime: (seconds: number) => string;
  onNextLevel: (chamado: number, level: number, observacao: string) => void;
  onPreviousLevel: (chamado: number, level: number, observacao: string) => void;
  updateStatusFinal: (chamado: number, levelStatusKey: string, status: string) => void;
  updateObservacao: (chamado: number, level: number, observacao: string) => void;
}

const LEVEL_INFO = {
  1: {
    title: "Primeiro Acionamento",
    nextAction: "Avan√ßar para 1¬™ Escala√ß√£o",
    color: "from-blue-500 to-blue-600",
    bgColor: "bg-blue-500/5 border-blue-200"
  },
  2: {
    title: "1¬™ Escala√ß√£o",
    description: "Escala√ß√£o t√©cnica de primeiro n√≠vel - Suporte especializado",
    nextAction: "Avan√ßar para 2¬™ Escala√ß√£o",
    color: "from-orange-500 to-orange-600",
    bgColor: "bg-orange-500/5 border-orange-200"
  },
  3: {
    title: "2¬™ Escala√ß√£o",
    description: "Escala√ß√£o t√©cnica de segundo n√≠vel - Especialistas s√™niores",
    nextAction: "Avan√ßar para 3¬™ Escala√ß√£o",
    color: "from-red-500 to-red-600",
    bgColor: "bg-red-500/5 border-red-200"
  },
  4: {
    title: "3¬™ Escala√ß√£o",
    description: "Escala√ß√£o t√©cnica de terceiro n√≠vel - Time de arquitetura",
    nextAction: "Avan√ßar para 4¬™ Escala√ß√£o",
    color: "from-purple-500 to-purple-600",
    bgColor: "bg-purple-500/5 border-purple-200"
  },
  5: {
    title: "4¬™ Escala√ß√£o",
    description: "Escala√ß√£o m√°xima - Gestores e decisores t√©cnicos",
    nextAction: "Finalizar Chamado",
    color: "from-red-600 to-red-700",
    bgColor: "bg-red-600/5 border-red-300"
  }
};

export const ModernTimerModal: React.FC<ModernTimerModalProps> = ({
  isOpen,
  onClose,
  chamado,
  currentLevel,
  remainingTime,
  chamadoData,
  formatTime,
  onNextLevel,
  onPreviousLevel,
  updateStatusFinal,
  updateObservacao
}) => {
  const [observacao, setObservacao] = useState('');
  const [isProcessing, setIsProcessing] = useState(false);

  // Novo: checagem de finaliza√ß√£o por levelX_status
  const levelStatusKey = `level${currentLevel}_status`;
  const [finalizado, setFinalizado] = useState(
    chamadoData?.statusFinal === "finished" || chamadoData?.[levelStatusKey] === "finished"
  );

  React.useEffect(() => {
    setFinalizado(
      chamadoData?.statusFinal === "finished" || chamadoData?.[levelStatusKey] === "finished"
    );
  }, [chamadoData, levelStatusKey]);


  const levelInfo = finalizado
    ? { title: "Chamado Finalizado", description: "O chamado j√° foi encerrado", color: "from-green-500 to-green-600", bgColor: "bg-green-500/5 border-green-200" }
    : LEVEL_INFO[currentLevel as keyof typeof LEVEL_INFO];

  const validateObservacao = useCallback(() => {
    if (!observacao.trim()) {
      toast({
        title: "‚ö†Ô∏è Observa√ß√£o Obrigat√≥ria",
        description: "√â obrigat√≥rio preencher o campo de observa√ß√µes para continuar",
        variant: "destructive",
      });
      return false;
    }
    return true;
  }, [observacao]);

  const handleAction = useCallback(async (action: 'next' | 'previous' | 'finish') => {
    if (!validateObservacao()) return;

    setIsProcessing(true);

    try {
      const trimmedObservacao = observacao.trim();

      if (finalizado && action !== 'previous') {
        toast({
          title: "‚ö†Ô∏è Chamado j√° finalizado",
          description: "N√£o √© poss√≠vel alterar n√≠veis pois o chamado est√° finalizado",
          variant: "destructive",
        });
        return;
      }

      switch (action) {
        case 'next':
          if (currentLevel >= 5) {
            await Promise.all([
              updateStatusFinal(chamado, levelStatusKey, "finished"),
              updateObservacao(chamado, currentLevel, trimmedObservacao)
            ]);
            toast({
              title: "‚úÖ Chamado Finalizado",
              description: `Chamado ${chamado} foi finalizado com sucesso!`,
            });
          } else {
            await onNextLevel(chamado, currentLevel + 1, trimmedObservacao);
            const nextLevelInfo = LEVEL_INFO[(currentLevel + 1) as keyof typeof LEVEL_INFO];
            toast({
              title: `üöÄ ${nextLevelInfo?.title} Iniciado`,
              description: `Timer de 20 minutos iniciado para ${nextLevelInfo?.title}`,
            });
          }
          break;

        case 'previous':
          if (currentLevel > 1) {
            await onPreviousLevel(chamado, currentLevel - 1, trimmedObservacao);
            const prevLevelInfo = LEVEL_INFO[(currentLevel - 1) as keyof typeof LEVEL_INFO];
            toast({
              title: `‚¨ÖÔ∏è Retornando para ${prevLevelInfo?.title}`,
              description: `Timer reiniciado para ${prevLevelInfo?.title}`,
            });
          }
          break;

        case 'finish':
          await Promise.all([
            updateStatusFinal(chamado, levelStatusKey, "finished"),
            updateObservacao(chamado, currentLevel, trimmedObservacao)
          ]);
          setFinalizado(true);
          toast({
            title: "‚úÖ Chamado Finalizado",
            description: `Chamado ${chamado} foi finalizado com sucesso!`,
          });
          console.log("Atualizando status:", levelStatusKey);
          break;
      }

      setObservacao('');
      onClose();

    } catch (error) {
      console.error("‚ùå Erro no handleAction:", error);
      toast({
        title: "‚ùå Erro na Opera√ß√£o",
        description: "Ocorreu um erro ao processar a a√ß√£o. Verifique os logs.",
        variant: "destructive",
      });
    } finally {
      setIsProcessing(false);
    }
  }, [validateObservacao, observacao, currentLevel, chamado, onNextLevel, onPreviousLevel, onClose, updateStatusFinal, updateObservacao, finalizado, levelStatusKey]);

  return (
    <Dialog open={isOpen} onOpenChange={onClose}>
      <DialogContent className="sm:max-w-4xl border-border bg-gradient-to-br from-background to-background/95 shadow-modal max-h-[95vh] overflow-y-auto">
        <DialogHeader className="relative pb-6">
          <div className={cn(
            "absolute inset-0 bg-gradient-to-r opacity-10 rounded-t-lg max-h-[95vh]",
            levelInfo?.color || "from-gray-500 to-gray-600"
          )} />
          <div className="relative z-10">
            <div className="flex items-center justify-between mb-4">
              <div className="flex items-center gap-4">
                <div className={cn(
                  "p-4 rounded-xl bg-gradient-to-r text-white shadow-lg ",
                  levelInfo?.color || "from-gray-500 to-gray-600"
                )}>
                  <Timer className="h-8 w-8" />
                </div>
                <div>
                  <DialogTitle className="text-3xl font-bold bg-gradient-to-r from-foreground to-foreground/70 bg-clip-text text-transparent">
                    {levelInfo?.title || `N√≠vel ${currentLevel}`}
                  </DialogTitle>
                  <p className="text-lg text-muted-foreground mt-1">
                    Chamado {chamado}
                  </p>
                </div>
              </div>
            </div>
          </div>
        </DialogHeader>
        <div className="space-y-8 pt-2">
          <TimerDisplay remainingTime={remainingTime} formatTime={formatTime} />
          <ProgressIndicator currentLevel={currentLevel} />
          <Separator className="my-6" />

          <div className="space-y-4">
            <div className="flex items-center gap-3 mb-4">
              <MessageSquare className="h-5 w-5 text-primary" />
              <Label htmlFor="observacao" className="text-lg font-semibold text-foreground">
                Observa√ß√µes
              </Label>
              <Badge variant="destructive" className="text-xs font-bold">OBRIGAT√ìRIO</Badge>
            </div>

            <Textarea
              id="observacao"
              value={observacao}
              onChange={(e) => setObservacao(e.target.value)}
              placeholder={`Descreva detalhadamente as a√ß√µes realizadas no ${levelInfo?.title.toLowerCase()}, diagn√≥sticos feitos, status atual e pr√≥ximos passos recomendados...`}
              rows={6}
              className="border-2 focus:border-primary transition-all duration-200 resize-none text-base"
              disabled={isProcessing || finalizado}
            />

            <div className="flex justify-between items-center">
              <span className="font-medium text-muted-foreground">{observacao.length}/500 caracteres</span>
              {observacao.trim().length > 0 && (
                <div className="flex items-center gap-2 text-green-600 font-medium text-sm">
                  <CheckCircle className="h-4 w-4" />
                  <span>Observa√ß√£o preenchida</span>
                </div>
              )}
            </div>
          </div>

          <Separator className="my-6" />

          <div className="space-y-6">
            <div className="grid grid-cols-1 md:grid-cols-3 gap-4">
              {currentLevel > 1 && !finalizado && (
                <Button
                  variant="outline"
                  size="sm"
                  onClick={() => handleAction('previous')}
                  disabled={!observacao.trim() || isProcessing}
                  className="h-16 border-2 hover:border-primary/50 transition-all duration-200"
                >
                  <ArrowLeft className="h-5 w-5 mr-2" />
                  <div className="text-left">
                    <div className="font-semibold">Voltar Etapa</div>
                    <div className="text-xs opacity-70">Retornar ao n√≠vel anterior</div>
                  </div>
                </Button>
              )}

              <Button
                variant="destructive"
                size="lg"
                onClick={() => handleAction('finish')}
                disabled={!observacao.trim() || isProcessing || finalizado}
                className="h-16 md:col-span-1"
              >
                <CheckCircle className="h-5 w-5 mr-2" />
                <div className="text-left">
                  <div className="font-semibold">Finalizar</div>
                  <div className="text-xs opacity-90">Resolver chamado</div>
                </div>
              </Button>

              <Button
                variant={currentLevel >= 5 || finalizado ? "success" : "timer"}
                size="lg"
                onClick={() => handleAction('next')}
                disabled={!observacao.trim() || isProcessing || finalizado}
                className="h-16 animate-glow"
              >
                {finalizado ? (
                  <>
                    <CheckCircle className="h-5 w-5 mr-2" />
                    <div className="text-left">
                      <div className="font-semibold">Finalizado</div>
                      <div className="text-xs opacity-90">Chamado encerrado</div>
                    </div>
                  </>
                ) : currentLevel >= 5 ? (
                  <>
                    <CheckCircle className="h-5 w-5 mr-2" />
                    <div className="text-left">
                      <div className="font-semibold">Concluir Final</div>
                      <div className="text-xs opacity-90">√öltima escala√ß√£o</div>
                    </div>
                  </>
                ) : (
                  <>
                    <ArrowRight className="h-5 w-5 mr-2" />
                    <div className="text-left">
                      <div className="font-semibold">{levelInfo?.nextAction || 'Pr√≥xima Etapa'}</div>
                      <div className="text-xs opacity-90">Avan√ßar escala√ß√£o</div>
                    </div>
                  </>
                )}
              </Button>
            </div>
          </div>

          <div className="bg-gradient-modal rounded-xl p-6 border border-border/50">
            <div className="flex items-start gap-3">
              <div className="space-y-3">
                <h4 className="font-semibold text-foreground text-lg">üí° Diretrizes Importantes</h4>
                <ul className="space-y-2 text-muted-foreground">
                  <li className="flex items-start gap-2">
                    <AlertTriangle className="h-4 w-4 text-yellow-500 mt-0.5 flex-shrink-0" />
                    <span><strong>Observa√ß√µes obrigat√≥rias:</strong> Documente todas as a√ß√µes realizadas</span>
                  </li>
                  <li className="flex items-start gap-2">
                    <Timer className="h-4 w-4 text-blue-500 mt-0.5 flex-shrink-0" />
                    <span><strong>Timer renovado:</strong> Cada escala√ß√£o reinicia o timer de 20 minutos</span>
                  </li>
                  <li className="flex items-start gap-2">
                    <CheckCircle className="h-4 w-4 text-green-500 mt-0.5 flex-shrink-0" />
                    <span><strong>Finaliza√ß√£o:</strong> Use apenas quando o problema estiver resolvido</span>
                  </li>
                </ul>
              </div>
            </div>
          </div>

        </div>
      </DialogContent>
    </Dialog>
  );
};

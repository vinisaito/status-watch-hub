import React, { useEffect, useState, useRef } from "react";

const WS_URL = "wss://SEU_ENDPOINT.execute-api.us-east-1.amazonaws.com/dev";
const API_URL = "https://SEU_ENDPOINT.execute-api.us-east-1.amazonaws.com/prod/dados";

interface Timer {
  chamado: number;
  startedAt: string | null;
  durationMinutes: number;
  timerActive: boolean;
}

const Timer: React.FC = () => {
  const [timers, setTimers] = useState<Timer[]>([]);
  const ws = useRef<WebSocket | null>(null);

  useEffect(() => {
    fetch(API_URL)
      .then((res) => res.json())
      .then((data) => setTimers(data))
      .catch(console.error);
  }, []);

  useEffect(() => {
    ws.current = new WebSocket(WS_URL);

    ws.current.onmessage = (e) => {
      const msg = JSON.parse(e.data);
      if (msg.type === "TIMER_UPDATED") {
        setTimers((prev) =>
          prev.map((t) => (t.chamado === msg.chamado ? { ...t, ...msg } : t))
        );
      }
    };

    return () => ws.current?.close();
  }, []);

  const sendAction = (chamado: number, action: "startTimer" | "pauseTimer") => {
    ws.current?.send(JSON.stringify({ action, chamado }));
  };

  const getRemaining = (timer: Timer) => {
    if (!timer.startedAt) return timer.durationMinutes * 60;
    const started = new Date(timer.startedAt).getTime();
    const now = Date.now();
    const elapsed = (now - started) / 1000;
    return Math.max(0, timer.durationMinutes * 60 - elapsed);
  };

  return (
    <div>
      <h1>Painel</h1>
      {timers.map((t) => (
        <div key={t.chamado} style={{ border: "1px solid black", padding: 10 }}>
          <p>Chamado: {t.chamado}</p>
          <p>Status: {t.timerActive ? "Rodando" : "Pausado"}</p>
          <p>
            Tempo restante:{" "}
            {new Date(getRemaining(t) * 1000).toISOString().substr(14, 5)}
          </p>
          <button onClick={() => sendAction(t.chamado, "startTimer")}>Iniciar</button>
          <button onClick={() => sendAction(t.chamado, "pauseTimer")}>Pausar</button>
        </div>
      ))}
    </div>
  );
};

export default Timer;

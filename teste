import boto3
import json
from datetime import datetime, timezone

# DynamoDB
DDB = boto3.resource("dynamodb", region_name="us-east-1")
ACOMP_TABLE = DDB.Table("painelmonitoracao_acompanhamento")  # tabela de alertas
CONN_TABLE = DDB.Table("painelmonitoracao_connections")       # tabela de conex√µes WebSocket

# API Gateway Management API para enviar mensagens via WebSocket
APIGW_ENDPOINT = "https://tgwtw1v4rg.execute-api.us-east-1.amazonaws.com/dev"  # substituir
apigw = boto3.client("apigatewaymanagementapi", endpoint_url=APIGW_ENDPOINT)


def lambda_handler(event, context):
    route = event.get("requestContext", {}).get("routeKey")
    connection_id = event.get("requestContext", {}).get("connectionId")

    # --------------------------
    # Cliente conecta
    # --------------------------
    if route == "$connect":
        print(f"‚úÖ Conex√£o estabelecida: {connection_id}")
        CONN_TABLE.put_item(Item={"connectionId": connection_id})
        return {"statusCode": 200}

    # --------------------------
    # Cliente desconecta
    # --------------------------
    elif route == "$disconnect":
        print(f"‚ùå Conex√£o desconectada: {connection_id}")
        CONN_TABLE.delete_item(Key={"connectionId": connection_id})
        return {"statusCode": 200}

    # --------------------------
    # Recebe mensagem do cliente
    # --------------------------
    elif route == "sendMessage":
        body = json.loads(event.get("body", "{}"))
        action = body.get("action")          # "startTimer" ou "pauseTimer"
        chamado = body.get("chamado")        # id do chamado

        print("Mensagem recebida:", body)

        if not chamado or not action:
            print("‚ùå Chamado ou a√ß√£o ausente")
            return {"statusCode": 400, "body": "Chamado ou a√ß√£o ausente"}

        startedAt = None

        try:
            # Atualiza o cron√¥metro no DynamoDB
            if action == "startTimer":
                startedAt = datetime.utcnow().replace(tzinfo=timezone.utc).isoformat()
                ACOMP_TABLE.update_item(
                    Key={"chamado": str(chamado)},
                    UpdateExpression="SET timerActive = :t, startedAt = :s",
                    ExpressionAttributeValues={":t": True, ":s": startedAt}
                )
                print(f"‚è± Timer iniciado: {chamado} √†s {startedAt}")
            elif action == "pauseTimer":
                ACOMP_TABLE.update_item(
                    Key={"chamado": str(chamado)},
                    UpdateExpression="SET timerActive = :t",
                    ExpressionAttributeValues={":t": False}
                )
                print(f"‚è∏ Timer pausado: {chamado}")
            else:
                print("‚ùå A√ß√£o inv√°lida")
                return {"statusCode": 400, "body": "A√ß√£o inv√°lida"}

            # --------------------------
            # Broadcast para todos os clientes conectados
            # --------------------------
            connections = CONN_TABLE.scan().get("Items", [])
            print(f"üîÑ Broadcast para {len(connections)} conex√µes")

            for conn in connections:
                try:
                    apigw.post_to_connection(
                        Data=json.dumps({
                            "type": "updateTimer",
                            "chamado": chamado,
                            "timerActive": action == "startTimer",
                            "startedAt": startedAt if action == "startTimer" else None
                        }),
                        ConnectionId=conn["connectionId"]
                    )
                except apigw.exceptions.GoneException:
                    # Conex√£o inv√°lida, remove da tabela
                    print(f"‚ùå Conex√£o ausente: {conn['connectionId']}")
                    CONN_TABLE.delete_item(Key={"connectionId": conn["connectionId"]})

            return {"statusCode": 200, "body": json.dumps({"message": "ok"})}

        except Exception as e:
            print("‚ùå Erro ao processar mensagem:", e)
            return {"statusCode": 500, "body": str(e)}

    # --------------------------
    # Rota padr√£o
    # --------------------------
    else:
        print(f"Rota n√£o suportada: {route}")
        return {"statusCode": 400, "body": "Rota n√£o suportada"}

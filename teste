import React, { useEffect, useState, useRef } from "react";

interface TimerProps {
  chamadoId: number;
}

const Timer: React.FC<TimerProps> = ({ chamadoId }) => {
  const [timeLeft, setTimeLeft] = useState<number | null>(null);
  const [status, setStatus] = useState<string>("pendente");
  const wsRef = useRef<WebSocket | null>(null);
  const intervalRef = useRef<NodeJS.Timeout | null>(null);

  // FunÃ§Ã£o para iniciar o timer
  const startTimer = () => {
    if (wsRef.current) {
      wsRef.current.send(
        JSON.stringify({
          action: "startTimer",
          chamado: chamadoId,
        })
      );
    }
  };

  // FunÃ§Ã£o para atualizar o status
  const updateStatus = (newStatus: string) => {
    if (wsRef.current) {
      wsRef.current.send(
        JSON.stringify({
          action: "updateStatus",
          chamado: chamadoId,
          status: newStatus,
        })
      );
    }
  };

  // ConexÃ£o WebSocket
  useEffect(() => {
    const ws = new WebSocket("wss://SEU-ENDPOINT.execute-api.us-east-1.amazonaws.com/dev"); // ajuste o endpoint
    wsRef.current = ws;

    ws.onopen = () => {
      console.log("Conectado ao WebSocket");

      // ðŸš€ Solicita o estado atual assim que conecta
      ws.send(
        JSON.stringify({
          action: "getState",
          chamado: chamadoId,
        })
      );
    };

    ws.onmessage = (event) => {
      const message = JSON.parse(event.data);
      console.log("[DEBUG] Mensagem recebida:", message);

      if (message.action === "timerStarted" || message.action === "currentState") {
        const { timerEnd, serverTime, status } = message;
        const now = Math.floor(Date.now() / 1000);
        const drift = now - serverTime;
        const adjustedTime = timerEnd - now + drift;

        setTimeLeft(adjustedTime);
        setStatus(status);

        if (intervalRef.current) clearInterval(intervalRef.current);
        intervalRef.current = setInterval(() => {
          setTimeLeft((prev) => (prev !== null ? prev - 1 : null));
        }, 1000);
      }

      if (message.action === "statusUpdated") {
        setStatus(message.status);
      }
    };

    ws.onclose = () => {
      console.log("Desconectado do WebSocket");
    };

    return () => {
      if (intervalRef.current) clearInterval(intervalRef.current);
      ws.close();
    };
  }, [chamadoId]);

  // Formatador de tempo
  const formatTime = (seconds: number | null) => {
    if (seconds === null) return "--:--";
    const min = Math.floor(seconds / 60);
    const sec = seconds % 60;
    return `${min.toString().padStart(2, "0")}:${sec.toString().padStart(2, "0")}`;
  };

  return (
    <div className="p-4 border rounded shadow-md">
      <h2 className="text-xl font-bold">Chamado #{chamadoId}</h2>
      <p className="text-lg">Tempo restante: {formatTime(timeLeft)}</p>
      <p>Status: {status}</p>
      <div className="mt-2 space-x-2">
        <button
          onClick={startTimer}
          className="px-4 py-2 bg-green-600 text-white rounded"
        >
          Iniciar
        </button>
        <button
          onClick={() => updateStatus("concluido")}
          className="px-4 py-2 bg-blue-600 text-white rounded"
        >
          Concluir
        </button>
      </div>
    </div>
  );
};

export default Timer;

"[{\"escalations\": [{\"level\": 1, \"status\": \"\", \"observations\": \"\", \"eventTimestamp\": \"\"}, {\"level\": 2, \"status\": \"\", \"observations\": \"\", \"eventTimestamp\": \"\"}, {\"level\": 3, \"status\": \"\", \"observations\": \"\", \"eventTimestamp\": \"\"}, {\"level\": 4, \"status\": \"\", \"observations\": \"\", \"eventTimestamp\": \"\"}], \"obsChat\": \"\", \"chamado\": 12345, \"confirmChat\": \"\", \"sendChat\": \"2025-08-26T09:30:00Z\", \"ttl\": 1771782338, \"alertOpenTime\": \"2025-08-26T09:30:00Z\"},

https://f6ffk8e9fe.execute-api.us-east-1.amazonaws.com/prod/acompanhamento

// Renderiza o componente de confirmação/escalação
  const renderConfirmationColumn = (alert: AlertData) => {
    const state = escalationStates[alert.chamado];
    const currentObservation = confirmationObservations[alert.chamado] || '';
    const showConfirmation = showStatusConfirmation[alert.chamado];
    const pendingChange = pendingStatusChange[alert.chamado];
    
    // Debug: log do estado atual
    console.log(`Renderizando coluna confirmação para chamado ${alert.chamado}:`, {
      state,
      currentObservation,
      showConfirmation,
      pendingChange
    });
    
    if (!state) {
      return (
        <div className="text-center">
          <Button
            size="sm"
            variant="outline"
            onClick={() => startConfirmation(alert.chamado)}
            className="h-8 px-3 text-xs"
          >
            <Play className="h-3 w-3 mr-1" />
            Iniciar
          </Button>
        </div>
      );
    }

    switch (state.status) {
      case 'pending':
        return (
          <div className="text-center space-y-3">
            <div className="flex items-center justify-center gap-2">
              <Clock className="h-4 w-4 text-warning" />
              <span className="text-sm font-mono">{formatTime(state.timeRemaining)}</span>
            </div>
            
            <div className="space-y-2">
               <div className="space-y-1">
                 <Label className="text-xs">
                   Observações <span className="text-destructive">*</span>
                 </Label>
                 <Textarea
                   key={`confirmation-textarea-${alert.chamado}`}
                   placeholder="Observações são obrigatórias para confirmação"
                   value={currentObservation}
                   onChange={(e) => handleConfirmationObservationChange(alert.chamado, e.target.value)}
                   className="text-xs min-h-[60px] resize-none"
                   required
                 />
                 {!currentObservation.trim() && (
                   <p className="text-xs text-destructive">
                     Observações são obrigatórias
                   </p>
                 )}
               </div>
              
              <div className="flex gap-1">
                <Button
                  size="sm"
                  variant="default"
                  onClick={() => confirmReceived(alert.chamado)}
                  disabled={!currentObservation.trim()}
                  className="h-8 px-3 text-xs flex-1 disabled:opacity-50 disabled:cursor-not-allowed"
                >
                  <Check className="h-3 w-3 mr-1" />
                  Confirmar
                </Button>
                <Button
                  size="sm"
                  variant="secondary"
                  onClick={() => startEscalation(alert.chamado, 1)}
                  disabled={!currentObservation.trim()}
                  className="h-8 px-3 text-xs flex-1 disabled:opacity-50 disabled:cursor-not-allowed"
                >
                  <FastForward className="h-3 w-3 mr-1" />
                  Próxima Etapa
                </Button>
              </div>
            </div>
          </div>
        );

      case 'confirmed':
        return (
          <div className="text-center space-y-2">
            <div className="flex gap-1 justify-center">
              <Badge variant="default" className="bg-green-600 text-white">
                <CheckCircle className="h-3 w-3 mr-1" />
                Confirmado
              </Badge>
              <Button
                size="sm"
                variant="outline"
                onClick={() => startEscalation(alert.chamado, 1)}
                className="h-6 px-2 text-xs"
              >
                <FastForward className="h-3 w-3 mr-1" />
                Próxima
              </Button>
            </div>
            {state.observations && (
              <div className="text-xs text-muted-foreground p-2 bg-muted rounded text-left">
                <strong>Observações:</strong><br />
                {state.observations}
              </div>
            )}
          </div>
        );

      case 'escalating':
        const levelNames = { 1: '1ª', 2: '2ª', 3: '3ª', 4: '4ª' };
        
        return (
          <div className="space-y-2">
            {state.currentLevel > 0 && (
              <div className="text-center">
                <Badge variant="destructive" className="text-xs">
                  {levelNames[state.currentLevel as keyof typeof levelNames]} Escalação
                </Badge>
                {state.timerActive && (
                  <div className="flex items-center justify-center gap-1 mt-1">
                    <Clock className="h-3 w-3 text-warning" />
                    <span className="text-xs font-mono">{formatTime(state.timeRemaining)}</span>
                  </div>
                )}
              </div>
            )}

            {!state.isAttended && (
              <>
                {/* Campo de observações sempre visível quando em escalação */}
                {state.currentLevel === 0 || (!state.timerActive && state.currentLevel < 4) ? (
                  <div className="space-y-1">
                    <div className="flex gap-1">
                      {/* Botão Voltar - só aparece se não estiver no nível 0 */}
                      {state.currentLevel > 0 && (
                        <Button
                          size="sm"
                          variant="outline"
                          onClick={() => goBackEscalation(alert.chamado)}
                          className="h-6 px-2 text-xs flex-1"
                        >
                          <RotateCcw className="h-3 w-3 mr-1" />
                          Voltar
                        </Button>
                      )}
                      
                       {/* Próxima escalação */}
                       {state.currentLevel < 4 && (
                         <Button
                           size="sm"
                           variant="outline"
                           onClick={() => startEscalation(alert.chamado, (state.currentLevel + 1) as 1 | 2 | 3 | 4)}
                           className="h-6 px-2 text-xs flex-1"
                         >
                           Iniciar {levelNames[(state.currentLevel + 1) as keyof typeof levelNames]} Escalação
                         </Button>
                       )}
                    </div>
                  </div>
                ) : (
                  <div className="space-y-2">
                    {/* Mostrar confirmação de status quando pendente */}
                    {showConfirmation ? (
                      <div className="space-y-2 p-2 border rounded bg-background">
                        <div className="text-xs font-medium">
                          Confirmar: {pendingChange?.status === 'attended' ? 'Atendida' : 'Não Atendida'}
                        </div>
                        
                         <div className="space-y-1">
                           <Label className="text-xs">
                             Observações <span className="text-destructive">*</span>
                           </Label>
                           <Textarea
                             key={`pending-textarea-${alert.chamado}`}
                             placeholder="Observações obrigatórias..."
                             value={pendingChange?.observations || ''}
                             onChange={(e) => handlePendingObservationChange(alert.chamado, e.target.value)}
                             className="text-xs min-h-[60px] resize-none"
                             required
                           />
                           {!pendingChange?.observations?.trim() && (
                             <p className="text-xs text-destructive">
                               Observações são obrigatórias
                             </p>
                           )}
                         </div>
                        
                        <div className="flex gap-1">
                          <Button
                            size="sm"
                            variant="default"
                            onClick={() => confirmStatusChange(alert.chamado)}
                            disabled={!pendingChange?.observations?.trim()}
                            className="h-6 px-2 text-xs flex-1"
                          >
                            <Check className="h-3 w-3 mr-1" />
                            Confirmar
                          </Button>
                          <Button
                            size="sm"
                            variant="outline"
                            onClick={() => cancelStatusChange(alert.chamado)}
                            className="h-6 px-2 text-xs flex-1"
                          >
                            <X className="h-3 w-3 mr-1" />
                            Cancelar
                          </Button>
                        </div>
                      </div>
                    ) : (
                      <>
                        <div className="flex gap-1">
                          {/* Botão Voltar */}
                          <Button
                            size="sm"
                            variant="outline"
                            onClick={() => goBackEscalation(alert.chamado)}
                            className="h-6 px-2 text-xs flex-1"
                          >
                            <RotateCcw className="h-3 w-3 mr-1" />
                            Voltar
                          </Button>
                          
                          {/* Botão Avançar Escalação sempre visível quando há observações */}
                        </div>

                        <Select
                          value=""
                          onValueChange={(value) => prepareStatusChange(alert.chamado, value)}
                        >
                          <SelectTrigger className="h-6 text-xs">
                            <SelectValue placeholder="Selecionar Status" />
                          </SelectTrigger>
                          <SelectContent>
                            <SelectItem value="attended">Atendida</SelectItem>
                            <SelectItem value="not-attended">Não Atendida</SelectItem>
                          </SelectContent>
                        </Select>
                      </>
                    )}
                  </div>
                )}
              </>
            )}
          </div>
        );

      case 'completed':
        return (
          <div className="text-center space-y-2">
            <div className="flex gap-1 justify-center">
              <Badge variant="default" className="bg-green-600 text-white">
                <CheckCircle className="h-3 w-3 mr-1" />
                Finalizado
              </Badge>
            </div>
            {state.observations && (
              <div className="text-xs text-muted-foreground p-2 bg-muted rounded text-left">
                <strong>Observações:</strong><br />
                {state.observations}
              </div>
            )}
          </div>
        );

      default:
        return null;
    }
  };

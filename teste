import React, { useEffect, useRef, useState } from "react";

// Substitua pelo seu endpoint WebSocket
const WS_URL = "wss://SEU_ENDPOINT.execute-api.us-east-1.amazonaws.com/prod";

interface TimerProps {
  chamado: number;
}

const Timer: React.FC<TimerProps> = ({ chamado }) => {
  const [timeRemaining, setTimeRemaining] = useState(0);
  const [timerActive, setTimerActive] = useState(false);
  const [connected, setConnected] = useState(false);
  const wsRef = useRef<WebSocket | null>(null);
  const intervalRef = useRef<NodeJS.Timeout | null>(null);

  // Conecta ao WebSocket
  useEffect(() => {
    console.log("üåê Conectando ao WebSocket...");
    const ws = new WebSocket(WS_URL);
    wsRef.current = ws;

    ws.onopen = () => {
      console.log("‚úÖ WebSocket conectado");
      setConnected(true);
      // Solicita estado inicial
      ws.send(JSON.stringify({ action: "getState", chamado }));
    };

    ws.onmessage = (event) => {
      console.log("üì© Mensagem recebida:", event.data);
      const data = JSON.parse(event.data);

      if (data.type === "TIMER_UPDATED" || data.timeRemaining !== undefined) {
        setTimeRemaining(data.timeRemaining);
        setTimerActive(data.timerActive);
      }
    };

    ws.onerror = (err) => {
      console.error("‚ùå Erro no WebSocket:", err);
    };

    ws.onclose = () => {
      console.log("üîå WebSocket desconectado");
      setConnected(false);
    };

    return () => {
      ws.close();
    };
  }, [chamado]);

  // Atualiza o timer local a cada segundo se estiver ativo
  useEffect(() => {
    if (timerActive) {
      intervalRef.current = setInterval(() => {
        setTimeRemaining((prev) => (prev > 0 ? prev - 1 : 0));
      }, 1000);
    } else if (intervalRef.current) {
      clearInterval(intervalRef.current);
    }

    return () => {
      if (intervalRef.current) clearInterval(intervalRef.current);
    };
  }, [timerActive]);

  const sendAction = (action: "startTimer" | "pauseTimer") => {
    if (wsRef.current && wsRef.current.readyState === WebSocket.OPEN) {
      console.log(`üì§ Enviando a√ß√£o: ${action}`);
      wsRef.current.send(JSON.stringify({ action, chamado }));
    } else {
      console.warn("‚ö†Ô∏è WebSocket n√£o est√° aberto ainda.");
    }
  };

  // Formata minutos e segundos
  const formatTime = (seconds: number) => {
    const mins = Math.floor(seconds / 60)
      .toString()
      .padStart(2, "0");
    const secs = (seconds % 60).toString().padStart(2, "0");
    return `${mins}:${secs}`;
  };

  return (
    <div style={{ border: "1px solid #ccc", padding: "1rem", width: "200px" }}>
      <h3>Chamado {chamado}</h3>
      <p>Tempo restante: {formatTime(timeRemaining)}</p>
      <p>Status: {timerActive ? "‚è±Ô∏è Ativo" : "‚è∏Ô∏è Pausado"}</p>
      <button onClick={() => sendAction("startTimer")}>Iniciar</button>
      <button onClick={() => sendAction("pauseTimer")}>Pausar</button>
      <p>WebSocket: {connected ? "Conectado ‚úÖ" : "Desconectado ‚ùå"}</p>
    </div>
  );
};

export default Timer;

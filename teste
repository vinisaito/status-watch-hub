import React from "react";

export type TimelineItem = {
  year: number | string;
  title?: string;
};

interface TimelineProps {
  items: TimelineItem[];
  className?: string;
}

export const Timeline: React.FC<TimelineProps> = ({ items, className }) => {
  const sorted = [...items].sort((a, b) => Number(a.year) - Number(b.year));

  // Responsive proportions
  const VB_WIDTH = 1200;
  const VB_HEIGHT = 280;
  const PADDING_X = 60;
  const TOP_Y = 100;
  const BOTTOM_Y = 200;
  const R = BOTTOM_Y - TOP_Y; // Perfect quarter-arc radius
  const RIGHT_X = VB_WIDTH - PADDING_X;

  const half = Math.ceil(sorted.length / 2);
  const topItems = sorted.slice(0, half);
  const bottomItems = sorted.slice(half);

  const xTop = (i: number, total: number) => {
    if (total <= 1) return (PADDING_X + RIGHT_X) / 2;
    // Distribute until before the arc starts, leaving space for the curve
    const topLineEnd = RIGHT_X - R * 0.3;
    return PADDING_X + (i * (topLineEnd - PADDING_X)) / (total - 1);
  };

  const BOTTOM_RIGHT_X = RIGHT_X - R;
  const xBottom = (i: number, total: number) => {
    if (total <= 1) return (PADDING_X + BOTTOM_RIGHT_X) / 2;
    // Start from after the arc ends, leaving space for the curve
    const bottomLineStart = BOTTOM_RIGHT_X + R * 0.3;
    return bottomLineStart - (i * (bottomLineStart - PADDING_X)) / (total - 1);
  };

  // Improved path with smoother curve
  const pathD = [
    `M ${PADDING_X} ${TOP_Y}`,
    `H ${RIGHT_X}`,
    `A ${R} ${R} 0 0 1 ${RIGHT_X - R} ${BOTTOM_Y}`,
    `H ${PADDING_X}`,
  ].join(" ");

  return (
    <div className={className}>
      <div className="relative w-full px-2 sm:px-4 md:px-6">
        <svg
          viewBox={`0 0 ${VB_WIDTH} ${VB_HEIGHT}`}
          className="w-full h-auto text-blue-500"
          preserveAspectRatio="xMidYMid meet"
          role="img"
          aria-label="Linha do tempo"
        >
          {/* Main path */}
          <path 
            d={pathD} 
            fill="none" 
            stroke="currentColor" 
            strokeWidth={3} 
            strokeLinecap="round"
            strokeLinejoin="round"
          />

          {/* Top row markers */}
          {topItems.map((it, i) => {
            const x = xTop(i, topItems.length);
            const y = TOP_Y;
            return (
              <g key={`t-${i}`}>
                <circle 
                  cx={x} 
                  cy={y} 
                  r={10} 
                  fill="white" 
                  stroke="currentColor" 
                  strokeWidth={3}
                  className="drop-shadow-sm"
                />
                <circle cx={x} cy={y} r={4} className="fill-blue-500" />
                <text 
                  x={x} 
                  y={y - 20} 
                  textAnchor="middle" 
                  className="fill-foreground font-semibold text-[14px] sm:text-[16px]"
                >
                  {String(it.year)}
                </text>
                {it.title && (
                  <text 
                    x={x} 
                    y={y - 4} 
                    textAnchor="middle" 
                    className="fill-muted-foreground text-[11px] sm:text-[13px]"
                  >
                    {it.title}
                  </text>
                )}
              </g>
            );
          })}

          {/* Bottom row markers */}
          {bottomItems.map((it, i) => {
            const x = xBottom(i, bottomItems.length);
            const y = BOTTOM_Y;
            return (
              <g key={`b-${i}`}>
                <circle 
                  cx={x} 
                  cy={y} 
                  r={10} 
                  fill="white" 
                  stroke="currentColor" 
                  strokeWidth={3}
                  className="drop-shadow-sm"
                />
                <circle cx={x} cy={y} r={4} className="fill-blue-500" />
                <text 
                  x={x} 
                  y={y + 32} 
                  textAnchor="middle" 
                  className="fill-foreground font-semibold text-[14px] sm:text-[16px]"
                >
                  {String(it.year)}
                </text>
                {it.title && (
                  <text 
                    x={x} 
                    y={y + 48} 
                    textAnchor="middle" 
                    className="fill-muted-foreground text-[11px] sm:text-[13px]"
                  >
                    {it.title}
                  </text>
                )}
              </g>
            );
          })}
        </svg>
      </div>
    </div>
  );
};

export default Timeline;

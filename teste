import { create } from "zustand";

export interface ChamadoState {
  id: string;
  status: "pending" | "confirmed" | "escalating" | "completed";
  timeRemaining: number;
  timerActive: boolean;
  currentLevel: number;
  observations?: string;
  isAttended?: boolean;
}

interface StoreState {
  chamados: Record<string, ChamadoState>;
  updateChamado: (id: string, data: Partial<ChamadoState>) => void;
  setFromWS: (data: ChamadoState) => void;
}

export const useChamadoStore = create<StoreState>((set) => ({
  chamados: {},
  updateChamado: (id, data) =>
    set((state) => ({
      chamados: {
        ...state.chamados,
        [id]: { ...state.chamados[id], ...data },
      },
    })),
  setFromWS: (data) =>
    set((state) => ({
      chamados: {
        ...state.chamados,
        [data.id]: { ...state.chamados[data.id], ...data },
      },
    })),
}));







import { useChamadoStore } from "./useChamadoStore";

let socket: WebSocket | null = null;

export function initWS() {
  if (socket) return;

  socket = new WebSocket("wss://SEU-ENDPOINT.execute-api.us-east-1.amazonaws.com/dev");

  socket.onopen = () => {
    console.log("[WS] Conectado");
  };

  socket.onmessage = (event) => {
    try {
      const msg = JSON.parse(event.data);
      console.log("[WS] Recebido:", msg);

      if (msg.type === "chamado_update") {
        useChamadoStore.getState().setFromWS(msg.payload);
      }
    } catch (e) {
      console.error("[WS] Erro parse mensagem:", e, event.data);
    }
  };

  socket.onclose = () => {
    console.log("[WS] Desconectado, tentando reconectar...");
    setTimeout(initWS, 3000);
  };
}






import { useChamadoStore } from "@/store/useChamadoStore";
import { useTimer } from "@/hooks/UseTimer";
import { Button } from "@/components/ui/button";
import { Badge } from "@/components/ui/badge";
import { Label } from "@/components/ui/label";
import { Textarea } from "@/components/ui/textarea";
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from "@/components/ui/select";
import { Check, Clock, Play, CheckCircle, FastForward, RotateCcw, X } from "lucide-react";
import { AlertData, PendingStatusChange } from "@/types/ActionTable";

interface ConfirmationColumnProps {
  alert: AlertData;
  currentObservation: string;
  showConfirmation: boolean;
  pendingChange?: PendingStatusChange;
  onStartConfirmation: (alertId: string) => void;
  onConfirmReceived: (alertId: string) => void;
  onStartEscalation: (alertId: string, level: 1 | 2 | 3 | 4) => void;
  onObservationChange: (alertId: string, value: string) => void;
  onPendingObservationChange: (alertId: string, value: string) => void;
  onPrepareStatusChange: (alertId: string, status: string) => void;
  onConfirmStatusChange: (alertId: string) => void;
  onCancelStatusChange: (alertId: string) => void;
  onGoBack: (alertId: string) => void;
}

export const ConfirmationColumn = (props: ConfirmationColumnProps) => {
  const { alert } = props;
  const { formatTime } = useTimer();

  // ðŸ”¥ Pega state do WebSocket
  const state = useChamadoStore((s) => s.chamados[alert.chamado]);

  if (!state) {
    return (
      <div className="text-center">
        <Button
          size="sm"
          variant="outline"
          onClick={() => props.onStartConfirmation(alert.chamado)}
          className="h-8 px-3 text-xs"
        >
          <Play className="h-3 w-3 mr-1" />
          Iniciar
        </Button>
      </div>
    );
  }

  // (Aqui entra exatamente o mesmo switch que vocÃª jÃ¡ tem no cÃ³digo atual)
  // Ele jÃ¡ vai usar o `state` vindo do WebSocket ðŸš€
  // ...
};

import { LucideIcon } from "lucide-react";
import { Card } from "@/components/ui/card";
import { Progress } from "@/components/ui/progress";
import { ArrowUp, ArrowDown } from "lucide-react";
import { cn } from "@/lib/utils";

interface MetricCardProps {
  title: string;
  value: string;
  trend?: "up" | "down";
  trendValue?: string;
  icon: LucideIcon;
  variant?: "primary" | "secondary" | "accent" | "success" | "warning";
  performance?: number;
}

const variantStyles = {
  primary: {
    iconBg: "bg-[hsl(var(--blue-medium))]/10",
    iconColor: "text-[hsl(var(--blue-medium))]",
    progressColor: "bg-[hsl(var(--blue-medium))]",
    trendBg: "bg-[hsl(var(--blue-soft))]",
  },
  secondary: {
    iconBg: "bg-[hsl(var(--blue-accent))]/10",
    iconColor: "text-[hsl(var(--blue-accent))]",
    progressColor: "bg-[hsl(var(--blue-accent))]",
    trendBg: "bg-[hsl(var(--blue-soft))]",
  },
  accent: {
    iconBg: "bg-[hsl(var(--blue-dark))]/10",
    iconColor: "text-[hsl(var(--blue-dark))]",
    progressColor: "bg-[hsl(var(--blue-dark))]",
    trendBg: "bg-[hsl(var(--neutral-100))]",
  },
  success: {
    iconBg: "bg-[hsl(var(--success-light))]",
    iconColor: "text-[hsl(var(--success))]",
    progressColor: "bg-[hsl(var(--success))]",
    trendBg: "bg-[hsl(var(--success-light))]",
  },
  warning: {
    iconBg: "bg-[hsl(var(--warning-light))]",
    iconColor: "text-[hsl(var(--warning))]",
    progressColor: "bg-[hsl(var(--warning))]",
    trendBg: "bg-[hsl(var(--warning-light))]",
  },
};

export const MetricCard = ({
  title,
  value,
  trend,
  trendValue,
  icon: Icon,
  variant = "primary",
  performance,
}: MetricCardProps) => {
  const styles = variantStyles[variant];

  return (
    <Card className="group relative overflow-hidden border-[hsl(var(--border))] bg-card transition-all duration-300 hover:shadow-[var(--shadow-lg)] hover:-translate-y-1">
      <div className="absolute inset-0 bg-gradient-to-br from-transparent via-transparent to-[hsl(var(--blue-soft))]/20 opacity-0 group-hover:opacity-100 transition-opacity duration-500" />
      
      <div className="relative p-6">
        <div className="flex items-start justify-between mb-4">
          <div className={cn(
            "p-3 rounded-xl transition-transform duration-300 group-hover:scale-110",
            styles.iconBg
          )}>
            <Icon className={cn("h-6 w-6", styles.iconColor)} />
          </div>
        </div>

        <div className="space-y-1 mb-4">
          <h3 className="text-sm font-medium text-muted-foreground tracking-wide uppercase">
            {title}
          </h3>
          <p className="text-3xl font-bold text-foreground tracking-tight">
            {value}
          </p>
        </div>

        {typeof performance === "number" && (
          <div className="space-y-2 pt-4 border-t border-[hsl(var(--border))]">
            <div className="flex items-center justify-between">
              <span className="text-xs font-medium text-muted-foreground uppercase tracking-wide">
                Performance
              </span>
              <span className={cn(
                "text-sm font-bold tabular-nums",
                styles.iconColor
              )}>
                {Math.round(performance)}%
              </span>
            </div>
            <div className="relative h-2 bg-[hsl(var(--neutral-100))] rounded-full overflow-hidden">
              <div
                className={cn(
                  "h-full rounded-full transition-all duration-1000 ease-out",
                  styles.progressColor
                )}
                style={{ width: `${performance}%` }}
              />
            </div>
          </div>
        )}
      </div>
    </Card>
  );
};

import { useState, useEffect, useMemo, useCallback } from 'react';
import { Check, AlertTriangle, ExternalLink, Zap, Group, Calendar, Info, XCircle, Flame, ChevronLeft, ChevronRight, ArrowUpDown, ArrowUp, ArrowDown, User, FileText, Save, Edit3, CheckCircle, X, RefreshCw } from 'lucide-react';
import { Card, CardContent, CardHeader } from '@/components/ui/card';
import { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from '@/components/ui/table';
import { Badge } from '@/components/ui/badge';
import { Button } from '@/components/ui/button';
import { toast } from '@/hooks/use-toast';
import { Tooltip, TooltipContent, TooltipProvider, TooltipTrigger } from '@/components/ui/tooltip';
import {
  Dialog,
  DialogContent,
  DialogHeader,
  DialogTitle,
} from '@/components/ui/dialog';
import {
  Select,
  SelectContent,
  SelectItem,
  SelectTrigger,
  SelectValue,
} from '@/components/ui/select';
import { Textarea } from '@/components/ui/textarea';
import { Label } from '@/components/ui/label';

interface AlertData {
  id: string;
  chamado: string;
  tipo_chamado: string;
  grupo_chamado: string;
  status_chamado: string;
  abertura_chamado: string;
  resumo_chamado: string;
  severidade_chamado: string;
  acionado: string;
  chat: boolean;
}

interface ObservacaoData {
  chamado: number;
  observacao: string;
  status: string;
  operador: string;
  CreatedAt?: string;
}

interface ActionTableProps {
  alertData: AlertData[];
  onUpdateAcknowledgment: (alertId: string, acknowledged: boolean) => void;
  loading: boolean;
}

interface Obsstatus {
  status: string;
}

const Obsstatus: React.FC<Obsstatus> = ({ status }) => {
  if (status === "finalizado") {
    return null; // n√£o renderiza nada
  }
}
export default Obsstatus;

type SortField = 'chamado' | 'tipo_chamado' | 'grupo_chamado' | 'status_chamado' | 'abertura_chamado' | 'resumo_chamado' | 'severidade_chamado' | 'acionado';
type SortDirection = 'asc' | 'desc' | null;

export const ActionTable = ({ alertData, onUpdateAcknowledgment, loading }: ActionTableProps) => {
  const [selectedIncident, setSelectedIncident] = useState<AlertData | null>(null);
  const [crisisDialogOpen, setCrisisDialogOpen] = useState(false);
  const [expandedRows, setExpandedRows] = useState<Set<string>>(new Set());
  const [currentPage, setCurrentPage] = useState(1);
  const itemsPerPage = 5;

  // Estados para ordena√ß√£o
  const [sortField, setSortField] = useState<SortField>('chamado');
  const [sortDirection, setSortDirection] = useState<SortDirection>('desc');

  // Estado que guarda os numeros chamados j√° acionados (string)
  const [acionadosSet, setAcionadosSet] = useState<Set<string>>(new Set());

  // Estados para observa√ß√µes
  const [observacoesData, setObservacoesData] = useState<Map<string, ObservacaoData>>(new Map());
  const [observacaoDialogOpen, setObservacaoDialogOpen] = useState(false);
  const [selectedChamadoForEdit, setSelectedChamadoForEdit] = useState<string>('');
  const [tempOperador, setTempOperador] = useState<string>('');
  const [tempObservacao, setTempObservacao] = useState<string>('');

  // Modal para detalhes do chamado
  const [chamadoModalOpen, setChamadoModalOpen] = useState(false);

  // Lista de operadores
  const operadores = [
    'Operador 1',
    'Operador 2', 
    'Operador 3',
    'Supervisor',
    'Coordenador'
  ];

  // Fun√ß√£o para buscar observa√ß√µes da API com retry
  const fetchObservacoes = useCallback(async (retryCount = 0) => {
    try {
      const response = await fetch('https://f6ffk8e9fe.execute-api.us-east-1.amazonaws.com/prod/obs', {
        method: 'GET',
        headers: {
          'Content-Type': 'application/json',
        },
      });

      if (response.ok) {
        const data: ObservacaoData[] = await response.json();
        const observacoesMap = new Map<string, ObservacaoData>();
        data.forEach(obs => {
          observacoesMap.set(obs.chamado.toString(), obs);
        });
        setObservacoesData(observacoesMap);
        console.log(`Observa√ß√µes carregadas: ${data.length} registros`);
      } else if (response.status === 404) {
        // API retorna 404 quando n√£o h√° dados, isso √© normal
        console.log('Nenhuma observa√ß√£o encontrada na API');
        setObservacoesData(new Map());
      } else {
        throw new Error(`API retornou status: ${response.status}`);
      }
    } catch (error) {
      console.error('Erro ao buscar observa√ß√µes:', error);
      
      // Retry at√© 3 tentativas
      if (retryCount < 3) {
        console.log(`Tentando novamente... (${retryCount + 1}/3)`);
        setTimeout(() => fetchObservacoes(retryCount + 1), 2000 * (retryCount + 1));
      } else {
        toast({
          title: 'Erro ao carregar observa√ß√µes',
          description: 'N√£o foi poss√≠vel carregar dados salvos. As novas altera√ß√µes funcionar√£o normalmente.',
          variant: 'destructive',
        });
      }
    }
  }, []);

  // Carrega observa√ß√µes ao montar o componente
  useEffect(() => {
    fetchObservacoes();
  }, [fetchObservacoes]);

  // Auto-refresh a cada 5 minutos
  useEffect(() => {
    const interval = setInterval(() => {
      fetchObservacoes();
    }, 5 * 60 * 1000); // 5 minutos

    return () => clearInterval(interval);
  }, [fetchObservacoes]);

  // Busca os incidentes acionados no DynamoDB via API
  useEffect(() => {
    const fetchAcionados = async () => {
      try {
        const res = await fetch('https://f6ffk8e9fe.execute-api.us-east-1.amazonaws.com/prod/chatacionados');
        if (!res.ok) throw new Error(`Erro ao buscar acionados: ${res.status}`);
        const data: { chamado: string }[] = await res.json();
        setAcionadosSet(new Set(data.map(item => item.chamado.toString())));
      } catch (error) {
        toast({
          title: 'Erro ao buscar acionados',
          description: 'N√£o foi poss√≠vel carregar os incidentes acionados',
          variant: 'destructive',
        });
      }
    };
    fetchAcionados();
  }, []);

  // Fun√ß√µes para manipular observa√ß√µes
  const handleOpenObservacao = (chamado: string) => {
    setSelectedChamadoForEdit(chamado);
    const existingObs = observacoesData.get(chamado);
    if (existingObs) {
      setTempOperador(existingObs.operador);
      setTempObservacao(existingObs.observacao);
    } else {
      setTempOperador('');
      setTempObservacao('');
    }
    setObservacaoDialogOpen(true);
  };

  const handleSaveObservacao = async () => {
    if (!tempOperador || !tempObservacao.trim() || !selectedChamadoForEdit) {
      toast({
        title: 'Campos obrigat√≥rios',
        description: 'Preencha o operador e a observa√ß√£o',
        variant: 'destructive',
      });
      return;
    }

    try {
      const payload: ObservacaoData = {
        chamado: parseInt(selectedChamadoForEdit),
        observacao: tempObservacao.trim(),
        status: 'acionado',
        operador: tempOperador,
      };

      const response = await fetch('https://f6ffk8e9fe.execute-api.us-east-1.amazonaws.com/prod/obs', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify(payload),
      });

      if (!response.ok) {
        throw new Error(`Erro na API: ${response.status}`);
      }

      // Atualiza o estado local
      const updatedObsData = new Map(observacoesData);
      updatedObsData.set(selectedChamadoForEdit, payload);
      setObservacoesData(updatedObsData);

      toast({
        title: 'Observa√ß√£o salva',
        description: 'A observa√ß√£o foi salva com sucesso',
      });

      // Recarrega dados da API para pegar o CreatedAt
      fetchObservacoes();

      handleCancelObservacao();
    } catch (error) {
      console.error('Erro ao salvar observa√ß√£o:', error);
      toast({
        title: 'Erro ao salvar',
        description: 'N√£o foi poss√≠vel salvar a observa√ß√£o',
        variant: 'destructive',
      });
    }
  };

  const handleCancelObservacao = () => {
    setObservacaoDialogOpen(false);
    setSelectedChamadoForEdit('');
    setTempOperador('');
    setTempObservacao('');
  };

  const handleAcknowledgment = async (alert: AlertData) => {
    try {
      const response = await fetch(
        "https://f6ffk8e9fe.execute-api.us-east-1.amazonaws.com/prod/webhook"
      );
      const data = await response.json();

      // Procura o grupo correspondente
      const grupoEntry = data.grupos.find(
        (g: any) => g.grupo_chamado === alert.grupo_chamado
      );

      if (!grupoEntry || !grupoEntry.webhooks.length) {
        toast({
          title: "Webhook n√£o configurado",
          description: `Configure o webhook para o Grupo: ${alert.grupo_chamado}`,
          variant: "destructive",
        });
        return;
      }

      // Pega o primeiro webhook ativo
      const activeWebhook = grupoEntry.webhooks.find((w: any) => w.ativo);
      if (!activeWebhook) {
        toast({
          title: "Nenhum webhook ativo",
          description: `O grupo ${alert.grupo_chamado} n√£o possui webhooks ativos`,
          variant: "destructive",
        });
        return;
      }

      const webhookUrl = activeWebhook.url;

      // Enviar mensagem para Google Chat
      const message = {
        cards: [
          {
            header: {
              title: "<b>üö® O CIOPs precisa da sua aten√ß√£o! <b>"
            },
            sections: [
              {
                widgets: [
                  {
                    textParagraph: {
                      text: `√â necess√°rio confirma√ß√£o de recebimento e ci√™ncia pelo grupo respons√°vel.`
                    }
                  }
                ]
              },
              {
                widgets: [
                  {
                    textParagraph: {
                      text:
                        "<b>Detalhes do Evento:</b><br><br>" +
                        "<b>üìå Chamado: </b>" + alert.chamado + "<br><br>" +
                        "<b>‚ö†Ô∏è Severidade: </b>" + alert.severidade_chamado + "<br><br>" +
                        "<b>üì∞ T√≠tulo: </b>" + alert.resumo_chamado + "<br><br>" +
                        "<b>üìÖ Abertura: </b>" + alert.abertura_chamado + "<br><br>" +
                        "<b>üë• Grupo: </b>" + alert.grupo_chamado
                    }
                  }
                ],
              },
              {
                widgets: [
                  {
                    textParagraph: {
                      text: `<b>‚ö†Ô∏è Aten√ß√£o: </b> Na aus√™ncia de confirma√ß√£o, o CIOPs dar√° in√≠cio ao processo de escalonamento, conforme procedimento padr√£o.`
                    }
                  }
                ]
              },
              {
                widgets: [
                  {
                    buttons: [
                      {
                        textButton: {
                          text: "‚úÖ Confirmar Recebimento",
                          onClick: {
                            action: {
                              actionMethodName: "confirmarAlerta",
                              parameters: [
                                { key: "chamado", value: alert.chamado },
                                { key: "grupo", value: alert.grupo_chamado }
                              ]
                            }
                          }
                        }
                      }
                    ]
                  }
                ]
              }
            ],
          },
        ],
      };

      await fetch(webhookUrl, {
        method: "POST",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify(message),
      });

      // Marca como acionado no DynamoDB
      const res = await fetch(
        "https://f6ffk8e9fe.execute-api.us-east-1.amazonaws.com/prod/chatacionados",
        {
          method: "POST",
          headers: { "Content-Type": "application/json" },
          body: JSON.stringify({ chamado: alert.chamado.toString() }),
        }
      );

      if (!res.ok) {
        const errorData = await res.json();
        throw new Error(errorData.message || "Erro ao marcar como acionado");
      }

      setAcionadosSet(prev => new Set([...prev, alert.chamado.toString()]));
      onUpdateAcknowledgment(alert.id, true);

      toast({
        title: "Alerta acionado com sucesso",
        description: `Mensagem enviada para o Grupo: ${alert.grupo_chamado}`,
      });

    } catch (error: any) {
      toast({
        title: "Erro ao acionar alerta",
        description: error.message || "N√£o foi poss√≠vel concluir o acionamento",
        variant: "destructive",
      });
    }
  };

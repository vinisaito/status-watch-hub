import { useState, useEffect } from 'react';
import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';
import { Badge } from '@/components/ui/badge';
import {
  ChevronDown,
  Eye,
  Calendar,
  User,
  AlertCircle,
  Clock,
  CheckCircle2,
  AlertTriangle,
  Circle,
  Settings,
  XCircle,
  RotateCcw,
  Play,
  Star,
  Plus,
  Save,
  X,
  Activity,
  FileText,
  Send,
  Sparkles
} from 'lucide-react';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { Label } from '@/components/ui/label';
import { Textarea } from '@/components/ui/textarea';
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';
import {
  Dialog,
  DialogContent,
  DialogHeader,
  DialogTitle,
  DialogDescription
} from '@/components/ui/dialog';
import { format } from "date-fns";
import { ptBR } from "date-fns/locale";
import { useToast } from '@/hooks/use-toast';

interface RDM {
  id: string;
  numero_rdm: number;
  descricao_rdm_user: string;
  executor: string;
  status_rdm: string;
  impacto: string;
  risco: string;
  ambiente: string;
  requisitante: string;
  ["gerente requisitante"]: string;
  depto_gerencia_requisitante: string;
  origem: string;
  warroom_preventivo: string;
  ic_rdm: string;
  tipo_rdm: 'Urgente' | 'Padr√£o' | 'Normal' | 'Informativa';
  data_inicio_programacao: string;
  data_fim_programacao?: string;
  description: string;
  grupo_executor: string;
  area_principal_afetada: string;
  ["dura√ß√£o da Programa√ß√£o"]?: string;
  status_acompanhamento?: string;
  sala_acompanhamento: string;
}

interface RDMFormData {
  numero_rdm: string;
  descricao_rdm_user: string;
  executor: string;
  status_rdm: string;
  impacto: string;
  risco: string;
  ambiente: string;
  requisitante: string;
  "gerente requisitante": string;
  depto_gerencia_requisitante: string;
  origem: string;
  warroom_preventivo: string;
  ic_rdm: string;
  tipo_rdm: 'Urgente' | 'Padr√£o' | 'Normal' | 'Informativa';
  data_inicio_programacao: string;
  data_fim_programacao: string;
  description: string;
  grupo_executor: string;
  area_principal_afetada: string;
  sala_acompanhamento: string,
  indisponibilidade: string,
  alert_incdent: string,
  atividade_teste: string,
  atividade_teste_obs: string,
  atividade_teste_anexo: File | null,
  observacoes: string,
  "dura√ß√£o da Programa√ß√£o": string;
}

const statusAcompanhamentoOptions = [
  { value: 'Adicionado para Acompanhamento', label: 'Adicionado para Acompanhamento', icon: Eye },
  { value: 'Aguardando Inicio', label: 'Em Andamento', icon: Clock },
  { value: 'Em Execu√ß√£o', label: 'Aguardando Aprova√ß√£o', icon: Play },
  { value: 'Fase de Teste', label: 'Fase de Teste', icon: Settings },
  { value: 'Conclu√≠do', label: 'Conclu√≠do', icon: CheckCircle2 },
  { value: 'Cancelado', label: 'Cancelado', icon: XCircle },
  { value: 'Rollback', label: 'Rollback', icon: RotateCcw }
];

const formatDateRange = (start: string, end?: string) => {
  if (!start) return "";

  const startDate = new Date(start);
  const endDate = end ? new Date(end) : null;

  const formatDate = (date: Date) =>
    date.toLocaleString("pt-BR", {
      day: "2-digit",
      month: "2-digit",
      year: "numeric",
      hour: "2-digit",
      minute: "2-digit",
    });

  return endDate ? `${formatDate(startDate)} - ${formatDate(endDate)}` : formatDate(startDate);
};

const getStatusAcompanhamentoColor = (status: string) => {
  switch (status) {
    case 'Conclu√≠do':
      return 'bg-alert-success text-white border-alert-success-border';
    case 'Em Andamento':
    case 'Em Teste':
      return 'bg-primary text-white border-primary/50';
    case 'Aguardando Aprova√ß√£o':
    case 'Aguardando Terceiros':
      return 'bg-alert-warning text-white border-alert-warning-border';
    case 'Cancelado':
      return 'bg-destructive text-white border-destructive/50';
    case 'Suspenso':
      return 'bg-muted text-muted-foreground border-muted/50';
    default:
      return 'bg-secondary text-secondary-foreground border-secondary/50';
  }
};

export const RDMTracker = () => {
  const [expandedRDM, setExpandedRDM] = useState<string | null>(null);
  const [selectedRDM, setSelectedRDM] = useState<RDM | null>(null);
  const [rdms, setRdms] = useState<RDM[]>([]);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState<string | null>(null);
  const [showForm, setShowForm] = useState(false);
  const [editingStatus, setEditingStatus] = useState<string | null>(null);
  const [statusLoading, setStatusLoading] = useState<string | null>(null);
  const { toast } = useToast();
  const [lookupLoading, setLookupLoading] = useState<boolean>(false);

  // Form state
  const [formData, setFormData] = useState<RDMFormData>({
    numero_rdm: '',
    descricao_rdm_user: '',
    executor: '',
    status_rdm: 'Aberta',
    impacto: '',
    risco: '',
    ambiente: '',
    requisitante: '',
    "gerente requisitante": '',
    depto_gerencia_requisitante: '',
    origem: '',
    warroom_preventivo: '',
    ic_rdm: '',
    tipo_rdm: 'Normal',
    data_inicio_programacao: '',
    data_fim_programacao: '',
    description: '',
    grupo_executor: '',
    area_principal_afetada: '',
    sala_acompanhamento: '',
    indisponibilidade: '',
    alert_incdent: '',
    atividade_teste: '',
    atividade_teste_obs: '',
    atividade_teste_anexo: null,
    observacoes: '',
    "dura√ß√£o da Programa√ß√£o": ''
  });

  // üîπ Substitua pela URL do seu API Gateway 
  const API_URL = "https://f6ffk8e9fe.execute-api.us-east-1.amazonaws.com/prod/acompanhamentordms";

  useEffect(() => {
    const fetchRDMs = async () => {
      try {
        setLoading(true);
        const response = await fetch(API_URL);
        if (!response.ok) {
          throw new Error(`Erro ${response.status}: N√£o foi poss√≠vel carregar as RDMs`);
        }
        const data = await response.json();
        // Garante um id est√°vel (usa numero_rdm) e adiciona status padr√£o
        const rdmsWithTrackingStatus = (data as any[]).map((rdm: any) => ({
          ...rdm,
          id: String(rdm.id ?? rdm.numero_rdm),
          status_acompanhamento: rdm.status_acompanhamento || 'N√£o Iniciado'
        })) as RDM[];
        setRdms(rdmsWithTrackingStatus);
      } catch (err: any) {
        setError(err.message || "Erro desconhecido");
      } finally {
        setLoading(false);
      }
    };

    fetchRDMs();
  }, []);

  // Helper: format ISO/string date to yyyy-MM-ddTHH:mm for input[type=datetime-local]
  const toInputDateTime = (value?: string | null) => {
    if (!value) return '';
    try {
      const d = new Date(value);
      if (isNaN(d.getTime())) return '';
      const pad = (n: number) => String(n).padStart(2, '0');
      const yyyy = d.getFullYear();
      const mm = pad(d.getMonth() + 1);
      const dd = pad(d.getDate());
      const hh = pad(d.getHours());
      const mi = pad(d.getMinutes());
      return `${yyyy}-${mm}-${dd}T${hh}:${mi}`;
    } catch {
      return '';
    }
  };

  const fetchRdmByNumber = async (numero: string) => {
    const trimmed = (numero || '').trim();
    if (!trimmed) return;
    setLookupLoading(true);
    try {
      const res = await fetch(`${API_URL}?numero_rdm=${encodeURIComponent(trimmed)}`);
      if (res.status === 404) {
        toast({
          title: 'RDM n√£o encontrada',
          description: `N√£o localizamos a RDM ${trimmed}. Verifique o n√∫mero e tente novamente.`,
        });
        return;
      }
      if (!res.ok) {
        const msg = await res.text();
        throw new Error(msg || 'Falha ao consultar a RDM');
      }
      const data = await res.json();

      setFormData(prev => ({
        ...prev,
        numero_rdm: String(data.numero_rdm ?? trimmed),
        descricao_rdm_user: data.descricao_rdm_user ?? prev.descricao_rdm_user ?? '',
        executor: data.executor ?? prev.executor ?? '',
        status_rdm: data.status_rdm ?? prev.status_rdm ?? 'Aberta',
        impacto: data.impacto ?? prev.impacto ?? '',
        risco: data.risco ?? prev.risco ?? '',
        ambiente: data.ambiente ?? prev.ambiente ?? '',
        requisitante: data.requisitante ?? prev.requisitante ?? '',
        "gerente requisitante": data["gerente requisitante"] ?? prev["gerente requisitante"] ?? '',
        depto_gerencia_requisitante: data.depto_gerencia_requisitante ?? prev.depto_gerencia_requisitante ?? '',
        origem: data.origem ?? prev.origem ?? '',
        warroom_preventivo: data.warroom_preventivo ?? prev.warroom_preventivo ?? '',
        ic_rdm: data.ic_rdm ?? prev.ic_rdm ?? '',
        tipo_rdm: data.tipo_rdm ?? prev.tipo_rdm ?? 'Normal',
        data_inicio_programacao: toInputDateTime(data.data_inicio_programacao) || prev.data_inicio_programacao || '',
        data_fim_programacao: toInputDateTime(data.data_fim_programacao) || prev.data_fim_programacao || '',
        description: data.description ?? prev.description ?? '',
        grupo_executor: data.grupo_executor ?? prev.grupo_executor ?? '',
        area_principal_afetada: data.area_principal_afetada ?? prev.area_principal_afetada ?? '',
        sala_acompanhamento: prev.sala_acompanhamento ?? '',
        indisponibilidade: prev.indisponibilidade ?? '',
        alert_incdent: prev.alert_incdent ?? '',
        atividade_teste: prev.atividade_teste ?? '',
        atividade_teste_obs: prev.atividade_teste_obs ?? '',
        atividade_teste_anexo: prev.atividade_teste_anexo ?? null,
        observacoes: prev.observacoes ?? '',
        "dura√ß√£o da Programa√ß√£o": data["dura√ß√£o da Programa√ß√£o"] ?? prev["dura√ß√£o da Programa√ß√£o"] ?? '',
      }));

      toast({
        title: 'Dados preenchidos',
        description: `Campos carregados para a RDM ${trimmed}.`,
      });
    } catch (err: any) {
      toast({
        title: 'Falha no autocomplete',
        description: err?.message || 'Erro ao consultar a API.',
        variant: 'destructive',
      });
    } finally {
      setLookupLoading(false);
    }
  };

  const handleCreateRDM = async (e: React.FormEvent) => {
    e.preventDefault();
    setLoading(true);

    try {
      const payload = {
        numero_rdm: String(formData.numero_rdm).trim(),
        status_acompanhamento: 'Adicionado para Acompanhamento'
      };

      const response = await fetch(API_URL, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify(payload)
      });

      if (!response.ok) {
        const msg = await response.text();
        throw new Error(msg || 'Erro ao criar RDM');
      }

      const newRDM = {
        id: String(formData.numero_rdm).trim(),
        numero_rdm: parseInt(formData.numero_rdm),
        descricao_rdm_user: formData.descricao_rdm_user,
        executor: formData.executor,
        status_rdm: formData.status_rdm,
        impacto: formData.impacto,
        risco: formData.risco,
        ambiente: formData.ambiente,
        requisitante: formData.requisitante,
        ["gerente requisitante"]: formData["gerente requisitante"],
        depto_gerencia_requisitante: formData.depto_gerencia_requisitante,
        origem: formData.origem,
        warroom_preventivo: formData.warroom_preventivo,
        ic_rdm: formData.ic_rdm,
        tipo_rdm: formData.tipo_rdm,
        data_inicio_programacao: formData.data_inicio_programacao,
        data_fim_programacao: formData.data_fim_programacao || undefined,
        description: formData.description,
        grupo_executor: formData.grupo_executor,
        area_principal_afetada: formData.area_principal_afetada,
        ["dura√ß√£o da Programa√ß√£o"]: formData["dura√ß√£o da Programa√ß√£o"] || undefined,
        status_acompanhamento: 'Adicionado para Acompanhamento',
        sala_acompanhamento: formData.sala_acompanhamento,
      } as RDM;

      const numeroStr = String(formData.numero_rdm).trim();
      try {
        const r = await fetch(`${API_URL}?numero_rdm=${encodeURIComponent(numeroStr)}`);
        if (r.ok) {
          const apiRdm = await r.json();
          const mapped: RDM = {
            ...(apiRdm as any),
            id: String((apiRdm as any).id ?? (apiRdm as any).numero_rdm),
            status_acompanhamento: (apiRdm as any).status_acompanhamento || 'Adicionado para Acompanhamento',
          };
          setRdms(prev => {
            const idx = prev.findIndex(x => String(x.numero_rdm) === String(mapped.numero_rdm));
            if (idx >= 0) {
              const copy = [...prev];
              copy[idx] = { ...copy[idx], ...mapped };
              return copy;
            }
            return [mapped, ...prev];
          });
        } else {
          setRdms(prev => [newRDM, ...prev]);
        }
      } catch {
        setRdms(prev => [newRDM, ...prev]);
      }
      toast({
        title: "RDM criada com sucesso!",
        description: `RDM ${formData.numero_rdm} foi cadastrada.`,
      });
      handleCloseForm();
    } catch (error) {
      toast({
        title: "Erro ao criar RDM",
        description: "Ocorreu um erro ao cadastrar a RDM. Tente novamente.",
        variant: "destructive",
      });
    } finally {
      setLoading(false);
    }
  };

  const handleStatusChange = async (rdmId: string, newStatus: string) => {
    setStatusLoading(rdmId);
    try {
      const response = await fetch(API_URL, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({ numero_rdm: String(rdmId), status_acompanhamento: newStatus })
      });

      if (!response.ok) {
        const msg = await response.text();
        throw new Error(msg || 'Erro ao atualizar status');
      }

      setRdms(prev => prev.map(rdm =>
        rdm.id === rdmId
          ? { ...rdm, status_acompanhamento: newStatus }
          : rdm
      ));

      if (selectedRDM?.id === rdmId) {
        setSelectedRDM(prev => prev ? { ...prev, status_acompanhamento: newStatus } : null);
      }

      toast({
        title: "Status atualizado!",
        description: `Status alterado para: ${newStatus}`,
      });
      setEditingStatus(null);
    } catch (error) {
      toast({
        title: "Erro ao atualizar status",
        description: "Ocorreu um erro. Tente novamente.",
        variant: "destructive",
      });
    } finally {
      setStatusLoading(null);
    }
  };

  const handleCloseForm = () => {
    setFormData({
      numero_rdm: '',
      descricao_rdm_user: '',
      executor: '',
      status_rdm: 'Aberta',
      impacto: '',
      risco: '',
      ambiente: '',
      requisitante: '',
      "gerente requisitante": '',
      depto_gerencia_requisitante: '',
      origem: '',
      warroom_preventivo: '',
      ic_rdm: '',
      tipo_rdm: 'Normal',
      data_inicio_programacao: '',
      data_fim_programacao: '',
      description: '',
      grupo_executor: '',
      area_principal_afetada: '',
      sala_acompanhamento: '',
      indisponibilidade: '',
      alert_incdent: '',
      atividade_teste: '',
      atividade_teste_obs: '',
      atividade_teste_anexo: null,
      observacoes: '',
      "dura√ß√£o da Programa√ß√£o": ''
    });
    setShowForm(false);
  };

  const updateFormData = (field: keyof RDMFormData, value: string | File | null) => {
    setFormData(prev => ({ ...prev, [field]: value }));
  };

  const getStatusBadgeClass = (status_rdm: string) => {
    switch (status_rdm) {
      case 'Aberta':
      case 'Aprovada':
        return 'bg-alert-success text-white border-alert-success-border shadow-sm';
      case 'Cancelada':
      case 'Rejeitada':
        return 'bg-destructive text-white border-destructive/50 shadow-sm';
      case 'Em aprova√ß√£o':
      case 'Em aprova√ß√£o - Comit√™':
        return 'bg-alert-warning text-white border-alert-warning-border shadow-sm';
      case 'Em implanta√ß√£o':
        return 'bg-primary text-white border-primary/50 shadow-sm';
      case 'Implantada':
      case 'Fechada':
        return 'bg-alert-success text-white border-alert-success-border shadow-sm';
      case 'Plano de volta em execu√ß√£o':
      case 'Recuada':
        return 'bg-secondary text-secondary-foreground border-secondary/50 shadow-sm';
      default:
        return 'bg-muted text-muted-foreground';
    }
  };

  const getStatusText = (status_rdm: string) => status_rdm;

  const getStatusIcon = (status_rdm: string) => {
    switch (status_rdm) {
      case 'Aberta':
        return <Play className="h-4 w-4" />;
      case 'Aprovada':
        return <Star className="h-4 w-4" />;
      case 'Cancelada':
      case 'Rejeitada':
        return <XCircle className="h-4 w-4" />;
      case 'Em implanta√ß√£o':
        return <Settings className="h-4 w-4 animate-spin" />;
      case 'Em aprova√ß√£o':
      case 'Em aprova√ß√£o - Comit√™':
        return <Clock className="h-4 w-4" />;
      case 'Implantada':
      case 'Fechada':
        return <CheckCircle2 className="h-4 w-4" />;
      case 'Plano de volta em execu√ß√£o':
      case 'Recuada':
        return <RotateCcw className="h-4 w-4" />;
      default:
        return <Circle className="h-4 w-4" />;
    }
  };

  const getPriorityIcon = (tipo_rdm: string) => {
    switch (tipo_rdm) {
      case 'Urgente':
        return <AlertTriangle className="h-4 w-4 text-destructive" />;
      case 'Padr√£o':
      case 'Normal':
        return <AlertCircle className="h-4 w-4 text-primary" />;
      case 'Informativa':
        return <Circle className="h-4 w-4 text-alert-success" />;
      default:
        return <Circle className="h-4 w-4 text-muted-foreground" />;
    }
  };

  const getPriorityColor = (tipo_rdm: string) => {
    switch (tipo_rdm) {
      case 'Urgente':
        return 'text-destructive';
      case 'Padr√£o':
      case 'Normal':
        return 'text-primary';
      case 'Informativa':
        return 'text-alert-success';
      default:
        return 'text-muted-foreground';
    }
  };

  const getPriorityText = (tipo_rdm: string) => tipo_rdm;

  const toggleExpanded = (id: string) => {
    setExpandedRDM(prev => prev === id ? null : id);
  };

  const openModal = (rdm: RDM) => {
    setSelectedRDM(rdm);
  };

  const closeModal = () => {
    setSelectedRDM(null);
  };

  const activeRDMs = rdms.filter(rdm => rdm.status_rdm !== 'Fechada' && rdm.status_rdm !== 'Implantada').length;

  // Componente StatusSelector
  const StatusSelector = ({ rdm }: { rdm: RDM }) => {
    const [selectedStatus, setSelectedStatus] = useState(rdm.status_acompanhamento || 'N√£o Iniciado');
    const isEditing = editingStatus === rdm.id;
    const isLoading = statusLoading === rdm.id;

    const currentStatusOption = statusAcompanhamentoOptions.find(option => option.value === selectedStatus) || statusAcompanhamentoOptions[0];
    const CurrentIcon = currentStatusOption.icon;

    if (!isEditing) {
      return (
        <div className="flex items-center gap-2">
          <Badge className={`${getStatusAcompanhamentoColor(selectedStatus)} flex items-center gap-1.5 px-3 py-1.5 shadow-sm`}>
            <CurrentIcon className="h-3.5 w-3.5" />
            {selectedStatus}
          </Badge>
          <Button
            variant="outline"
            size="sm"
            onClick={() => setEditingStatus(rdm.id)}
            className="h-8 px-3 text-xs hover:bg-primary/5 hover:border-primary/50 transition-smooth"
            disabled={isLoading}
          >
            Alterar
          </Button>
        </div>
      );
    }

    return (
      <div className="flex items-center gap-2 p-3 bg-gradient-to-br from-panel-bg to-background rounded-xl border-2 border-primary/20 shadow-card">
        <div className="flex-1">
          <Select value={selectedStatus} onValueChange={setSelectedStatus}>
            <SelectTrigger className="h-9 border-2 focus:border-primary transition-smooth">
              <SelectValue />
            </SelectTrigger>
            <SelectContent>
              {statusAcompanhamentoOptions.map((option) => {
                const Icon = option.icon;
                return (
                  <SelectItem key={option.value} value={option.value}>
                    <div className="flex items-center gap-2">
                      <Icon className="h-4 w-4" />
                      {option.label}
                    </div>
                  </SelectItem>
                );
              })}
            </SelectContent>
          </Select>
        </div>
        <div className="flex gap-2">
          <Button
            size="sm"
            onClick={() => handleStatusChange(rdm.id, selectedStatus)}
            disabled={isLoading || selectedStatus === rdm.status_acompanhamento}
            className="h-9 px-3 bg-gradient-to-r from-primary to-accent hover:shadow-glow transition-smooth"
          >
            <Save className="h-3.5 w-3.5 mr-1.5" />
            Salvar
          </Button>
          <Button
            variant="outline"
            size="sm"
            onClick={() => {
              setSelectedStatus(rdm.status_acompanhamento || 'N√£o Iniciado');
              setEditingStatus(null);
            }}
            disabled={isLoading}
            className="h-9 px-3 hover:bg-destructive/5 hover:text-destructive transition-smooth"
          >
            <X className="h-3.5 w-3.5" />
          </Button>
        </div>
      </div>
    );
  };

  return (
    <div className="min-h-screen bg-gradient-to-br from-background via-background to-muted/30 p-6">
      <Card className="border-panel-border shadow-card hover:shadow-hover transition-smooth overflow-hidden bg-gradient-to-br from-card via-card to-background">
        <CardHeader className="relative overflow-hidden border-b border-panel-border bg-gradient-to-r from-primary/5 via-accent/5 to-primary/5 backdrop-blur-sm">
          <div className="absolute inset-0 bg-gradient-to-r from-primary/10 via-transparent to-accent/10 opacity-50" />
          <div className="relative flex flex-row items-center justify-between space-y-0">
            <CardTitle className="flex items-center gap-3">
              <div className="relative flex items-center justify-center w-12 h-12 rounded-xl bg-gradient-to-br from-primary to-accent shadow-glow">
                <Calendar className="h-6 w-6 text-white" />
                {activeRDMs > 0 && (
                  <div className="absolute -top-1 -right-1 w-4 h-4 bg-alert-warning rounded-full animate-pulse-glow border-2 border-card flex items-center justify-center">
                    <Activity className="h-2 w-2 text-white" />
                  </div>
                )}
              </div>
              <div>
                <h2 className="text-2xl font-bold bg-gradient-to-r from-primary to-accent bg-clip-text text-transparent">
                  Acompanhamento de RDMs
                </h2>
                <p className="text-sm text-muted-foreground font-normal mt-0.5">
                  Gest√£o de mudan√ßas programadas
                </p>
              </div>
              {activeRDMs > 0 && (
                <Badge className="ml-2 bg-alert-warning-bg border border-alert-warning-border text-alert-warning font-semibold shadow-sm">
                  <Activity className="h-3.5 w-3.5 mr-1.5" />
                  {activeRDMs} ativas
                </Badge>
              )}
            </CardTitle>
            <Button
              onClick={() => setShowForm(true)}
              className="bg-gradient-to-r from-primary to-accent hover:shadow-glow transition-smooth font-semibold h-10 px-5"
            >
              <Plus className="h-4 w-4 mr-2" />
              Adicionar RDM
            </Button>
          </div>
        </CardHeader>

        <CardContent className="p-6 space-y-4 max-h-[75vh] overflow-y-auto">
          {loading && (
            <div className="flex flex-col items-center justify-center py-16">
              <div className="w-16 h-16 rounded-full bg-gradient-to-br from-primary/10 to-accent/10 flex items-center justify-center mb-4">
                <Activity className="h-8 w-8 text-primary animate-spin" />
              </div>
              <p className="text-muted-foreground font-medium">Carregando RDMs...</p>
            </div>
          )}

          {error && (
            <div className="flex flex-col items-center justify-center py-16 px-4 border-2 border-dashed border-destructive/50 rounded-2xl bg-destructive/5">
              <div className="w-16 h-16 rounded-full bg-destructive/10 flex items-center justify-center mb-4">
                <AlertCircle className="h-8 w-8 text-destructive" />
              </div>
              <p className="text-destructive font-semibold">{error}</p>
            </div>
          )}

          {!loading && !error && rdms.map((rdm, index) => (
            <div
              key={rdm.id}
              className="group relative border-2 border-panel-border rounded-2xl p-5 bg-gradient-to-br from-card via-background to-card hover:border-primary/30 hover:shadow-hover transition-smooth animate-fade-in"
              style={{ animationDelay: `${index * 50}ms` }}
            >
              {/* Priority indicator */}
              <div className={`absolute left-0 top-6 bottom-6 w-1.5 rounded-r-lg transition-smooth ${rdm.tipo_rdm === 'Urgente' ? 'bg-gradient-to-b from-destructive to-destructive/50' :
                  rdm.tipo_rdm === 'Normal' || rdm.tipo_rdm === 'Padr√£o' ? 'bg-gradient-to-b from-primary to-accent' :
                    rdm.tipo_rdm === 'Informativa' ? 'bg-gradient-to-b from-alert-success to-alert-success/50' : 'bg-muted'
                }`} />

              <div className="flex flex-col gap-4 ml-4">
                {/* Header with RDM info */}
                <div className="flex flex-col lg:flex-row lg:items-center justify-between gap-4">
                  <div className="flex items-center gap-3 flex-wrap">
                    <Badge variant="secondary" className="font-mono text-sm px-3 py-1.5 bg-gradient-to-r from-primary/10 to-accent/10 border border-primary/20 text-primary font-bold">
                      #{rdm.numero_rdm}
                    </Badge>
                    <span className="text-sm text-foreground font-semibold break-words max-w-[300px]">
                      {rdm.descricao_rdm_user}
                    </span>
                    <Badge variant="outline" className="text-xs">
                      <User className="h-3 w-3 mr-1" />
                      {rdm.grupo_executor}
                    </Badge>
                  </div>

                  <div className="flex items-center gap-3">
                    <Badge className={`${getStatusBadgeClass(rdm.status_rdm)} flex items-center gap-1.5 px-3 py-1.5`}>
                      {getStatusIcon(rdm.status_rdm)}
                      {getStatusText(rdm.status_rdm)}
                    </Badge>
                    <Button
                      variant="outline"
                      size="sm"
                      className="hover:bg-primary/5 hover:border-primary/50 transition-smooth"
                      onClick={() => openModal(rdm)}
                    >
                      <FileText className="h-3.5 w-3.5 mr-1.5" />
                      Detalhes
                    </Button>
                  </div>
                </div>

                {/* Status de Acompanhamento */}
                <div className="p-4 bg-gradient-to-br from-panel-bg to-background rounded-xl border border-panel-border shadow-card">
                  <div className="flex items-center gap-2 mb-3 text-sm font-semibold text-foreground">
                    <Settings className="h-4 w-4 text-primary" />
                    Status de Acompanhamento
                  </div>
                  <StatusSelector rdm={rdm} />
                </div>
              </div>
            </div>
          ))}

          {!loading && !error && rdms.length === 0 && (
            <div className="flex flex-col items-center justify-center py-16 px-4 border-2 border-dashed border-panel-border rounded-2xl bg-gradient-to-br from-background to-background/50">
              <div className="w-20 h-20 rounded-full bg-gradient-to-br from-primary/10 to-accent/10 flex items-center justify-center mb-6 relative">
                <Calendar className="h-10 w-10 text-primary/50" />
                <div className="absolute inset-0 rounded-full bg-primary/5 animate-pulse-glow" />
              </div>
              <p className="text-lg font-semibold text-foreground mb-2">Nenhuma RDM cadastrada</p>
              <p className="text-sm text-muted-foreground">Clique em "Adicionar RDM" para come√ßar</p>
            </div>
          )}
        </CardContent>
      </Card>

      {/* Form Modal */}
      <Dialog open={showForm} onOpenChange={(open) => {
        if (open) {
          setShowForm(true);
        } else {
          handleCloseForm();
        }
      }}>
        <DialogContent className="max-w-4xl max-h-[90vh] overflow-y-auto">
          <DialogHeader>
            <DialogTitle className="flex items-center gap-3 text-xl">
              <div className="p-2 rounded-lg bg-gradient-to-br from-primary/10 to-accent/10">
                <Calendar className="h-5 w-5 text-primary" />
              </div>
              Nova RDM
            </DialogTitle>
          </DialogHeader>

          <form onSubmit={handleCreateRDM} className="space-y-6 py-4">
            {/* Basic Information */}
            <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
              <div className="space-y-2">
                <Label htmlFor="numero_rdm">N√∫mero RDM *</Label>
                <div className="relative">
                  <Input
                    id="numero_rdm"
                    value={formData.numero_rdm}
                    onChange={(e) => updateFormData('numero_rdm', e.target.value)}
                    onBlur={(e) => fetchRdmByNumber(e.target.value)}
                    onKeyDown={(e) => {
                      if (e.key === 'Enter') {
                        e.preventDefault();
                        fetchRdmByNumber((e.target as HTMLInputElement).value);
                      }
                    }}
                    placeholder="Ex: 12345"
                    required
                  />
                  {lookupLoading && (
                    <div className="absolute inset-y-0 right-2 flex items-center text-muted-foreground text-xs">
                      Buscando...
                    </div>
                  )}
                </div>
              </div>

              <div className="space-y-2">
                <Label htmlFor="tipo_rdm">Tipo RDM *</Label>
                <Select value={formData.tipo_rdm} onValueChange={(value) => updateFormData('tipo_rdm', value as any)}>
                  <SelectTrigger>
                    <SelectValue />
                  </SelectTrigger>
                  <SelectContent>
                    <SelectItem value="Urgente">Urgente</SelectItem>
                    <SelectItem value="Padr√£o">Padr√£o</SelectItem>
                    <SelectItem value="Normal">Normal</SelectItem>
                    <SelectItem value="Informativa">Informativa</SelectItem>
                  </SelectContent>
                </Select>
              </div>
            </div>

            <div className="space-y-2">
              <Label htmlFor="status_rdm">Status *</Label>
              <Select value={formData.status_rdm} onValueChange={(value) => updateFormData('status_rdm', value as any)}>
                <SelectTrigger>
                  <SelectValue />
                </SelectTrigger>
                <SelectContent>
                  <SelectItem value="Aberta">Aberta</SelectItem>
                  <SelectItem value="Agendada">Agendada</SelectItem>
                  <SelectItem value="Aprovada">Aprovada</SelectItem>
                  <SelectItem value="Cancelada">Cancelada</SelectItem>
                  <SelectItem value="Em aprova√ß√£o">Em aprova√ß√£o</SelectItem>
                  <SelectItem value="Em aprova√ß√£o - Comit√™">Em aprova√ß√£o - Comit√™</SelectItem>
                  <SelectItem value="Em avalia√ß√£o">Em avalia√ß√£o</SelectItem>
                  <SelectItem value="Em implanta√ß√£o">Em implanta√ß√£o</SelectItem>
                  <SelectItem value="Em Verifica√ß√£o">Em Verifica√ß√£o</SelectItem>
                  <SelectItem value="Fechada">Fechada</SelectItem>
                  <SelectItem value="Implantada">Implantada</SelectItem>
                  <SelectItem value="Plano de volta em execu√ß√£o">Plano de volta em execu√ß√£o</SelectItem>
                  <SelectItem value="Recuada">Recuada</SelectItem>
                  <SelectItem value="Rejeitada">Rejeitada</SelectItem>
                  <SelectItem value="Valida√ß√£o Automa√ß√£o">Valida√ß√£o Automa√ß√£o</SelectItem>
                </SelectContent>
              </Select>
            </div>

            <div className="space-y-2">
              <Label htmlFor="descricao_rdm_user">Descri√ß√£o *</Label>
              <Textarea
                id="descricao_rdm_user"
                value={formData.descricao_rdm_user}
                onChange={(e) => updateFormData('descricao_rdm_user', e.target.value)}
                placeholder="T√≠tulo da Mudan√ßa"
                rows={3}
                required
              />
            </div>

            {/* Responsible Information */}
            <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
              <div className="space-y-2">
                <Label htmlFor="executor">Executor *</Label>
                <Input
                  id="executor"
                  value={formData.executor}
                  onChange={(e) => updateFormData('executor', e.target.value)}
                  placeholder="Nome do respons√°vel"
                  required
                />
              </div>

              <div className="space-y-2">
                <Label htmlFor="grupo_executor">Grupo Executor *</Label>
                <Input
                  id="grupo_executor"
                  value={formData.grupo_executor}
                  onChange={(e) => updateFormData('grupo_executor', e.target.value)}
                  placeholder="Equipe respons√°vel"
                  required
                />
              </div>
            </div>

            {/* Environment and Risk */}
            <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
              <div className="space-y-2">
                <Label htmlFor="area_principal_afetada">√Årea Principal Afetada</Label>
                <Input
                  id="area_principal_afetada"
                  value={formData.area_principal_afetada}
                  onChange={(e) => updateFormData('area_principal_afetada', e.target.value)}
                  placeholder="√Årea impactada"
                />
              </div>

              <div className="space-y-2">
                <Label htmlFor="requisitante">Requisitante</Label>
                <Input
                  id="requisitante"
                  value={formData.requisitante}
                  onChange={(e) => updateFormData('requisitante', e.target.value)}
                  placeholder="Nome do solicitante"
                />
              </div>
            </div>

            {/* Scheduling */}
            <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
              <div className="space-y-2">
                <Label htmlFor="data_inicio_programacao">Data/Hora In√≠cio *</Label>
                <Input
                  id="data_inicio_programacao"
                  type="datetime-local"
                  value={formData.data_inicio_programacao}
                  onChange={(e) => updateFormData('data_inicio_programacao', e.target.value)}
                  required
                />
              </div>

              <div className="space-y-2">
                <Label htmlFor="data_fim_programacao">Data/Hora Fim</Label>
                <Input
                  id="data_fim_programacao"
                  type="datetime-local"
                  value={formData.data_fim_programacao}
                  onChange={(e) => updateFormData('data_fim_programacao', e.target.value)}
                />
              </div>
            </div>

            {/* Additional Information */}
            <div className="grid grid-cols-1 md:grid-cols-1 gap-4">
              <div className="space-y-2">
                <Label htmlFor="sala_acompanhamento">Sala de Acompanhamento</Label>
                <Input
                  id="sala_acompanhamento"
                  value={formData.sala_acompanhamento}
                  onChange={(e) => updateFormData('sala_acompanhamento', e.target.value)}
                  placeholder="Sala de Acompanhamento"
                />
              </div>
            </div>

            <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
              <div className="space-y-2">
                <Label htmlFor="indisponibilidade">Indisponibilidade Prevista</Label>
                <Input
                  id="indisponibilidade"
                  value={formData.indisponibilidade}
                  onChange={(e) => updateFormData('indisponibilidade', e.target.value)}
                  placeholder="Indisponibilidade Prevista"
                />
              </div>

              <div className="space-y-2">
                <Label htmlFor="alert_incdent">Alertas e Incidentes</Label>
                <Input
                  id="alert_incdent"
                  value={formData.alert_incdent}
                  onChange={(e) => updateFormData('alert_incdent', e.target.value)}
                  placeholder="Alertas e Incidentes"
                />
              </div>
            </div>

            <div className="space-y-2">
              <Label htmlFor="atividade_teste">Atividade de Teste</Label>
              <Select value={formData.atividade_teste} onValueChange={(value) => updateFormData('atividade_teste', value)}>
                <SelectTrigger>
                  <SelectValue placeholder="Selecione" />
                </SelectTrigger>
                <SelectContent>
                  <SelectItem value="Aguardando fase de teste">Aguardando fase de teste</SelectItem>
                  <SelectItem value="Teste confirmado pelo respons√°vel">Teste confirmado pelo respons√°vel</SelectItem>
                  <SelectItem value="Teste n√£o confirmado pelo respons√°vel">Teste n√£o confirmado pelo respons√°vel</SelectItem>
                </SelectContent>
              </Select>
            </div>
            {formData.atividade_teste === "Teste confirmado pelo respons√°vel" && (
              <div className="grid grid-cols-1 md:grid-cols-1 gap-4">
                <div className="space-y-2">
                  <Label htmlFor="atividade_teste_obs">Atividade de Teste - Observa√ß√µes *</Label>
                  <Input
                    id="atividade_teste_obs"
                    value={formData.atividade_teste_obs || ""}
                    onChange={(e) => updateFormData("atividade_teste_obs", e.target.value)}
                    placeholder="Observa√ß√µes da Atividade"
                    required
                  />
                </div>

                <div className="space-y-2 col-span-2">
                  <Label htmlFor="atividade_teste_anexo">Atividade de Teste - Anexo</Label>
                  <Input
                    id="atividade_teste_anexo"
                    type="file"
                    accept=".pdf,.jpg,.png,.doc,.docx"
                    onChange={(e) => updateFormData("atividade_teste_anexo", e.target.files?.[0] || null)}
                  />
                  {formData.atividade_teste_anexo && (
                    <p className="text-sm text-gray-500">Arquivo selecionado: {formData.atividade_teste_anexo.name}</p>
                  )}
                </div>
              </div>
            )}
            {formData.atividade_teste === "Teste n√£o confirmado pelo respons√°vel" && (
              <div className="grid grid-cols-1 md:grid-cols-1 gap-4">
                <div className="space-y-2">
                  <Label htmlFor="atividade_teste_obs">Atividade de Teste - Observa√ß√µes *</Label>
                  <Input
                    id="atividade_teste_obs"
                    value={formData.atividade_teste_obs || ""}
                    onChange={(e) => updateFormData("atividade_teste_obs", e.target.value)}
                    placeholder="Observa√ß√µes da Atividade"
                    required
                  />
                </div>
              </div>
            )}

            <div className="space-y-2">
              <Label htmlFor="observacoes">Observa√ß√µes</Label>
              <Textarea
                id="observacoes"
                value={formData.observacoes}
                onChange={(e) => updateFormData('observacoes', e.target.value)}
                placeholder="Observa√ß√µes da RDM"
                rows={3}
                required
              />
            </div>

            {/* Form Actions */}
            <div className="flex justify-end gap-3 pt-4 border-t">
              <Button
                type="button"
                variant="outline"
                onClick={handleCloseForm}
                disabled={loading}
              >
                <X className="h-4 w-4 mr-2" />
                Cancelar
              </Button>
              <Button
                type="submit"
                disabled={loading}
                className="bg-gradient-to-r from-primary to-accent hover:shadow-glow transition-smooth"
              >
                <Save className="h-4 w-4 mr-2" />
                {loading ? 'Salvando...' : 'Salvar RDM'}
              </Button>
            </div>
          </form>
        </DialogContent>
      </Dialog>

      {/* Details Modal */}
      <Dialog open={!!selectedRDM} onOpenChange={closeModal}>
        <DialogContent className="max-w-2xl">
          <DialogHeader>
            <DialogTitle className="text-xl flex items-center gap-3">
              <div className="p-2 rounded-lg bg-gradient-to-br from-primary/10 to-accent/10">
                <Calendar className="h-5 w-5 text-primary" />
              </div>
              #{selectedRDM?.numero_rdm} - {selectedRDM?.descricao_rdm_user}
            </DialogTitle>
          </DialogHeader>

          {selectedRDM && (
            <div className="space-y-6 py-4">
              {/* Status and Priority */}
              <div className="flex flex-wrap items-center gap-4">
                <Badge className={`${getStatusBadgeClass(selectedRDM.status_rdm)} flex items-center gap-2 px-3 py-2`}>
                  {getStatusIcon(selectedRDM.status_rdm)}
                  {getStatusText(selectedRDM.status_rdm)}
                </Badge>
                <div className="flex items-center gap-2">
                  {getPriorityIcon(selectedRDM.tipo_rdm)}
                  <span className={`font-semibold ${getPriorityColor(selectedRDM.tipo_rdm)}`}>
                    Prioridade {getPriorityText(selectedRDM.tipo_rdm)}
                  </span>
                </div>
              </div>

              {/* Status de Acompanhamento no Modal */}
              <div className="p-4 bg-gradient-to-br from-panel-bg to-background rounded-xl border border-panel-border shadow-card">
                <h4 className="font-semibold text-foreground mb-3 flex items-center gap-2">
                  <Settings className="h-4 w-4" />
                  Status de Acompanhamento
                </h4>
                <StatusSelector rdm={selectedRDM} />
              </div>

              {/* Details Grid */}
              <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
                <div className="space-y-4">
                  <div className="flex items-center gap-3 p-3 bg-gradient-to-br from-panel-bg to-background rounded-xl border border-panel-border shadow-card">
                    <User className="h-5 w-5 text-primary" />
                    <div>
                      <p className="text-sm text-muted-foreground">Respons√°vel</p>
                      <p className="font-semibold text-foreground">{selectedRDM.executor}</p>
                    </div>
                  </div>

                  <div className="flex items-center gap-3 p-3 bg-gradient-to-br from-panel-bg to-background rounded-xl border border-panel-border shadow-card">
                    <Settings className="h-5 w-5 text-primary" />
                    <div>
                      <p className="text-sm text-muted-foreground">Equipe</p>
                      <p className="font-semibold text-foreground">{selectedRDM.grupo_executor}</p>
                    </div>
                  </div>
                </div>

                <div className="space-y-4">
                  <div className="flex items-center gap-3 p-3 bg-gradient-to-br from-panel-bg to-background rounded-xl border border-panel-border shadow-card">
                    <Calendar className="h-5 w-5 text-primary" />
                    <div>
                      <p className="text-sm text-muted-foreground">Janela de Execu√ß√£o</p>
                      <p className="font-semibold text-foreground">
                        {formatDateRange(selectedRDM.data_inicio_programacao, selectedRDM.data_fim_programacao)}
                      </p>
                    </div>
                  </div>

                  <div className="flex items-center gap-3 p-3 bg-gradient-to-br from-panel-bg to-background rounded-xl border border-panel-border shadow-card">
                    <Clock className="h-5 w-5 text-primary" />
                    <div>
                      <p className="text-sm text-muted-foreground">Dura√ß√£o Estimada</p>
                      <p className="font-semibold text-foreground">{selectedRDM["dura√ß√£o da Programa√ß√£o"] || 'N/A'} Horas</p>
                    </div>
                  </div>
                </div>
              </div>

              {/* Description */}
              <div className="max-w-3xl w-full max-h-[20vh] overflow-y-auto mx-auto">
                <h4 className="font-semibold text-foreground mb-4 flex items-center gap-2 text-lg">
                  <AlertCircle className="h-4 w-4" />
                  Mais informa√ß√µes
                </h4>
                <div className="grid grid-cols-1 sm:grid-cols-2 gap-3">
                  <div>
                    <span className="font-medium text-foreground">Ambiente:</span>
                    <span className="text-muted-foreground ml-1">{selectedRDM.ambiente}</span>
                  </div>
                  <div>
                    <span className="font-medium text-foreground">Origem:</span>
                    <span className="text-muted-foreground ml-1">{selectedRDM.origem}</span>
                  </div>
                  <div>
                    <span className="font-medium text-foreground">Impacto:</span>
                    <span className="text-muted-foreground ml-1">{selectedRDM.impacto}</span>
                  </div>
                  <div>
                    <span className="font-medium text-foreground">Risco:</span>
                    <span className="text-muted-foreground ml-1">{selectedRDM.risco}</span>
                  </div>
                  <div>
                    <span className="font-medium text-foreground">Requisitante:</span>
                    <span className="text-muted-foreground ml-1">{selectedRDM.requisitante}</span>
                  </div>
                  <div>
                    <span className="font-medium text-foreground">√Årea Principal:</span>
                    <span className="text-muted-foreground ml-1">{selectedRDM.area_principal_afetada}</span>
                  </div>
                  <div>
                    <span className="font-medium text-foreground">War Room Preventivo:</span>
                    <span className="text-muted-foreground ml-1">{selectedRDM.warroom_preventivo}</span>
                  </div>
                  <div>
                    <span className="font-medium text-foreground">IC:</span>
                    <span className="text-muted-foreground ml-1">{selectedRDM.ic_rdm}</span>
                  </div>
                </div>
              </div>
            </div>
          )}
        </DialogContent>
      </Dialog>
    </div>
  );
};

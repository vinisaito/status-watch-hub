import React, { useState, useCallback } from 'react';
import { Dialog, DialogContent, DialogHeader, DialogTitle } from '@/components/ui/dialog';
import { Button } from '@/components/ui/button';
import { Textarea } from '@/components/ui/textarea';
import { Label } from '@/components/ui/label';
import { Badge } from '@/components/ui/badge';
import { Separator } from '@/components/ui/separator';
import { ProgressIndicator } from '@/components/ui/progress-indicator';
import { TimerDisplay } from '@/components/ui/timer-display';
import { 
  ArrowRight, 
  ArrowLeft, 
  CheckCircle, 
  X, 
  AlertTriangle,
  Lightbulb,
  MessageSquare,
  Timer
} from 'lucide-react';
import { toast } from '@/hooks/use-toast';
import { cn } from '@/lib/utils';

// Tipagem corrigida: chamado deve ser number
interface ModernTimerModalProps {
  isOpen: boolean;
  onClose: () => void;
  chamado: number;
  currentLevel: number;
  remainingTime: number;
  formatTime: (seconds: number) => string;
  onNextLevel: (chamado: number, level: number, observacao: string) => void;
  onPreviousLevel: (chamado: number, level: number, observacao: string) => void;
  onFinalize?: (chamado: number, observacao: string) => void; // üîπ agora √© opcional
  updateStatusFinal: (chamado: number, statusFinal: string) => void;
  updateObservacao: (chamado: number, level: number, observacao: string) => void;
}

const LEVEL_INFO = {
  1: {
    title: "Primeiro Acionamento",
    description: "An√°lise inicial e primeiros procedimentos de diagn√≥stico",
    nextAction: "Avan√ßar para 1¬™ Escala√ß√£o",
    color: "from-blue-500 to-blue-600",
    bgColor: "bg-blue-500/5 border-blue-200"
  },
  2: {
    title: "1¬™ Escala√ß√£o",
    description: "Escala√ß√£o t√©cnica de primeiro n√≠vel - Suporte especializado",
    nextAction: "Avan√ßar para 2¬™ Escala√ß√£o",
    color: "from-orange-500 to-orange-600",
    bgColor: "bg-orange-500/5 border-orange-200"
  },
  3: {
    title: "2¬™ Escala√ß√£o", 
    description: "Escala√ß√£o t√©cnica de segundo n√≠vel - Especialistas s√™niores",
    nextAction: "Avan√ßar para 3¬™ Escala√ß√£o",
    color: "from-red-500 to-red-600",
    bgColor: "bg-red-500/5 border-red-200"
  },
  4: {
    title: "3¬™ Escala√ß√£o",
    description: "Escala√ß√£o t√©cnica de terceiro n√≠vel - Time de arquitetura",
    nextAction: "Avan√ßar para 4¬™ Escala√ß√£o",
    color: "from-purple-500 to-purple-600",
    bgColor: "bg-purple-500/5 border-purple-200"
  },
  5: {
    title: "4¬™ Escala√ß√£o",
    description: "Escala√ß√£o m√°xima - Gestores e decisores t√©cnicos",
    nextAction: "Finalizar Chamado",
    color: "from-red-600 to-red-700",
    bgColor: "bg-red-600/5 border-red-300"
  }
};

export const ModernTimerModal: React.FC<ModernTimerModalProps> = ({
  isOpen,
  onClose,
  chamado,
  currentLevel,
  remainingTime,
  formatTime,
  onNextLevel,
  onPreviousLevel,
  onFinalize, // üîπ opcional
  updateStatusFinal,
  updateObservacao
}) => {
  const [observacao, setObservacao] = useState('');
  const [isProcessing, setIsProcessing] = useState(false);

  const levelInfo = LEVEL_INFO[currentLevel as keyof typeof LEVEL_INFO];

  const validateObservacao = useCallback(() => {
    if (!observacao.trim()) {
      toast({
        title: "‚ö†Ô∏è Observa√ß√£o Obrigat√≥ria",
        description: "√â obrigat√≥rio preencher o campo de observa√ß√µes para continuar",
        variant: "destructive",
      });
      return false;
    }
    return true;
  }, [observacao]);

  const handleAction = useCallback(async (action: 'next' | 'previous' | 'finish') => {
    if (!validateObservacao()) return;

    setIsProcessing(true);

    try {
      const trimmedObservacao = observacao.trim();
      
      switch (action) {
        case 'next':
          if (currentLevel >= 5) {
            await updateStatusFinal(chamado, "finalizado");
            await updateObservacao(chamado, currentLevel, trimmedObservacao);
            toast({
              title: "‚úÖ Chamado Finalizado",
              description: `Chamado ${chamado} foi finalizado com sucesso!`,
            });
          } else {
            await onNextLevel(chamado, currentLevel + 1, trimmedObservacao);
            const nextLevelInfo = LEVEL_INFO[(currentLevel + 1) as keyof typeof LEVEL_INFO];
            toast({
              title: `üöÄ ${nextLevelInfo?.title} Iniciado`,
              description: `Timer de 20 minutos iniciado para ${nextLevelInfo?.title}`,
            });
          }
          break;
          
        case 'previous':
          if (currentLevel > 1) {
            await onPreviousLevel(chamado, currentLevel - 1, trimmedObservacao);
            const prevLevelInfo = LEVEL_INFO[(currentLevel - 1) as keyof typeof LEVEL_INFO];
            toast({
              title: `‚¨ÖÔ∏è Retornando para ${prevLevelInfo?.title}`,
              description: `Timer reiniciado para ${prevLevelInfo?.title}`,
            });
          }
          break;
          
        case 'finish':
          await updateStatusFinal(chamado, "finalizado");
          await updateObservacao(chamado, currentLevel, trimmedObservacao);

          // üîπ s√≥ chama onFinalize se ele foi passado
          if (onFinalize) {
            await onFinalize(chamado, trimmedObservacao);
          }

          toast({
            title: "‚úÖ Chamado Finalizado",
            description: `Chamado ${chamado} foi finalizado com sucesso!`,
          });
          break;
      }
      
      setObservacao('');
      onClose();
      
    } catch (error) {
      console.error("‚ùå Erro no handleAction:", error);
      toast({
        title: "‚ùå Erro na Opera√ß√£o",
        description: "Ocorreu um erro ao processar a a√ß√£o. Verifique os logs.",
        variant: "destructive",
      });
    } finally {
      setIsProcessing(false);
    }
  }, [validateObservacao, observacao, currentLevel, chamado, onNextLevel, onPreviousLevel, onClose, updateStatusFinal, updateObservacao, onFinalize]);

  return (
    <Dialog open={isOpen} onOpenChange={onClose}>
      <DialogContent className="sm:max-w-4xl border-border bg-gradient-to-br from-background to-background/95 shadow-modal max-h-[95vh] overflow-y-auto">
        <DialogHeader className="relative pb-6">
          <div className={cn(
            "absolute inset-0 bg-gradient-to-r opacity-10 rounded-t-lg",
            levelInfo?.color || "from-gray-500 to-gray-600"
          )} />
          <div className="relative z-10">
            <div className="flex items-center justify-between mb-4">
              <div className="flex items-center gap-4">
                <div className={cn(
                  "p-4 rounded-xl bg-gradient-to-r text-white shadow-lg",
                  levelInfo?.color || "from-gray-500 to-gray-600"
                )}>
                  <Timer className="h-8 w-8" />
                </div>
                <div>
                  <DialogTitle className="text-3xl font-bold bg-gradient-to-r from-foreground to-foreground/70 bg-clip-text text-transparent">
                    {levelInfo?.title || `N√≠vel ${currentLevel}`}
                  </DialogTitle>
                  <p className="text-lg text-muted-foreground mt-1">
                    Chamado {chamado}
                  </p>
                </div>
              </div>
              <Button variant="ghost" size="icon" onClick={onClose} className="rounded-full hover:bg-background/80">
                <X className="h-5 w-5" />
              </Button>
            </div>
            <div className={cn("p-4 rounded-lg border-2", levelInfo?.bgColor || "bg-gray-500/5 border-gray-200")}>
              <p className="text-foreground font-medium">
                {levelInfo?.description || 'Gerenciamento de escala√ß√£o t√©cnica'}
              </p>
            </div>
          </div>
        </DialogHeader>

import json
import os
import pyodbc
import traceback
from datetime import datetime, timedelta

def lambda_handler(event, context):
    print("🟢 Iniciando execução da Lambda...")

    try:
        # --- Lê variáveis de ambiente ---
        server = os.environ["SERVER"]
        user = os.environ["USER"]
        password = os.environ["PASSWORD"]
        database = os.environ["DATABASE"]
        port = os.environ.get("PORT", "1433")

        print(f"ℹ️ Conectando ao banco: {server}:{port} | DB: {database}")

        # --- String de conexão ---
        conn_str = (
            f"DRIVER={{ODBC Driver 18 for SQL Server}};"
            f"SERVER={server},{port};"
            f"DATABASE={database};"
            f"UID={user};"
            f"PWD={password};"
            "Encrypt=yes;"
            "TrustServerCertificate=yes;"
            "Connection Timeout=10;"
        )

        print("🔄 Tentando conectar...")
        conn = pyodbc.connect(conn_str)
        print("✅ Conexão estabelecida com sucesso.")

        cursor = conn.cursor()

        # --- Calcula o intervalo (ontem 18h até hoje 08h) ---
        agora = datetime.now()
        hoje = agora.date()
        ontem = hoje - timedelta(days=1)

        inicio_noite = datetime.combine(ontem, datetime.min.time()).replace(hour=18, minute=0, second=0)
        fim_noite = datetime.combine(hoje, datetime.min.time()).replace(hour=8, minute=0, second=0)

        print(f"🕓 Intervalo filtrado: {inicio_noite} → {fim_noite}")

        # --- Consulta SQL com parâmetros ---
        query = """
        SELECT 
            [rdm],
            [solicitante],
            [requisitante],
            [status],
            [area_afetada],
            [ambiente],
            [resumo],
            [descricao],
            [grupo_executor],
            [executor],
            [depto_grupo_executor],
            [depto_executor],
            [recurso_principal],
            [data_inicio_programacao],
            [data_fim_programacao]
        FROM [mdb].[dbo].[view_ciops_rdm]
        WHERE 
            ([data_inicio_programacao] >= ? AND [data_inicio_programacao] <= ?)
            OR
            ([data_fim_programacao] >= ? AND [data_fim_programacao] <= ?)
        """

        print("📄 Executando query com filtro de período (ontem 18h → hoje 08h)...")
        cursor.execute(query, (inicio_noite, fim_noite, inicio_noite, fim_noite))

        columns = [col[0] for col in cursor.description]
        results = [dict(zip(columns, row)) for row in cursor.fetchall()]

        cursor.close()
        conn.close()

        print(f"✅ Consulta concluída. {len(results)} registros retornados.")

        return {
            "statusCode": 200,
            "headers": {
                "Content-Type": "application/json",
                "Access-Control-Allow-Origin": "*"
            },
            "body": json.dumps(results, default=str)
        }

    except pyodbc.InterfaceError as e:
        print("❌ Erro de interface (provável timeout ou host inacessível):", str(e))
        traceback.print_exc()
        return {
            "statusCode": 504,
            "body": json.dumps({
                "erro": "Timeout ou host inacessível",
                "detalhes": str(e),
                "trace": traceback.format_exc()
            })
        }

    except pyodbc.Error as e:
        print("❌ Erro SQL:", str(e))
        traceback.print_exc()
        return {
            "statusCode": 500,
            "body": json.dumps({
                "erro": "Erro SQL ao executar consulta",
                "detalhes": str(e),
                "trace": traceback.format_exc()
            })
        }

    except Exception as e:
        print("❌ Erro inesperado:", str(e))
        traceback.print_exc()
        return {
            "statusCode": 500,
            "body": json.dumps({
                "erro": "Erro inesperado",
                "detalhes": str(e),
                "trace": traceback.format_exc()
            })
        }

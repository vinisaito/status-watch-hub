import { useState, useEffect, useCallback } from 'react';

interface ChatAcionadoTimestamp {
  chamado: string;
  timestamp: string;
}

export const useChatAcionadosTimestamps = () => {
  const [timestampsData, setTimestampsData] = useState<Map<string, string>>(new Map());
  const [loading, setLoading] = useState(false);

  // Função para buscar timestamps da API chatacionados
  const fetchTimestamps = useCallback(async (retryCount = 0) => {
    try {
      setLoading(true);
      const response = await fetch('https://f6ffk8e9fe.execute-api.us-east-1.amazonaws.com/prod/chatacionados', {
        method: 'GET',
        headers: {
          'Content-Type': 'application/json',
        },
      });

      if (response.ok) {
        const data: ChatAcionadoTimestamp[] = await response.json();
        const timestampsMap = new Map<string, string>();
        
        data.forEach(item => {
          timestampsMap.set(item.chamado, item.timestamp);
        });
        
        setTimestampsData(timestampsMap);
        console.log(`Timestamps carregados: ${data.length} registros`);
      } else if (response.status === 404) {
        // API retorna 404 quando não há dados
        console.log('Nenhum timestamp encontrado na API');
        setTimestampsData(new Map());
      } else {
        throw new Error(`API retornou status: ${response.status}`);
      }
    } catch (error) {
      console.error('Erro ao buscar timestamps:', error);
      
      // Retry até 3 tentativas
      if (retryCount < 3) {
        console.log(`Tentando novamente buscar timestamps... (${retryCount + 1}/3)`);
        setTimeout(() => fetchTimestamps(retryCount + 1), 2000 * (retryCount + 1));
      }
    } finally {
      setLoading(false);
    }
  }, []);

  // Função para obter timestamp formatado de um chamado específico
  const getTimestampForChamado = (chamado: string): string | null => {
    const timestamp = timestampsData.get(chamado);
    if (!timestamp) return null;

    try {
      const date = new Date(timestamp);
      return date.toLocaleString('pt-BR', {
        day: '2-digit',
        month: '2-digit',
        year: 'numeric',
        hour: '2-digit',
        minute: '2-digit',
        second: '2-digit'
      });
    } catch (error) {
      console.error('Erro ao formatar timestamp:', error);
      return timestamp;
    }
  };

  // Função para verificar se um chamado tem timestamp
  const hasTimestamp = (chamado: string): boolean => {
    return timestampsData.has(chamado);
  };

  return {
    timestampsData,
    loading,
    fetchTimestamps,
    getTimestampForChamado,
    hasTimestamp
  };
};

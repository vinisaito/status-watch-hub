import os
import json
import pyodbc

def lambda_handler(event, context):
    # Variáveis de ambiente (definidas na AWS Lambda)
    server = os.environ.get('DB_SERVER')
    database = os.environ.get('DB_NAME')
    username = os.environ.get('DB_USER')
    password = os.environ.get('DB_PASSWORD')
    
    # Conexão com o SQL Server
    conn_str = (
        f'DRIVER={{ODBC Driver 18 for SQL Server}};'
        f'SERVER={server};DATABASE={database};'
        f'UID={username};PWD={password};'
        'Encrypt=no;TrustServerCertificate=yes;'
    )
    
    try:
        conn = pyodbc.connect(conn_str, timeout=30)
        cursor = conn.cursor()
        
        query = """
        SELECT [num_chamado]
              ,[equipe]
              ,[gerente_equipe]
              ,[dpto_equipe]
              ,[coord_dpto_equipe]
              ,[ger_dpto_equipe]
              ,[dpto_ger_equipe]
              ,[severidade]
              ,[dat_abertura]
              ,[dat_status_concluido]
              ,[dat_fechamento]
              ,[data_normalizacao]
              ,[status]
              ,[classificacao]
              ,[dat_estouro_sla]
              ,[num_duracao]
              ,[duracao_sla]
              ,[titulo]
              ,[sla_violado]
          FROM [mdb_rep].[dbo].[sdm_cr_geral_mcs]
          WHERE dat_abertura >= DATEADD(MONTH, -6, GETDATE())
          AND (
               (classificacao = 'Incidente' AND severidade IN ('3 - Média', '4 - Alta', '5 - Crítica'))
            OR (classificacao = 'Solicitação' AND severidade = '4 - Alta')
          )
          ORDER BY num_chamado DESC;
        """
        
        cursor.execute(query)
        
        # Obter nomes das colunas
        columns = [column[0] for column in cursor.description]
        
        # Converter resultados para lista de dicionários
        results = [dict(zip(columns, row)) for row in cursor.fetchall()]
        
        return {
            'statusCode': 200,
            'headers': {'Content-Type': 'application/json'},
            'body': json.dumps(results, default=str)  # default=str para datas
        }
        
    except Exception as e:
        return {
            'statusCode': 500,
            'body': json.dumps({'error': str(e)})
        }
        
    finally:
        try:
            cursor.close()
            conn.close()
        except:
            pass
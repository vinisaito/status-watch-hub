import React, { useState, useEffect, useRef } from "react";

interface TimerData {
  chamado: number;
  durationMinutes: number;
  startedAt?: string;
  timerActive: boolean;
  timeRemaining: number;
}

interface TimerProps {
  chamado: number; // ID do chamado
}

const Timer: React.FC<TimerProps> = ({ chamado }) => {
  const wsRef = useRef<WebSocket | null>(null);
  const intervalRef = useRef<number | null>(null);

  const [timerData, setTimerData] = useState<TimerData>({
    chamado,
    durationMinutes: 15,
    timerActive: false,
    timeRemaining: 15 * 60,
  });

  const [wsReady, setWsReady] = useState(false);

  // Conecta WebSocket
  useEffect(() => {
    const ws = new WebSocket("wss://SEU_ENDPOINT_DO_WEBSOCKET");
    wsRef.current = ws;

    ws.onopen = () => {
      console.log("‚úÖ WebSocket conectado");
      setWsReady(true);
      // Pede estado atual
      ws.send(JSON.stringify({ action: "getState", chamado }));
    };

    ws.onmessage = (event) => {
      try {
        const data = JSON.parse(event.data);
        console.log("üì© Mensagem recebida:", data);

        if (data.type === "TIMER_UPDATED" || data.type === "getState") {
          setTimerData({
            chamado: data.chamado,
            durationMinutes: data.durationMinutes,
            startedAt: data.startedAt,
            timerActive: data.timerActive,
            timeRemaining: data.timeRemaining,
          });
        }
      } catch (err) {
        console.error("‚ùå Erro ao processar mensagem:", err);
      }
    };

    ws.onclose = () => console.log("‚ùå WebSocket desconectado");
    ws.onerror = (err) => console.error("‚ùå WebSocket erro:", err);

    return () => {
      if (intervalRef.current) window.clearInterval(intervalRef.current);
      ws.close();
    };
  }, [chamado]);

  // Atualiza cron√¥metro a cada segundo
  useEffect(() => {
    if (intervalRef.current) window.clearInterval(intervalRef.current);

    if (timerData.timerActive) {
      intervalRef.current = window.setInterval(() => {
        setTimerData((prev) => {
          const newRemaining = Math.max(prev.timeRemaining - 1, 0);
          return { ...prev, timeRemaining: newRemaining };
        });
      }, 1000);
    }

    return () => {
      if (intervalRef.current) window.clearInterval(intervalRef.current);
    };
  }, [timerData.timerActive]);

  const handleStart = () => {
    if (wsReady && wsRef.current && wsRef.current.readyState === WebSocket.OPEN) {
      console.log("‚ñ∂ Enviando startTimer");
      wsRef.current.send(JSON.stringify({ action: "startTimer", chamado }));
    } else {
      console.warn("‚ö† WebSocket ainda n√£o conectado");
    }
  };

  const handlePause = () => {
    if (wsReady && wsRef.current && wsRef.current.readyState === WebSocket.OPEN) {
      console.log("‚è∏ Enviando pauseTimer");
      wsRef.current.send(JSON.stringify({ action: "pauseTimer", chamado }));
    } else {
      console.warn("‚ö† WebSocket ainda n√£o conectado");
    }
  };

  const formatTime = (seconds: number) => {
    const m = Math.floor(seconds / 60);
    const s = seconds % 60;
    return `${m.toString().padStart(2, "0")}:${s.toString().padStart(2, "0")}`;
  };

  return (
    <div>
      <h2>Chamado: {chamado}</h2>
      <p>Tempo restante: {formatTime(timerData.timeRemaining)}</p>
      <p>Status: {timerData.timerActive ? "‚è± Em andamento" : "‚è∏ Pausado"}</p>
      <button onClick={handleStart} disabled={!wsReady}>
        Iniciar
      </button>
      <button onClick={handlePause} disabled={!wsReady}>
        Pausar
      </button>
    </div>
  );
};

export default Timer;

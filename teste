MODERNTIMERMODAL:
import React, { useState, useCallback } from 'react';
import { Dialog, DialogContent, DialogHeader, DialogTitle } from '@/components/ui/dialog';
import { Button } from '@/components/ui/button';
import { Textarea } from '@/components/ui/textarea';
import { Input } from '@/components/ui/input';
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';
import { Label } from '@/components/ui/label';
import { Badge } from '@/components/ui/badge';
import { Separator } from '@/components/ui/separator';
import { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs';
// import { ProgressIndicator } from '@/components/ui/progress-indicator';
// import { TimerDisplay } from '@/components/ui/timer-display';
import { HistoricoAcionamentos } from '@/components/ui/historico-acionamentos';
import { ArrowRight, CheckCircle, X, AlertTriangle, Lightbulb, MessageSquare, Timer, Building2, Users, Clock, User, Phone, History } from 'lucide-react';
import { toast } from '@/hooks/use-toast';
import { cn } from '@/lib/utils';

interface ModernTimerModalProps {
  isOpen: boolean;
  onClose: () => void;
  chamado: number;
  currentLevel: number;
  remainingTime: number;
  chamadoData?: any;
  formatTime: (seconds: number) => string;
  onNextLevel: (chamado: number, level: number, observacao: string) => void;
  updateStatusFinal: (chamado: number, levelStatusKey: string, status: string) => void;
  updateObservacao: (chamado: number, level: number, observacao: string) => void;
  updateAcionamento: (chamado: number, level: number, operador: string, pessoaAcionada: string, statusAcionamento: string) => void;
}

const LEVEL_INFO = {
  1: {
    title: "Primeiro Acionamento",
    subtitle: "",
    nextAction: "Avançar para 1ª Escalação",
    icon: Clock,
    color: "from-blue-500 to-blue-600",
    bgColor: "bg-blue-500/5 border-blue-200",
    description: "Atendimento Inicial da Equipe"
  },
  2: {
    title: "1ª Escalação",
    subtitle: "",
    nextAction: "Avançar para 2ª Escalação",
    icon: Users,
    color: "from-orange-500 to-orange-600",
    bgColor: "bg-orange-500/5 border-orange-200",
    description: "Acionamento do Gestor de Incidente ou Plantonista"
  },
  3: {
    title: "2ª Escalação",
    subtitle: "",
    nextAction: "Avançar para 3ª Escalação",
    icon: Building2,
    color: "from-red-500 to-red-600",
    bgColor: "bg-red-500/5 border-red-200",
    description: "Acionamento do Coordenador"
  },
  4: {
    title: "3ª Escalação",
    subtitle: "",
    nextAction: "Avançar para 4ª Escalação",
    icon: Users,
    color: "from-purple-500 to-purple-600",
    bgColor: "bg-purple-500/5 border-purple-200",
    description: "Acionamento do Gerente"
  },
  5: {
    title: "4ª Escalação",
    subtitle: "",
    nextAction: "Finalizar Chamado",
    icon: Building2,
    color: "from-red-600 to-red-700",
    bgColor: "bg-red-600/5 border-red-300",
    description: "Acionamento do Kleber Costa"
  }
};

export const ModernTimerModal: React.FC<ModernTimerModalProps> = ({
  isOpen,
  onClose,
  chamado,
  currentLevel,
  remainingTime,
  chamadoData,
  formatTime,
  onNextLevel,
  updateStatusFinal,
  updateObservacao,
  updateAcionamento
}) => {
  const [observacao, setObservacao] = useState('');
  const [pessoaAcionada, setPessoaAcionada] = useState('');
  const [statusAtendimento, setStatusAtendimento] = useState('');
  const [operador, setOperador] = useState('');
  const [isProcessing, setIsProcessing] = useState(false);

  const levelStatusKey = `level${currentLevel}_status`;
  const [finalizado, setFinalizado] = useState(
    chamadoData?.statusFinal === "finished" || chamadoData?.[levelStatusKey] === "finished"
  );

  React.useEffect(() => {
    setFinalizado(
      chamadoData?.statusFinal === "finished" || chamadoData?.[levelStatusKey] === "finished"
    );
  }, [chamadoData, levelStatusKey]);

  const levelInfo = finalizado
    ? {
      title: "Chamado Finalizado",
      subtitle: "Processo encerrado com sucesso",
      description: "O chamado foi resolvido e encerrado",
      icon: CheckCircle,
      color: "from-success to-success/90",
      bgColor: "bg-success/5 border-success/20",
      nextAction: "Finalizado"
    }
    : LEVEL_INFO[currentLevel as keyof typeof LEVEL_INFO];

  const validateForm = useCallback(() => {
    const errors = [];

    if (!operador) {
      errors.push("Operador é obrigatório");
    }

    if (!pessoaAcionada.trim()) {
      errors.push("Nome da pessoa acionada é obrigatório");
    } else if (pessoaAcionada.trim().length < 2) {
      errors.push("Nome deve ter pelo menos 2 caracteres");
    }

    if (!statusAtendimento) {
      errors.push("Status de atendimento é obrigatório");
    }

    if (!observacao.trim()) {
      errors.push("Observações são obrigatórias");
    } else if (observacao.trim().length < 10) {
      errors.push("Observações devem ter pelo menos 10 caracteres");
    }

    if (errors.length > 0) {
      toast({
        title: "⚠️ Campos Obrigatórios",
        description: errors.join(". "),
        variant: "destructive",
      });
      return false;
    }

    return true;
  }, [operador, pessoaAcionada, statusAtendimento, observacao]);

  const handleAction = useCallback(async (action: 'next' | 'finish') => {
    if (!validateForm()) return;

    setIsProcessing(true);

    try {
      const fullObservacao = `Operador: ${operador}\nPessoa Acionada: ${pessoaAcionada.trim()}\nStatus: ${statusAtendimento}\n\nDetalhes: ${observacao.trim()}`;

      if (finalizado && action !== 'finish') {
        toast({
          title: "⚠️ Chamado já finalizado",
          description: "Não é possível alterar níveis pois o chamado está finalizado",
          variant: "destructive",
        });
        return;
      }

      switch (action) {
        case 'next': {
          const updates = [
            updateStatusFinal(chamado, levelStatusKey, "finished"),
            updateObservacao(chamado, currentLevel, observacao || ""),
            updateAcionamento(chamado, currentLevel, operador || "", pessoaAcionada || "", statusAtendimento || "")
          ];

          if (currentLevel >= 5) {
            await Promise.all(updates);
            toast({
              title: "✅ Chamado Finalizado",
              description: `Chamado ${chamado} foi finalizado com sucesso!`
            });
          } else {
            await Promise.all(updates);
            await onNextLevel(chamado, currentLevel + 1, observacao || "");

            const nextLevelInfo = LEVEL_INFO[(currentLevel + 1) as keyof typeof LEVEL_INFO];
            toast({
              title: `🚀 ${nextLevelInfo?.title} Iniciado`,
              description: `Timer de 20 minutos iniciado para ${nextLevelInfo?.title}`,
            });
          }
          break;
        }

        case 'finish': {
          const updates = [
            updateStatusFinal(chamado, levelStatusKey, "finished"),
            updateObservacao(chamado, currentLevel, observacao || ""),
            updateAcionamento(chamado, currentLevel, operador || "", pessoaAcionada || "", statusAtendimento || "")
          ];

          await Promise.all(updates);
          setFinalizado(true);
          toast({
            title: "✅ Chamado Finalizado",
            description: `Chamado ${chamado} foi finalizado com sucesso!`,
          });
          break;
        }
      }

      // Reset form
      setObservacao('');
      setPessoaAcionada('');
      setOperador('');
      setStatusAtendimento('');
      onClose();

    } catch (error) {
      console.error("❌ Erro no handleAction:", error);
      toast({
        title: "❌ Erro na Operação",
        description: "Ocorreu um erro ao processar a ação. Verifique os logs.",
        variant: "destructive",
      });
    } finally {
      setIsProcessing(false);
    }
  }, [validateForm, updateAcionamento, pessoaAcionada, statusAtendimento, observacao, currentLevel, chamado, onNextLevel, onClose, updateStatusFinal, updateObservacao, finalizado, levelStatusKey]);

  if (!levelInfo) return null;

  const LevelIcon = levelInfo.icon;
  const isFormValid = operador && pessoaAcionada.trim().length >= 2 && statusAtendimento && observacao.trim().length >= 10;

  return (
    <Dialog open={isOpen} onOpenChange={onClose}>
      <DialogContent className="sm:max-w-6xl max-h-[90vh] overflow-y-auto border-border shadow-modal">
        {/* Header Section */}
        <DialogHeader className="relative pb-8">
          <div className={cn(
            "absolute inset-0 bg-gradient-to-r opacity-5 rounded-t-lg",
            levelInfo.color
          )} />

          <div className="relative z-10 space-y-6">
            <div className="flex flex-col lg:flex-row lg:items-center lg:justify-between gap-6">
              <div className="flex items-center gap-6">
                <div className={cn(
                  "p-4 rounded-2xl bg-gradient-to-r shadow-lg",
                  levelInfo.color,
                  "text-white"
                )}>
                  <LevelIcon className="h-10 w-10" />
                </div>

                <div className="space-y-2">
                  <DialogTitle className="text-3xl lg:text-4xl font-bold text-foreground">
                    {levelInfo.title}
                  </DialogTitle>
                  <p className="text-lg text-muted-foreground">
                    {levelInfo.subtitle}
                  </p>
                  <div className="flex items-center gap-3">
                    <Badge variant="outline" className="text-sm font-medium">
                      Chamado #{chamado}
                    </Badge>
                    <Badge
                      variant={finalizado ? "default" : "secondary"}
                      className={cn(
                        "text-sm font-medium",
                        finalizado && "bg-success text-success-foreground"
                      )}
                    >
                      {finalizado ? "Finalizado" : "Em Andamento"}
                    </Badge>
                    {remainingTime < 0 && (
                      <Badge
                        variant="destructive"
                        className="text-sm font-bold animate-text-flash bg-timer-negative text-white"
                      >
                        🚨 TEMPO EXCEDIDO
                      </Badge>
                    )}
                  </div>
                </div>
              </div>
            </div>

            <div className={cn(
              "p-4 rounded-xl border-l-4",
              levelInfo.bgColor
            )}>
              <p className="text-sm text-muted-foreground">
                {levelInfo.description}
              </p>
              {remainingTime < 0 && (
                <p className="text-timer-negative font-bold animate-text-flash mt-2">
                  ⚠️ O tempo limite foi excedido! Ação urgente necessária.
                </p>
              )}
            </div>
          </div>
        </DialogHeader>

        <Tabs defaultValue="acionamento" className="space-y-6">
          <TabsList className="grid w-full grid-cols-2">
            <TabsTrigger value="acionamento" className="flex items-center gap-2">
              <Phone className="h-4 w-4" />
              Novo Acionamento
            </TabsTrigger>
            <TabsTrigger value="historico" className="flex items-center gap-2">
              <History className="h-4 w-4" />
              Histórico
            </TabsTrigger>
          </TabsList>

          {/* Tab de Novo Acionamento */}
          <TabsContent value="acionamento" className="space-y-8">
            {/* Timer and Progress Section */}
            <div className="grid grid-cols-1 gap-8">
              <div className="p-6 bg-muted/30 rounded-xl border border-border">
                <div className="text-center space-y-2">
                  <div className="text-2xl font-mono font-bold text-foreground">
                    {formatTime(Math.abs(remainingTime))}
                  </div>
                  <p className="text-sm text-muted-foreground">
                    {remainingTime < 0 ? 'Tempo excedido' : 'Tempo restante'}
                  </p>
                </div>
              </div>
            </div>

            <Separator />

            {/* Required Information Section */}
            <div className="space-y-6">
              <div className="flex items-center gap-3">
                <Phone className="h-6 w-6 text-primary" />
                <Label className="text-xl font-semibold text-foreground">
                  Acionamento
                </Label>
              </div>

              <div className="grid grid-cols-1 md:grid-cols-3 gap-6">
                {/* Operador */}
                <div className="space-y-3">
                  <Label htmlFor="operador" className="text-base font-medium flex items-center gap-2">
                    <User className="h-4 w-4" />
                    Operador
                    <span className="text-destructive">*</span>
                  </Label>
                  <Select
                    value={operador}
                    onValueChange={setOperador}
                    disabled={isProcessing || finalizado}
                  >
                    <SelectTrigger className={cn(
                      "border-2 focus:border-primary",
                      operador && "border-success"
                    )}>
                      <SelectValue placeholder="Selecione o operador" />
                    </SelectTrigger>
                    <SelectContent>
                      <SelectItem value="ALBERTO LAGES">ALBERTO LAGES</SelectItem>
                      <SelectItem value="ALEXANDRE LIMA SILVA">ALEXANDRE LIMA SILVA</SelectItem>
                      <SelectItem value="ANSELMO ALVES PESSOA">ANSELMO ALVES PESSOA</SelectItem>
                      <SelectItem value="BRUNO MAZZO FEITOSA">BRUNO MAZZO FEITOSA</SelectItem>
                      <SelectItem value="CAIO CESAR ALVES DA LUZ">CAIO CESAR ALVES DA LUZ</SelectItem>
                      <SelectItem value="CLAUDIA ZORZAN DE CAMARGO">CLAUDIA ZORZAN DE CAMARGO</SelectItem>
                      <SelectItem value="JEFFERSON DA SILVA SOUZA">JEFFERSON DA SILVA SOUZA</SelectItem>
                      <SelectItem value="JULIANA BEATRIZ DE ANGELO">JULIANA BEATRIZ DE ANGELO</SelectItem>
                      <SelectItem value="MARIA LUIZA DOS SANTOS COIADO">MARIA LUIZA DOS SANTOS COIADO</SelectItem>
                      <SelectItem value="RAFAEL NUNES PACHECO">RAFAEL NUNES PACHECO</SelectItem>
                      <SelectItem value="SERGIO ANTONIO DA SILVA">SERGIO ANTONIO DA SILVA</SelectItem>
                      <SelectItem value="VICTOR HUGO ALMEIDA FERNANDES">VICTOR HUGO ALMEIDA FERNANDES</SelectItem>
                      <SelectItem value="VINICIUS RHYU VITURINO SAITO">VINICIUS RHYU VITURINO SAITO</SelectItem>
                    </SelectContent>
                  </Select>
                </div>

                {/* Nome da Pessoa Acionada */}
                <div className="space-y-3">
                  <Label htmlFor="pessoa-acionada" className="text-base font-medium flex items-center gap-2">
                    <User className="h-4 w-4" />
                    Pessoa Acionada
                    <span className="text-destructive">*</span>
                  </Label>
                  <Input
                    id="pessoa-acionada"
                    type="text"
                    value={pessoaAcionada}
                    onChange={(e) => setPessoaAcionada(e.target.value)}
                    placeholder="Ex: João Silva, Maria Santos..."
                    className={cn(
                      "border-2 focus:border-primary transition-all duration-200",
                      pessoaAcionada.trim().length >= 2 && "border-success"
                    )}
                    disabled={isProcessing || finalizado}
                    maxLength={100}
                  />
                </div>

                {/* Status do Atendimento */}
                <div className="space-y-3">
                  <Label htmlFor="status-atendimento" className="text-base font-medium flex items-center gap-2">
                    <CheckCircle className="h-4 w-4" />
                    Status do Atendimento
                    <span className="text-destructive">*</span>
                  </Label>
                  <Select
                    value={statusAtendimento}
                    onValueChange={setStatusAtendimento}
                    disabled={isProcessing || finalizado}
                  >
                    <SelectTrigger className={cn(
                      "border-2 focus:border-primary",
                      statusAtendimento && "border-success"
                    )}>
                      <SelectValue placeholder="Selecione o status do atendimento" />
                    </SelectTrigger>
                    <SelectContent>
                      <SelectItem value="atendido">✅ Atendido</SelectItem>
                      <SelectItem value="nao-atendido">❌ Não Atendido</SelectItem>
                    </SelectContent>
                  </Select>
                </div>
              </div>
            </div>

            <Separator />

            {/* Observations Section */}
            <div className="space-y-6">
              <div className="flex items-center gap-3">
                <MessageSquare className="h-6 w-6 text-primary" />
                <Label htmlFor="observacao" className="text-xl font-semibold text-foreground">
                  Observações
                </Label>
              </div>

              <Textarea
                id="observacao"
                value={observacao}
                onChange={(e) => setObservacao(e.target.value)}
                placeholder="Descreva as informações do acionamento"
                rows={6}
                className={cn(
                  "border-2 focus:border-primary transition-all duration-200 resize-none text-base min-h-[120px]",
                  observacao.trim().length >= 10 && "border-success"
                )}
                disabled={isProcessing || finalizado}
                maxLength={1000}
              />

              <div className="flex justify-between items-center">
                <span className={cn(
                  "text-sm font-medium",
                  observacao.length > 900 ? "text-warning" : "text-muted-foreground"
                )}>
                  {observacao.length}/1000 caracteres
                </span>
                {observacao.trim().length >= 10 && (
                  <div className="flex items-center gap-2 text-success font-medium text-sm">
                    <CheckCircle className="h-4 w-4" />
                    <span>Observação válida</span>
                  </div>
                )}
              </div>
            </div>

            <Separator />

            {/* Action Buttons */}
            <div className="space-y-6">
              <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                {/* Finish Button */}
                <Button
                  variant="secondary"
                  size="lg"
                  onClick={() => handleAction('finish')}
                  disabled={!isFormValid || isProcessing || finalizado}
                  className="h-20"
                >
                  <CheckCircle className="h-6 w-6 mr-3" />
                  <div className="text-left">
                    <div className="font-semibold text-base">Acompanhamento Confirmado</div>
                    <div className="text-sm opacity-90">Finalizar Acompanhamento</div>
                  </div>
                </Button>

                {/* Next Level Button */}
                <Button
                  variant="destructive"
                  size="lg"
                  onClick={() => handleAction('next')}
                  disabled={!isFormValid || isProcessing || finalizado}
                  className={cn(
                    "h-20",
                    remainingTime < 0 && "animate-timer-alert bg-timer-negative hover:bg-timer-negative/90"
                  )}
                >
                  {finalizado ? (
                    <>
                      <CheckCircle className="h-6 w-6 mr-3" />
                      <div className="text-left">
                        <div className="font-semibold text-base">Finalizado</div>
                        <div className="text-sm opacity-90">Chamado encerrado</div>
                      </div>
                    </>
                  ) : currentLevel >= 5 ? (
                    <>
                      <CheckCircle className="h-6 w-6 mr-3" />
                      <div className="text-left">
                        <div className="font-semibold text-base">Concluir Final</div>
                        <div className="text-sm opacity-90">Última escalação</div>
                      </div>
                    </>
                  ) : (
                    <>
                      <ArrowRight className="h-6 w-6 mr-3" />
                      <div className="text-left">
                        <div className="font-semibold text-base">{levelInfo.nextAction}</div>
                        <div className="text-sm opacity-90">Avançar escalação</div>
                      </div>
                    </>
                  )}
                </Button>
              </div>
            </div>

            {/* Guidelines Section */}
            <div className="gradient-modal rounded-2xl p-6 border border-border/50">
              <div className="space-y-4">
                <div className="grid grid-cols-1 md:grid-cols-2 xl:grid-cols-3 gap-6">
                  <div className="space-y-2">
                    <div className="flex items-center gap-2 text-destructive">
                      <AlertTriangle className="h-5 w-5" />
                      <span className="font-semibold">Dados Obrigatórios</span>
                    </div>
                    <p className="text-sm text-muted-foreground">
                      Nome da pessoa, status, operador e observações são campos obrigatórios para prosseguir.
                    </p>
                  </div>

                  <div className="space-y-2">
                    <div className="flex items-center gap-2 text-primary">
                      <Timer className="h-5 w-5" />
                      <span className="font-semibold">Controle de Tempo</span>
                    </div>
                    <p className="text-sm text-muted-foreground">
                      Cada escalação reinicia automaticamente o timer de 20 minutos.
                    </p>
                    {remainingTime < 0 && (
                      <p className="text-timer-negative text-sm font-bold animate-text-flash">
                        ⚠️ Timer excedido! Ação urgente necessária.
                      </p>
                    )}
                  </div>

                  <div className="space-y-2">
                    <div className="flex items-center gap-2 text-success">
                      <CheckCircle className="h-5 w-5" />
                      <span className="font-semibold">Documentação</span>
                    </div>
                    <p className="text-sm text-muted-foreground">
                      Todas as informações são automaticamente registradas no histórico.
                    </p>
                  </div>
                </div>
              </div>
            </div>
          </TabsContent>

          {/* Tab de Histórico */}
          <TabsContent value="historico" className="space-y-6">
            <HistoricoAcionamentos 
              chamadoData={chamadoData}
              currentLevel={currentLevel}
            />
          </TabsContent>
        </Tabs>

        {/* Processing Indicator */}
        {isProcessing && (
          <div className="fixed inset-0 bg-background/80 backdrop-blur-sm flex items-center justify-center z-50">
            <div className="bg-card p-6 rounded-2xl shadow-2xl border border-border">
              <div className="flex items-center gap-3">
                <div className="animate-spin rounded-full h-6 w-6 border-b-2 border-primary"></div>
                <span className="text-lg font-medium">Processando ação...</span>
              </div>
            </div>
          </div>
        )}

      </DialogContent>
    </Dialog>
  );
};


historico-acionamento:
import React from 'react';
import { Badge } from '@/components/ui/badge';
import { Separator } from '@/components/ui/separator';
import { ScrollArea } from '@/components/ui/scroll-area';
import { Clock, Users, Building2, CheckCircle, User, Phone, MessageSquare, AlertTriangle } from 'lucide-react';
import { cn } from '@/lib/utils';
// Definindo a interface localmente já que será passada como prop
interface TimerState {
  chamado: number;
  operador?: string;
  statusFinal?: string;
  level1_timerStart?: string;
  level1_duration?: number;
  level1_status?: 'running' | 'paused' | 'stopped' | 'finished';
  level1_observacao?: string;
  level1_operador?: string;
  level1_pessoaAcionada?: string;
  level1_statusAcionamento?: string;
  level2_timerStart?: string;
  level2_duration?: number;
  level2_status?: 'running' | 'paused' | 'stopped' | 'finished';
  level2_observacao?: string;
  level2_operador?: string;
  level2_pessoaAcionada?: string;
  level2_statusAcionamento?: string;
  level3_timerStart?: string;
  level3_duration?: number;
  level3_status?: 'running' | 'paused' | 'stopped' | 'finished';
  level3_observacao?: string;
  level3_operador?: string;
  level3_pessoaAcionada?: string;
  level3_statusAcionamento?: string;
  level4_timerStart?: string;
  level4_duration?: number;
  level4_status?: 'running' | 'paused' | 'stopped' | 'finished';
  level4_observacao?: string;
  level4_operador?: string;
  level4_pessoaAcionada?: string;
  level4_statusAcionamento?: string;
  level5_timerStart?: string;
  level5_duration?: number;
  level5_status?: 'running' | 'paused' | 'stopped' | 'finished';
  level5_observacao?: string;
  level5_operador?: string;
  level5_pessoaAcionada?: string;
  level5_statusAcionamento?: string;
}

interface HistoricoAcionamentosProps {
  chamadoData?: TimerState;
  currentLevel: number;
  className?: string;
}

const LEVEL_INFO = {
  1: {
    title: "Primeiro Acionamento",
    icon: Clock,
    color: "from-blue-500 to-blue-600",
    bgColor: "bg-blue-500/5 border-blue-200/50",
    description: "Atendimento Inicial da Equipe"
  },
  2: {
    title: "1ª Escalação",
    icon: Users,
    color: "from-orange-500 to-orange-600",
    bgColor: "bg-orange-500/5 border-orange-200/50",
    description: "Acionamento do Gestor de Incidente ou Plantonista"
  },
  3: {
    title: "2ª Escalação",
    icon: Building2,
    color: "from-red-500 to-red-600",
    bgColor: "bg-red-500/5 border-red-200/50",
    description: "Acionamento do Coordenador"
  },
  4: {
    title: "3ª Escalação",
    icon: Users,
    color: "from-purple-500 to-purple-600",
    bgColor: "bg-purple-500/5 border-purple-200/50",
    description: "Acionamento do Gerente"
  },
  5: {
    title: "4ª Escalação",
    icon: Building2,
    color: "from-red-600 to-red-700",
    bgColor: "bg-red-600/5 border-red-300/50",
    description: "Acionamento do Kleber Costa"
  }
};

export const HistoricoAcionamentos: React.FC<HistoricoAcionamentosProps> = ({
  chamadoData,
  currentLevel,
  className
}) => {
  if (!chamadoData) {
    return (
      <div className={cn("text-center py-8", className)}>
        <AlertTriangle className="h-8 w-8 text-muted-foreground mx-auto mb-2" />
        <p className="text-muted-foreground">Nenhum dado disponível</p>
      </div>
    );
  }

  const formatDateTime = (dateString?: string) => {
    if (!dateString) return 'N/A';
    try {
      const date = new Date(dateString);
      return date.toLocaleString('pt-BR', {
        day: '2-digit',
        month: '2-digit',
        year: 'numeric',
        hour: '2-digit',
        minute: '2-digit'
      });
    } catch {
      return 'Data inválida';
    }
  };

  const formatDuration = (duration?: number) => {
    if (!duration) return 'N/A';
    const minutes = Math.floor(duration / 60);
    const seconds = duration % 60;
    return `${minutes}:${seconds.toString().padStart(2, '0')}`;
  };

  const getStatusBadgeVariant = (status?: string) => {
    switch (status) {
      case 'finished': return 'default';
      case 'running': return 'secondary';
      case 'paused': return 'outline';
      case 'stopped': return 'destructive';
      default: return 'outline';
    }
  };

  const getStatusText = (status?: string) => {
    switch (status) {
      case 'finished': return 'Concluído';
      case 'running': return 'Em Andamento';
      case 'paused': return 'Pausado';
      case 'stopped': return 'Parado';
      default: return 'Não Iniciado';
    }
  };

  const getAcionamentoStatusText = (status?: string) => {
    switch (status) {
      case 'atendido': return '✅ Atendido';
      case 'nao-atendido': return '❌ Não Atendido';
      default: return 'Não informado';
    }
  };

  const historico = [];

  // Coleta dados dos níveis de 1 até o atual
  for (let level = 1; level <= Math.max(currentLevel, 1); level++) {
    const levelPrefix = `level${level}` as 'level1' | 'level2' | 'level3' | 'level4' | 'level5';
    const levelInfo = LEVEL_INFO[level as keyof typeof LEVEL_INFO];
    
    if (!levelInfo) continue;

    const timerStart = chamadoData[`${levelPrefix}_timerStart`];
    const duration = chamadoData[`${levelPrefix}_duration`];
    const status = chamadoData[`${levelPrefix}_status`];
    const observacao = chamadoData[`${levelPrefix}_observacao`];
    const operador = chamadoData[`${levelPrefix}_operador`];
    const pessoaAcionada = chamadoData[`${levelPrefix}_pessoaAcionada`];
    const statusAcionamento = chamadoData[`${levelPrefix}_statusAcionamento`];

    // Só adiciona ao histórico se há alguma informação relevante
    if (timerStart || observacao || operador || pessoaAcionada) {
      historico.push({
        level,
        levelInfo,
        timerStart,
        duration,
        status,
        observacao,
        operador,
        pessoaAcionada,
        statusAcionamento
      });
    }
  }

  if (historico.length === 0) {
    return (
      <div className={cn("text-center py-8", className)}>
        <MessageSquare className="h-8 w-8 text-muted-foreground mx-auto mb-2" />
        <p className="text-muted-foreground">Nenhum registro de acionamento encontrado</p>
      </div>
    );
  }

  return (
    <div className={cn("space-y-4", className)}>
      <div className="flex items-center gap-3 mb-6">
        <MessageSquare className="h-6 w-6 text-primary" />
        <h3 className="text-xl font-semibold text-foreground">
          Histórico de Acionamentos
        </h3>
        <Badge variant="outline" className="ml-auto">
          {historico.length} registro{historico.length !== 1 ? 's' : ''}
        </Badge>
      </div>

      <ScrollArea className="h-[400px] pr-4">
        <div className="space-y-4">
          {historico.map((registro, index) => {
            const LevelIcon = registro.levelInfo.icon;
            const isCurrentLevel = registro.level === currentLevel;
            const isCompleted = registro.status === 'finished';

            return (
              <div
                key={registro.level}
                className={cn(
                  "relative p-4 rounded-xl border-l-4 transition-all duration-200",
                  registro.levelInfo.bgColor,
                  isCurrentLevel && "ring-2 ring-primary/20 shadow-md",
                  isCompleted && "opacity-90"
                )}
              >
                {/* Conexão entre cards */}
                {index < historico.length - 1 && (
                  <div className="absolute left-6 -bottom-4 w-0.5 h-4 bg-border" />
                )}

                <div className="flex items-start gap-4">
                  {/* Ícone e Status */}
                  <div className="flex flex-col items-center gap-2">
                    <div className={cn(
                      "p-3 rounded-xl bg-gradient-to-r shadow-sm",
                      registro.levelInfo.color,
                      "text-white"
                    )}>
                      <LevelIcon className="h-5 w-5" />
                    </div>
                    <Badge variant={getStatusBadgeVariant(registro.status)} className="text-xs">
                      {getStatusText(registro.status)}
                    </Badge>
                  </div>

                  {/* Conteúdo */}
                  <div className="flex-1 space-y-3">
                    {/* Header */}
                    <div className="space-y-1">
                      <div className="flex items-center gap-3">
                        <h4 className="font-semibold text-base text-foreground">
                          {registro.levelInfo.title}
                        </h4>
                        {isCurrentLevel && (
                          <Badge variant="secondary" className="text-xs">
                            Atual
                          </Badge>
                        )}
                      </div>
                      <p className="text-sm text-muted-foreground">
                        {registro.levelInfo.description}
                      </p>
                    </div>

                    {/* Informações de tempo */}
                    {registro.timerStart && (
                      <div className="grid grid-cols-1 sm:grid-cols-2 gap-3 text-sm">
                        <div className="flex items-center gap-2">
                          <Clock className="h-4 w-4 text-muted-foreground" />
                          <span className="text-muted-foreground">Início:</span>
                          <span className="font-medium">{formatDateTime(registro.timerStart)}</span>
                        </div>
                        {registro.duration && (
                          <div className="flex items-center gap-2">
                            <Clock className="h-4 w-4 text-muted-foreground" />
                            <span className="text-muted-foreground">Duração:</span>
                            <span className="font-medium">{formatDuration(registro.duration)}</span>
                          </div>
                        )}
                      </div>
                    )}

                    {/* Informações de acionamento */}
                    {(registro.operador || registro.pessoaAcionada || registro.statusAcionamento) && (
                      <div className="space-y-2">
                        <Separator />
                        <div className="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 gap-3 text-sm">
                          {registro.operador && (
                            <div className="flex items-center gap-2">
                              <User className="h-4 w-4 text-muted-foreground" />
                              <span className="text-muted-foreground">Operador:</span>
                              <span className="font-medium truncate">{registro.operador}</span>
                            </div>
                          )}
                          {registro.pessoaAcionada && (
                            <div className="flex items-center gap-2">
                              <Phone className="h-4 w-4 text-muted-foreground" />
                              <span className="text-muted-foreground">Acionado:</span>
                              <span className="font-medium truncate">{registro.pessoaAcionada}</span>
                            </div>
                          )}
                          {registro.statusAcionamento && (
                            <div className="flex items-center gap-2">
                              <CheckCircle className="h-4 w-4 text-muted-foreground" />
                              <span className="text-muted-foreground">Status:</span>
                              <span className="font-medium">
                                {getAcionamentoStatusText(registro.statusAcionamento)}
                              </span>
                            </div>
                          )}
                        </div>
                      </div>
                    )}

                    {/* Observações */}
                    {registro.observacao && (
                      <div className="space-y-2">
                        <Separator />
                        <div className="space-y-1">
                          <div className="flex items-center gap-2">
                            <MessageSquare className="h-4 w-4 text-muted-foreground" />
                            <span className="text-sm font-medium text-muted-foreground">Observações:</span>
                          </div>
                          <div className="bg-muted/30 rounded-lg p-3">
                            <p className="text-sm text-foreground whitespace-pre-line">
                              {registro.observacao}
                            </p>
                          </div>
                        </div>
                      </div>
                    )}
                  </div>
                </div>
              </div>
            );
          })}
        </div>
      </ScrollArea>
    </div>
  );
};


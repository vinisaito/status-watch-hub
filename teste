// src/store/useChamadoStore.ts
import { create } from "zustand";

export interface ChamadoState {
  status: "pending" | "confirmed" | "escalating" | "completed";
  currentLevel: number;
  timeRemaining: number;
  timerActive: boolean;
  observations: string;
  isAttended: boolean;
}

interface ChamadoStore {
  chamados: Record<string, ChamadoState>;
  initChamado: (id: string) => void;
  startChamado: (id: string, duration?: number) => void;
  updateChamado: (id: string, data: Partial<ChamadoState>) => void;
  confirmChamado: (id: string, observations: string) => void;
  escalateChamado: (id: string, level: number) => void;
  completeChamado: (id: string, observations: string) => void;
  tick: () => void;
  reset: () => void;
}

export const useChamadoStore = create<ChamadoStore>((set) => ({
  chamados: {},

  // cria chamado ao clicar em "Iniciar"
  initChamado: (id: string) =>
    set((state) => {
      if (state.chamados[id]) return state; // já existe
      return {
        chamados: {
          ...state.chamados,
          [id]: {
            status: "pending",
            currentLevel: 0,
            timeRemaining: 300, // 5 min default
            timerActive: true,
            observations: "",
            isAttended: false,
          },
        },
      };
    }),

  // inicia manualmente com duração configurável
  startChamado: (id: string, duration: number = 300) =>
    set((state) => ({
      chamados: {
        ...state.chamados,
        [id]: {
          status: "pending",
          currentLevel: 0,
          timeRemaining: duration,
          timerActive: true,
          observations: "",
          isAttended: false,
        },
      },
    })),

  // atualização parcial do chamado
  updateChamado: (id: string, data: Partial<ChamadoState>) =>
    set((state) => ({
      chamados: {
        ...state.chamados,
        [id]: {
          ...state.chamados[id],
          ...data,
        },
      },
    })),

  // confirmar atendimento
  confirmChamado: (id: string, observations: string) =>
    set((state) => ({
      chamados: {
        ...state.chamados,
        [id]: {
          ...state.chamados[id],
          status: "confirmed",
          timerActive: false,
          observations,
        },
      },
    })),

  // escalar chamado
  escalateChamado: (id: string, level: number) =>
    set((state) => ({
      chamados: {
        ...state.chamados,
        [id]: {
          ...state.chamados[id],
          status: "escalating",
          currentLevel: level,
          timerActive: true,
          timeRemaining: 300, // reinicia 5 min
        },
      },
    })),

  // finalizar chamado
  completeChamado: (id: string, observations: string) =>
    set((state) => ({
      chamados: {
        ...state.chamados,
        [id]: {
          ...state.chamados[id],
          status: "completed",
          timerActive: false,
          observations,
        },
      },
    })),

  // decrementa tempo de todos os timers ativos
  tick: () =>
    set((state) => {
      const novos: Record<string, ChamadoState> = {};
      for (const [id, chamado] of Object.entries(state.chamados)) {
        if (chamado.timerActive && chamado.timeRemaining > 0) {
          novos[id] = {
            ...chamado,
            timeRemaining: chamado.timeRemaining - 1,
          };
        } else if (chamado.timerActive && chamado.timeRemaining <= 0) {
          novos[id] = {
            ...chamado,
            timerActive: false,
            timeRemaining: 0,
          };
        } else {
          novos[id] = chamado;
        }
      }
      return { chamados: novos };
    }),

  reset: () => set({ chamados: {} }),
}));

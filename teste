import React, { useEffect, useLayoutEffect, useRef, useState } from "react";
import { ProductLine } from "@/types/rdm";
import { RDMNode } from "./RDMNode";
import { ProductSummary } from "./ProductSummary";

interface RDMTimelineProps {
  productLine: ProductLine;
}

export const RDMTimeline = ({ productLine }: RDMTimelineProps) => {
  const nodesPerRow = 8; // Quantidade de RDMs por linha
  const rows = Math.ceil(productLine.rdms.length / nodesPerRow);
  const containerRef = useRef<HTMLDivElement | null>(null);
  const svgRef = useRef<SVGSVGElement | null>(null);
  const nodeRefs = useRef<Array<HTMLDivElement | null>>([]);
  const [linePositions, setLinePositions] = useState<
    Array<{ x1: number; y1: number; x2: number; y2: number }>
  >([]);

  // Ensure refs array has correct length
  if (nodeRefs.current.length !== productLine.rdms.length) {
    nodeRefs.current = Array(productLine.rdms.length).fill(null);
  }

  // Calculate center positions after layout
  const recalcPositions = () => {
    if (!containerRef.current) return;
    const containerRect = containerRef.current.getBoundingClientRect();
    const positions: Array<{ x: number; y: number; ok: boolean }> = nodeRefs.current.map((el) => {
      if (!el) return { x: 0, y: 0, ok: false };
      const rect = el.getBoundingClientRect();
      return {
        x: rect.left - containerRect.left + rect.width / 2,
        y: rect.top - containerRect.top + rect.height / 2,
        ok: rect.width > 0 && rect.height > 0,
      };
    });

    const lines: Array<{ x1: number; y1: number; x2: number; y2: number }> = [];
    for (let i = 0; i < positions.length - 1; i++) {
      const p1 = positions[i];
      const p2 = positions[i + 1];
      if (p1.ok && p2.ok) {
        lines.push({ x1: p1.x, y1: p1.y, x2: p2.x, y2: p2.y });
      }
    }
    setLinePositions(lines);
  };

  useLayoutEffect(() => {
    recalcPositions();
    // Recalculate on resize to keep alignment
    const onResize = () => recalcPositions();
    window.addEventListener("resize", onResize);
    return () => window.removeEventListener("resize", onResize);
    // eslint-disable-next-line react-hooks/exhaustive-deps
  }, [productLine.rdms.length, nodesPerRow]);
  
  return (
    <div className="mb-12 last:mb-0">
      <div className="mb-6">
        <h3 className="text-lg font-semibold text-foreground">{productLine.name}</h3>
      </div>
      
      <div className="relative w-full mb-4" ref={containerRef}>
        <svg
          ref={svgRef}
          className="absolute inset-0 w-full h-full pointer-events-none"
          style={{ zIndex: 0 }}
        >
          {linePositions.map((pos, index) => (
            <line
              key={`line-${index}`}
              x1={pos.x1}
              y1={pos.y1}
              x2={pos.x2}
              y2={pos.y2}
              stroke={productLine.color}
              strokeWidth={4}
              strokeLinecap="round"
            />
          ))}
        </svg>
        
        {/* Grid de RDMs */}
        <div 
          className="relative grid gap-x-4 gap-y-8 py-8"
          style={{ 
            gridTemplateColumns: `repeat(${nodesPerRow}, 1fr)`,
            minHeight: `${rows * 140}px`,
            zIndex: 1
          }}
        >
          {productLine.rdms.map((rdm, index) => {
            const row = Math.floor(index / nodesPerRow);
            const col = index % nodesPerRow;
            const isRightToLeft = row % 2 === 1;
            const gridCol = isRightToLeft ? nodesPerRow - col : col + 1;
            
            return (
              <div
                key={rdm.id}
                style={{
                  gridColumn: gridCol,
                  gridRow: row + 1
                }}
                className="flex justify-center"
              >
                <RDMNode
                  ref={(el) => (nodeRefs.current[index] = el)}
                  rdm={rdm}
                  color={productLine.color}
                  isFirst={index === 0}
                  isLast={index === productLine.rdms.length - 1}
                />
              </div>
            );
          })}
        </div>
      </div>

      {/* Status Final do Produto */}
      <ProductSummary productLine={productLine} />
    </div>
  );
};

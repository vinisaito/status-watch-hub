// App.jsx
import React, { useEffect, useState, useRef } from "react";

const WS_URL = "wss://cn8i8z6f81.execute-api.us-east-1.amazonaws.com/prod";
const API_URL = "https://cn8i8z6f81.execute-api.us-east-1.amazonaws.com/prod";

function App() {
  const [timers, setTimers] = useState({});
  const ws = useRef(null);

  // Lista de chamados que queremos monitorar
  const chamados = [101, 102, 103]; // substitua pelos seus chamados reais

  // Função para buscar estado atual via REST
  const fetchInitialTimers = async () => {
    const newTimers = {};
    for (const chamado of chamados) {
      try {
        const res = await fetch(`${API_URL}?chamado=${chamado}`, {
          method: "GET",
        });
        if (res.ok) {
          const data = await res.json();
          newTimers[chamado] = data;
        } else {
          console.warn(`Chamado ${chamado} não encontrado`);
        }
      } catch (err) {
        console.error("Erro ao buscar chamado:", chamado, err);
      }
    }
    setTimers(newTimers);
  };

  useEffect(() => {
    fetchInitialTimers();

    ws.current = new WebSocket(WS_URL);

    ws.current.onopen = () => {
      console.log("Conectado ao WebSocket!");
    };

    ws.current.onmessage = (event) => {
      const data = JSON.parse(event.data);
      if (data.type === "TIMER_UPDATED") {
        setTimers((prev) => ({
          ...prev,
          [data.chamado]: data,
        }));
      }
    };

    ws.current.onclose = () => {
      console.log("WebSocket desconectado!");
    };

    return () => {
      ws.current.close();
    };
  }, []);

  const sendAction = (chamado, action) => {
    if (ws.current && ws.current.readyState === WebSocket.OPEN) {
      ws.current.send(JSON.stringify({ action, chamado }));
    }
  };

  const formatTime = (seconds) => {
    const m = Math.floor(seconds / 60);
    const s = seconds % 60;
    return `${String(m).padStart(2, "0")}:${String(s).padStart(2, "0")}`;
  };

  return (
    <div style={{ padding: "2rem", fontFamily: "Arial" }}>
      <h1>Cronômetros em Tempo Real</h1>
      {Object.keys(timers).length === 0 && <p>Carregando chamados...</p>}
      {Object.values(timers).map((timer) => (
        <div
          key={timer.chamado}
          style={{
            border: "1px solid #ccc",
            borderRadius: "8px",
            padding: "1rem",
            marginBottom: "1rem",
            maxWidth: "300px",
          }}
        >
          <h3>Chamado #{timer.chamado}</h3>
          <p>
            Tempo restante: <strong>{formatTime(timer.timeRemaining)}</strong>
          </p>
          <p>Status: {timer.timerActive ? "Ativo" : "Pausado"}</p>
          <button
            onClick={() =>
              sendAction(
                timer.chamado,
                timer.timerActive ? "pauseTimer" : "startTimer"
              )
            }
            style={{ marginRight: "1rem" }}
          >
            {timer.timerActive ? "Pausar" : "Iniciar"}
          </button>
        </div>
      ))}
    </div>
  );
}

export default App;

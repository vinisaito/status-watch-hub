import React, { useState, useEffect, useRef } from "react";

interface TimerProps {
  chamado: number;
}

const Timer: React.FC<TimerProps> = ({ chamado }) => {
  const [timeRemaining, setTimeRemaining] = useState<number>(0);
  const [timerActive, setTimerActive] = useState<boolean>(false);
  const [startedAt, setStartedAt] = useState<string | null>(null);
  const [durationMinutes, setDurationMinutes] = useState<number>(15);

  const ws = useRef<WebSocket | null>(null);

  // Conecta WebSocket
  useEffect(() => {
    ws.current = new WebSocket("wss://<SEU_API_ID>.execute-api.us-east-1.amazonaws.com/dev");
    
    ws.current.onopen = () => console.log("âœ… WebSocket conectado");
    ws.current.onmessage = (event) => {
      const data = JSON.parse(event.data);
      if (data.type === "TIMER_UPDATED" && data.chamado === chamado) {
        setTimerActive(data.timerActive);
        setStartedAt(data.startedAt || null);
        setDurationMinutes(data.durationMinutes || 15);
      }
    };

    return () => ws.current?.close();
  }, [chamado]);

  // Atualiza o tempo restante
  useEffect(() => {
    const interval = setInterval(() => {
      if (timerActive && startedAt) {
        const elapsed = (Date.now() - new Date(startedAt).getTime()) / 1000;
        const remaining = Math.max(0, durationMinutes * 60 - elapsed);
        setTimeRemaining(remaining);
      }
    }, 1000);

    return () => clearInterval(interval);
  }, [timerActive, startedAt, durationMinutes]);

  // Busca estado inicial
  useEffect(() => {
    fetch(`https://<SEU_API_ID>.execute-api.us-east-1.amazonaws.com/dev/getState?chamado=${chamado}`)
      .then((res) => res.json())
      .then((data) => {
        setTimerActive(data.timerActive || false);
        setStartedAt(data.startedAt || null);
        setDurationMinutes(data.durationMinutes || 15);
      })
      .catch(console.error);
  }, [chamado]);

  const sendAction = (action: "startTimer" | "pauseTimer") => {
    if (ws.current && ws.current.readyState === WebSocket.OPEN) {
      ws.current.send(JSON.stringify({ action, chamado }));
    }
  };

  const formatTime = (seconds: number) => {
    const m = Math.floor(seconds / 60);
    const s = Math.floor(seconds % 60);
    return `${String(m).padStart(2, "0")}:${String(s).padStart(2, "0")}`;
  };

  return (
    <div>
      <h3>Painel de Alertas - Chamado {chamado}</h3>
      <p>Tempo restante: {formatTime(timeRemaining)}</p>
      <p>Status: {timerActive ? "Ativo" : "Pausado"}</p>
      <button onClick={() => sendAction("startTimer")}>Iniciar</button>
      <button onClick={() => sendAction("pauseTimer")}>Pausar</button>
    </div>
  );
};

export default Timer;

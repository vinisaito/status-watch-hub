// Timer.tsx
import React, { useEffect, useState, useRef } from "react";

interface Chamado {
  chamado: number;
  timerActive: boolean;
  startedAt?: string;
  durationMinutes: number;
  elapsedSeconds: number;
  timeRemaining: number;
}

interface TimerProps {
  chamadoId: number;
}

export const Timer: React.FC<TimerProps> = ({ chamadoId }) => {
  const [chamado, setChamado] = useState<Chamado | null>(null);
  const [minutes, setMinutes] = useState<number>(0);
  const [seconds, setSeconds] = useState<number>(0);
  const intervalRef = useRef<NodeJS.Timeout | null>(null);

  const API_URL = `https://<api-id>.execute-api.us-east-1.amazonaws.com/prod/chamado/${chamadoId}`;

  // Fun√ß√£o para buscar o estado atual do chamado
  const fetchChamado = async () => {
    try {
      console.log("üåê Buscando estado do chamado...");
      const res = await fetch(API_URL);
      const data: Chamado = await res.json();
      console.log("‚úÖ Estado recebido:", data);

      // Atualiza o estado local
      setChamado(data);
      setMinutes(Math.floor(data.timeRemaining / 60));
      setSeconds(data.timeRemaining % 60);
    } catch (err) {
      console.error("‚ùå Erro ao buscar chamado:", err);
    }
  };

  // Atualiza o cron√¥metro a cada segundo
  useEffect(() => {
    if (!chamado) return;

    if (intervalRef.current) clearInterval(intervalRef.current);

    if (chamado.timerActive) {
      intervalRef.current = setInterval(() => {
        setSeconds((prevSec) => {
          let total = minutes * 60 + prevSec - 1;
          if (total < 0) total = 0;
          setMinutes(Math.floor(total / 60));
          return total % 60;
        });
      }, 1000);
    }

    return () => {
      if (intervalRef.current) clearInterval(intervalRef.current);
    };
  }, [chamado]);

  // Fun√ß√µes para iniciar e pausar (REST API para atualizar Lambda)
  const handleStart = async () => {
    if (!chamado) return;
    try {
      console.log("‚ñ∂Ô∏è Enviando startTimer...");
      await fetch(`https://<api-id>.execute-api.us-east-1.amazonaws.com/prod/sendMessage`, {
        method: "POST",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify({ action: "startTimer", chamado: chamado.chamado }),
      });
      console.log("‚úÖ StartTimer enviado");
      await fetchChamado();
    } catch (err) {
      console.error("‚ùå Erro ao iniciar timer:", err);
    }
  };

  const handlePause = async () => {
    if (!chamado) return;
    try {
      console.log("‚è∏Ô∏è Enviando pauseTimer...");
      await fetch(`https://<api-id>.execute-api.us-east-1.amazonaws.com/prod/sendMessage`, {
        method: "POST",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify({ action: "pauseTimer", chamado: chamado.chamado }),
      });
      console.log("‚úÖ PauseTimer enviado");
      await fetchChamado();
    } catch (err) {
      console.error("‚ùå Erro ao pausar timer:", err);
    }
  };

  // Carrega estado inicial
  useEffect(() => {
    fetchChamado();
  }, []);

  return (
    <div style={{ fontFamily: "sans-serif", textAlign: "center" }}>
      <h2>Chamado #{chamadoId}</h2>
      <div style={{ fontSize: "2rem", margin: "20px 0" }}>
        {minutes.toString().padStart(2, "0")}:
        {seconds.toString().padStart(2, "0")}
      </div>
      <div>Status: {chamado?.timerActive ? "Ativo" : "Pausado"}</div>
      <div style={{ marginTop: "20px" }}>
        <button onClick={handleStart} style={{ marginRight: "10px" }}>
          Iniciar
        </button>
        <button onClick={handlePause}>Pausar</button>
      </div>
    </div>
  );
};

import React, { useEffect, useState } from "react";

function Timer() {
  const [data, setData] = useState([]);
  const [loading, setLoading] = useState(true);

  // üîπ Buscar dados da API
  const fetchData = async () => {
    try {
      const res = await fetch(
        "https://f6ffk8e9fe.execute-api.us-east-1.amazonaws.com/prod/acompanhamento"
      );
      const json = await res.json();
      setData(json);
      setLoading(false);
    } catch (err) {
      console.error("Erro ao buscar API", err);
    }
  };

  // üîπ Iniciar cron√¥metro
  const startTimer = async (chamadoId) => {
    const payload = {
      chamado: chamadoId,
      startedAt: new Date().toISOString(),
      durationMinutes: 30, // Altere a dura√ß√£o como quiser
      timerActive: true,
    };

    try {
      await fetch(
        "https://f6ffk8e9fe.execute-api.us-east-1.amazonaws.com/prod/acompanhamento",
        {
          method: "PATCH", // ou PUT/POST, conforme sua API
          headers: { "Content-Type": "application/json" },
          body: JSON.stringify(payload),
        }
      );
      fetchData(); // Atualiza lista
    } catch (err) {
      console.error("Erro ao iniciar cron√¥metro", err);
    }
  };

  useEffect(() => {
    fetchData();
    const interval = setInterval(fetchData, 5000);
    return () => clearInterval(interval);
  }, []);

  if (loading) return <p>Carregando...</p>;

  return (
    <div className="p-4">
      <h2 className="text-xl font-bold">Chamados</h2>
      <ul className="space-y-4 mt-4">
        {data.map((chamado) => (
          <li
            key={chamado.chamado}
            className="border rounded-xl p-4 shadow bg-white"
          >
            <h3 className="font-bold">Chamado: {chamado.chamado}</h3>
            <p>Status: {chamado.status}</p>
            <p>Operador: {chamado.operador}</p>
            <TimerDisplay chamado={chamado} />

            {/* üîπ Bot√£o Iniciar */}
            {!chamado.timerActive && (
              <button
                onClick={() => startTimer(chamado.chamado)}
                className="mt-2 px-4 py-2 bg-green-600 text-white rounded-lg"
              >
                Iniciar Cron√¥metro
              </button>
            )}
          </li>
        ))}
      </ul>
    </div>
  );
}

function TimerDisplay({ chamado }) {
  const [timeLeft, setTimeLeft] = useState(0);

  useEffect(() => {
    if (!chamado.startedAt || !chamado.durationMinutes) return;

    const startedAt = new Date(chamado.startedAt).getTime();
    const durationMs = chamado.durationMinutes * 60 * 1000;

    const update = () => {
      const now = Date.now();
      const diff = startedAt + durationMs - now;
      setTimeLeft(diff > 0 ? diff : 0);
    };

    update();
    const interval = setInterval(update, 1000);
    return () => clearInterval(interval);
  }, [chamado.startedAt, chamado.durationMinutes]);

  if (!chamado.timerActive) {
    return <p className="text-red-500">‚è∏ Pausado</p>;
  }

  const minutes = Math.floor(timeLeft / 60000);
  const seconds = Math.floor((timeLeft % 60000) / 1000);

  return (
    <p className="text-green-600 font-mono text-lg">
      ‚è± {minutes.toString().padStart(2, "0")}:
      {seconds.toString().padStart(2, "0")}
    </p>
  );
}

export default Timer;

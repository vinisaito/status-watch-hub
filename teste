import json
import boto3
import os
import decimal
from datetime import datetime

dynamodb = boto3.resource("dynamodb")
connections_table = dynamodb.Table(os.environ["CONNECTIONS_TABLE"])
chamados_table = dynamodb.Table(os.environ["CHAMADOS_TABLE"])

# ----------------------
# Encoder para Decimal ‚Üí int/float
# ----------------------
class DecimalEncoder(json.JSONEncoder):
    def default(self, o):
        if isinstance(o, decimal.Decimal):
            return int(o) if o % 1 == 0 else float(o)
        return super(DecimalEncoder, self).default(o)

def to_json(data):
    return json.dumps(data, cls=DecimalEncoder)

# ----------------------
# Lambda handler
# ----------------------
def lambda_handler(event, context):
    route = event["requestContext"]["routeKey"]

    if route == "$connect":
        return on_connect(event)
    elif route == "$disconnect":
        return on_disconnect(event)
    elif route == "startTimer":
        return start_timer(event)
    elif route == "updateStatus":
        return update_status(event)
    else:
        return {"statusCode": 400}

# ----------------------
# Conectar
# ----------------------
def on_connect(event):
    connection_id = event["requestContext"]["connectionId"]
    connections_table.put_item(
        Item={
            "connectionId": connection_id,
            "connectedAt": int(datetime.utcnow().timestamp())
        }
    )
    print(f"[DEBUG] Conex√£o registrada: {connection_id}")

    # Envia estado atual dos chamados para o novo cliente
    apigw = boto3.client(
        "apigatewaymanagementapi",
        endpoint_url=os.environ["WS_ENDPOINT"]
    )
    response = chamados_table.scan()
    print(f"[DEBUG] Estado atual: {response.get('Items', [])}")

    for item in response.get("Items", []):
        try:
            apigw.post_to_connection(
                Data=to_json({
                    "action": "currentState",
                    "chamado": int(item["chamado"]),
                    "status": str(item.get("status", "pendente")),
                    "timerStart": int(item["timerStart"]) if "timerStart" in item else None
                }),
                ConnectionId=connection_id
            )
        except apigw.exceptions.GoneException:
            print(f"[WARN] Conex√£o {connection_id} est√° morta, removendo.")
            connections_table.delete_item(Key={"connectionId": connection_id})
        except Exception as e:
            print(f"Erro ao enviar estado inicial para {connection_id}: {e}")

    return {"statusCode": 200}

# ----------------------
# Desconectar
# ----------------------
def on_disconnect(event):
    connection_id = event["requestContext"]["connectionId"]
    connections_table.delete_item(Key={"connectionId": connection_id})
    print(f"[DEBUG] Conex√£o removida: {connection_id}")
    return {"statusCode": 200}

# ----------------------
# Iniciar Timer
# ----------------------
def start_timer(event):
    body = json.loads(event["body"])
    chamado = int(body["chamado"])
    timer_start = int(datetime.utcnow().timestamp() * 1000)  # milissegundos

    # Salva no DynamoDB
    chamados_table.put_item(
        Item={
            "chamado": chamado,
            "timerStart": timer_start,
            "status": "pendente"
        }
    )
    print(f"[DEBUG] Chamado salvo: {chamado} - timerStart={timer_start}")

    # Broadcast para todos os clientes
    broadcast({
        "action": "timerStarted",
        "chamado": chamado,
        "timerStart": timer_start
    })

    return {"statusCode": 200}

# ----------------------
# Atualizar Status
# ----------------------
def update_status(event):
    body = json.loads(event["body"])
    chamado = int(body["chamado"])
    status = body["status"]

    chamados_table.update_item(
        Key={"chamado": chamado},
        UpdateExpression="SET #s = :s",
        ExpressionAttributeNames={"#s": "status"},
        ExpressionAttributeValues={":s": status}
    )
    print(f"[DEBUG] Status atualizado: {chamado} -> {status}")

    broadcast({
        "action": "statusUpdated",
        "chamado": chamado,
        "status": status
    })

    return {"statusCode": 200}

# ----------------------
# Envio para todos
# ----------------------
def broadcast(message):
    apigw = boto3.client(
        "apigatewaymanagementapi",
        endpoint_url=os.environ["WS_ENDPOINT"]
    )

    connections = connections_table.scan().get("Items", [])
    print(f"[DEBUG] Enviando para {len(connections)} conex√µes")

    for conn in connections:
        try:
            apigw.post_to_connection(
                Data=to_json(message),
                ConnectionId=conn["connectionId"]
            )
        except apigw.exceptions.GoneException:
            print(f"[WARN] Conex√£o {conn['connectionId']} est√° morta, removendo.")
            connections_table.delete_item(Key={"connectionId": conn["connectionId"]})
        except Exception as e:
            print(f"Erro ao enviar para {conn['connectionId']}: {e}")

    return {"statusCode": 200}





import React, { useEffect, useState, useRef } from "react";

interface MessageData {
  action: string;
  chamado?: number;
  timerStart?: number;
  status?: string;
}

const Timer: React.FC = () => {
  const [time, setTime] = useState<number>(0);
  const [status, setStatus] = useState<string>("pendente");
  const [chamadoId, setChamadoId] = useState<number | null>(null);
  const timerStartRef = useRef<number | null>(null);
  const wsRef = useRef<WebSocket | null>(null);

  useEffect(() => {
    const ws = new WebSocket("wss://SEU_ENDPOINT.execute-api.REGIAO.amazonaws.com/prod");
    wsRef.current = ws;

    ws.onopen = () => {
      console.log("‚úÖ Conectado ao WebSocket");
    };

    ws.onmessage = (event) => {
      try {
        const data: MessageData = JSON.parse(event.data);
        console.log("üì© Mensagem recebida:", data);

        if (data.action === "timerStarted") {
          timerStartRef.current = data.timerStart ?? null;
          setChamadoId(data.chamado ?? null);
        } else if (data.action === "statusUpdated") {
          setStatus(data.status ?? "pendente");
        } else if (data.action === "currentState") {
          timerStartRef.current = data.timerStart ?? null;
          setChamadoId(data.chamado ?? null);
          setStatus(data.status ?? "pendente");
        }
      } catch (err) {
        console.warn("Mensagem n√£o era JSON, ignorada:", event.data);
      }
    };

    ws.onclose = () => {
      console.log("‚ùå Conex√£o WebSocket fechada");
    };

    return () => {
      ws.close();
    };
  }, []);

  // Atualiza cron√¥metro a cada segundo
  useEffect(() => {
    const interval = setInterval(() => {
      if (timerStartRef.current) {
        const elapsed = Math.floor((Date.now() - timerStartRef.current) / 1000);
        setTime(elapsed);
      }
    }, 1000);

    return () => clearInterval(interval);
  }, []);

  const startTimer = () => {
    if (wsRef.current && wsRef.current.readyState === WebSocket.OPEN) {
      wsRef.current.send(
        JSON.stringify({
          action: "startTimer",
          chamado: 1, // exemplo fixo, ajuste conforme sua l√≥gica
        })
      );
    }
  };

  const updateStatus = (newStatus: string) => {
    if (wsRef.current && wsRef.current.readyState === WebSocket.OPEN) {
      wsRef.current.send(
        JSON.stringify({
          action: "updateStatus",
          chamado: chamadoId ?? 1,
          status: newStatus,
        })
      );
    }
  };

  return (
    <div className="p-4 rounded-xl shadow-md bg-white">
      <h2 className="text-xl font-bold mb-2">‚è± Timer</h2>
      <p>Chamado: {chamadoId ?? "-"}</p>
      <p>Status: {status}</p>
      <p>Tempo: {time}s</p>

      <div className="flex gap-2 mt-4">
        <button
          onClick={startTimer}
          className="px-4 py-2 bg-green-500 text-white rounded-lg shadow"
        >
          Iniciar Timer
        </button>
        <button
          onClick={() => updateStatus("acionado")}
          className="px-4 py-2 bg-blue-500 text-white rounded-lg shadow"
        >
          Acionado
        </button>
        <button
          onClick={() => updateStatus("escalado")}
          className="px-4 py-2 bg-red-500 text-white rounded-lg shadow"
        >
          Escalado
        </button>
      </div>
    </div>
  );
};

export default Timer;

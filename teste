const handleAction = useCallback(async (action: 'next' | 'finish') => {
  if (!validateForm()) return;

  setIsProcessing(true);

  try {
    if (finalizado && action !== 'finish') {
      toast({
        title: "‚ö†Ô∏è Chamado j√° finalizado",
        description: "N√£o √© poss√≠vel alterar n√≠veis pois o chamado est√° finalizado",
        variant: "destructive",
      });
      return;
    }

    switch (action) {
      case 'next': {
        const currentLevelKey = `statusNivel${currentLevel}`; // üîπ gera chave din√¢mica
        const updates = [
          updateStatusFinal(chamado, currentLevelKey, "finished"), // üîπ fecha n√≠vel atual
          updateObservacao(chamado, currentLevel, observacao || ""),
          updateAcionamento(chamado, currentLevel, operador || "", pessoaAcionada || "", statusAtendimento || "")
        ];

        await Promise.all(updates);

        if (currentLevel >= 5) {
          toast({
            title: "üöÄ √öltima Escala√ß√£o",
            description: `Chamado ${chamado} chegou ao √∫ltimo n√≠vel.`,
          });
        } else {
          await onNextLevel(chamado, currentLevel + 1, observacao || "");

          const nextLevelInfo = LEVEL_INFO[(currentLevel + 1) as keyof typeof LEVEL_INFO];
          toast({
            title: `üöÄ ${nextLevelInfo?.title} Iniciado`,
            description: `Timer de 20 minutos iniciado para ${nextLevelInfo?.title}`,
          });
        }
        break;
      }

      case 'finish': {
        const updates = [
          updateStatusFinal(chamado, levelStatusKey, "finished"), // üîπ s√≥ marca o statusFinal
          updateObservacao(chamado, currentLevel, observacao || ""),
          updateAcionamento(chamado, currentLevel, operador || "", pessoaAcionada || "", statusAtendimento || "")
        ];

        await Promise.all(updates);
        setFinalizado(true);
        toast({
          title: "‚úÖ Chamado Finalizado",
          description: `Chamado ${chamado} foi finalizado com sucesso!`,
        });
        break;
      }
    }

    // Reset form
    setObservacao('');
    setPessoaAcionada('');
    setOperador('');
    setStatusAtendimento('');
    onClose();

  } catch (error) {
    console.error("‚ùå Erro no handleAction:", error);
    toast({
      title: "‚ùå Erro na Opera√ß√£o",
      description: "Ocorreu um erro ao processar a a√ß√£o. Verifique os logs.",
      variant: "destructive",
    });
  } finally {
    setIsProcessing(false);
  }
}, [
  validateForm,
  updateAcionamento,
  pessoaAcionada,
  statusAtendimento,
  observacao,
  currentLevel,
  chamado,
  onNextLevel,
  onClose,
  updateStatusFinal,
  updateObservacao,
  finalizado,
  levelStatusKey
]);

import { create } from "zustand";

export type ChamadoStatus = "pending" | "confirmed" | "escalating" | "completed";

export interface ChamadoState {
  id: number;
  status: ChamadoStatus;
  observations: string;
  timeRemaining: number;
  timerActive: boolean;
  currentLevel: number;
  isAttended: boolean;
}

interface ChamadoStore {
  chamados: Record<number, ChamadoState>;
  initChamado: (id: number) => void;
  startChamado: (id: number) => void;
  confirmChamado: (id: number, obs: string) => void;
  escalateChamado: (id: number, newLevel: number) => void;
  tick: () => void;
}

export const useChamadoStore = create<ChamadoStore>((set, get) => ({
  chamados: {},

  initChamado: (id) =>
    set((state) => {
      if (state.chamados[id]) return state;
      return {
        chamados: {
          ...state.chamados,
          [id]: {
            id,
            status: "pending",
            observations: "",
            timeRemaining: 300, // 5min default
            timerActive: false,
            currentLevel: 0,
            isAttended: false,
          },
        },
      };
    }),

  startChamado: (id) =>
    set((state) => {
      const chamado = state.chamados[id];
      if (!chamado) return state;
      return {
        chamados: {
          ...state.chamados,
          [id]: {
            ...chamado,
            timerActive: true,
            status: "pending",
          },
        },
      };
    }),

  confirmChamado: (id, obs) =>
    set((state) => {
      const chamado = state.chamados[id];
      if (!chamado) return state;
      return {
        chamados: {
          ...state.chamados,
          [id]: {
            ...chamado,
            status: "confirmed",
            observations: obs,
            timerActive: false,
          },
        },
      };
    }),

  escalateChamado: (id, newLevel) =>
    set((state) => {
      const chamado = state.chamados[id];
      if (!chamado) return state;
      return {
        chamados: {
          ...state.chamados,
          [id]: {
            ...chamado,
            status: "escalating",
            currentLevel: newLevel,
            timerActive: true,
            timeRemaining: 300, // reinicia para 5min cada nível
          },
        },
      };
    }),

  tick: () =>
    set((state) => {
      const novos: Record<number, ChamadoState> = {};
      for (const [idStr, chamado] of Object.entries(state.chamados)) {
        const id = Number(idStr);
        if (chamado.timerActive && chamado.timeRemaining > 0) {
          novos[id] = {
            ...chamado,
            timeRemaining: chamado.timeRemaining - 1,
          };
        } else if (chamado.timerActive && chamado.timeRemaining <= 0) {
          novos[id] = {
            ...chamado,
            timerActive: false,
            timeRemaining: 0,
          };
        } else {
          novos[id] = chamado;
        }
      }
      return { chamados: novos };
    }),
}));

// roda o timer globalmente
setInterval(() => {
  useChamadoStore.getState().tick();
}, 1000);



























import { useEffect, useMemo, useState } from "react";
import { Button } from "@/components/ui/button";
import { Badge } from "@/components/ui/badge";
import { Label } from "@/components/ui/label";
import { Textarea } from "@/components/ui/textarea";
import {
  Select,
  SelectContent,
  SelectItem,
  SelectTrigger,
  SelectValue,
} from "@/components/ui/select";
import {
  Check,
  Clock,
  Play,
  CheckCircle,
  FastForward,
  RotateCcw,
  X,
} from "lucide-react";
import { AlertData } from "@/types/ActionTable";
import { useTimer } from "@/hooks/UseTimer";
import { useChamadoStore, ChamadoState } from "@/store/useChamadoStore";

interface ConfirmationColumnProps {
  alert: AlertData;
}

export const ConfirmationColumn = ({ alert }: ConfirmationColumnProps) => {
  const { formatTime } = useTimer();
  const {
    initChamado,
    startChamado,
    confirmChamado,
    escalateChamado,
    chamados,
  } = useChamadoStore();

  // pega o id do chamado
  const chamadoId = useMemo(() => {
    const raw = (alert as any)?.chamado ?? (alert as any)?.id;
    const n = Number(String(raw ?? "").trim());
    return Number.isFinite(n) ? n : null;
  }, [alert]);

  useEffect(() => {
    if (chamadoId !== null) {
      initChamado(chamadoId);
    }
  }, [chamadoId, initChamado]);

  const chamado: ChamadoState | undefined =
    chamadoId !== null ? chamados[chamadoId] : undefined;

  const [observation, setObservation] = useState("");
  const [pendingObs, setPendingObs] = useState("");
  const [pendingStatus, setPendingStatus] = useState<string>("");

  if (chamadoId === null) {
    return <div className="text-xs text-destructive">Chamado inválido</div>;
  }

  if (!chamado) {
    return (
      <div className="text-center">
        <Button
          size="sm"
          variant="outline"
          onClick={() => startChamado(chamadoId)}
          className="h-8 px-3 text-xs"
        >
          <Play className="h-3 w-3 mr-1" />
          Iniciar
        </Button>
      </div>
    );
  }

  const levelNames = { 1: "1ª", 2: "2ª", 3: "3ª", 4: "4ª" } as const;

  switch (chamado.status) {
    case "pending":
      return (
        <div className="text-center space-y-3">
          <div className="flex items-center justify-center gap-2">
            <Clock className="h-4 w-4 text-warning" />
            <span
              className="text-sm font-mono font-bold"
              style={{
                color:
                  chamado.timeRemaining <= 60 ? "#ef4444" : "#f59e0b",
              }}
            >
              {formatTime(chamado.timeRemaining)}
            </span>
            {chamado.timerActive && (
              <div className="w-2 h-2 bg-green-500 rounded-full animate-pulse"></div>
            )}
          </div>

          <div className="space-y-2">
            <Label className="text-xs">
              Observações <span className="text-destructive">*</span>
            </Label>
            <Textarea
              placeholder="Observações são obrigatórias"
              value={observation}
              onChange={(e) => setObservation(e.target.value)}
              className="text-xs min-h-[60px]"
            />

            <div className="flex gap-1">
              <Button
                size="sm"
                variant="default"
                onClick={() => confirmChamado(chamadoId, observation)}
                disabled={!observation.trim()}
                className="h-8 px-3 text-xs flex-1"
              >
                <Check className="h-3 w-3 mr-1" />
                Confirmar
              </Button>
              <Button
                size="sm"
                variant="secondary"
                onClick={() => escalateChamado(chamadoId, 1)}
                className="h-8 px-3 text-xs flex-1"
              >
                <FastForward className="h-3 w-3 mr-1" />
                Próxima Etapa
              </Button>
            </div>
          </div>
        </div>
      );

    case "confirmed":
      return (
        <div className="text-center space-y-2">
          <Badge variant="default" className="bg-green-600 text-white">
            <CheckCircle className="h-3 w-3 mr-1" />
            Confirmado
          </Badge>
        </div>
      );

    case "escalating":
      return (
        <div className="space-y-2">
          <Badge variant="destructive" className="text-xs">
            {levelNames[chamado.currentLevel as 1 | 2 | 3 | 4]} Escalação
          </Badge>
          <div className="flex items-center justify-center gap-1 mt-1">
            <Clock className="h-3 w-3 text-warning" />
            <span
              className="text-xs font-mono font-bold"
              style={{
                color:
                  chamado.timeRemaining <= 60 ? "#ef4444" : "#f59e0b",
              }}
            >
              {formatTime(chamado.timeRemaining)}
            </span>
            <div className="w-2 h-2 bg-green-500 rounded-full animate-pulse"></div>
          </div>
        </div>
      );

    case "completed":
      return (
        <div className="text-center">
          <Badge variant="default" className="bg-green-600 text-white">
            <CheckCircle className="h-3 w-3 mr-1" />
            Finalizado
          </Badge>
        </div>
      );

    default:
      return null;
  }
};

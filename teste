import React, { useEffect, useState, useRef } from "react";

const API_BASE = "https://f6ffk8e9fe.execute-api.us-east-1.amazonaws.com/prod"; // REST para buscar alertas
const WS_ENDPOINT = "wss://SEU_ENDPOINT.execute-api.us-east-1.amazonaws.com/prod"; // substituir pelo seu WebSocket

interface Alert {
  chamado: string;
  timerActive: boolean;
  startedAt?: string;
  durationMinutes?: number;
  localTimeRemaining?: number;
}

export default function Timer() {
  const [alerts, setAlerts] = useState<Alert[]>([]);
  const ws = useRef<WebSocket | null>(null);

  // Conecta WebSocket
  useEffect(() => {
    ws.current = new WebSocket(WS_ENDPOINT);

    ws.current.onopen = () => console.log("✅ WebSocket conectado");
    ws.current.onmessage = (msg) => {
      const data = JSON.parse(msg.data);
      if (data.type === "updateTimer") {
        setAlerts((prev) =>
          prev.map((alert) =>
            alert.chamado === data.chamado
              ? {
                  ...alert,
                  timerActive: data.timerActive,
                  startedAt: data.startedAt ?? alert.startedAt,
                }
              : alert
          )
        );
      }
    };
    ws.current.onerror = (err) => console.error("WebSocket erro:", err);
    ws.current.onclose = () => console.log("❌ WebSocket desconectado");

    return () => ws.current?.close();
  }, []);

  // Buscar alertas do REST API
  const fetchAlerts = () => {
    fetch(`${API_BASE}/dados`)
      .then((res) => res.json())
      .then((data) =>
        setAlerts(
          data.map((alert: any) => ({
            ...alert,
            localTimeRemaining: alert.timeRemaining ?? 0,
            timerActive: alert.timerActive ?? false,
          }))
        )
      )
      .catch(console.error);
  };

  useEffect(() => fetchAlerts(), []);

  // Atualiza cronômetro a cada segundo
  useEffect(() => {
    const interval = setInterval(() => {
      setAlerts((prev) =>
        prev.map((alert) => {
          if (alert.timerActive && alert.startedAt) {
            const startedAt = new Date(alert.startedAt).getTime();
            const durationMs = (alert.durationMinutes ?? 15) * 60 * 1000;
            const elapsed = Date.now() - startedAt;
            const remaining = Math.max(0, durationMs - elapsed);
            return { ...alert, localTimeRemaining: Math.floor(remaining / 1000) };
          }
          return alert;
        })
      );
    }, 1000);
    return () => clearInterval(interval);
  }, [alerts]);

  // Envia ação para WebSocket
  const sendAction = (chamado: string | number, action: "startTimer" | "pauseTimer") => {
    if (!ws.current || ws.current.readyState !== WebSocket.OPEN) {
      console.log("WebSocket não conectado ainda");
      return;
    }
    ws.current.send(JSON.stringify({ action, chamado }));
  };

  return (
    <div style={{ padding: "20px" }}>
      <h1>Painel de Alertas</h1>
      {alerts.map((alert) => (
        <div key={alert.chamado} style={{ border: "1px solid #ccc", padding: "10px", marginBottom: "10px" }}>
          <p><strong>Chamado:</strong> {alert.chamado}</p>
          <p>
            <strong>Tempo restante:</strong>{" "}
            {Math.floor((alert.localTimeRemaining ?? 0) / 60)
              .toString()
              .padStart(2, "0")}
            :
            {((alert.localTimeRemaining ?? 0) % 60).toString().padStart(2, "0")}
          </p>
          <p><strong>Status:</strong> {alert.timerActive ? "Rodando" : "Pausado"}</p>
          <button onClick={() => sendAction(alert.chamado, "startTimer")} disabled={alert.timerActive}>
            Iniciar
          </button>
          <button onClick={() => sendAction(alert.chamado, "pauseTimer")} disabled={!alert.timerActive}>
            Pausar
          </button>
        </div>
      ))}
    </div>
  );
}

import React from 'react';
import { Check, Clock, Users, Shield, AlertTriangle } from 'lucide-react';
import { cn } from '@/lib/utils';

interface ProgressIndicatorProps {
  currentLevel: number;
  className?: string;
}

const LEVEL_CONFIG = {
  1: { icon: Clock, label: "1º Acionamento", color: "bg-blue-500" },
  2: { icon: Users, label: "1ª Escalação", color: "bg-orange-500" },
  3: { icon: Shield, label: "2ª Escalação", color: "bg-red-500" },
  4: { icon: AlertTriangle, label: "3ª Escalação", color: "bg-purple-500" },
  5: { icon: AlertTriangle, label: "4ª Escalação", color: "bg-red-700" },
};

export const ProgressIndicator: React.FC<ProgressIndicatorProps> = ({ 
  currentLevel, 
  className 
}) => {
  return (
    <div className={cn("space-y-4", className)}>
      <div className="text-sm font-medium text-foreground">Progresso da Escalação</div>
      
      {/* Progress Bar */}
      <div className="relative">
        <div className="flex items-center justify-between">
          {[1, 2, 3, 4, 5].map((level) => {
            const config = LEVEL_CONFIG[level as keyof typeof LEVEL_CONFIG];
            const IconComponent = config.icon;
            const isActive = level === currentLevel;
            const isCompleted = level < currentLevel;
            
            return (
              <div key={level} className="flex flex-col items-center relative">
                <div 
                  className={cn(
                    "w-12 h-12 rounded-full flex items-center justify-center transition-all duration-300 relative z-10",
                    isActive && "ring-4 ring-primary/30 ring-offset-2 animate-pulse",
                    isCompleted && "bg-green-500 text-white",
                    !isCompleted && !isActive && "bg-muted text-muted-foreground",
                    isActive && config.color + " text-white shadow-lg"
                  )}
                >
                  {isCompleted ? (
                    <Check className="h-6 w-6" />
                  ) : (
                    <IconComponent className="h-6 w-6" />
                  )}
                </div>
                
                <div className="mt-2 text-xs text-center max-w-[60px]">
                  <div className={cn(
                    "font-medium",
                    isActive && "text-foreground",
                    isCompleted && "text-green-600",
                    !isCompleted && !isActive && "text-muted-foreground"
                  )}>
                    {config.label}
                  </div>
                </div>
                
                {/* Connection Line */}
                {level < 5 && (
                  <div 
                    className={cn(
                      "absolute top-6 left-12 w-16 h-0.5 transition-colors duration-300",
                      level < currentLevel ? "bg-green-500" : "bg-border"
                    )}
                  />
                )}
              </div>
            );
          })}
        </div>
      </div>
      
      <div className="text-xs text-muted-foreground text-center">
        Nível {currentLevel} de 5 • {LEVEL_CONFIG[currentLevel as keyof typeof LEVEL_CONFIG]?.label}
      </div>
    </div>
  );
};

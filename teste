import React, { useState, useCallback } from 'react';
import { Dialog, DialogContent, DialogHeader, DialogTitle } from '@/components/ui/dialog';
import { Button } from '@/components/ui/button';
import { Textarea } from '@/components/ui/textarea';
import { Input } from '@/components/ui/input';
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';
import { Label } from '@/components/ui/label';
import { Badge } from '@/components/ui/badge';
import { Separator } from '@/components/ui/separator';
import { ProgressIndicator } from '@/components/ui/progress-indicator';
import { TimerDisplay } from '@/components/ui/timer-display';
import { ArrowRight, CheckCircle, X, AlertTriangle, Lightbulb, MessageSquare, Timer, Building2, Users, Clock, User, Phone } from 'lucide-react';
import { toast } from '@/hooks/use-toast';
import { cn } from '@/lib/utils';

interface ModernTimerModalProps {
  isOpen: boolean;
  onClose: () => void;
  chamado: number;
  currentLevel: number;
  remainingTime: number;
  chamadoData?: any;
  formatTime: (seconds: number) => string;
  onNextLevel: (chamado: number, level: number, observacao: string) => void;
  updateStatusFinal: (chamado: number, levelStatusKey: string, status: string) => void;
  updateObservacao: (chamado: number, level: number, observacao: string) => void;
  updateAcionamento: (chamado: number, level: number, operador: string, pessoaAcionada: string, statusAcionamento: string) => void;
  historicoAcionamentos?: {
    operador: string;
    pessoaAcionada: string;
    status: string;
    observacao: string;
    dataHora: string;
    nivel: number;
  }[];
}

const LEVEL_INFO = {
  1: {
    title: "Primeiro Acionamento",
    subtitle: "",
    nextAction: "Avançar para 1ª Escalação",
    icon: Clock,
    color: "from-blue-500 to-blue-600",
    bgColor: "bg-blue-500/5 border-blue-200",
    description: "Atendimento Inicial da Equipe"
  },
  2: {
    title: "1ª Escalação",
    subtitle: "",
    nextAction: "Avançar para 2ª Escalação",
    icon: Users,
    color: "from-orange-500 to-orange-600",
    bgColor: "bg-orange-500/5 border-orange-200",
    description: "Acionamento do Gestor de Incidente ou Plantonista"
  },
  3: {
    title: "2ª Escalação",
    subtitle: "",
    nextAction: "Avançar para 3ª Escalação",
    icon: Building2,
    color: "from-red-500 to-red-600",
    bgColor: "bg-red-500/5 border-red-200",
    description: "Acionamento do Coordenador"
  },
  4: {
    title: "3ª Escalação",
    subtitle: "",
    nextAction: "Avançar para 4ª Escalação",
    icon: Users,
    color: "from-purple-500 to-purple-600",
    bgColor: "bg-purple-500/5 border-purple-200",
    description: "Acionamento do Gerente"
  },
  5: {
    title: "4ª Escalação",
    subtitle: "",
    nextAction: "Finalizar Chamado",
    icon: Building2,
    color: "from-red-600 to-red-700",
    bgColor: "bg-red-600/5 border-red-300",
    description: "Acionamento do Kleber Costa"
  }
};

export const ModernTimerModal: React.FC<ModernTimerModalProps> = ({
  isOpen,
  onClose,
  chamado,
  currentLevel,
  remainingTime,
  chamadoData,
  formatTime,
  onNextLevel,
  updateStatusFinal,
  updateObservacao,
  updateAcionamento,
  historicoAcionamentos = []
}) => {
  const [observacao, setObservacao] = useState('');
  const [pessoaAcionada, setPessoaAcionada] = useState('');
  const [statusAtendimento, setStatusAtendimento] = useState('');
  const [operador, setOperador] = useState('');
  const [isProcessing, setIsProcessing] = useState(false);
  const levelStatusKey = `level${currentLevel}_status`;
  const [finalizado, setFinalizado] = useState(
    chamadoData?.statusFinal === "finished" || chamadoData?.[levelStatusKey] === "finished"
  );

  React.useEffect(() => {
    setFinalizado(
      chamadoData?.statusFinal === "finished" || chamadoData?.[levelStatusKey] === "finished"
    );
  }, [chamadoData, levelStatusKey]);

  const levelInfo = finalizado
    ? {
      title: "Chamado Finalizado",
      subtitle: "Processo encerrado com sucesso",
      description: "O chamado foi resolvido e encerrado",
      icon: CheckCircle,
      color: "from-success to-success/90",
      bgColor: "bg-success/5 border-success/20",
      nextAction: "Finalizado"
    }
    : LEVEL_INFO[currentLevel as keyof typeof LEVEL_INFO];

  const validateForm = useCallback(() => {
    const errors = [];

    if (!operador) {
      errors.push("Operador é obrigatório");
    }

    if (!pessoaAcionada.trim()) {
      errors.push("Nome da pessoa acionada é obrigatório");
    } else if (pessoaAcionada.trim().length < 2) {
      errors.push("Nome deve ter pelo menos 2 caracteres");
    }

    if (!statusAtendimento) {
      errors.push("Status de atendimento é obrigatório");
    }

    if (!observacao.trim()) {
      errors.push("Observações são obrigatórias");
    } else if (observacao.trim().length < 10) {
      errors.push("Observações devem ter pelo menos 10 caracteres");
    }

    if (errors.length > 0) {
      toast({
        title: "⚠️ Campos Obrigatórios",
        description: errors.join(". "),
        variant: "destructive",
      });
      return false;
    }

    return true;
  }, [operador, pessoaAcionada, statusAtendimento, observacao]);

  const handleAction = useCallback(async (action: 'next' | 'finish') => {
    if (!validateForm()) return;

    setIsProcessing(true);

    try {
      const fullObservacao = `Operador: ${operador}\nPessoa Acionada: ${pessoaAcionada.trim()}\nStatus: ${statusAtendimento}\n\nDetalhes: ${observacao.trim()}`;

      if (finalizado && action !== 'finish') {
        toast({
          title: "⚠️ Chamado já finalizado",
          description: "Não é possível alterar níveis pois o chamado está finalizado",
          variant: "destructive",
        });
        return;
      }

      switch (action) {
        case 'next': {
          const updates = [
            updateStatusFinal(chamado, levelStatusKey, "finished"),
            updateObservacao(chamado, currentLevel, observacao || ""),
            updateAcionamento(chamado, currentLevel, operador || "", pessoaAcionada || "", statusAtendimento || "")
          ];

          if (currentLevel >= 5) {
            await Promise.all(updates);
            toast({
              title: "✅ Chamado Finalizado",
              description: `Chamado ${chamado} foi finalizado com sucesso!`
            });
          } else {
            await Promise.all(updates);
            await onNextLevel(chamado, currentLevel + 1, observacao || "");

            const nextLevelInfo = LEVEL_INFO[(currentLevel + 1) as keyof typeof LEVEL_INFO];
            toast({
              title: `🚀 ${nextLevelInfo?.title} Iniciado`,
              description: `Timer de 20 minutos iniciado para ${nextLevelInfo?.title}`,
            });
          }
          break;
        }

        case 'finish': {
          const updates = [
            updateStatusFinal(chamado, levelStatusKey, "finished"),
            updateObservacao(chamado, currentLevel, observacao || ""),
            updateAcionamento(chamado, currentLevel, operador || "", pessoaAcionada || "", statusAtendimento || "")
          ];

          await Promise.all(updates);
          setFinalizado(true);
          toast({
            title: "✅ Chamado Finalizado",
            description: `Chamado ${chamado} foi finalizado com sucesso!`,
          });
          break;
        }
      }

      // Reset form
      setObservacao('');
      setPessoaAcionada('');
      setOperador('');
      setStatusAtendimento('');
      onClose();

    } catch (error) {
      console.error("❌ Erro no handleAction:", error);
      toast({
        title: "❌ Erro na Operação",
        description: "Ocorreu um erro ao processar a ação. Verifique os logs.",
        variant: "destructive",
      });
    } finally {
      setIsProcessing(false);
    }
  }, [validateForm, updateAcionamento, pessoaAcionada, statusAtendimento, observacao, currentLevel, chamado, onNextLevel, onClose, updateStatusFinal, updateObservacao, finalizado, levelStatusKey]);

  if (!levelInfo) return null;

  const LevelIcon = levelInfo.icon;
  const isFormValid = operador && pessoaAcionada.trim().length >= 2 && statusAtendimento && observacao.trim().length >= 10;

  return (
    <Dialog open={isOpen} onOpenChange={onClose}>
      <DialogContent className="sm:max-w-4xl max-h-[85vh] overflow-y-auto border-border shadow-modal">
        {/* Header Section */}
        <DialogHeader className="relative pb-8">
          <div className={cn(
            "absolute inset-0 bg-gradient-to-r opacity-5 rounded-t-lg",
            levelInfo.color
          )} />

          <div className="relative z-10 space-y-6">
            <div className="flex flex-col lg:flex-row lg:items-center lg:justify-between gap-6">
              <div className="flex items-center gap-6">
                <div className={cn(
                  "p-4 rounded-2xl bg-gradient-to-r shadow-lg",
                  levelInfo.color,
                  "text-white"
                )}>
                  <LevelIcon className="h-10 w-10" />
                </div>

                <div className="space-y-2">
                  <DialogTitle className="text-3xl lg:text-4xl font-bold text-foreground">
                    {levelInfo.title}
                  </DialogTitle>
                  <p className="text-lg text-muted-foreground">
                    {levelInfo.subtitle}
                  </p>
                  <div className="flex items-center gap-3">
                    <Badge variant="outline" className="text-sm font-medium">
                      Chamado #{chamado}
                    </Badge>
                    <Badge
                      variant={finalizado ? "default" : "secondary"}
                      className={cn(
                        "text-sm font-medium",
                        finalizado && "bg-success text-success-foreground"
                      )}
                    >
                      {finalizado ? "Finalizado" : "Em Andamento"}
                    </Badge>
                    {remainingTime < 0 && (
                      <Badge
                        variant="destructive"
                        className="text-sm font-bold animate-text-flash bg-timer-negative text-white"
                      >
                        🚨 TEMPO EXCEDIDO
                      </Badge>
                    )}
                  </div>
                </div>
              </div>
            </div>

            <div className={cn(
              "p-4 rounded-xl border-l-4",
              levelInfo.bgColor
            )}>
              <p className="text-sm text-muted-foreground">
                {levelInfo.description}
              </p>
              {remainingTime < 0 && (
                <p className="text-timer-negative font-bold animate-text-flash mt-2">
                  ⚠️ O tempo limite foi excedido! Ação urgente necessária.
                </p>
              )}
            </div>
          </div>
        </DialogHeader>

        <div className="space-y-8">
          {/* Histórico de Acionamentos */}
          {historicoAcionamentos.length > 0 && (
            <div className="space-y-4">
              <div className="flex items-center gap-3">
                <Lightbulb className="h-6 w-6 text-primary" />
                <Label className="text-xl font-semibold text-foreground">
                  Histórico de Acionamentos
                </Label>
              </div>
              <div className="overflow-x-auto">
                <table className="min-w-full text-sm border rounded-lg bg-background">
                  <thead>
                    <tr className="bg-muted">
                      <th className="px-3 py-2 text-left">Nível</th>
                      <th className="px-3 py-2 text-left">Operador</th>
                      <th className="px-3 py-2 text-left">Pessoa Acionada</th>
                      <th className="px-3 py-2 text-left">Status</th>
                      <th className="px-3 py-2 text-left">Observação</th>
                      <th className="px-3 py-2 text-left">Data/Hora</th>
                    </tr>
                  </thead>
                  <tbody>
                    {historicoAcionamentos.map((h, idx) => (
                      <tr key={idx} className="border-t">
                        <td className="px-3 py-2">{h.nivel}</td>
                        <td className="px-3 py-2">{h.operador}</td>
                        <td className="px-3 py-2">{h.pessoaAcionada}</td>
                        <td className="px-3 py-2">{h.status}</td>
                        <td className="px-3 py-2 whitespace-pre-line">{h.observacao}</td>
                        <td className="px-3 py-2">{h.dataHora}</td>
                      </tr>
                    ))}
                  </tbody>
                </table>
              </div>
            </div>
          )}

          {/* Timer and Progress Section */}
          <div className="grid grid-cols-1 xl:grid-cols-2 gap-8">
            <TimerDisplay
              remainingTime={remainingTime}
              formatTime={formatTime}
              className="w-full"
            />
            <ProgressIndicator
              currentLevel={currentLevel}
              className="w-full"
            />
          </div>

          <Separator />

          {/* Required Information Section */}
          <div className="space-y-6">
            <div className="flex items-center gap-3">
              <Phone className="h-6 w-6 text-primary" />
              <Label className="text-xl font-semibold text-foreground">
                Acionamento
              </Label>
            </div>

            <div className="grid grid-cols-1 md:grid-cols-3 gap-6">
              {/* Operador */}
              <div className="space-y-3">
                <Label htmlFor="operador" className="text-base font-medium flex items-center gap-2">
                  <User className="h-4 w-4" />
                  Operador
                  <span className="text-destructive">*</span>
                </Label>
                <Select
                  value={operador}
                  onValueChange={setOperador}
                  disabled={isProcessing || finalizado}
                >
                  <SelectTrigger className={cn(
                    "border-2 focus:border-primary",
                    operador && "border-success"
                  )}>
                    <SelectValue placeholder="Selecione o operador" />
                  </SelectTrigger>
                  <SelectContent>
                    <SelectItem value="ALBERTO LAGES">ALBERTO LAGES</SelectItem>
                    <SelectItem value="ALEXANDRE LIMA SILVA">ALEXANDRE LIMA SILVA</SelectItem>
                    <SelectItem value="ANSELMO ALVES PESSOA">ANSELMO ALVES PESSOA</SelectItem>
                    <SelectItem value="BRUNO MAZZO FEITOSA">BRUNO MAZZO FEITOSA</SelectItem>
                    <SelectItem value="CAIO CESAR ALVES DA LUZ">CAIO CESAR ALVES DA LUZ</SelectItem>
                    <SelectItem value="CLAUDIA ZORZAN DE CAMARGO">CLAUDIA ZORZAN DE CAMARGO</SelectItem>
                    <SelectItem value="JEFFERSON DA SILVA SOUZA">JEFFERSON DA SILVA SOUZA</SelectItem>
                    <SelectItem value="JULIANA BEATRIZ DE ANGELO">JULIANA BEATRIZ DE ANGELO</SelectItem>
                    <SelectItem value="MARIA LUIZA DOS SANTOS COIADO">MARIA LUIZA DOS SANTOS COIADO</SelectItem>
                    <SelectItem value="RAFAEL NUNES PACHECO">RAFAEL NUNES PACHECO</SelectItem>
                    <SelectItem value="SERGIO ANTONIO DA SILVA">SERGIO ANTONIO DA SILVA</SelectItem>
                    <SelectItem value="VICTOR HUGO ALMEIDA FERNANDES">VICTOR HUGO ALMEIDA FERNANDES</SelectItem>
                    <SelectItem value="VINICIUS RHYU VITURINO SAITO">VINICIUS RHYU VITURINO SAITO</SelectItem>
                  </SelectContent>
                </Select>
              </div>

              {/* Nome da Pessoa Acionada */}
              <div className="space-y-3">
                <Label htmlFor="pessoa-acionada" className="text-base font-medium flex items-center gap-2">
                  <User className="h-4 w-4" />
                  Pessoa Acionada
                  <span className="text-destructive">*</span>
                </Label>
                <Input
                  id="pessoa-acionada"
                  type="text"
                  value={pessoaAcionada}
                  onChange={(e) => setPessoaAcionada(e.target.value)}
                  placeholder="Ex: João Silva, Maria Santos..."
                  className={cn(
                    "border-2 focus:border-primary transition-all duration-200",
                    pessoaAcionada.trim().length >= 2 && "border-success"
                  )}
                  disabled={isProcessing || finalizado}
                  maxLength={100}
                />
              </div>

              {/* Status do Atendimento */}
              <div className="space-y-3">
                <Label htmlFor="status-atendimento" className="text-base font-medium flex items-center gap-2">
                  <CheckCircle className="h-4 w-4" />
                  Status do Atendimento
                  <span className="text-destructive">*</span>
                </Label>
                <Select
                  value={statusAtendimento}
                  onValueChange={(value) => {
                    console.log("Status selecionado:", value); // 🔹 log de debug
                    setStatusAtendimento(value);
                  }}
                  disabled={isProcessing || finalizado}
                >
                  <SelectTrigger className={cn(
                    "border-2 focus:border-primary",
                    statusAtendimento && "border-success"
                  )}>
                    <SelectValue placeholder="Selecione o status do atendimento" />
                  </SelectTrigger>
                  <SelectContent>
                    <SelectItem value="atendido">✅ Atendido</SelectItem>
                    <SelectItem value="nao-atendido">❌ Não Atendido</SelectItem>
                  </SelectContent>
                </Select>
              </div>
            </div>
          </div>

          <Separator />
          

          {/* Observations Section */}
          <div className="space-y-6">
            <div className="flex items-center gap-3">
              <MessageSquare className="h-6 w-6 text-primary" />
              <Label htmlFor="observacao" className="text-xl font-semibold text-foreground">
                Observações
              </Label>
            </div>

            <Textarea
              id="observacao"
              value={observacao}
              onChange={(e) => setObservacao(e.target.value)}
              placeholder="Descreva as informações do acionamento"
              rows={6}
              className={cn(
                "border-2 focus:border-primary transition-all duration-200 resize-none text-base min-h-[120px]",
                observacao.trim().length >= 10 && "border-success"
              )}
              disabled={isProcessing || finalizado}
              maxLength={1000}
            />

            <div className="flex justify-between items-center">
              <span className={cn(
                "text-sm font-medium",
                observacao.length > 900 ? "text-warning" : "text-muted-foreground"
              )}>
                {observacao.length}/1000 caracteres
              </span>
              {observacao.trim().length >= 10 && (
                <div className="flex items-center gap-2 text-success font-medium text-sm">
                  <CheckCircle className="h-4 w-4" />
                  <span>Observação válida</span>
                </div>
              )}
            </div>
          </div>

          <Separator />

          {/* Action Buttons */}
          <div className="space-y-6">
            <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
              {/* Finish Button */}
              <Button
                variant="secondary"
                size="lg"
                onClick={() => handleAction('finish')}
                disabled={!isFormValid || isProcessing || finalizado}
                className="h-20"
              >
                <CheckCircle className="h-6 w-6 mr-3" />
                <div className="text-left">
                  <div className="font-semibold text-base">Acompanhamento Confirmado</div>
                  <div className="text-sm opacity-90">Finalizar Acompanhamento</div>
                </div>
              </Button>

              {/* Next Level Button */}
              <Button
                variant="destructive"
                size="lg"
                onClick={() => handleAction('next')}
                disabled={!isFormValid || isProcessing || finalizado}
                className={cn(
                  "h-20",
                  remainingTime < 0 && "animate-timer-alert bg-timer-negative hover:bg-timer-negative/90"
                )}
              >
                {finalizado ? (
                  <>
                    <CheckCircle className="h-6 w-6 mr-3" />
                    <div className="text-left">
                      <div className="font-semibold text-base">Finalizado</div>
                      <div className="text-sm opacity-90">Chamado encerrado</div>
                    </div>
                  </>
                ) : currentLevel >= 5 ? (
                  <>
                    <CheckCircle className="h-6 w-6 mr-3" />
                    <div className="text-left">
                      <div className="font-semibold text-base">Concluir Final</div>
                      <div className="text-sm opacity-90">Última escalação</div>
                    </div>
                  </>
                ) : (
                  <>
                    <ArrowRight className="h-6 w-6 mr-3" />
                    <div className="text-left">
                      <div className="font-semibold text-base">{levelInfo.nextAction}</div>
                      <div className="text-sm opacity-90">Avançar escalação</div>
                    </div>
                  </>
                )}
              </Button>
            </div>
          </div>

          {/* Guidelines Section */}
          <div className="gradient-modal rounded-2xl p-6 border border-border/50">
            <div className="space-y-4">
              <div className="grid grid-cols-1 md:grid-cols-2 xl:grid-cols-3 gap-6">
                <div className="space-y-2">
                  <div className="flex items-center gap-2 text-destructive">
                    <AlertTriangle className="h-5 w-5" />
                    <span className="font-semibold">Dados Obrigatórios</span>
                  </div>
                  <p className="text-sm text-muted-foreground">
                    Nome da pessoa, status, operador e observações são campos obrigatórios para prosseguir.
                  </p>
                </div>

                <div className="space-y-2">
                  <div className="flex items-center gap-2 text-primary">
                    <Timer className="h-5 w-5" />
                    <span className="font-semibold">Controle de Tempo</span>
                  </div>
                  <p className="text-sm text-muted-foreground">
                    Cada escalação reinicia automaticamente o timer de 20 minutos.
                  </p>
                  {remainingTime < 0 && (
                    <p className="text-timer-negative text-sm font-bold animate-text-flash">
                      ⚠️ Timer excedido! Ação urgente necessária.
                    </p>
                  )}
                </div>

                <div className="space-y-2">
                  <div className="flex items-center gap-2 text-success">
                    <CheckCircle className="h-5 w-5" />
                    <span className="font-semibold">Documentação</span>
                  </div>
                  <p className="text-sm text-muted-foreground">
                    Todas as informações são automaticamente registradas no histórico.
                  </p>
                </div>
              </div>
            </div>
            
          </div>

          {/* Processing Indicator */}
          {isProcessing && (
            <div className="fixed inset-0 bg-background/80 backdrop-blur-sm flex items-center justify-center z-50">
              <div className="bg-card p-6 rounded-2xl shadow-2xl border border-border">
                <div className="flex items-center gap-3">
                  <div className="animate-spin rounded-full h-6 w-6 border-b-2 border-primary"></div>
                  <span className="text-lg font-medium">Processando ação...</span>
                </div>
              </div>
            </div>
          )}

        </div>
      </DialogContent>
    </Dialog>
  );
};

import { useState } from 'react';
import { User, UserCheck } from 'lucide-react';
import {
  Dialog,
  DialogContent,
  DialogDescription,
  DialogFooter,
  DialogHeader,
  DialogTitle,
} from '@/components/ui/dialog';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { Label } from '@/components/ui/label';
import { toast } from '@/hooks/use-toast';

interface AssumeOperatorModalProps {
  isOpen: boolean;
  onClose: () => void;
  chamado: string;
  currentOperator?: string;
  onAssume: (chamado: string, operatorName: string) => Promise<void>;
}

export const AssumeOperatorModal = ({
  isOpen,
  onClose,
  chamado,
  currentOperator,
  onAssume
}: AssumeOperatorModalProps) => {
  const [operatorName, setOperatorName] = useState(currentOperator || '');
  const [loading, setLoading] = useState(false);

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault();
    
    if (!operatorName.trim()) {
      toast({
        title: "Nome obrigatório",
        description: "Por favor, informe o nome do operador",
        variant: "destructive",
      });
      return;
    }

    try {
      setLoading(true);
      await onAssume(chamado, operatorName.trim());
      
      toast({
        title: currentOperator ? "Operador alterado" : "Chamado assumido",
        description: `Chamado ${chamado} ${currentOperator ? 'transferido para' : 'assumido por'} ${operatorName.trim()}`,
      });
      
      onClose();
    } catch (error: any) {
      toast({
        title: "Erro",
        description: error.message || "Não foi possível assumir o chamado",
        variant: "destructive",
      });
    } finally {
      setLoading(false);
    }
  };

  const handleClose = () => {
    setOperatorName(currentOperator || '');
    onClose();
  };

  return (
    <Dialog open={isOpen} onOpenChange={handleClose}>
      <DialogContent className="sm:max-w-md">
        <DialogHeader>
          <DialogTitle className="flex items-center gap-2">
            {currentOperator ? (
              <>
                <UserCheck className="h-5 w-5 text-blue-600" />
                Alterar Responsável
              </>
            ) : (
              <>
                <User className="h-5 w-5 text-green-600" />
                Assumir Chamado
              </>
            )}
          </DialogTitle>
          <DialogDescription>
            {currentOperator ? (
              <>
                Alterar o responsável pelo chamado <strong>#{chamado}</strong>.
                <br />
                Responsável atual: <span className="font-medium">{currentOperator}</span>
              </>
            ) : (
              <>
                Assumir a responsabilidade pelo chamado <strong>#{chamado}</strong>.
                <br />
                Informe seu nome para se tornar o responsável por este chamado.
              </>
            )}
          </DialogDescription>
        </DialogHeader>

        <form onSubmit={handleSubmit} className="space-y-4">
          <div className="space-y-2">
            <Label htmlFor="operatorName">
              Nome do {currentOperator ? 'Novo ' : ''}Responsável
            </Label>
            <Input
              id="operatorName"
              type="text"
              placeholder="Digite seu nome..."
              value={operatorName}
              onChange={(e) => setOperatorName(e.target.value)}
              className="w-full"
              autoFocus
              disabled={loading}
            />
          </div>

          <DialogFooter className="flex gap-2">
            <Button
              type="button"
              variant="outline"
              onClick={handleClose}
              disabled={loading}
            >
              Cancelar
            </Button>
            <Button
              type="submit"
              disabled={loading || !operatorName.trim()}
              className="min-w-[100px]"
            >
              {loading ? (
                <div className="flex items-center gap-2">
                  <div className="h-4 w-4 animate-spin rounded-full border-2 border-white border-t-transparent" />
                  Processando...
                </div>
              ) : currentOperator ? (
                'Alterar'
              ) : (
                'Assumir'
              )}
            </Button>
          </DialogFooter>
        </form>
      </DialogContent>
    </Dialog>
  );
};

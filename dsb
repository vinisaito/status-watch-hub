import { useState, useEffect } from 'react';
import {
  Settings,
  Sun,
  Moon,
  AlertTriangle,
  FileText,
  MessageSquare
} from 'lucide-react';
import { Button } from '@/components/ui/button';
import { SidebarProvider } from '@/components/ui/sidebar';
import { toast } from '@/hooks/use-toast';
import { MonitoringCards } from './MonitoringCards';
import { ActionTable } from './ActionTable';
import { CriticalIncidents } from './CriticalIncidents';
import { RDMTracker } from './RDMTracker';
import { ShiftNotes } from './ShiftNotes';
import { WebhookConfig } from './WebhookConfig';
import {
  Sheet,
  SheetContent
} from "@/components/ui/sheet";

export interface AlertData {
  id: string;
  classificacao: string;
  numeroChamado: string;
  equipe: string;
  status: string;
  abertura: string;
  titulo: string;
  severidade: string;
  acionado: boolean;
}

const Dashboard = () => {
  const [isDarkMode, setIsDarkMode] = useState(true);
  const [showWebhookConfig, setShowWebhookConfig] = useState(false);
  const [alertData, setAlertData] = useState<AlertData[]>([]);
  const [loading, setLoading] = useState(false);
  const [activeSection, setActiveSection] = useState<'incidents' | 'rdm' | 'notes' | null>(null);
  const [filter, setFilter] = useState<string | null>(null);

  const fetchAlertData = async () => {
    setLoading(true);
    try {
      const response = await fetch('https://7nu1y7qzs1.execute-api.us-east-1.amazonaws.com/prod/dados');
      const data = await response.json();
      const apiData = JSON.parse(data.body);

      const transformedData: AlertData[] = apiData.map((item: any, index: number) => ({
        id: `alert-${index}`,
        classificacao: item.classificacao || 'N/A',
        numeroChamado: item.num_chamado || 'N/A',
        equipe: item.equipe || 'N/A',
        status: item.status || 'N/A',
        abertura: item.dat_abertura || 'N/A',
        titulo: item.titulo || 'Título não disponível',
        severidade: item.severidade || 'N/A',
        acionado: false,
      }));

      setAlertData(transformedData);

      const unacknowledged = transformedData.filter(alert => !alert.acionado);
      if (unacknowledged.length > 0) {
        playAlertSound();
      }
    } catch (error) {
      console.error('Error fetching data:', error);
      toast({
        title: "Erro ao buscar dados",
        description: "Não foi possível conectar com a API",
        variant: "destructive",
      });
    } finally {
      setLoading(false);
    }
  };

  const playAlertSound = () => {
    const audio = new Audio('data:audio/wav;base64,UklGRnoGAABXQVZFZm10IBAAAAABAAEAQB8AAEAfAAABAAgAZGF0YQoGAACBhYqFbF1fdJivrJBhNjVgodDbq2EcBj+a2/LDciUFLIHO8tiJNwgZaLvt559NEAxQp+PwtmMcBjiR1/LMeSwFJHfH8N2QQAoUXrTp66hVFApGn+Dqu2sgBDR+w/PCaWEbEBOa5rWgdyoEKAA=');
    audio.play().catch(() => {
      console.log('Alert sound could not be played');
    });
  };

  const toggleTheme = () => {
    setIsDarkMode(!isDarkMode);
    if (isDarkMode) {
      document.documentElement.classList.remove('dark');
      document.documentElement.classList.add('light');
    } else {
      document.documentElement.classList.remove('light');
      document.documentElement.classList.add('dark');
    }
  };

  const updateAlertAcknowledgment = (alertId: string, acknowledged: boolean) => {
    setAlertData(prev =>
      prev.map(alert =>
        alert.id === alertId
          ? { ...alert, acionado: acknowledged }
          : alert
      )
    );
  };

  useEffect(() => {
    fetchAlertData();
    const interval = setInterval(fetchAlertData, 600000);
    return () => clearInterval(interval);
  }, []);

  useEffect(() => {
    document.documentElement.classList.add('dark');
  }, []);

  const sidebarItems = [
    { title: "Incidentes Críticos", icon: AlertTriangle, key: 'incidents' as const },
    { title: "Acompanhamento RDMs", icon: FileText, key: 'rdm' as const },
    { title: "Recados do Turno", icon: MessageSquare, key: 'notes' as const },
  ];

  const filteredData = filter
    ? alertData.filter(alert => {
      if (filter === 'SEV4_INCIDENT') {
        return alert.classificacao.toLowerCase().includes('incidente')
          && alert.severidade.includes('4')
          && !alert.acionado;
      }
      if (filter === 'SEV4_INCIDENT_TOTAL') {
        return alert.classificacao.toLowerCase().includes('incidente')
          && alert.severidade.includes('4');
      }
      if (filter === 'SEV4_ALERT') {
        return alert.classificacao.toLowerCase().includes('alerta')
          && alert.severidade.includes('4')
          && !alert.acionado;
      }
      if (filter === 'SEV4_ALERT_TOTAL') {
        return alert.classificacao.toLowerCase().includes('alerta')
          && alert.severidade.includes('4');
      }
      if (filter === 'SEV3_INCIDENT') {
        return alert.classificacao.toLowerCase().includes('incidente') 
        && alert.severidade.includes('3')
        && !alert.acionado;
      }
      if (filter === 'SEV3_INCIDENT_TOTAL') {
        return alert.classificacao.toLowerCase().includes('incidente') 
        && alert.severidade.includes('3');
      }
      return true;
    })
    : alertData;

  return (
    <div className="min-h-screen flex bg-background text-foreground">

      {/* Conteúdo principal */}
      <div className="flex-1 flex flex-col">
        {/* Header */}
        <div className="bg-dashboard-bg border-b border-border p-6 text-center">
          <h1 className="text-3xl font-bold mb-2" style={{ color: '#4a90e2' }}>
            PAINEL CIOPS - MONITORAÇÃO
          </h1>
        </div>

        {/* Main */}
        <div className="flex-1 bg-dashboard-bg">
          <div className="container mx-auto p-6 max-w-7xl">
            <div className="space-y-8">
              {/* Cards */}
              <div className="text-center">
                <MonitoringCards
                  alertData={alertData}
                  onFilterSelect={(filterKey) => setFilter(prev => prev === filterKey ? null : filterKey)}
                />
              </div>

              {/* Table */}
              <ActionTable
                alertData={filteredData}
                onUpdateAcknowledgment={updateAlertAcknowledgment}
                loading={loading}
              />
            </div>
          </div>
        </div>
      </div>

      {/* Sidebar */}
      <div className="w-16 bg-sidebar-background border-l border-sidebar-border flex flex-col justify-between sticky top-0 h-screen">
        {/* Parte superior */}
        <div className="flex flex-col gap-2 p-2">
          {sidebarItems.map((item) => (
            <Button
              key={item.key}
              variant="ghost"
              size="icon"
              onClick={() => setActiveSection(activeSection === item.key ? null : item.key)}
              className={`w-12 h-12 ${activeSection === item.key
                ? 'bg-sidebar-primary text-sidebar-primary-foreground'
                : 'text-sidebar-foreground hover:bg-sidebar-accent hover:text-sidebar-accent-foreground'
                }`}
              title={item.title}
            >
              <item.icon className="h-5 w-5" />
            </Button>
          ))}
        </div>

        {/* Parte inferior */}
        <div className="flex flex-col gap-2 p-2 mb-4">
          <Button
            variant="outline"
            size="icon"
            onClick={() => setShowWebhookConfig(true)}
            className="border-border hover:bg-hover-bg"
            title="Configuração de Webhooks"
          >
            <Settings className="h-4 w-4" />
          </Button>
          <Button
            variant="outline"
            size="icon"
            onClick={toggleTheme}
            className="border-border hover:bg-hover-bg"
            title="Trocar Tema"
          >
            {isDarkMode ? <Sun className="h-4 w-4" /> : <Moon className="h-4 w-4" />}
          </Button>
        </div>
      </div>

      {/* Drawer */}
      <Sheet open={!!activeSection} onOpenChange={() => setActiveSection(null)}>
        <SheetContent
          side="right"
          className="w-full"
          style={{ width: '50vw', maxWidth: '1000px' }}
        >
          <div className="mt-4">
            {activeSection === 'incidents' && <CriticalIncidents />}
            {activeSection === 'rdm' && <RDMTracker />}
            {activeSection === 'notes' && <ShiftNotes />}
          </div>
        </SheetContent>
      </Sheet>

      {/* Webhook Config Modal */}
      <WebhookConfig
        open={showWebhookConfig}
        onOpenChange={setShowWebhookConfig}
      />
    </div>
  );

};

export default Dashboard;

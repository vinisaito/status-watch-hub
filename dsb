import { useState } from 'react';
import {
  Card,
  CardContent,
  CardHeader,
  CardTitle
} from '@/components/ui/card';
import { Badge } from '@/components/ui/badge';
import {
  ChevronRight,
  ChevronDown,
  Clock,
  User,
  MapPin,
  AlertTriangle,
  TrendingUp
} from 'lucide-react';
import {
  Dialog,
  DialogContent,
  DialogHeader,
  DialogTitle,
  DialogDescription
} from '@/components/ui/dialog';
import { Button } from '@/components/ui/button';

interface CriticalIncident {
  id: string;
  incident: string;
  operator: string;
  room: string;
  timeline: string;
  status: 'ongoing' | 'resolved' | 'escalated';
  startTime: string;
  description: string;
  priority: 'high' | 'critical';
}

export const CriticalIncidents = () => {
  const [expandedIncidentId, setExpandedIncidentId] = useState<string | null>(null);
  const [selectedIncident, setSelectedIncident] = useState<CriticalIncident | null>(null);

  const criticalIncidents: CriticalIncident[] = [
    {
      id: 'ci-001',
      incident: 'Falha de conectividade Datacenter SP',
      operator: 'João Silva',
      room: 'NOC-01',
      timeline: '45 min',
      status: 'ongoing',
      startTime: '14:30',
      priority: 'critical',
      description: 'Problemas de conectividade detectados no datacenter principal de São Paulo, afetando múltiplos serviços. A equipe de infraestrutura está investigando possíveis falhas nos switches de core.'
    },
    {
      id: 'ci-002',
      incident: 'Queda de energia na sede RJ',
      operator: 'Maria Souza',
      room: 'NOC-02',
      timeline: '30 min',
      status: 'escalated',
aneiro. Geradores de backup ativados, mas alguns serviços permanecem indisponíveis.'
    },
    {
      id: 'ci-003',
      incident: 'Degradação de performance API Gateway',
      operator: 'Carlos Lima',
      room: 'NOC-01',
      timeline: '15 min',
      status: 'ongoing',
      startTime: '15:45',
      priority: 'high',
      description: 'Alta latência detectada no API Gateway principal. Tempo de resposta aumentou em 300% nas últimas duas horas.'
    }
  ];

  const getStatusBadgeClass = (status: string) => {
    switch (status) {
      case 'ongoing':
        return 'bg-status-ongoing text-status-ongoing-foreground hover:bg-status-ongoing/90 border-0 font-semibold';
      case 'resolved':
        return 'bg-status-resolved text-status-resolved-foreground hover:bg-status-resolved/90 border-0 font-semibold';
      case 'escalated':
        return 'bg-status-escalated text-status-escalated-foreground hover:bg-status-escalated/90 border-0 font-semibold';
      default:
        return 'bg-muted text-muted-foreground border-0';
    }
  };

  const getStatusText = (status: string) => {
    switch (status) {
      case 'ongoing':
        return 'Em Andamento';
      case 'resolved':
        return 'Resolvido';
      case 'escalated':
        return 'Escalado';
      default:
        return 'Desconhecido';
    }
  };

  const getPriorityIcon = (priority: string) => {
    if (priority === 'critical') {
      return <AlertTriangle className="h-4 w-4 text-status-escalated" />;
    }
    return <TrendingUp className="h-4 w-4 text-status-ongoing" />;
  };

  const toggleExpanded = (id: string) => {
    setExpandedIncidentId(prevId => (prevId === id ? null : id));
  };

  const openModal = (incident: CriticalIncident) => {
    setSelectedIncident(incident);
  };

  const closeModal = () => {
    setSelectedIncident(null);
  };

  return (
    <>
      <Card className="gradient-card border-panel-border shadow-card rounded-2xl overflow-hidden transition-smooth hover:shadow-hover">
        <CardHeader className="bg-gradient-to-r from-panel-bg to-background p-6 border-b border-panel-border">
          <CardTitle className="text-primary flex items-center gap-3 text-xl font-bold">
            <div className="relative">
              <div className="w-3 h-3 bg-status-escalated rounded-full animate-pulse-glow" />
              <div className="absolute inset-0 w-3 h-3 bg-status-escalated rounded-full animate-ping opacity-30" />
            </div>
            Incidentes Críticos em Andamento
            <Badge variant="secondary" className="ml-auto text-xs px-2 py-1">
              {criticalIncidents.length} ativo{criticalIncidents.length !== 1 ? 's' : ''}
            </Badge>
          </CardTitle>
        </CardHeader>

        <CardContent className="p-6 space-y-4">
          {criticalIncidents.map((incident, index) => (
            <div
              key={incident.id}
              className="group relative border border-panel-border rounded-xl p-5 bg-card gradient-card shadow-card hover:shadow-hover transition-smooth animate-fade-in"
              style={{ animationDelay: `${index * 100}ms` }}
            >
              {/* Priority indicator bar */}
              <div 
                className={`absolute left-0 top-0 bottom-0 w-1 rounded-l-xl ${
                  incident.priority === 'critical' 
                    ? 'bg-gradient-to-b from-status-escalated to-status-escalated/70' 
                    : 'bg-gradient-to-b from-status-ongoing to-status-ongoing/70'
                }`} 
              />

              <div className="flex flex-col lg:flex-row lg:items-center gap-4">
                {/* Left section - Expand button and main info */}
                <div className="flex items-start gap-4 flex-1 min-w-0">
                  <Button
                    variant="ghost"
                    size="sm"
                    onClick={() => toggleExpanded(incident.id)}
                    className="flex-shrink-0 p-2 h-9 w-9 hover:bg-hover-bg rounded-full group-hover:bg-hover-bg transition-bounce"
                  >
                    {expandedIncidentId === incident.id ? (
                      <ChevronDown className="h-4 w-4 text-muted-foreground transition-smooth" />
                    ) : (
                      <ChevronRight className="h-4 w-4 text-muted-foreground transition-smooth" />
                    )}
                  </Button>

                  <div className="flex-1 min-w-0">
                    <div className="flex items-center gap-2 mb-2">
                      {getPriorityIcon(incident.priority)}
                      <h4 className="font-bold text-foreground text-base lg:text-lg leading-tight">
                        {incident.incident}
                      </h4>
                    </div>

                    <div className="grid grid-cols-1 sm:grid-cols-2 xl:grid-cols-3 gap-3 text-sm text-muted-foreground">
                      <div className="flex items-center gap-2">
                        <User className="h-4 w-4 flex-shrink-0" />
                        <span className="truncate">{incident.operator}</span>
                      </div>
                      <div className="flex items-center gap-2">
                        <MapPin className="h-4 w-4 flex-shrink-0" />
                        <span className="truncate">{incident.room}</span>
                      </div>
                      <div className="flex items-center gap-2">
                        <Clock className="h-4 w-4 flex-shrink-0" />
                        <span className="font-medium">{incident.timeline}</span>
                      </div>
                    </div>
                  </div>
                </div>

                {/* Right section - Status and actions */}
                <div className="flex flex-col sm:flex-row items-start sm:items-center gap-3 lg:gap-4 flex-shrink-0">
                  <div className="text-sm text-muted-foreground whitespace-nowrap">
                    Início: <span className="font-bold text-foreground">{incident.startTime}</span>
                  </div>
                  
                  <div className="flex items-center gap-3">
                    <Badge className={`${getStatusBadgeClass(incident.status)} shadow-sm`}>
                      {getStatusText(incident.status)}
                    </Badge>
                    
                    <Button
                      variant="outline"
                      size="sm"
                      className="hover:bg-primary hover:text-primary-foreground transition-smooth border-primary/20 text-xs font-semibold px-4"
                      onClick={() => openModal(incident)}
                    >
                      Ver detalhes
                    </Button>
                  </div>
                </div>
              </div>

              {/* Expanded content */}
              {expandedIncidentId === incident.id && (
                <div className="mt-6 pt-4 border-t border-panel-border animate-slide-down">
                  <div className="bg-muted/30 rounded-lg p-4">
                    <h5 className="font-semibold text-foreground mb-2 text-sm">Descrição Detalhada</h5>
                    <p className="text-sm text-muted-foreground leading-relaxed">
                      {incident.description}
                    </p>
                  </div>
                </div>
              )}
            </div>
          ))}

          {criticalIncidents.length === 0 && (
            <div className="text-center py-12">
              <div className="w-16 h-16 bg-muted/30 rounded-full flex items-center justify-center mx-auto mb-4">
                <AlertTriangle className="h-8 w-8 text-muted-foreground" />
              </div>
              <h3 className="text-lg font-semibold text-foreground mb-2">Nenhum incidente crítico</h3>
              <p className="text-muted-foreground">Todos os sistemas estão operando normalmente</p>
            </div>
          )}
        </CardContent>
      </Card>

      {/* Enhanced Modal */}
      <Dialog open={!!selectedIncident} onOpenChange={closeModal}>
        <DialogContent className="max-w-3xl gradient-card border-panel-border shadow-glow">
          <DialogHeader className="border-b border-panel-border pb-4">
            <div className="flex items-center gap-3">
              {selectedIncident && getPriorityIcon(selectedIncident.priority)}
              <DialogTitle className="text-2xl font-bold">
                {selectedIncident?.incident}
              </DialogTitle>
            </div>
            <DialogDescription className="text-base text-muted-foreground">
              Detalhes completos do incidente crítico e informações de status.
            </DialogDescription>
          </DialogHeader>

          {selectedIncident && (
            <div className="py-6">
              <div className="grid grid-cols-1 md:grid-cols-2 gap-6 mb-6">
                <div className="space-y-4">
                  <div className="bg-muted/20 rounded-lg p-4">
                    <h4 className="font-semibold text-foreground mb-3 flex items-center gap-2">
                      <User className="h-4 w-4" />
                      Informações do Operador
                    </h4>
                    <div className="space-y-2 text-sm">
                      <div>
                        <span className="text-muted-foreground">Nome:</span>
                        <span className="font-semibold text-foreground ml-2">{selectedIncident.operator}</span>
                      </div>
                      <div>
                        <span className="text-muted-foreground">Sala:</span>
                        <span className="font-semibold text-foreground ml-2">{selectedIncident.room}</span>
                      </div>
                    </div>
                  </div>
                </div>

                <div className="space-y-4">
                  <div className="bg-muted/20 rounded-lg p-4">
                    <h4 className="font-semibold text-foreground mb-3 flex items-center gap-2">
                      <Clock className="h-4 w-4" />
                      Timeline do Incidente
                    </h4>
                    <div className="space-y-2 text-sm">
                      <div>
                        <span className="text-muted-foreground">Início:</span>
                        <span className="font-semibold text-foreground ml-2">{selectedIncident.startTime}</span>
                      </div>
                      <div>
                        <span className="text-muted-foreground">Duração:</span>
                        <span className="font-semibold text-foreground ml-2">{selectedIncident.timeline}</span>
                      </div>
                      <div className="mt-3">
                        <Badge className={getStatusBadgeClass(selectedIncident.status)}>
                          {getStatusText(selectedIncident.status)}
                        </Badge>
                      </div>
                    </div>
                  </div>
                </div>
              </div>

              <div className="bg-muted/20 rounded-lg p-4">
                <h4 className="font-semibold text-foreground mb-3">Descrição Completa</h4>
                <p className="text-muted-foreground leading-relaxed">
                  {selectedIncident.description}
                </p>
              </div>
            </div>
          )}
        </DialogContent>
      </Dialog>
    </>
  );
};

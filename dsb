import React, { useState, useEffect, useCallback, memo } from 'react';
import { Button } from '@/components/ui/button';
import { Textarea } from '@/components/ui/textarea';
import { Input } from '@/components/ui/input';
import { Label } from '@/components/ui/label';
import { Trash2, Plus, MessageSquare, Clock, User, RefreshCw, AlertTriangle } from 'lucide-react';
import { useToast } from '@/hooks/use-toast';

interface ShiftNote {
  id: string;
  author: string;
  message: string;
  timestamp: string;
  priority: 'normal' | 'important';
}

const formatTimestamp = (timestamp: string) => {
  try {
    const date = new Date(timestamp);
    return date.toLocaleString('pt-BR', {
      day: '2-digit',
      month: '2-digit',
      hour: '2-digit',
      minute: '2-digit',
    });
  } catch {
    return timestamp || '';
  }
};

const ShiftNoteItem = memo(({ note, onRemoveNote }: { note: ShiftNote; onRemoveNote: (id: string) => void }) => {
  return (
    <div className={`group relative overflow-hidden rounded-xl border backdrop-blur-sm transition-all duration-300 animate-fade-in hover:shadow-elevated hover:scale-[1.02] ${
      note.priority === 'important' 
        ? 'border-warning/30 bg-important-gradient shadow-soft' 
        : 'border-border/50 bg-note-gradient shadow-soft'
    }`}>
      <div className="p-4 sm:p-6">
        <div className="flex items-start justify-between gap-4">
          <div className="flex-1 min-w-0">
            <div className="flex flex-wrap items-center gap-x-4 gap-y-2 mb-3">
              <div className="flex items-center gap-2 text-sm font-medium text-foreground/80">
                <User className="h-4 w-4 text-primary" />
                <span className="truncate max-w-32 sm:max-w-none">{note.author}</span>
              </div>
              <div className="flex items-center gap-2 text-sm text-muted-foreground">
                <Clock className="h-4 w-4" />
                <span className="whitespace-nowrap">{formatTimestamp(note.timestamp)}</span>
              </div>
              {note.priority === 'important' && (
                <div className="flex items-center gap-1.5 px-3 py-1 bg-warning text-warning-foreground rounded-full text-xs font-semibold shadow-sm">
                  <AlertTriangle className="h-3 w-3" />
                  IMPORTANTE
                </div>
              )}
            </div>
            <p className="text-foreground leading-relaxed whitespace-pre-wrap break-words text-sm sm:text-base">
              {note.message}
            </p>
          </div>
          <Button
            variant="ghost"
            size="icon"
            onClick={() => onRemoveNote(note.id)}
            className="text-muted-foreground hover:text-destructive hover:bg-destructive/10 shrink-0 opacity-60 group-hover:opacity-100 transition-opacity duration-200"
            aria-label="Remover recado"
          >
            <Trash2 className="h-4 w-4" />
          </Button>
        </div>
      </div>
    </div>
  );
});

const ShiftNoteList = ({ notes, onRemoveNote }: { notes: ShiftNote[]; onRemoveNote: (id: string) => void }) => {
  if (!notes || notes.length === 0) {
    return (
      <div className="text-center py-12 animate-fade-in">
        <MessageSquare className="h-12 w-12 text-muted-foreground/40 mx-auto mb-4" />
        <p className="text-muted-foreground text-lg">Nenhum recado no turno atual</p>
        <p className="text-muted-foreground/60 text-sm mt-1">Seja o primeiro a deixar um recado!</p>
      </div>
    );
  }

  return (
    <div className="space-y-4 max-h-[60vh] overflow-y-auto pr-2 scrollbar-thin scrollbar-thumb-border scrollbar-track-transparent">
      {notes.map((note, index) => (
        <div key={note.id} style={{ animationDelay: `${index * 100}ms` }}>
          <ShiftNoteItem note={note} onRemoveNote={onRemoveNote} />
        </div>
      ))}
    </div>
  );
};

const ShiftNoteForm = ({
  authorName,
  setAuthorName,
  newNote,
  setNewNote,
  isImportant,
  setIsImportant,
  onAddNote,
  loading,
}: {
  authorName: string;
  setAuthorName: (val: string) => void;
  newNote: string;
  setNewNote: (val: string) => void;
  isImportant: boolean;
  setIsImportant: (val: boolean) => void;
  onAddNote: () => void;
  loading: boolean;
}) => {
  return (
    <div className="relative overflow-hidden rounded-xl border border-border/50 bg-card backdrop-blur-sm shadow-elevated">
      <div className="p-6 space-y-6">
        <div className="flex items-center gap-3">
          <div className="p-2 rounded-lg bg-primary/10">
            <MessageSquare className="h-6 w-6 text-primary" />
          </div>
          <div>
            <h2 className="text-xl font-semibold text-foreground">Recados do Turno</h2>
            <p className="text-sm text-muted-foreground">Deixe informações importantes para o próximo turno</p>
          </div>
        </div>

        <div className="grid gap-4 sm:grid-cols-2">
          <div className="space-y-2">
            <Label htmlFor="author-name" className="text-sm font-medium">
              Seu Nome
            </Label>
            <Input
              id="author-name"
              value={authorName}
              onChange={(e) => setAuthorName(e.target.value)}
              placeholder="Digite seu nome"
              className="bg-background/50 border-border/50 focus:bg-background transition-colors"
            />
          </div>
        </div>

        <div className="space-y-2">
          <Label htmlFor="note-message" className="text-sm font-medium">
            Mensagem do Recado
          </Label>
          <Textarea
            id="note-message"
            value={newNote}
            onChange={(e) => setNewNote(e.target.value)}
            placeholder="Digite o recado para o próximo turno..."
            className="bg-background/50 border-border/50 focus:bg-background transition-colors min-h-[120px] resize-none"
            rows={4}
          />
        </div>

        <div className="flex flex-col sm:flex-row items-start sm:items-center justify-between gap-4 pt-2">
          <div className="flex items-center gap-3">
            <input
              type="checkbox"
              id="important-checkbox"
              checked={isImportant}
              onChange={(e) => setIsImportant(e.target.checked)}
              className="h-4 w-4 rounded border-border/50 text-primary focus:ring-primary/20 focus:ring-2"
            />
            <Label htmlFor="important-checkbox" className="text-sm font-medium cursor-pointer select-none">
              Marcar como importante
            </Label>
          </div>
          <Button 
            onClick={onAddNote} 
            disabled={loading || !newNote.trim() || !authorName.trim()}
            className="w-full sm:w-auto bg-primary hover:bg-primary-hover text-primary-foreground shadow-sm disabled:opacity-50 disabled:cursor-not-allowed transition-all duration-200"
          >
            {loading ? (
              <RefreshCw className="h-4 w-4 mr-2 animate-spin" />
            ) : (
              <Plus className="h-4 w-4 mr-2" />
            )}
            {loading ? 'Adicionando...' : 'Adicionar Recado'}
          </Button>
        </div>
      </div>
    </div>
  );
};

const API_URL = 'https://f6ffk8e9fe.execute-api.us-east-1.amazonaws.com/prod/recadosturno';

async function postShiftNote(nome: string, recado: string, importante: boolean) {
  const response = await fetch(API_URL, {
    method: 'POST',
    headers: { 'Content-Type': 'application/json' },
    body: JSON.stringify({ nome, recado, importante }),
  });
  if (!response.ok) {
    const errorData = await response.text();
    console.error('POST error:', response.status, errorData);
    throw new Error(JSON.parse(errorData || '{}').error || 'Erro ao salvar recado');
  }
  return response.json();
}

async function deleteShiftNote(key: string) {
  const response = await fetch(API_URL, {
    method: 'DELETE',
    headers: { 'Content-Type': 'application/json' },
    body: JSON.stringify({ key }),
  });
  if (!response.ok) {
    const errorData = await response.text();
    console.error('DELETE error:', response.status, errorData);
    throw new Error(JSON.parse(errorData || '{}').error || 'Erro ao remover recado');
  }
  return response.json();
}

async function getShiftNotes(): Promise<ShiftNote[]> {
  const response = await fetch(API_URL, { method: 'GET' });

  if (!response.ok) {
    const txt = await response.text();
    console.error('GET error:', response.status, txt);
    throw new Error(txt || 'Erro ao carregar recados');
  }

  const text = await response.text();
  let parsed: any = null;
  if (!text) {
    parsed = null;
  } else {
    try {
      parsed = JSON.parse(text);
    } catch (err) {
      console.error('Erro ao parsear JSON do GET:', err, 'texto:', text);
      throw new Error('Resposta inválida do servidor');
    }
  }

  let rawNotes: any[] = [];
  if (parsed == null) {
    rawNotes = [];
  } else if (Array.isArray(parsed)) {
    rawNotes = parsed;
  } else if (parsed.notes && Array.isArray(parsed.notes)) {
    rawNotes = parsed.notes;
  } else if (parsed.recados && Array.isArray(parsed.recados)) {
    rawNotes = parsed.recados;
  } else if (parsed && (parsed.nome || parsed.recado || parsed.key)) {
    rawNotes = [parsed];
  } else {
    console.warn('Formato inesperado do payload GET:', parsed);
    rawNotes = [];
  }

  return rawNotes.map((item: any, idx: number) => ({
    id: item.key || item.id || item.Key || `note-${idx}`,
    author: item.nome || item.author || '',
    message: item.recado || item.message || '',
    timestamp: item.timestamp || item.ts || new Date().toISOString(),
    priority: item.importante ? 'important' : 'normal',
  }));
}

export const ShiftNotes = () => {
  const { toast } = useToast();
  const [notes, setNotes] = useState<ShiftNote[]>([]);
  const [newNote, setNewNote] = useState('');
  const [authorName, setAuthorName] = useState('');
  const [isImportant, setIsImportant] = useState(false);
  const [loading, setLoading] = useState(false);
  const [addingNote, setAddingNote] = useState(false);
  const [error, setError] = useState<string | null>(null);

  const loadNotes = useCallback(async () => {
    setLoading(true);
    setError(null);
    try {
      const fetchedNotes = await getShiftNotes();
      setNotes(fetchedNotes);
    } catch (err: any) {
      console.error('Erro ao carregar recados:', err);
      setError(err.message || 'Erro ao carregar recados');
      toast({
        title: 'Erro',
        description: err.message || 'Não foi possível carregar os recados.',
        variant: 'destructive',
      });
    } finally {
      setLoading(false);
    }
  }, [toast]);

  useEffect(() => {
    loadNotes();

    const savedAuthor = localStorage.getItem('shiftNotesAuthor');
    if (savedAuthor) setAuthorName(savedAuthor);
  }, [loadNotes]);

  useEffect(() => {
    if (authorName) {
      localStorage.setItem('shiftNotesAuthor', authorName);
    }
  }, [authorName]);

  const addNote = useCallback(async () => {
    if (!newNote.trim() || !authorName.trim()) {
      toast({
        title: 'Campos obrigatórios',
        description: 'Preencha seu nome e a mensagem do recado.',
        variant: 'destructive',
      });
      return;
    }
    
    setAddingNote(true);
    try {
      const data = await postShiftNote(authorName.trim(), newNote.trim(), isImportant);
      const note: ShiftNote = {
        id: data.key,
        author: authorName.trim(),
        message: newNote.trim(),
        timestamp: data.timestamp,
        priority: isImportant ? 'important' : 'normal',
      };
      setNotes((prev) => [note, ...prev]);
      setNewNote('');
      setIsImportant(false);
      toast({ 
        title: 'Recado adicionado!', 
        description: 'O recado foi salvo com sucesso.',
        variant: 'default'
      });
    } catch (error: any) {
      toast({
        title: 'Erro',
        description: error.message || 'Não foi possível salvar o recado.',
        variant: 'destructive',
      });
    } finally {
      setAddingNote(false);
    }
  }, [newNote, authorName, isImportant, toast]);

  const removeNote = useCallback(async (noteId: string) => {
    try {
      await deleteShiftNote(noteId);
      setNotes((prev) => prev.filter((note) => note.id !== noteId));
      toast({ 
        title: 'Recado removido', 
        description: 'O recado foi removido com sucesso.',
        variant: 'destructive' 
      });
    } catch (error: any) {
      toast({
        title: 'Erro',
        description: error.message || 'Não foi possível remover o recado.',
        variant: 'destructive',
      });
    }
  }, [toast]);

  return (
    <div className="min-h-screen bg-gradient-to-br from-background via-background to-muted/20 p-4 sm:p-6 lg:p-8">
      <div className="max-w-4xl mx-auto space-y-8">
        <ShiftNoteForm
          authorName={authorName}
          setAuthorName={setAuthorName}
          newNote={newNote}
          setNewNote={setNewNote}
          isImportant={isImportant}
          setIsImportant={setIsImportant}
          onAddNote={addNote}
          loading={addingNote}
        />

        <div className="space-y-6">
          <div className="flex items-center justify-between gap-4">
            <div>
              <h3 className="text-2xl font-semibold text-foreground">Recados Ativos</h3>
              <p className="text-muted-foreground text-sm mt-1">
                {notes.length > 0 ? `${notes.length} recado${notes.length > 1 ? 's' : ''}` : 'Nenhum recado'}
              </p>
            </div>
            <Button 
              onClick={loadNotes} 
              variant="outline"
              size="sm"
              disabled={loading}
              className="shrink-0 border-border/50 hover:bg-muted/50"
            >
              <RefreshCw className={`h-4 w-4 mr-2 ${loading ? 'animate-spin' : ''}`} />
              Atualizar
            </Button>
          </div>

          {loading && !addingNote ? (
            <div className="text-center py-12 animate-fade-in">
              <RefreshCw className="h-8 w-8 text-primary mx-auto mb-4 animate-spin" />
              <p className="text-muted-foreground">Carregando recados...</p>
            </div>
          ) : error ? (
            <div className="text-center py-12 animate-fade-in">
              <AlertTriangle className="h-12 w-12 text-destructive/60 mx-auto mb-4" />
              <p className="text-destructive text-lg font-medium">Erro ao carregar recados</p>
              <p className="text-muted-foreground text-sm mt-1">Tente novamente em alguns instantes</p>
              <Button onClick={loadNotes} variant="outline" className="mt-4">
                Tentar novamente
              </Button>
            </div>
          ) : (
            <ShiftNoteList notes={notes} onRemoveNote={removeNote} />
          )}
        </div>
      </div>
    </div>
  );
};

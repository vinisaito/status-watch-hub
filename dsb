import { useState } from 'react';
import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';
import { Badge } from '@/components/ui/badge';
import { 
  ChevronDown, 
  ChevronRight, 
  Calendar, 
  User, 
  AlertCircle,
  Clock,
  CheckCircle2,
  AlertTriangle,
  Circle,
  Settings
} from 'lucide-react';
import { Button } from '@/components/ui/button';
import {
  Dialog,
  DialogContent,
  DialogHeader,
  DialogTitle,
  DialogDescription
} from '@/components/ui/dialog';

interface RDM {
  id: string;
  rdmNumber: string;
  title: string;
  responsible: string;
  status: 'open' | 'in_progress' | 'pending' | 'done';
  priority: 'high' | 'medium' | 'low';
  startDate: string;
  endDate?: string;
  description: string;
  team: string;
  estimatedDuration?: string;
}

export const RDMTracker = () => {
  const [expandedRDM, setExpandedRDM] = useState<string | null>(null);
  const [selectedRDM, setSelectedRDM] = useState<RDM | null>(null);

  // Mock data - replace with real API data
  const rdms: RDM[] = [
    {
      id: 'rdm-001',
      rdmNumber: 'RDM-2024-001',
      title: 'Atualização Sistema Monitoramento',
      responsible: 'Equipe Infra',
      status: 'in_progress',
      priority: 'high',
      startDate: '14:00',
      endDate: '16:00',
      description: 'Atualização planejada do sistema de monitoramento principal com novas funcionalidades e patches de segurança.',
      team: 'Infraestrutura',
      estimatedDuration: '2h'
    },
    {
      id: 'rdm-002',
      rdmNumber: 'RDM-2024-002',
      title: 'Implementação Backup Redundante',
      responsible: 'Equipe Cloud',
      status: 'pending',
      priority: 'medium',
      startDate: '18:00',
      endDate: '19:00',
      description: 'Implementação de sistema de backup redundante para maior segurança dos dados críticos.',
      team: 'Cloud',
      estimatedDuration: '1h'
    },
    {
      id: 'rdm-003',
      rdmNumber: 'RDM-2024-003',
      title: 'Migração Servidores Cloud',
      responsible: 'Equipe SysAdmin',
      status: 'open',
      priority: 'high',
      startDate: '20:00',
      endDate: '24:00',
      description: 'Migração de servidores para nova infraestrutura em nuvem com zero downtime.',
      team: 'SysAdmin',
      estimatedDuration: '4h'
    },
    {
      id: 'rdm-004',
      rdmNumber: 'RDM-2024-004',
      title: 'Manutenção Rede Principal',
      responsible: 'Equipe Rede',
      status: 'done',
      priority: 'low',
      startDate: '10:00',
      endDate: '12:00',
      description: 'Manutenção preventiva dos equipamentos de rede principal.',
      team: 'Rede',
      estimatedDuration: '2h'
    }
  ];

  const getStatusBadgeClass = (status: string) => {
    switch (status) {
      case 'open':
        return 'bg-blue-500/90 text-white border-blue-400/50 shadow-md';
      case 'in_progress':
        return 'bg-status-ongoing text-status-ongoing-foreground border-status-ongoing/30 shadow-md';
      case 'pending':
        return 'bg-orange-500/90 text-white border-orange-400/50 shadow-md';
      case 'done':
        return 'bg-status-resolved text-status-resolved-foreground border-status-resolved/30 shadow-md';
      default:
        return 'bg-muted text-muted-foreground';
    }
  };

  const getStatusText = (status: string) => {
    switch (status) {
      case 'open':
        return 'Aberta';
      case 'in_progress':
        return 'Em Progresso';
      case 'pending':
        return 'Pendente';
      case 'done':
        return 'Finalizada';
      default:
        return 'Desconhecido';
    }
  };

  const getStatusIcon = (status: string) => {
    switch (status) {
      case 'open':
        return <Circle className="h-4 w-4" />;
      case 'in_progress':
        return <Settings className="h-4 w-4 animate-spin" />;
      case 'pending':
        return <Clock className="h-4 w-4" />;
      case 'done':
        return <CheckCircle2 className="h-4 w-4" />;
      default:
        return <Circle className="h-4 w-4" />;
    }
  };

  const getPriorityIcon = (priority: string) => {
    switch (priority) {
      case 'high':
        return <AlertTriangle className="h-4 w-4 text-status-escalated" />;
      case 'medium':
        return <AlertCircle className="h-4 w-4 text-status-ongoing" />;
      case 'low':
        return <Circle className="h-4 w-4 text-status-resolved" />;
      default:
        return <Circle className="h-4 w-4 text-muted-foreground" />;
    }
  };

  const getPriorityColor = (priority: string) => {
    switch (priority) {
      case 'high':
        return 'text-status-escalated';
      case 'medium':
        return 'text-status-ongoing';
      case 'low':
        return 'text-status-resolved';
      default:
        return 'text-muted-foreground';
    }
  };

  const getPriorityText = (priority: string) => {
    switch (priority) {
      case 'high':
        return 'Alta';
      case 'medium':
        return 'Média';
      case 'low':
        return 'Baixa';
      default:
        return 'Normal';
    }
  };

  const toggleExpanded = (id: string) => {
    setExpandedRDM(prev => prev === id ? null : id);
  };

  const openModal = (rdm: RDM) => {
    setSelectedRDM(rdm);
  };

  const closeModal = () => {
    setSelectedRDM(null);
  };

  const activeRDMs = rdms.filter(rdm => rdm.status !== 'done').length;

  return (
    <>
      <Card className="gradient-card shadow-card border-panel-border transition-smooth hover:shadow-hover">
        <CardHeader className="flex flex-row items-center justify-between space-y-0 pb-3">
          <CardTitle className="text-primary flex items-center gap-3 text-xl font-bold">
            <div className="relative">
              <Calendar className="h-6 w-6" />
              {activeRDMs > 0 && (
                <div className="absolute -top-1 -right-1 w-3 h-3 bg-status-ongoing rounded-full animate-pulse-glow border border-background" />
              )}
            </div>
            <span>Acompanhamento de RDMs</span>
            {activeRDMs > 0 && (
              <Badge variant="outline" className="ml-2 px-2 py-1 bg-status-ongoing/10 text-status-ongoing border-status-ongoing/30">
                {activeRDMs} ativas
              </Badge>
            )}
          </CardTitle>
        </CardHeader>

        <CardContent className="space-y-3">
          {rdms.map((rdm, index) => (
            <div
              key={rdm.id}
              className="group relative border border-panel-border rounded-xl p-4 bg-background/60 hover:bg-hover-bg/50 transition-smooth shadow-sm hover:shadow-card animate-fade-in"
              style={{ animationDelay: `${index * 100}ms` }}
            >
              {/* Priority indicator */}
              <div className={`absolute left-0 top-4 bottom-4 w-1 rounded-r-lg transition-smooth ${
                rdm.priority === 'high' ? 'bg-status-escalated' :
                rdm.priority === 'medium' ? 'bg-status-ongoing' :
                'bg-status-resolved'
              }`} />

              <div className="flex flex-col lg:flex-row lg:items-center justify-between gap-4 ml-4">
                {/* Main content */}
                <div className="flex items-start gap-4 flex-1 min-w-0">
                  <Button
                    variant="ghost"
                    size="icon"
                    onClick={() => toggleExpanded(rdm.id)}
                    className="shrink-0 p-1 h-8 w-8 hover:bg-accent/50 rounded-full transition-smooth"
                  >
                    {expandedRDM === rdm.id ? (
                      <ChevronDown className="h-4 w-4 text-muted-foreground" />
                    ) : (
                      <ChevronRight className="h-4 w-4 text-muted-foreground" />
                    )}
                  </Button>

                  <div className="flex-1 min-w-0">
                    <div className="flex items-center gap-2 mb-2 flex-wrap">
                      <span className="font-mono text-sm bg-accent/30 px-2 py-1 rounded-md text-accent-foreground font-semibold">
                        {rdm.rdmNumber}
                      </span>
                      <h4 className="font-semibold text-foreground truncate lg:text-base">
                        {rdm.title}
                      </h4>
                      {getPriorityIcon(rdm.priority)}
                    </div>

                    <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-3 text-sm text-muted-foreground">
                      <div className="flex items-center gap-2">
                        <User className="h-4 w-4 shrink-0" />
                        <span className="truncate">{rdm.responsible}</span>
                      </div>
                      <div className="flex items-center gap-2">
                        <Calendar className="h-4 w-4 shrink-0" />
                        <span className="truncate">
                          {rdm.startDate} {rdm.endDate && `- ${rdm.endDate}`}
                        </span>
                      </div>
                      <div className="flex items-center gap-2">
                        <Clock className="h-4 w-4 shrink-0" />
                        <span className="truncate">{rdm.estimatedDuration || 'N/A'}</span>
                      </div>
                    </div>
                  </div>
                </div>
                
                {/* Status and actions */}
                <div className="flex items-center gap-3 lg:ml-4 justify-between lg:justify-end">
                  <div className="flex items-center gap-2">
                    <span className="text-sm text-muted-foreground font-medium hidden md:inline">
                      {rdm.team}
                    </span>
                    <Badge className={`${getStatusBadgeClass(rdm.status)} flex items-center gap-1.5 px-3 py-1`}>
                      {getStatusIcon(rdm.status)}
                      {getStatusText(rdm.status)}
                    </Badge>
                  </div>
                  
                  <Button
                    variant="outline"
                    size="sm"
                    className="hover:bg-accent/50 transition-smooth border-border"
                    onClick={() => openModal(rdm)}
                  >
                    Detalhes
                  </Button>
                </div>
              </div>

              {/* Expanded content */}
              {expandedRDM === rdm.id && (
                <div className="mt-4 ml-4 pt-4 border-t border-panel-border animate-slide-down">
                  <div className="bg-accent/20 rounded-lg p-4 border border-accent/30">
                    <h5 className="font-semibold text-foreground mb-2 flex items-center gap-2">
                      <AlertCircle className="h-4 w-4" />
                      Descrição da RDM
                    </h5>
                    <p className="text-sm text-muted-foreground leading-relaxed">
                      {rdm.description}
                    </p>
                  </div>
                </div>
              )}
            </div>
          ))}
          
          {rdms.length === 0 && (
            <div className="text-center py-12 animate-fade-in">
              <Calendar className="h-12 w-12 text-muted-foreground mx-auto mb-4 opacity-50" />
              <p className="text-muted-foreground text-lg font-medium">
                Nenhuma RDM em andamento
              </p>
              <p className="text-muted-foreground/70 text-sm mt-1">
                Todas as mudanças planejadas foram finalizadas
              </p>
            </div>
          )}
        </CardContent>
      </Card>

      {/* Modal */}
      <Dialog open={!!selectedRDM} onOpenChange={closeModal}>
        <DialogContent className="max-w-2xl gradient-card">
          <DialogHeader>
            <DialogTitle className="text-xl flex items-center gap-3">
              <div className="p-2 rounded-lg bg-primary/10">
                <Calendar className="h-5 w-5 text-primary" />
              </div>
              {selectedRDM?.rdmNumber} - {selectedRDM?.title}
            </DialogTitle>
            <DialogDescription className="text-base">
              Detalhes completos da mudança planejada
            </DialogDescription>
          </DialogHeader>

          {selectedRDM && (
            <div className="space-y-6 py-4">
              {/* Status and Priority */}
              <div className="flex flex-wrap items-center gap-4">
                <Badge className={`${getStatusBadgeClass(selectedRDM.status)} flex items-center gap-2 px-3 py-2`}>
                  {getStatusIcon(selectedRDM.status)}
                  {getStatusText(selectedRDM.status)}
                </Badge>
                <div className="flex items-center gap-2">
                  {getPriorityIcon(selectedRDM.priority)}
                  <span className={`font-semibold ${getPriorityColor(selectedRDM.priority)}`}>
                    Prioridade {getPriorityText(selectedRDM.priority)}
                  </span>
                </div>
              </div>

              {/* Details Grid */}
              <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
                <div className="space-y-4">
                  <div className="flex items-center gap-3 p-3 bg-accent/10 rounded-lg border border-accent/20">
                    <User className="h-5 w-5 text-primary" />
                    <div>
                      <p className="text-sm text-muted-foreground">Responsável</p>
                      <p className="font-semibold text-foreground">{selectedRDM.responsible}</p>
                    </div>
                  </div>
                  
                  <div className="flex items-center gap-3 p-3 bg-accent/10 rounded-lg border border-accent/20">
                    <Settings className="h-5 w-5 text-primary" />
                    <div>
                      <p className="text-sm text-muted-foreground">Equipe</p>
                      <p className="font-semibold text-foreground">{selectedRDM.team}</p>
                    </div>
                  </div>
                </div>

                <div className="space-y-4">
                  <div className="flex items-center gap-3 p-3 bg-accent/10 rounded-lg border border-accent/20">
                    <Calendar className="h-5 w-5 text-primary" />
                    <div>
                      <p className="text-sm text-muted-foreground">Janela de Execução</p>
                      <p className="font-semibold text-foreground">
                        {selectedRDM.startDate} {selectedRDM.endDate && `- ${selectedRDM.endDate}`}
                      </p>
                    </div>
                  </div>
                  
                  <div className="flex items-center gap-3 p-3 bg-accent/10 rounded-lg border border-accent/20">
                    <Clock className="h-5 w-5 text-primary" />
                    <div>
                      <p className="text-sm text-muted-foreground">Duração Estimada</p>
                      <p className="font-semibold text-foreground">{selectedRDM.estimatedDuration || 'N/A'}</p>
                    </div>
                  </div>
                </div>
              </div>

              {/* Description */}
              <div className="bg-accent/20 rounded-lg p-4 border border-accent/30">
                <h4 className="font-semibold text-foreground mb-3 flex items-center gap-2">
                  <AlertCircle className="h-4 w-4" />
                  Descrição Detalhada
                </h4>
                <p className="text-muted-foreground leading-relaxed">
                  {selectedRDM.description}
                </p>
              </div>
            </div>
          )}
        </DialogContent>
      </Dialog>
    </>
  );
};

import React, { useState, useEffect, useCallback, memo } from 'react';
import { Button } from '@/components/ui/button';
import { Textarea } from '@/components/ui/textarea';
import { Input } from '@/components/ui/input';
import { Label } from '@/components/ui/label';
import { Trash2, Plus, MessageSquare, Clock, User, AlertTriangle } from 'lucide-react';
import { useToast } from '@/hooks/use-toast';

interface ShiftNote {
  id: string;
  author: string;
  message: string;
  timestamp: string;
  priority: 'normal' | 'important';
}

const formatTimestamp = (timestamp: string) => {
  try {
    const date = new Date(timestamp);
    return date.toLocaleString('pt-BR', {
      day: '2-digit',
      month: '2-digit',
      hour: '2-digit',
      minute: '2-digit',
    });
  } catch {
    return timestamp || '';
  }
};

const ShiftNoteItem = memo(({ note, onRemoveNote }: { note: ShiftNote; onRemoveNote: (id: string) => void }) => {
  return (
    <div className={`group relative border rounded-xl p-5 backdrop-blur-sm transition-all duration-300 hover:shadow-lg hover:scale-[1.02] ${
      note.priority === 'important' 
        ? 'border-warning/50 bg-gradient-to-br from-warning/10 via-warning/5 to-transparent shadow-warning/20' 
        : 'border-border/60 bg-gradient-to-br from-card/80 via-card/60 to-transparent hover:border-primary/30'
    }`}>
      <div className="flex items-start justify-between gap-4">
        <div className="flex-1 space-y-3">
          <div className="flex flex-wrap items-center gap-x-4 gap-y-2">
            <div className="flex items-center gap-2 text-sm font-medium text-foreground">
              <div className="w-8 h-8 bg-gradient-to-br from-primary/20 to-primary/10 rounded-full flex items-center justify-center">
                <User className="h-4 w-4 text-primary" />
              </div>
              <span>{note.author}</span>
            </div>
            <div className="flex items-center gap-2 text-sm text-muted-foreground">
              <Clock className="h-4 w-4" />
              <span>{formatTimestamp(note.timestamp)}</span>
            </div>
            {note.priority === 'important' && (
              <span className="inline-flex items-center gap-1 text-xs px-3 py-1 bg-gradient-to-r from-warning to-warning/80 text-warning-foreground rounded-full font-semibold shadow-sm">
                <AlertTriangle className="h-3 w-3" />
                IMPORTANTE
              </span>
            )}
          </div>
          <div className="pl-10">
            <p className="text-foreground whitespace-pre-wrap break-words leading-relaxed">{note.message}</p>
          </div>
        </div>
        <Button
          variant="ghost"
          size="icon"
          onClick={() => onRemoveNote(note.id)}
          className="text-muted-foreground hover:text-destructive hover:bg-destructive/10 hover:scale-110 transition-all duration-200 rounded-xl opacity-0 group-hover:opacity-100"
          aria-label="Remover recado"
        >
          <Trash2 className="h-4 w-4" />
        </Button>
      </div>
    </div>
  );
});

const ShiftNoteList = ({ notes, onRemoveNote }: { notes: ShiftNote[]; onRemoveNote: (id: string) => void }) => {
  if (!notes || notes.length === 0) {
    return (
      <div className="text-center py-16">
        <div className="w-16 h-16 bg-gradient-to-br from-muted/50 to-muted/30 rounded-full flex items-center justify-center mx-auto mb-4">
          <MessageSquare className="h-8 w-8 text-muted-foreground" />
        </div>
        <p className="text-muted-foreground font-medium">Nenhum recado no turno atual</p>
        <p className="text-sm text-muted-foreground/70 mt-1">Adicione o primeiro recado para começar</p>
      </div>
    );
  }
  return <div className="space-y-4">{notes.map((note) => <ShiftNoteItem key={note.id} note={note} onRemoveNote={onRemoveNote} />)}</div>;
};

const ShiftNoteForm = ({
  authorName,
  setAuthorName,
  newNote,
  setNewNote,
  isImportant,
  setIsImportant,
  onAddNote,
}: {
  authorName: string;
  setAuthorName: (val: string) => void;
  newNote: string;
  setNewNote: (val: string) => void;
  isImportant: boolean;
  setIsImportant: (val: boolean) => void;
  onAddNote: () => void;
}) => {
  return (
    <div className="relative border border-border/60 rounded-2xl p-6 bg-gradient-to-br from-card via-card/90 to-card/80 backdrop-blur-sm shadow-lg">
      {/* Gradient overlay */}
      <div className="absolute inset-0 bg-gradient-to-br from-primary/5 via-transparent to-secondary/5 rounded-2xl pointer-events-none" />
      
      <div className="relative space-y-6">
        <div className="text-center mb-6">
          <div className="flex items-center justify-center gap-3 mb-2">
            <div className="w-10 h-10 bg-gradient-to-br from-primary to-primary/80 rounded-xl flex items-center justify-center shadow-lg">
              <MessageSquare className="h-5 w-5 text-primary-foreground" />
            </div>
            <h2 className="text-2xl font-bold bg-gradient-to-r from-primary to-primary/80 bg-clip-text text-transparent">
              Recados do Turno
            </h2>
          </div>
          <p className="text-sm text-muted-foreground">Compartilhe informações importantes com o próximo turno</p>
        </div>

        <div className="grid gap-6">
          <div className="space-y-2">
            <Label htmlFor="author-name" className="text-sm font-semibold text-foreground">Seu Nome</Label>
            <Input
              id="author-name"
              value={authorName}
              onChange={(e) => setAuthorName(e.target.value)}
              placeholder="Digite seu nome"
              className="bg-background/80 border-border/60 focus:border-primary/50 transition-all duration-200 rounded-xl"
            />
          </div>
          
          <div className="space-y-2">
            <Label htmlFor="note-message" className="text-sm font-semibold text-foreground">Recado</Label>
            <Textarea
              id="note-message"
              value={newNote}
              onChange={(e) => setNewNote(e.target.value)}
              placeholder="Digite o recado para o próximo turno..."
              className="bg-background/80 border-border/60 focus:border-primary/50 transition-all duration-200 rounded-xl min-h-[120px] resize-none"
            />
          </div>
          
          <div className="flex flex-col sm:flex-row items-center justify-between gap-4 pt-2">
            <div className="flex items-center gap-3 self-start sm:self-center">
              <div className="relative">
                <input
                  type="checkbox"
                  id="important-checkbox"
                  checked={isImportant}
                  onChange={(e) => setIsImportant(e.target.checked)}
                  className="h-5 w-5 rounded-md border-border/60 text-warning focus:ring-warning/20 transition-all duration-200"
                />
              </div>
              <Label htmlFor="important-checkbox" className="text-sm font-medium cursor-pointer flex items-center gap-2">
                <span>Marcar como importante</span>
                {isImportant && <AlertTriangle className="h-4 w-4 text-warning" />}
              </Label>
            </div>
            
            <Button 
              onClick={onAddNote} 
              className="w-full sm:w-auto bg-gradient-to-r from-primary to-primary/90 hover:from-primary/90 hover:to-primary text-primary-foreground shadow-lg hover:shadow-xl hover:scale-105 transition-all duration-200 rounded-xl px-6"
            >
              <Plus className="h-4 w-4 mr-2" />
              Adicionar Recado
            </Button>
          </div>
        </div>
      </div>
    </div>
  );
};

const API_URL = 'https://f6ffk8e9fe.execute-api.us-east-1.amazonaws.com/prod/recadosturno';

// POST/DELETE unchanged (assuming backend works)
async function postShiftNote(nome: string, recado: string, importante: boolean) {
  const response = await fetch(API_URL, {
    method: 'POST',
    headers: { 'Content-Type': 'application/json' },
    body: JSON.stringify({ nome, recado, importante }),
  });
  if (!response.ok) {
    const errorData = await response.text();
    console.error('POST error:', response.status, errorData);
    throw new Error(JSON.parse(errorData || '{}').error || 'Erro ao salvar recado');
  }
  return response.json();
}

async function deleteShiftNote(key: string) {
  const response = await fetch(API_URL, {
    method: 'DELETE',
    headers: { 'Content-Type': 'application/json' },
    body: JSON.stringify({ key }),
  });
  if (!response.ok) {
    const errorData = await response.text();
    console.error('DELETE error:', response.status, errorData);
    throw new Error(JSON.parse(errorData || '{}').error || 'Erro ao remover recado');
  }
  return response.json();
}

// Robust GET + normalization
async function getShiftNotes(): Promise<ShiftNote[]> {
  const response = await fetch(API_URL, { method: 'GET' });

  if (!response.ok) {
    const txt = await response.text();
    console.error('GET error:', response.status, txt);
    throw new Error(txt || 'Erro ao carregar recados');
  }

  // read text then parse safely
  const text = await response.text();
  let parsed: any = null;
  if (!text) {
    parsed = null;
  } else {
    try {
      parsed = JSON.parse(text);
    } catch (err) {
      console.error('Erro ao parsear JSON do GET:', err, 'texto:', text);
      throw new Error('Resposta inválida do servidor');
    }
  }

  // normalize to array
  let rawNotes: any[] = [];
  if (parsed == null) {
    rawNotes = [];
  } else if (Array.isArray(parsed)) {
    rawNotes = parsed;
  } else if (parsed.notes && Array.isArray(parsed.notes)) {
    rawNotes = parsed.notes;
  } else if (parsed.recados && Array.isArray(parsed.recados)) {
    rawNotes = parsed.recados;
  } else if (parsed && (parsed.nome || parsed.recado || parsed.key)) {
    // single object returned
    rawNotes = [parsed];
  } else {
    // unknown shape
    console.warn('Formato inesperado do payload GET:', parsed);
    rawNotes = [];
  }

  // map to ShiftNote
  return rawNotes.map((item: any, idx: number) => ({
    id: item.key || item.id || item.Key || `note-${idx}`,
    author: item.nome || item.author || '',
    message: item.recado || item.message || '',
    timestamp: item.timestamp || item.ts || new Date().toISOString(),
    priority: item.importante ? 'important' : 'normal',
  }));
}

export const ShiftNotes = () => {
  const { toast } = useToast();
  const [notes, setNotes] = useState<ShiftNote[]>([]);
  const [newNote, setNewNote] = useState('');
  const [authorName, setAuthorName] = useState('');
  const [isImportant, setIsImportant] = useState(false);
  const [loading, setLoading] = useState(false);
  const [error, setError] = useState<string | null>(null);

  const loadNotes = useCallback(async () => {
    setLoading(true);
    setError(null);
    try {
      const fetchedNotes = await getShiftNotes();
      setNotes(fetchedNotes);
    } catch (err: any) {
      console.error('Erro ao carregar recados:', err);
      setError(err.message || 'Erro ao carregar recados');
      toast({
        title: 'Erro',
        description: err.message || 'Não foi possível carregar os recados.',
        variant: 'destructive',
      });
    } finally {
      setLoading(false);
    }
  }, [toast]);

  useEffect(() => {
    loadNotes();

    const savedAuthor = localStorage.getItem('shiftNotesAuthor');
    if (savedAuthor) setAuthorName(savedAuthor);
  }, [loadNotes]);

  useEffect(() => {
    if (authorName) {
      localStorage.setItem('shiftNotesAuthor', authorName);
    }
  }, [authorName]);

  const addNote = useCallback(async () => {
    if (!newNote.trim() || !authorName.trim()) {
      toast({
        title: 'Campos obrigatórios',
        description: 'Preencha seu nome e a mensagem do recado.',
        variant: 'destructive',
      });
      return;
    }
    try {
      const data = await postShiftNote(authorName.trim(), newNote.trim(), isImportant);
      const note: ShiftNote = {
        id: data.key,
        author: authorName.trim(),
        message: newNote.trim(),
        timestamp: data.timestamp,
        priority: isImportant ? 'important' : 'normal',
      };
      setNotes((prev) => [note, ...prev]);
      setNewNote('');
      setIsImportant(false);
      toast({ title: 'Recado adicionado!', description: 'O recado foi salvo com sucesso.' });
    } catch (error: any) {
      toast({
        title: 'Erro',
        description: error.message || 'Não foi possível salvar o recado.',
        variant: 'destructive',
      });
    }
  }, [newNote, authorName, isImportant, toast]);

  const removeNote = useCallback(async (noteId: string) => {
    try {
      await deleteShiftNote(noteId);
      setNotes((prev) => prev.filter((note) => note.id !== noteId));
      toast({ title: 'Recado removido.', variant: 'destructive' });
    } catch (error: any) {
      toast({
        title: 'Erro',
        description: error.message || 'Não foi possível remover o recado.',
        variant: 'destructive',
      });
    }
  }, [toast]);

  return (
    <div className="max-w-4xl w-full mx-auto p-6 space-y-8">
      <ShiftNoteForm
        authorName={authorName}
        setAuthorName={setAuthorName}
        newNote={newNote}
        setNewNote={setNewNote}
        isImportant={isImportant}
        setIsImportant={setIsImportant}
        onAddNote={addNote}
      />

      <div className="space-y-6">
        <div className="flex items-center justify-between gap-4 pb-2">
          <div className="flex items-center gap-3">
            <div className="w-8 h-8 bg-gradient-to-br from-secondary/30 to-secondary/20 rounded-lg flex items-center justify-center">
              <MessageSquare className="h-4 w-4 text-secondary-foreground" />
            </div>
            <h3 className="text-xl font-bold text-foreground">Recados Ativos</h3>
            <span className="text-sm text-muted-foreground bg-muted/50 px-2 py-1 rounded-full">
              {notes.length} {notes.length === 1 ? 'recado' : 'recados'}
            </span>
          </div>
          <div className="flex items-center gap-2">
            <Button 
              onClick={loadNotes} 
              variant="outline"
              size="sm"
              className="hidden sm:inline-flex hover:bg-primary/10 hover:border-primary/30 transition-all duration-200"
            >
              <Clock className="h-4 w-4 mr-2" />
              Atualizar
            </Button>
          </div>
        </div>

        {loading ? (
          <div className="text-center py-12">
            <div className="w-12 h-12 bg-gradient-to-br from-primary/20 to-primary/10 rounded-full flex items-center justify-center mx-auto mb-4 animate-pulse">
              <Clock className="h-6 w-6 text-primary" />
            </div>
            <p className="text-muted-foreground font-medium">Carregando recados...</p>
          </div>
        ) : error ? (
          <div className="text-center py-12">
            <div className="w-12 h-12 bg-destructive/10 rounded-full flex items-center justify-center mx-auto mb-4">
              <AlertTriangle className="h-6 w-6 text-destructive" />
            </div>
            <p className="text-destructive font-medium">Ocorreu um erro ao carregar os recados</p>
            <Button 
              onClick={loadNotes} 
              variant="outline" 
              size="sm" 
              className="mt-3"
            >
              Tentar novamente
            </Button>
          </div>
        ) : (
          <ShiftNoteList notes={notes} onRemoveNote={removeNote} />
        )}
      </div>
    </div>
  );
};
